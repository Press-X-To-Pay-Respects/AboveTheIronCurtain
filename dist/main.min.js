(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 800, Phaser.AUTO, 'atic-game');

window.playerState = {
    currentLevel: 'Game'
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');
},{"./states/boot":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\boot.js","./states/game":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\game.js","./states/menu":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\menu.js","./states/preloader":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\preloader.js","./states/splash":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\splash.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube.js":[function(require,module,exports){
/*
Defines a cube module for a cubesat.
*/

var Cube = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'testsprite');
    game.add.existing(this);
    this.north = undefined;
    this.east = undefined;
    this.south = undefined;
    this.west = undefined;
    this.root = false;
    this.DIR = {NORTH: 0, EAST: 1, SOUTH: 2, WEST: 3};
};

Cube.prototype = Object.create(Phaser.Sprite.prototype);
Cube.prototype.constructor = Cube;

/**
 * Automatically called by World.update
 */
Cube.prototype.update = function() {
};

Cube.prototype.addConnection = function(other) {
  var offset = 2;
  var thisSide = this.relativeSide(this.body, other);
  var otherSide = this.relativeSide(other, this.body);
  // console.log(thisSide, otherSide);
  if (this.getSide(thisSide)) {
     return;
  }
  if (other.sprite.getSide(otherSide)) {
     return;
  }
  switch (thisSide) {
     case this.DIR.NORTH:
     this.game.physics.p2.createLockConstraint(this.body, other, [0, this.width + offset]);
     this.north = other.sprite;
     break;
     case this.DIR.EAST:
     this.game.physics.p2.createLockConstraint(this.body, other, [-this.width - offset, 0]);
     this.east = other.sprite;
     break;
     case this.DIR.SOUTH:
     this.game.physics.p2.createLockConstraint(this.body, other, [0, -this.width - offset]);
     this.south = other.sprite;
     break;
     case this.DIR.WEST:
     this.game.physics.p2.createLockConstraint(this.body, other, [this.width + offset, 0]);
     this.west = other.sprite;
     break;
  }
  switch (otherSide) {
     case this.DIR.NORTH:
     other.sprite.north = this;
     break;
     case this.DIR.EAST:
     other.sprite.east = this;
     break;
     case this.DIR.SOUTH:
     other.sprite.south = this;
     break;
     case this.DIR.WEST:
     other.sprite.west = this;
     break;
  }
};

Cube.prototype.relativeSide = function(thisBody, otherBody) {
  var thisPoint = new Phaser.Point(thisBody.x, thisBody.y);
  var otherPoint = new Phaser.Point(otherBody.x, otherBody.y);
  var angleToOther = Phaser.Point.angle(thisPoint, otherPoint);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
  var diffAngle = angleToOther - thisBody.rotation;
   if (diffAngle < 1 / 4 * Math.PI || diffAngle > 7 / 4 * Math.PI) { // north
     return this.DIR.NORTH;
  } else if (diffAngle >= 1 / 4 * Math.PI && diffAngle < 3 / 4 * Math.PI) { // east
     return this.DIR.EAST;
  } else if (diffAngle >= 3 / 4 * Math.PI && diffAngle < 5 / 4 * Math.PI) { // south
     return this.DIR.SOUTH;
  } else if (diffAngle >= 5 / 4 * Math.PI && diffAngle < 7 / 4 * Math.PI) { // west
     return this.DIR.WEST;
  }
};

Cube.prototype.cubeCollide = function(other) {
   if (other === null || this.prototype !== other.prototype) {
      return;
   }
   // if (this.hasRoot()) {
   if (this.myRoot) {
      if (other.sprite.myRoot && this.myRoot === other.sprite.myRoot) {
         return;
      }
   } else {
      if (this.root) {
         this.myRoot = this.name;
      }
   }
   if (this.hasRoot() && !other.sprite.hasRoot()) {
      this.addConnection(other);
   }
};

Cube.prototype.hasRoot = function() {
  /*
  if (this.root) {
     return true;
  }
  if (this.hasRootR(this.DIR.NORTH, this)) {
      return true;
  } else if (this.hasRootR(this.DIR.EAST, this)) {
     return true;
  } else if (this.hasRootR(this.DIR.SOUTH, this)) {
      return true;
  } else if (this.hasRootR(this.DIR.WEST, this)) {
     return true;
  }
  return false;
  */
  // console.log('root test');
  if (this.root) {
     return true;
  }
  var visited = [];
  visited.push(this);
  if (this.north && this.hasRootR(visited, this.north)) {
    return true;  
  }
  if (this.east && this.hasRootR(visited, this.east)) {
    return true;  
  }
  if (this.south && this.hasRootR(visited, this.south)) {
    return true;  
  }
  if (this.west && this.hasRootR(visited, this.west)) {
    return true;
  }
};

Cube.prototype.hasRootR = function(visited, cur) {
   // console.log(cur);
   if (cur.root) {
      if (!this.myRoot) {
         this.myRoot = cur.name;
      }
      return true;
   }
   visited.push(cur);
   if (cur.north && !this.contains(visited, cur.north) && this.hasRootR(visited, cur.north)) {
    return true;  
  }
  if (cur.east && !this.contains(visited, cur.east) && this.hasRootR(visited, cur.east)) {
    return true;  
  }
  if (cur.south && !this.contains(visited, cur.south) && this.hasRootR(visited, cur.south)) {
    return true;  
  }
  if (cur.west && !this.contains(visited, cur.west) && this.hasRootR(visited, cur.west)) {
    return true;  
  }
};

Cube.prototype.contains = function (array, obj) {
  for (var i = 0; i < array.length; i++) {
      if (array[i] === obj) {
         return true;
      }
  }  
   return false;
};

/*
Cube.prototype.hasRootR = function(dir, obj) {
   if (obj.root) {
      return true;
   }
   switch (dir) {
      case this.DIR.NORTH:
      if (obj.north && this.hasRootR(this.DIR.NORTH, obj.north)) {
         return true;
      }
      if (obj.east && this.hasRootR(this.DIR.EAST, obj.east)) {
         return true;
      }
      if (obj.west && this.hasRootR(this.DIR.WEST, obj.west)) {
         return true;
      }
      return false;
      case this.DIR.EAST:
      if (obj.north && this.hasRootR(this.DIR.NORTH, obj.north)) {
         return true;
      }
      if (obj.east && this.hasRootR(this.DIR.EAST, obj.east)) {
         return true;
      }
      if (obj.south && this.hasRootR(this.DIR.SOUTH, obj.south)) {
         return true;
      }
      return false;
      case this.DIR.SOUTH:
      if (obj.east && this.hasRootR(this.DIR.EAST, obj.east)) {
         return true;
      }
      if (obj.south && this.hasRootR(this.DIR.SOUTH, obj.south)) {
         return true;
      }
      if (obj.west && this.hasRootR(this.DIR.WEST, obj.west)) {
         return true;
      }
      return false;
      case this.DIR.WEST:
      if (obj.north && this.hasRootR(this.DIR.NORTH, obj.north)) {
         return true;
      }
      if (obj.south && this.hasRootR(this.DIR.SOUTH, obj.south)) {
         return true;
      }
      if (obj.west && this.hasRootR(this.DIR.WEST, obj.west)) {
         return true;
      }
      return false;
   }
   return false;
};
*/

Cube.prototype.getSide = function(side) {
   switch (side) {
     case this.DIR.NORTH:
     return this.north;
     case this.DIR.EAST:
     return this.east;
     case this.DIR.SOUTH:
     return this.south;
     case this.DIR.WEST:
     return this.west;
  }
  return undefined;
};

Cube.prototype.toString = function() {
   var string = '';
   string += this.concat('name', this.name);
   string += this.concat('isRoot', this.root);
   string += this.concat('myRoot', this.myRoot);
   string += this.concat('north', this.north != undefined);
   string += this.concat('east', this.east != undefined);
   string += this.concat('south', this.south != undefined);
   string += this.concat('west', this.west != undefined);
   return string;
}

Cube.prototype.concat = function(string, val) {
   return string + ': ' + val + '\n';
}

module.exports = Cube;















},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\game.js":[function(require,module,exports){
/*
Main testing environment.
*/

var Cube = require('../entities/cube');

var Utils = require('../utils');

var mouseBody; // physics body for mouse

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {

  create: function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.setImpactEvents(true);
    mouseBody = new p2.Body(); // jshint ignore:line
    this.game.physics.p2.world.addBody(mouseBody);
    this.placeKey = this.game.input.keyboard.addKey(Phaser.Keyboard.P);
    this.placeKey.onDown.add(this.placeCube, this);
    
    this.mouseX = 0;
    this.mouseY = 0;
    
    this.input.onDown.add(this.click, this);
    this.input.onUp.add(this.release, this);
    this.input.addMoveCallback(this.move, this);
    this.grabbed = undefined;
    this.line = new Phaser.Line(0, 0, 0, 0);
    
    this.rootSpawned = false;
    
    this.debugNum = 0;
    this.myRoot = undefined;
    
     // var thisPoint = new Phaser.Point(10, 10);
     // var otherPoint = new Phaser.Point(10, 11);
     // var angleToOther = Phaser.Point.angle(thisPoint, otherPoint);
     // console.log(angleToOther);
     
     // var polygonTest = this.game.add.sprite(60, 60, 'testsprite');
     // this.game.physics.p2.enableBody(polygonTest, true);
     // polygonTest.body.clearShapes();
     // polygonTest.body.loadPolygon('module_physics', 'test2');
  },

  update: function () {
    if (this.grabbed) {
      var angle = Math.atan2(this.grabbed.sprite.y - this.input.position.y, this.grabbed.sprite.x - this.input.position.x) + Math.PI;
      var dist = Utils.distance(this.grabbed.sprite.x, this.grabbed.sprite.y, this.input.position.x, this.input.position.y);
      var weight = 10;
      this.grabbed.force.x = Math.cos(angle) * dist * weight;
      this.grabbed.force.y = Math.sin(angle) * dist * weight;
      this.line.setTo(this.grabbed.sprite.x, this.grabbed.sprite.y, this.input.position.x, this.input.position.y);
    } else {
       this.line.setTo(0, 0, 0, 0);
    }
  },
  
  render: function () {
    this.game.debug.geom(this.line);
  },

  click: function (pointer) {
    // console.log(this.grabbed);
    var bodies = this.game.physics.p2.hitTest(pointer.position);
    if (bodies.length)
    {
        this.grabbed = bodies[0].parent;
        //console.log(this.grabbed.sprite.name, this.grabbed.sprite.north, this.grabbed.sprite.east, this.grabbed.sprite.south, this.grabbed.sprite.west);
        console.log(this.grabbed.sprite.toString());
    }
  },
  
  release: function () {
     if (this.grabbed) {
        this.grabbed = undefined;
     }
  },
  
  move: function (pointer) {
    // p2 uses different coordinate system, so convert the pointer position to p2's coordinate system
    mouseBody.position[0] = this.game.physics.p2.pxmi(pointer.position.x);
    mouseBody.position[1] = this.game.physics.p2.pxmi(pointer.position.y);
    this.mouseX = pointer.position.x;
    this.mouseY = pointer.position.y;
  },
  
  placeCube: function () {
    var entity = new Cube(this.game, this.mouseX, this.mouseY);
    var scale = 0.5;
    entity.name = this.debugNum++;
    entity.scale.x = scale;
    entity.scale.y = scale;
    entity.anchor.setTo(0.5, 0.5);
    this.game.physics.p2.enable(entity, true);
    entity.body.onBeginContact.add(entity.cubeCollide, entity);
    entity.body.damping = 0.9;
    entity.body.angularDamping = 0.9;
    if (!this.rootSpawned) {
       entity.root = true;
       this.rootSpawned = true;
    }
  }
};




























},{"../entities/cube":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube.js","../utils":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: '65px Arial', fill: '#ffffff', align: 'center' };

    this.text = this.add.text(x - 300, y - 200, 'Press to Start', style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel); // jshint ignore:line
  }
};

},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  game = null;
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test2.png');
    this.load.physics('module_physics', 'assets/module_physics.json');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      // this.game.state.start('Menu');
      this.game.state.start(playerState.currentLevel); // jshint ignore:line
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js":[function(require,module,exports){
/*
Collection of utility functions.
*/

var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
    distance: function(x1, y1, x2, y2) {
       return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,
