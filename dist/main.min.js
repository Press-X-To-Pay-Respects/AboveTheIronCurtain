(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
var game = new Phaser.Game(window.innerWidth, window.innerHeigh, Phaser.AUTO, 'atic-game');

window.playerState = {
    currentLevel: 'Menu'
};

//  The Google WebFont Loader will look for this object, so create it before loading the script.
WebFontConfig = { // jshint ignore:line
    //  The Google Fonts we want to load (specify as many as you like in the array)
    google: {
      families: ['Roboto::latin', 'VT323::latin']
    }
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('levelOne', require('./states/levelOne'));
game.state.add('levelTwo', require('./states/levelTwo'));
game.state.add('levelThree', require('./states/levelThree'));

game.state.start('Boot');
},{"./states/boot":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\boot.js","./states/levelOne":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\levelOne.js","./states/levelThree":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\levelThree.js","./states/levelTwo":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\levelTwo.js","./states/menu":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\menu.js","./states/preloader":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\preloader.js","./states/splash":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\splash.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\effects\\BinaryParticle.js":[function(require,module,exports){
var BinaryParticle = function(game, targetObj, x, y, tarOffsetX, tarOffsetY) {
	var style = {font: '20px VT323', fill: '#FFFFFF', align: 'center'};
	var byteSymbol = Math.random() >= 0.5 ? '1' : '0';
	Phaser.Text.call(this, game, x, y, byteSymbol, style);
	game.add.existing(this);
	this.targetObj = targetObj;
	this.speed = 3.6;
	this.tarOffsetX = tarOffsetX;
	this.tarOffsetY = tarOffsetY;
};

BinaryParticle.prototype = Object.create(Phaser.Text.prototype);
BinaryParticle.prototype.constructor = BinaryParticle;

BinaryParticle.prototype.update = function() {
	//Get delta vector to target object
	var delta = [this.targetObj.x + this.tarOffsetX - this.x, this.targetObj.y + this.tarOffsetY - this.y];
	//Get distance and check if we've reached target distance
	var dist = Math.sqrt(Math.pow(delta[0], 2) + Math.pow(delta[1], 2));
	if(dist <= this.speed) {
		this.destroy();
		return;
	}
	//Normalize delta vector
	delta = [delta[0]/dist, delta[1]/dist];
	//Update position
	this.x = this.x + this.speed*delta[0];
	this.y = this.y + this.speed*delta[1];
};

module.exports = BinaryParticle;
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\effects\\Emitter.js":[function(require,module,exports){
var BinaryParticle = require('./BinaryParticle');

var Emitter = function(gameState) {
	this.gameState = gameState;
};

Emitter.prototype.constructor = Emitter;

Emitter.prototype.emitBinary = function (targetObj, x, y, spacing) {
	var offsetX = (Math.random()-0.5)*spacing;
	var offsetY = (Math.random()-0.5)*spacing;
	var newParticle = new BinaryParticle(this.gameState.game, targetObj, x, y, offsetX, offsetY);
};

module.exports = Emitter;
},{"./BinaryParticle":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\effects\\BinaryParticle.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\Bullet.js":[function(require,module,exports){
//Bullets are tagged as 'playerBullet' or 'enemyBullet'
var Bullet = function(gameState, x, y, direction, inhertitSpeed, tag) {
    Phaser.Sprite.call(this, gameState.game, x, y, 'bullet');
	this.direction = direction; //Unit vector representing direction bullet is travelling;
	this.speed = 500 + inhertitSpeed;				//Speed bullet is travelling;
	this.tag = tag;
	this.game = gameState.game;
	this.game.add.existing(this);
	this.lifeTime = 300;
	var scale = 0.5;
	this.scale.x = scale;
	this.scale.y = scale;
	this.anchor.setTo(0.5, 0.5);
	this.destroyBuffer = 100;
	
	//set physics
	gameState.game.physics.p2.enable(this);
	this.body.setCollisionGroup(gameState.collisionGroup);
	this.body.collides(gameState.collisionGroup);
	//Set proper collision function by determining type from 'tag'
	if(this.tag === 'enemyBullet') {
		this.collision = function(other) {
			if(other) {
				if(other.sprite){
					if(other.sprite.tag) {
						if(other.sprite.tag === 'module') {
							other.sprite.takeDamage(1);
						}
						this.destroy();
					}
				}
			}
		};
	}
	else if(this.tag === 'playerBullet') {
		this.collision = function(other) {
			if(other) {
				if(other.sprite){
					if(other.sprite.tag) {
						if(other.sprite.tag === 'enemy_module') {
							other.sprite.takeDamage(1);
						}
					}
				}
			}
			this.destroy();
		};
	}
	this.body.onBeginContact.add(this.collision, this);
	this.body.setZeroDamping();
	this.body.mass = 0.1;
	this.body.velocity.x = direction[0]*this.speed;
	this.body.velocity.y = direction[1]*this.speed;
};

Bullet.prototype = Object.create(Phaser.Sprite.prototype);
Bullet.prototype.constructor = Bullet;

Bullet.prototype.update = function() {
	if(this.body.x > this.game.camera.x + this.game.camera.width + this.destroyBuffer || this.body.x  < this.game.camera.x - this.destroyBuffer || 
	this.body.y > this.game.camera.y + this.game.camera.height + this.destroyBuffer || this.body.y < this.game.camera.y - this.destroyBuffer) {
		this.destroy(true);
	}
};

module.exports = Bullet;
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\Module.js":[function(require,module,exports){
//Don't use this function to create modules, instead use moduleBuilder()
var Module = function(setType, setCube, setGameState) {
	this.isActive = false;
	this.type = setType;
	this.cube = setCube;
	setCube.module = this;
	this.gameState = setGameState;
};

Module.prototype.constructor = Module;

module.exports = Module;
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js":[function(require,module,exports){
var Cube = require('./cube');
var Module = require('./Module');
var Bullet = require('./Bullet');

var thrustAmt = 5000;

//Use this to create a moduleBuilder- only need to create one instance of it
var ModuleBuilder = function(setGameState, setColGroup) {
	//Ensure that cannot create multiple instances of this class
	if(ModuleBuilder.prototype.exists) {
		return ModuleBuilder.prototype.existingReference;
	}
		
	this.gameState = setGameState;
   this.colGroup = setColGroup;
	// this.coreExists = false;	//records if core has been created
	this.core = null;			//stores core when it is created
	//var space = this.gameState.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
	ModuleBuilder.prototype.exists = true;
	ModuleBuilder.prototype.existingReference = this;
};

ModuleBuilder.prototype.constructor = ModuleBuilder;

//These var's help create the singleton functionality
ModuleBuilder.prototype.exists = false;
ModuleBuilder.prototype.existingReference = null;

/** Module functions **/
function solarPanelGiveTarget(target) {
   if (this === target || !this.cube.group || !target.cube.group || this.cube.group !== target.cube.group) {
      return;
   }
   this.cube.loseConnection();
   var ourGroup = this.cube.group;
   var newConnection = {start: this.cube, end: target.cube};
   this.cube.myConnection = newConnection;
   target.cube.myConnection = newConnection;
   ourGroup.displayConnection(this.cube.myConnection);
	if(!target.isActive) {
		//Activate the module
		target.isActive = true;
		this.modulePower.play();
		if(target.type === 'hacker') {
			ourGroup.activeHackerModules.push(target);
		}
		//If this is one of the powerable types, switch the frame from 'greyed' to 'active'
		if(target.type === 'gun' || target.type === 'hacker' || target.type === 'thruster') {
			target.cube.frame = 1;
		}
	}
}

function solarPanelMouseOver() {
   if (!this.cube.myConnection || !this.cube.group) {
      return;
   }
   this.cube.group.displayConnection(this.cube.myConnection);
}

function genericOnRemove() {
   this.cube.loseConnection();
}

function hackerOnLoseConnection() {
   var hackIndex = this.gameState.player.activeHackerModules.indexOf(this);
   this.gameState.player.activeHackerModules.splice(hackIndex, 1);
   this.isActive = false;
}

function beginAct() {
   this.timer = 0;
   this.act = true;
}

function endAct() {
   this.act = false;
   this.cube.frame = 1;
}

function thrusterUpdate() {
   if (this.haltTime && this.haltTime > 0) {
      this.haltTime -= this.cube.game.time.elapsed;
      this.cube.frame = 1;
   } else if (this.act && this.cube.myConnection) {
	  if(this.isThrust === true) {
		this.isThrustPrev = true;
	  }
	  this.isThrust = true;
      this.cube.body.force.x = thrustAmt * Math.cos(this.cube.rotation - Math.PI / 2);
      this.cube.body.force.y = thrustAmt * Math.sin(this.cube.rotation - Math.PI / 2);
	  if(this.cube.frame === 1) {
		this.cube.frame = 3;
	  }
	  else {
		this.cube.frame = 2;
	  }
	  if(this.isThrust === true && this.isThrustPrev === false) {
		this.thrusterLoop.play();
	  }
   }
   else if(!this.act) {
	  if(this.isThrust === false) {
		this.isThrustPrev = false;
	  }
	  this.isThrust = false;
	  if(this.isThrust === false && this.isThrustPrev === true) {
		this.thrusterLoop.stop();
	  }
   }
}

function thrusterHalt() {
   this.haltTime = 1500;
}

function gunUpdate() {
   if (!this.cube.myConnection || !this.act) {
      this.cube.animations.stop();
	  return;
   }
   if (this.timer <= 0) {
      var angle = this.cube.body.rotation % (2*Math.PI);
      var direction = [Math.sin(angle), -Math.cos(angle)];
      var deltaDist = Math.sqrt(Math.pow(this.cube.deltaX, 2) + Math.pow(this.cube.deltaY, 2));
      var speed = deltaDist * 50;
      new Bullet(this.gameState, this.cube.x + 30*direction[0], this.cube.y + 30*direction[1], 
               direction, speed, this.tag + 'Bullet');
	  this.gun.play();
      this.timer = 400;
   } else {
      this.timer -= this.gameState.game.time.elapsed;
   }
}

function hackableUpdate() {
   this.hackBar.setLocation(this.cube.x, this.cube.y - 25);
   if (this.barFadeDelay <= 0 && this.hackBar.graphics.alpha > 0) {
      this.hackBar.graphics.alpha -= this.gameState.time.elapsed * this.barFade;
   } else if (this.barFadeDelay > 0) {
      this.barFadeDelay -= this.gameState.time.elapsed;
   }
	//check if getting hacked
	if(!this.isHacked) {
		this.cube.animations.play('hackable');
		if(this.gameState.player.activeHackerModules.length > 0) {
			var dist;
			var hacker;
			//Loop through all hacker modules on the player's cubsat
			for(var i = 0; i < this.gameState.player.activeHackerModules.length; i++) {
				hacker = this.gameState.player.activeHackerModules[i];
				dist = Math.sqrt( Math.pow(this.cube.x - hacker.cube.x, 2) + Math.pow(this.cube.y - hacker.cube.y, 2) );
				if(dist < this.hackDistance) {
					//If hacker is in range, increase hack value and try to emit binary particle
               if (this.beingHacked) {
                  this.beingHackedPrev = true;
               }
               this.beingHacked = true;
					this.hackBar.addValue(0.1);
					hacker.count++;
					if(hacker.count >= hacker.cycle) {
                  this.hackBar.graphics.alpha = 1;
                  this.barFadeDelay = this.barFadeMaxDelay;
						hacker.count = 0;
						this.gameState.BinaryEmitter.emitBinary(this.cube, hacker.cube.x, hacker.cube.y, 60);
						if(hacker.cube.frame === 5) {
							hacker.cube.frame = 0;
						}
						hacker.cube.frame++;
						
					}
				}
				else {
					hacker.cube.animations.stop();
               if(!this.beingHacked) {
						this.beingHackedPrev = false;
					}
					this.beingHacked = false;
				}
			}
		}
	} else if (this.delay < 0) {
      this.hacking.stop();
      this.hackBar.destroy();
      this.cube.dieQuick();
   } else {
      this.hacking.stop();
      this.delay -= this.gameState.time.elapsed;
   }
   if(this.beingHacked === true && this.beingHackedPrev === false) {
		if(this.hacking.paused === true) {
			this.hacking.resume();
		}
		else {
			this.hacking.play();
		}
	}
	else if(this.beingHacked === false && this.beingHackedPrev === true){
		this.hacking.pause();
	}
}
/** End module functions **/

//call this function from ModuleBuilder to construct modules
//TYPES: 'core' 'shield' 'thruster' 'solarPannel' 'hacker'
ModuleBuilder.prototype.build = function(type, x, y, forPlayer) {	
	//Create cube object to be stored within module
	//Sprite names for modules are directly mapped to module names, so just pass 'type' as sprite name
	var newCube = new Cube(this.gameState, x, y, type);
    var scale = 0.5;
    newCube.name = this.gameState.debugNum++;
    newCube.scale.setTo(scale, scale);
    newCube.anchor.setTo(0.5, 0.5);
	
	//Create physics for new cube
    this.gameState.game.physics.p2.enable(newCube);
	newCube.body.setCollisionGroup(this.gameState.collisionGroup);
	newCube.body.collides(this.gameState.collisionGroup);
	newCube.body.onBeginContact.add(newCube.cubeCollide, newCube);
   newCube.body.damping = 0.9;
   newCube.body.angularDamping = 0.9;
 
   var cIndicator = this.gameState.add.sprite(0, 0, 'connections', 'connection_line.png');
   cIndicator.anchor.setTo(0.5, 0.5);
   cIndicator.animations.add('end', ['connection_end.png'], 60, true);
   cIndicator.animations.add('line', ['connection_line.png'], 60, true);
   cIndicator.animations.add('right', ['connection_right.png'], 60, true);
   newCube.addChild(cIndicator);
   newCube.cIndicator = cIndicator;
   cIndicator.alpha = 0;
	
	//Create module to wrap around cube class
	var newModule = new Module(type, newCube, this.gameState);
		
	//TODO: edit special module attributes based on 'type'
	if(type === 'hacker') {
		newModule.cycle = 6;
		newModule.count = 0;
		newModule.cube.animations.add('hacker', [0,1,2,3,4], 10, true);
      newModule.onRemove = genericOnRemove;
      newModule.onLoseConnection = hackerOnLoseConnection;
      newModule.powerable = true;
	}
	
	//Store module if it is core
	if(type === 'core')
	{
		newModule.cube.animations.add('core', [0,1,2], 20, true);
		newModule.cube.animations.play('core');
		this.core = newModule;
		this.coreExists = true;
      newModule.onRemove = genericOnRemove;
	}
   
   // solar panel testing
   if (type === 'solarPanel') {
	  newModule.modulePower = this.gameState.add.audio('modulePower', 0.5);
      newModule.giveTarget = solarPanelGiveTarget;
      newModule.mouseOver = solarPanelMouseOver;
      newModule.onRemove = genericOnRemove;
   }
   
   //Thruster module events
	if(type === 'thruster') {
	  newModule.isThrust = false;
	  newModule.isThrustPrev = false;
	  newModule.thrusterLoop = this.gameState.add.audio('thrusterLoop', 1, true);
	  newModule.thrusterLoop.allowMultiple = true;
      if (forPlayer) {
         var thrusterKey = this.gameState.input.keyboard.addKey(Phaser.Keyboard.W); 
         this.gameState.input.keyboard.addKeyCapture([thrusterKey]);
         thrusterKey.onDown.add(beginAct, newModule);
         thrusterKey.onUp.add(endAct, newModule);
      } else {
         // newModule.thrust = false;
         newModule.beginAct = beginAct;
         newModule.endAct = endAct;
      }
      newModule.update = thrusterUpdate;
      newModule.thrusterHalt = thrusterHalt;
      newModule.onRemove = genericOnRemove;
      newModule.powerable = true;
	}

	//Gun module events
	if(type === 'gun') {
	  newModule.cube.animations.add('gun', [0,1,2,3,4,5], 16, true);
	  newModule.gun = this.gameState.add.audio('gun');
	  newModule.gun.allowMultiple = true;
      if (forPlayer) {
	     newModule.tag = 'player';
         var actKey = this.gameState.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
         this.gameState.input.keyboard.addKeyCapture([actKey]);
         actKey.onDown.add(beginAct, newModule);
         actKey.onUp.add(endAct, newModule);
      } else {
		 newModule.tag = 'enemy';
         newModule.beginAct = beginAct;
         newModule.endAct = endAct;
      }
	  newModule.update = gunUpdate;
     newModule.onRemove = genericOnRemove;
     newModule.powerable = true;
	}
   
   if (type === 'hackable') {
      // set values
      newModule.isHacked = false;
      newModule.hackDistance = 400;
      newModule.cube.animations.add('hackable', [0,1,2,3,4], 10, true);
      newModule.cube.animations.add('hacked', [5,6,7,8,9], 10, true);
      newModule.barFade = 0.001;
      newModule.barFadeMaxDelay = 200;
      newModule.barFadeDelay = 0;
      newModule.delay = 1600;
      newModule.beingHacked = false;
      newModule.beingHackedPrev = false;
      newModule.hacking = this.gameState.add.audio('hacking', 1, true);
      // give progress bar
      newModule.hackBar = this.gameState.uiBuilder.buildProgressBar('growing', 1500, 1200, 100, 10,  200);
      newModule.hackBar.setStyle(0, 0xFFFFFF, 0x363636, 0, 0, 0, 0xFFFFFF, 0x2020CC);
      newModule.hackBar.hackable = newModule.cube;
      newModule.hackBar.onEvent = function() {
         this.hackable.animations.stop();
         this.hackable.animations.play('hacked');
         this.hackable.module.isHacked = true;
      };
      // add functions
      newModule.update = hackableUpdate;
      newModule.onRemove = genericOnRemove;
   }
	//Return the module object
	return newModule;
};

module.exports = ModuleBuilder;
















},{"./Bullet":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\Bullet.js","./Module":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\Module.js","./cube":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\cube.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\asteroids.js":[function(require,module,exports){
var Asteroids = function(state, simplify) {
   // initialise
	this.state = state;
   this.simplify = simplify;
   this.game = this.state.game;
   this.cam = this.game.camera;
   this.numRoids = 0;
   this.maxRoids = 100;
   this.asteroids = this.game.add.group();
	this.asteroids.enableBody = true;
	this.asteroids.physicsBodyType = Phaser.Physics.P2JS;
	this.asteroidList = new Phaser.ArraySet();
	if (!this.simplify) { this.generateAsteroids(); }
};

Asteroids.prototype.constructor = Asteroids;

Asteroids.prototype.update = function() {
   
};

Asteroids.prototype.generateAsteroids = function() {
  for(; this.numRoids < this.maxRoids; this.numRoids++) {
      var randX = this.game.rnd.integerInRange(0, this.game.world.width);
      var randY = this.game.rnd.integerInRange(0, this.game.world.height);
      /* TODO: prevent collision spawning
      while(randX < this.coreModule.cube.x - (this.player.cubesWidth() / 2 + 100) && randX > this.coreModule.cube.x + (this.player.cubesWidth() / 2 + 100) &&
      randY < this.coreModule.cube.y - (this.player.cubesHeight() / 2 + 100) && randY > this.coreModule.cube.y + (this.player.cubesHeight() / 2 + 100)) {
         randX = this.game.rnd.integerInRange(0, this.game.world.width);
         randY = this.game.rnd.integerInRange(0, this.game.world.height);
      }
      */
      var asteroid = this.asteroids.create(randX, randY, 'asteroid');
      asteroid.body.clearShapes(); 
      asteroid.body.loadPolygon('asteroidPolygon', 'asteroid'); //Change the collision detection from an AABB to a polygon
      asteroid.body.damping = this.game.rnd.realInRange(0, 0.3) * this.game.rnd.integerInRange(0, 1) * this.game.rnd.integerInRange(0, 1);
      asteroid.body.rotation = this.game.rnd.realInRange(0, 2 * Math.PI);
      asteroid.body.force.x = this.game.rnd.integerInRange(-10, 10) * 750;
      asteroid.body.force.y = this.game.rnd.integerInRange(-10, 10) * 750;
      asteroid.body.setCollisionGroup(this.state.collisionGroup);
      asteroid.body.collides(this.state.collisionGroup);
      asteroid.body.collideWorldBounds = false;
      asteroid.autoCull = true;
      asteroid.checkWorldBounds = true;
      asteroid.events.onOutOfBounds.add(this.resetAsteroid, {caller: this, asteroid: asteroid});
      this.asteroidList.add(asteroid);
   }
};

Asteroids.prototype.resetAsteroid = function() {
   var randX = this.caller.game.rnd.integerInRange(0, this.caller.game.world.width);
   var randY = this.caller.game.rnd.integerInRange(0, this.caller.game.world.height);
   // TODO: prevent overlap on reset
   this.asteroid.x = randX;
   this.asteroid.y = randY;
   this.asteroid.body.rotation = this.caller.game.rnd.realInRange(0, 2 * Math.PI);
   this.asteroid.body.force.x = this.caller.game.rnd.integerInRange(-10, 10) * 750;
   this.asteroid.body.force.y = this.caller.game.rnd.integerInRange(-10, 10) * 750;
};

module.exports = Asteroids;















},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\cheating.js":[function(require,module,exports){
var Cheating = function(state) {
   // initialisation
	this.state = state;
   this.game = state.game;
   this.cam = this.game.camera;
   this.mouse = this.state.mouse;
   // buttons
   //core
	this.placeCoreKey = this.game.input.keyboard.addKey(Phaser.Keyboard.P);
	this.placeCoreKey.onDown.add(this.debugAddModule, {caller: this, key: 'core'});
	//shield
	this.placeShieldKey = this.game.input.keyboard.addKey(Phaser.Keyboard.O);
    this.placeShieldKey.onDown.add(this.debugAddModule, {caller: this, key: 'shield'});
	//thruster
	this.placeThrusterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.I);
    this.placeThrusterKey.onDown.add(this.debugAddModule, {caller: this, key: 'thruster'});
	//solarPanel
	this.placeSPKey = this.game.input.keyboard.addKey(Phaser.Keyboard.U);
    this.placeSPKey.onDown.add(this.debugAddModule, {caller: this, key: 'solarPanel'});
	//hacker
	this.placeHackKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Y);
	this.placeHackKey.onDown.add(this.debugAddModule, {caller: this, key: 'hacker'});
	//gun
	this.placeGunKey = this.game.input.keyboard.addKey(Phaser.Keyboard.T);
    this.placeGunKey.onDown.add(this.debugAddModule, {caller: this, key: 'gun'});
	//hackable
	this.placeHackableKey = this.game.input.keyboard.addKey(Phaser.Keyboard.L);
   this.placeHackableKey.onDown.add(this.debugAddModule, {caller: this, key: 'hackable'});
   // reseting
   this.resetKey = this.game.input.keyboard.addKey(Phaser.Keyboard.M);
   this.resetKey.onDown.add(this.reset, this);
};

Cheating.prototype.constructor = Cheating;

Cheating.prototype.debugAddModule = function() {
   this.caller.state.moduleBuilder.build(this.key, this.caller.mouse.x, this.caller.mouse.y, true);
};

Cheating.prototype.reset = function() {
  this.state.levelSetup.restartLevel(); 
};

module.exports = Cheating;














},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\cube.js":[function(require,module,exports){
/*
Defines a cube.
*/

var Cube = function (state, x, y, sprite) {
    Phaser.Sprite.call(this, state.game, x, y, sprite);
	 this.tag = 'module';	//tag is used to detect object type during collision checking
	 this.state = state;
    this.game = this.state.game;
    this.game.add.existing(this);
    this.group = undefined;
    this.module = undefined;
    this.indicatorFade = 0.02;
    this.healthBar = this.state.uiBuilder.buildProgressBar('shrinking', 0, 0, 20, 4, 3);
	this.healthBar.setStyle(0, 0xFFFFFF, 0x363636, 0, 0, 0, 0xFFFFFF, 0x20CC20);
	this.healthBar.cube = this;
	this.healthBarFade = 0.0008;
	this.impact = this.game.add.audio('moduleImpact');
	this.impact.volume = 0.25;
	this.impact.allowMultiple = true;
	//set update function of health bar
	this.healthBar.update = function() {
		this.setLocation(this.cube.x, this.cube.y+10);
	};
	//onEvent called when cube runs out of health
	this.healthBar.onEvent = function() {
		this.cube.dying = true;
		this.cube.life = 50;
		// this.group.countCubes();
		// this.destroy();
	};
	this.constraints = [];
};

Cube.prototype = Object.create(Phaser.Sprite.prototype);
Cube.prototype.constructor = Cube;

/**
 * Automatically called by World.update
 */
Cube.prototype.update = function() {
   if (this.cIndicator && this.cIndicator.alpha > 0) {
      this.cIndicator.alpha -= this.indicatorFade;
   }
   if (this.module.update) {
      this.module.update();
   }
   if (this.healthBar.graphics.alpha > 0) {
      this.healthBar.graphics.alpha -= this.healthBarFade * this.game.time.elapsed;
   }
   if (this.dying) {
      this.life -= this.game.time.elapsed;
      if (this.life < 0) {
         this.dying = false;
         this.healthBar.destroy();
         if (this.group) {
            if(this.tag === 'enemy_module') {
               if(this.key === 'thruster') {
                  this.state.shop.addMoney(35);
               }
               else if(this.key === 'shield') {
                  this.state.shop.addMoney(10);
               }
               else if(this.key === 'gun') {
                  this.state.shop.addMoney(50);
               }
               else if(this.key === 'solarPanel') {
                  this.state.shop.addMoney(25);
               }
            }
            this.group.destroyCube(this);
         } else {
            if(this.key === 'core' && this.tag === 'module') {
               this.kill();
               this.state.restartLevel();
            }
            this.destroy();
         }
      }
   }
};

Cube.prototype.loseConnection = function() {
  if (!this.myConnection) {
    return;
  }  
  if (this.myConnection.start === this) {
      var endModule = this.myConnection.end.module;
      if (endModule.hasOwnProperty('onLoseConnection')) {
         endModule.onLoseConnection();
      }
      this.myConnection.end.myConnection = undefined;
      this.myConnection = undefined;
   } else if (this.myConnection.end === this) {
      var startModule = this.myConnection.end.module;
      if (startModule.hasOwnProperty('onLoseConnection')) {
         startModule.onLoseConnection();
      }
      this.myConnection.start.myConnection = undefined;
      this.myConnection = undefined;
   }
};

Cube.prototype.cubeCollide = function(other) {
   // bad collision, collision with non-sprite, collision with non-cube
   if (!other || !other.sprite || other.prototype !== this.prototype) {
      return;
   }
   if (!this.group && other.sprite.group && other.sprite.group.isPlayer) { // floating hitting player
      other.sprite.group.handleAttatch(other.sprite, this);
   } else if (other.group && this.group === other.group) {// if cubes in same group
      // magic conch, what should we do here?
   } else if (this.group) {
      if (this.group.isPlayer) { // player
         if (other.sprite.tag === 'enemy_module') { // collision with enemy, ramming
            this.group.handleRamming(this, other.sprite);
         }
      } else {// enemy
         this.group.handleRamming(this, other.sprite); // enemies only ram on collision
      }
      this.group.countCubes();
   }
};

Cube.prototype.toString = function() {
   var string = '';
   string += this.concat('name', this.name);
   return string;
};

Cube.prototype.concat = function(string, val) {
   return string + ': ' + val + '\n';
};

Cube.prototype.displayIndicator = function() {
  this.cIndicator.alpha = 1; 
};

Cube.prototype.hideIndicator = function() {
  this.cIndicator.alpha = 0; 
};

Cube.prototype.takeDamage = function(amt) {
   this.impact.play();
   this.healthBar.addValue(-amt);
   this.healthBar.graphics.alpha = 1;
};

Cube.prototype.dieQuick = function() {
  this.dying = true;
  this.life = 0;
};

Cube.prototype.remove = function() {
   if (!this.group) {
      return;
   }
   this.group.remove(this);
};

module.exports = Cube;















},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js":[function(require,module,exports){
var Astar = require('../libs/javascript-astar/astar');
var EnemyAI = require('./enemy_ai');

/*
Defines a cube group.
*/

var CubeGroup = function (state, root) {
   this.state = state;
   this.game = this.state.game;
   this.root = root;
   this.cubes = [];
   var col = [];
   col.push(this.root);
   this.cubes.push(col);
   if (this.root) {
      this.root.group = this;
   }
   this.DIR = {NORTH: 0, EAST: 1, SOUTH: 2, WEST: 3};
   this.offset = 2;
	this.activeHackerModules = [];	//list of hacker modules in this group
	this.moduleConnect = this.game.add.audio('moduleConnect');
	this.moduleConnect.allowMultiple = true;
   this.numCubes = 1;
   this.bounceBackForce = 30;
   this.minRamVel = 300;
   this.debug = false;
   this.debugHandleAttatch = false;
   this.debugCreateConstraints = false;
};

CubeGroup.prototype.constructor = CubeGroup;

/**
 * Automatically called by World.update
 */
CubeGroup.prototype.update = function() {
   if (this.AI) {
      this.AI.update();
   }
};

CubeGroup.prototype.call = function(fun) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.hasOwnProperty(fun)) {
            // if cubes need functions called
         } else if (cube && cube.module && cube.module.hasOwnProperty(fun)) {
            var fn = cube.module[fun];
            if (typeof fn === 'function') {
               fn.call(cube.module);
            }
         }
      }
   }
};

CubeGroup.prototype.callOnType = function(fun, type) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.hasOwnProperty(fun)) {
            // if cubes need functions called
         } else if (cube && cube.module && cube.module.type === type && cube.module.hasOwnProperty(fun)) {
            var fn = cube.module[fun];
            if (typeof fn === 'function') {
               fn.call(cube.module);
            }
         }
      }
   }
};

CubeGroup.prototype.getModules = function(type) {
   var modules = [];
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.module.type === type) {
            modules.push(cube.module);
         }
      }
   }
   return modules;
};

CubeGroup.prototype.giveAI = function(type, player) {
   this.AI = new EnemyAI(this.game, this, type, player);
};

CubeGroup.prototype.add = function(cube, point) {
  if (!this.root && cube.module.type === 'core') {
     this.root = cube;
  }
  cube.group = this;
  this.set(cube, point);
  this.createConstraintsSpecial(cube);
};

CubeGroup.prototype.handleAttatch = function(origin, other) {
   if (this.debugHandleAttatch) { console.log('handleCollision() start:', origin.module.type, other.module.type); }
   if (this.debugHandleAttatch) { this.displayCubes(); }
   if (this.get(other)) {
      console.log('handleAttatch() was given a member');
      return;
   }
   var relSide = this.relativeSide(origin.body, other.body);
   var originLoc = this.find(origin);
   var otherLoc = this.calcPos(origin, relSide);
   this.moduleConnect.play();
   if (this.debugHandleAttatch) console.log('handleCollision() pre-find:', 'relSide:', relSide, 'originLoc:', Math.floor(originLoc.x), Math.floor(originLoc.y), 'otherLoc:', Math.floor(otherLoc.x), Math.floor(otherLoc.y)); // jshint ignore:line
   this.set(other, otherLoc);
   otherLoc = this.find(other); // update position since set can shift grid
   if (!otherLoc) {
      if (this.debugHandleAttatch) {
         console.log('handleCollision(): otherLoc DNE', '---------------------');
         this.displayCubes();
      }
      return;
   }
   var relativeNorth = this.relativeNorth(other); // other's north points this dir relative to the root
   if (this.debugHandleAttatch) { console.log('handleCollision() post-find:', 'otherLoc:', Math.floor(otherLoc.x), Math.floor(otherLoc.y), 'relativeNorth:', relativeNorth); }
   this.createConstraints(other, otherLoc, relativeNorth);
   if (other.module.type === 'solarPanel') {
      this.createConnectionFrom(other);
   } else if (other.module.powerable) {
      var spareSolarPanel = this.spareSolarPanel();
      if (spareSolarPanel) {
         spareSolarPanel.giveTarget(other.module);
      }
   }
   if (this.debugHandleAttatch) { this.displayCubes(); }
   if (this.debugHandleAttatch) { console.log('handleCollision() end:', '------------------------------'); }
};

CubeGroup.prototype.relativeNorth = function(cube) {
   var diffAngle = cube.body.rotation - this.root.body.rotation;
   var relative = this.angleToDir(diffAngle);
   return relative;
};

CubeGroup.prototype.createConnectionFrom = function(panel) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube !== panel && !cube.myConnection && cube.module.powerable) {
            panel.module.giveTarget(cube.module);
            return;
         }
      }
   }
};

CubeGroup.prototype.spareSolarPanel = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && !cube.myConnection && cube.module.type === 'solarPanel') {
            return cube.module;
         }
      }
   }
};

CubeGroup.prototype.handleRamming = function(origin, other) {
   if (!other.group || other.group === this) {
      return;
   }
   var sumVel = Math.abs(origin.body.velocity.x) + Math.abs(origin.body.velocity.y);
   if (this.debug) { console.log('handleRamming():', 'sumVel:', sumVel.toPrecision(4)); }
   if (sumVel >= this.minRamVel) {
      if (this.game.juicy) {
         this.game.juicy.shake();
      }
      other.takeDamage(3);
      this.call('thrusterHalt');
   }
};

CubeGroup.prototype.calcPos = function(origin, relSide) {
   var diffAngle = origin.body.rotation - this.root.body.rotation;
   var relative = this.angleToDir(diffAngle);
   var output = this.find(origin);
   if (!output) {
      return;
   }
   if (relative === 0) { // north relative to the root
      if (relSide === 0) {
         output.y++;
      } else if (relSide === 1) {
         output.x++;
      } else if (relSide === 2) {
         output.y--;
      } else if (relSide === 3) {
         output.x--;
      }
   } else if (relative === 1) { // east relative to root
      if (relSide === 0) {
         output.x++;
      } else if (relSide === 1) {
         output.y--;
      } else if (relSide === 2) {
         output.x--;
      } else if (relSide === 3) {
         output.y++;
      }
   } else if (relative === 2) { // south relative to root
      if (relSide === 0) {
         output.y--;
      } else if (relSide === 1) {
         output.x--;
      } else if (relSide === 2) {
         output.y++;
      } else if (relSide === 3) {
         output.x++;
      }
   } else if (relative === 3) { // west relative to root
      if (relSide === 0) {
         output.x--;
      } else if (relSide === 1) {
         output.y++;
      } else if (relSide === 2) {
         output.x++;
      } else if (relSide === 3) {
         output.y--;
      }
   }
   return output;
};

CubeGroup.prototype.angleToDir = function(angle) {
   if (angle >= 0) {
     angle %= 2 * Math.PI;
  } else {
     angle *= -1;
     angle %= 2 * Math.PI;
     angle *= -1;
  }
  if (this.debug) { console.log('angleToDir():', 'angle:', angle.toPrecision(4)); }
  if ((angle >= -1 / 4 * Math.PI && angle < 1 / 4 * Math.PI) || angle > 7 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case one NORTH'); }
     return this.DIR.NORTH;
  } else if (angle >= 1 / 4 * Math.PI && angle < 3 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case two EAST'); }
     return this.DIR.EAST;
  } else if (angle >= 3 / 4 * Math.PI && angle < 5 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case three SOUTH'); }
     return this.DIR.SOUTH;
  } else if (angle >= 5 / 4 * Math.PI && angle < 7 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case four WEST'); }
     return this.DIR.WEST;
  } else if (angle >= -3 / 4 * Math.PI && angle < -1 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case five WEST'); }
     return this.DIR.WEST;
  } else if (angle >= -5 / 4 * Math.PI && angle < -3 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case six SOUTH'); }
     return this.DIR.SOUTH;
  } else if (angle >= -7 / 4 * Math.PI && angle < -5 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case seven EAST'); }
     return this.DIR.EAST;
  } else if (angle < -7 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case eight NORTH'); }
     return this.DIR.NORTH;
  }
};

CubeGroup.prototype.dirToNeighbourRelative = function(pointA, pointB) {
  if (pointA.x > pointB.x) { // neighbour is to the left
      return this.DIR.WEST;
  } else if (pointA.x < pointB.x) { // neighbour is to the right
      return this.DIR.EAST;
  } else if (pointA.y > pointB.y) { // neighbour is to below
     return this.DIR.SOUTH;
  } else { // neighbour is above
     return this.DIR.NORTH;
  }
};

CubeGroup.prototype.decideSideRelative = function(pointA, pointB, relativeNorth) {
  if (pointA.x > pointB.x) { // neighbour is to the left
   if (relativeNorth === this.DIR.NORTH) {
      return this.DIR.WEST;
   } else if (relativeNorth === this.DIR.EAST) {
      return this.DIR.SOUTH;
   } else if (relativeNorth === this.DIR.SOUTH) {
      return this.DIR.EAST;
   } else if (relativeNorth === this.DIR.WEST) {
      return this.DIR.NORTH;
   }
  } else if (pointA.x < pointB.x) { // neighbour is to the right
      if (relativeNorth === this.DIR.NORTH) {
         return this.DIR.EAST;
      } else if (relativeNorth === this.DIR.EAST) {
         return this.DIR.NORTH;
      } else if (relativeNorth === this.DIR.SOUTH) {
         return this.DIR.WEST;
      } else if (relativeNorth === this.DIR.WEST) {
         return this.DIR.SOUTH;
      }
  } else if (pointA.y > pointB.y) { // neighbour is to below
     if (relativeNorth === this.DIR.NORTH) {
         return this.DIR.SOUTH;
      } else if (relativeNorth === this.DIR.EAST) {
         return this.DIR.EAST;
      } else if (relativeNorth === this.DIR.SOUTH) {
         return this.DIR.NORTH;
      } else if (relativeNorth === this.DIR.WEST) {
         return this.DIR.WEST;
      }
  } else { // neighbour is above
     if (relativeNorth === this.DIR.NORTH) {
         return this.DIR.NORTH;
      } else if (relativeNorth === this.DIR.EAST) {
         return this.DIR.WEST;
      } else if (relativeNorth === this.DIR.SOUTH) {
         return this.DIR.SOUTH;
      } else if (relativeNorth === this.DIR.WEST) {
         return this.DIR.EAST;
      }
  }
};

CubeGroup.prototype.createConstraints = function(me, myPoint, relativeNorth) {
   var neighbours = this.getNeighbours(me);
   for (var i = 0; i < neighbours.length; i++) {
      var neighbour = neighbours[i];
      var neighbourPoint = this.find(neighbour);
      var neighbourRelativeNorth = this.relativeNorth(neighbour);
      var mySide = this.decideSideRelative(myPoint, neighbourPoint, relativeNorth);
      var neighbourSide = this.decideSideRelative(neighbourPoint, myPoint, neighbourRelativeNorth);
      if (this.debugCreateConstraints) { console.log('createConstraints():', 'mySide:', mySide, 'neighbourSide:', neighbourSide); }
      var constraint;
      var offset = me.width + this.offset;
      if (mySide === 0) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 1 / 2 * Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 0);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 3 / 2 * Math.PI);
        }
     } else if (mySide === 1) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], -1 / 2 * Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], 1 / 2 * Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], 0);
        }
     } else if (mySide === 2) {
         if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 0);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 3 / 2 * Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 1 / 2 * Math.PI);
        }
     } else if (mySide === 3) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], 1 / 2 * Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], 0);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], -1 / 2 * Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], Math.PI);
        }
     }
     me.constraints.push(constraint);
     neighbour.constraints.push(constraint);
   }
};

CubeGroup.prototype.createConstraintsSpecial = function(me) {
   var neighbours = this.getNeighbours(me);
   for (var i = 0; i < neighbours.length; i++) {
      var neighbour = neighbours[i];
      var mySide = this.relativeSide(me.body, neighbour.body);
      var neighbourSide = this.relativeSide(neighbour.body, me.body);
      if (this.debugCreateConstraints) { console.log('createConstraintsSpecial():', 'mySide:', mySide, 'neighbourSide:', neighbourSide); }
      var constraint;
      var offset = me.width + this.offset;
      if (mySide === 0) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 1 / 2 * Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 0);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 3 / 2 * Math.PI);
        }
     } else if (mySide === 1) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], -1 / 2 * Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], 1 / 2 * Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], 0);
        }
     } else if (mySide === 2) {
         if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 0);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 3 / 2 * Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 1 / 2 * Math.PI);
        }
     } else if (mySide === 3) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], 1 / 2 * Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], 0);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], -1 / 2 * Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], Math.PI);
        }
     }
     me.constraints.push(constraint);
     neighbour.constraints.push(constraint);
   }
};

CubeGroup.prototype.relativeSide = function(thisBody, otherBody) {
  var thisPoint = new Phaser.Point(thisBody.x, thisBody.y);
  var otherPoint = new Phaser.Point(otherBody.x, otherBody.y);
  var angleToOther = this.angleBetweenPoints(thisPoint, otherPoint);
  var diffAngle = angleToOther - thisBody.rotation;
  var returnDir = this.angleToDir(diffAngle);
  if (this.debug) { console.log('relativeSide():', 'angleToOther:', angleToOther.toPrecision(4), 'thisBody.rotation:', thisBody.rotation.toPrecision(4), 'diffAngle:', diffAngle.toPrecision(4), 'returnDir:', returnDir); }
  return returnDir;
};

CubeGroup.prototype.angleBetweenPoints = function(thisPoint, otherPoint) {
  var angleToOther = Phaser.Point.angle(thisPoint, otherPoint);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
   return angleToOther;
};

CubeGroup.prototype.find = function(cube) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col] === cube) {
            return new Phaser.Point(row, col);
         }
      }
   }
   return undefined;
};

CubeGroup.prototype.get = function(point) {
  if (!point || this.outOfBounds(point)) {
      return;
  }
  return this.cubes[point.x][point.y];
};

CubeGroup.prototype.cubesWidth = function() {
   return this.cubes.length;
};

CubeGroup.prototype.cubesHeight = function() {
   return this.cubes[0].length;
};

CubeGroup.prototype.addTopRow = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].push(undefined);
   }
};

CubeGroup.prototype.addRightCol = function() {
   var newCol = [];
   for (var i = 0; i < this.cubesHeight(); i++) {
      newCol.push(undefined);
   }
   this.cubes.push(newCol);
};

CubeGroup.prototype.addBotRow = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].unshift(undefined);
   }
};

CubeGroup.prototype.addLeftCol = function() {
   var newCol = new Array(this.cubesHeight());
   this.cubes.unshift(newCol);
};

CubeGroup.prototype.getCube = function(point) {
   if (!point || this.outOfBounds(point)) {
      return undefined;
   }
   return this.cubes[point.x][point.y];
};

CubeGroup.prototype.adjust = function(point, dir) {
  if (!point) {
     return;
  }
  var newPoint = new Phaser.Point(point.x, point.y);
  switch (dir) {
      case this.DIR.NORTH:
      newPoint.y++;
      break;
      case this.DIR.EAST:
      newPoint.x++;
      break;
      case this.DIR.SOUTH:
      newPoint.y--;
      break;
      case this.DIR.WEST:
      newPoint.x--;
      break;
   }
   return newPoint;
};

CubeGroup.prototype.set = function(cube, point) {
   if (!point) {
      console.log('set given undefined point');
      return;
   }
   if (point.x < 0) {
      if (this.debug) { console.log('add left col'); }
      this.addLeftCol();
      point.x = 0;
   } else if (point.x >= this.cubesWidth()) {
      if (this.debug) { console.log('add right col'); }
      this.addRightCol();
      point.x = this.cubesWidth() - 1;
   } else if (point.y < 0) {
      if (this.debug) { console.log('add bot row'); }
      this.addBotRow();
      point.y = 0;
   } else if (point.y >= this.cubesHeight()) {
      if (this.debug) { console.log('add top row'); }
      this.addTopRow();
      point.y = this.cubesHeight() - 1;
   }
   if (this.get(point)) {
      return;
   }
   this.cubes[point.x][point.y] = cube;
   cube.group = this;
};

CubeGroup.prototype.outOfBounds = function(point) {
   if (!point) {
      console.log('out of bounds given undefined point');
      return;
   }
   if (point.x < 0 || point.x >= this.cubesWidth() || point.y < 0 || point.y >= this.cubesHeight()) {
      return true;
   }
   return false;
};

CubeGroup.prototype.displayCubes = function() {
   var output = 'displayCubes():\n';
   var row = 0;
   var col = this.cubesHeight() - 1;
   while (col >= 0) {
      while (row < this.cubesWidth()) {
         var cube = this.cubes[row][col];
         if (cube) {
            switch (cube.module.type) {
               case 'shield':
               output += 'S ';
               break;
               case 'core':
               output += 'C ';
               break;
               case 'thruster':
               output += 'T ';
               break;
               case 'solarPanel':
               output += 'P ';
               break;
               case 'hacker':
               output += 'H ';
               break;
               case 'gun':
               output += 'G ';
               break;
            }
         } else {
            output += '_ ';
         }
         row++;
      }
      row = 0;
      col--;
      output += '\n';
   }
   console.log(output);
};

CubeGroup.prototype.displayConnection = function(connection) {
   this.hideOtherConnections(connection);
   var graph = new Astar.Graph(this.cubesToGraph());
   var startPoint = this.find(connection.start);
   var endPoint = this.find(connection.end);
   if (!startPoint || !endPoint) {
      console.log('displayConnection failed to get points');
      return;
   }
   var start = graph.grid[startPoint.x][startPoint.y];
   var end = graph.grid[endPoint.x][endPoint.y];
   var result = Astar.astar.search(graph, start, end);
   result.unshift(start);
   var previous;
   for(var i = 0; i < result.length; i++) {
      var curPoint = new Phaser.Point(result[i].x, result[i].y);
      var curCube = this.get(curPoint);
      var indicator = curCube.cIndicator;
      var prevPoint;
      var nextPoint;
      var side;
      var prevCube;
      var nextCube;
      if (!previous) {
         indicator.animations.play('end');
         nextPoint = new Phaser.Point(result[i+1].x, result[i+1].y);
         nextCube = this.get(nextPoint);
         side = this.relativeSide(curCube.body, nextCube.body);
         indicator.rotation = this.dirToAngle(side);
      } else if (i === result.length - 1) {
         indicator.animations.play('end');
         prevPoint = new Phaser.Point(previous.x, previous.y);
         prevCube = this.get(prevPoint);
         side = this.relativeSide(curCube.body, prevCube.body);
         indicator.rotation = this.dirToAngle(side);
      } else {
         indicator.animations.play('line');
         prevPoint = new Phaser.Point(previous.x, previous.y);
         nextPoint = new Phaser.Point(result[i+1].x, result[i+1].y);
         prevCube = this.get(prevPoint);
         nextCube = this.get(nextPoint);
         var prevSide = this.relativeSide(curCube.body, prevCube.body);
         var nextSide = this.relativeSide(curCube.body, nextCube.body);
         this.manageIndicator(indicator, prevSide, nextSide);
      }
      previous = result[i];
      curCube.displayIndicator();
    }
};

CubeGroup.prototype.manageIndicator = function(indicator, prevDir, nextDir) {
  indicator.scale.setTo(Math.abs(indicator.scale.x), indicator.scale.y);
  if (prevDir === this.DIR.NORTH && nextDir === this.DIR.SOUTH) { // 2
      if (this.debug) { console.log('case 2'); }
      indicator.rotation = Math.PI;
   } else if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.NORTH) { // 1
      if (this.debug) { console.log('case 1'); }
      indicator.rotation = 0;
   } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.WEST) { // 4
      if (this.debug) { console.log('case 4'); }
      indicator.rotation = 1 / 2 * Math.PI;
   } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.EAST) { // 3
      if (this.debug) { console.log('case 3'); }
      indicator.rotation = 3 / 2  * Math.PI;
   } else {
      indicator.animations.play('right');
      if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.EAST) { // 5
         if (this.debug) { console.log('case 5'); }
         indicator.rotation = 0;
      } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.SOUTH) { // 6
         if (this.debug) { console.log('case 6'); }
         indicator.rotation = 1 / 2 * Math.PI;
      } else if (prevDir === this.DIR.NORTH && nextDir === this.DIR.WEST) { // 7
         if (this.debug) { console.log('case 7'); }
         indicator.rotation = Math.PI;
      } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.NORTH) { // 8
         if (this.debug) { console.log('case 8'); }
         indicator.rotation = 3 / 2 * Math.PI;
      } else {
         indicator.scale.setTo(-Math.abs(indicator.scale.x), indicator.scale.y);
         if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.WEST) { // 9
            if (this.debug) { console.log('case 9'); }
            indicator.rotation = 0;
         } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.NORTH) { // 10
            if (this.debug) { console.log('case 10'); }
            indicator.rotation = 1 / 2 * Math.PI;
         } else if (prevDir === this.DIR.NORTH && nextDir === this.DIR.EAST) { // 11
            if (this.debug) { console.log('case 11'); }
            indicator.rotation = Math.PI;
         } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.SOUTH) { // 12
            if (this.debug) { console.log('case 12'); }
            indicator.rotation = 3 / 2 * Math.PI;
         }
      }
   } 
};

CubeGroup.prototype.hideOtherConnections = function(exception) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.myConnection && cube.myConnection !== exception) {
            cube.hideIndicator();
         }
      }
   }
};

CubeGroup.prototype.cubesToGraph = function() {
  var graph = [];
  for (var row = 0; row < this.cubesWidth(); row++) {
     var newCol = [];
      for (var col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col]) {
            newCol.push(1);
         } else {
            newCol.push(0);
         }
      }
      graph.push(newCol);
   }
   return graph;
};

CubeGroup.prototype.dirBetween = function(a, b) {
   var deltaX = a.x - b.x;
   var deltaY = a.y - b.y;
   if (deltaX > 0) {
      return this.DIR.WEST;
   }
   if (deltaX < 0) {
      return this.DIR.EAST;
   }
   if (deltaY > 0) {
      return this.DIR.SOUTH;
   }
   if (deltaY < 0) {
      return this.DIR.NORTH;
   }
   return this.DIR.NORTH;
};

CubeGroup.prototype.dirToAngle = function(dir) {
  switch (dir) {
   case this.DIR.NORTH:
   return Math.PI;
   case this.DIR.EAST:
   return 3 / 2 * Math.PI;
   case this.DIR.SOUTH:
   return 0;
   case this.DIR.WEST:
   return 1 / 2 * Math.PI;
  }  
};

CubeGroup.prototype.destroyCube = function(cube) {
  var loc = this.find(cube);
  if (!loc) {
     console.log('attempt to destroy cube not in group');
     return;
  }
  // remove cube from group
  this.remove(cube);
  // destroy cube
  if(cube.key === 'core' && cube.tag === 'module') {
	cube.kill();
	// this.state.levelSetup.restartLevel();
  }
  cube.destroy(true);
};

CubeGroup.prototype.remove = function(cube) {
   if (this.debug) { console.log('remove()'); }
   if (this.root === cube) {
      return;
   }
   // remove cube from array
   var row, col;
   for (row = 0; row < this.cubesWidth(); row++) {
      for (col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col] === cube) {
            cube.group = undefined;
            cube.tag = 'module';
            this.cubes[row][col] = undefined;
            break;
         }
      }
   }
   //If this is an active module, splice it from the active list
   if(cube.module.isActive){
	   if(cube.module.type === 'hacker') {
			var hackIndex = this.activeHackerModules.indexOf(cube.module);
			this.activeHackerModules.splice(hackIndex, 1);
	   }
	   cube.module.isActive = false;
   }
   //set sprite of cube to greyed if necisarry
   if(cube.module.type === 'thruster' || cube.module.type === 'gun' || cube.module.type === 'hacker') {
		cube.frame = 0;
   }
   // remove constraints from cube
   this.removeConstraints(cube);
   cube.group = undefined;
   if (cube.module && cube.module.hasOwnProperty('onRemove')) {
      cube.module.onRemove();
   }
   // test for exiles
   for (row = 0; row < this.cubesWidth(); row++) {
      for (col = 0; col < this.cubesHeight(); col++) {
         var exile = this.cubes[row][col];
         if (exile && this.isExile(exile)) {
            this.remove(exile);
         }
      }
   }
   if (this.debug) { this.displayCubes(); }
};

CubeGroup.prototype.removeneighboursConstraint = function(constraint, cube) {
   // console.log('removeneighboursConstraint');
   var neighbours = this.getNeighbours(cube);
   for (var i = 0; i < neighbours.length; i++) {
      var neighbour = neighbours[i];
      for (var j = 0; j < neighbour.constraints.length; j++) {
         if (neighbour.constraints[j] === constraint) {
            neighbour.constraints.splice(j, 1);
         }
      }
   }
};

CubeGroup.prototype.getNeighbours = function(cube) {
   var loc = this.find(cube);
   var north = this.get(this.adjust(loc, this.DIR.NORTH));
   var east = this.get(this.adjust(loc, this.DIR.EAST));
   var south = this.get(this.adjust(loc, this.DIR.SOUTH));
   var west = this.get(this.adjust(loc, this.DIR.WEST));
   var neighbours = [];
   if (north) {
      neighbours.push(north);
   }
   if (east) {
      neighbours.push(east);
   }
   if (south) {
      neighbours.push(south);
   }
   if (west) {
      neighbours.push(west);
   }
   return neighbours;
};

CubeGroup.prototype.removeConstraints = function(cube) {
   // console.log('removeConstraints');
   while (cube.constraints.length > 0) {
      this.removeneighboursConstraint(cube.constraints[0], cube);
      this.game.physics.p2.removeConstraint(cube.constraints[0]);
      cube.constraints.splice(0, 1);
   }
};

// only used to test Astar
CubeGroup.prototype.testPath = function() {
  var graph = new Astar.Graph([
        [1,1,1,1],
        [0,1,1,0],
        [0,0,0,1]
    ]);
   var start = graph.grid[0][0];
   var end = graph.grid[2][3];
   var result = Astar.astar.search(graph, start, end);
   result.unshift(start);
   for(var i = 0; i < result.length; i++) {
      console.log(result[i].x, result[i].y);
    } 
};

CubeGroup.prototype.isExile = function(cube) {
   if (cube === this.root) {
      return;
   }
   var graph = new Astar.Graph(this.cubesToGraph());
   var startPoint = this.find(this.root);
   var endPoint = this.find(cube);
   var start = graph.grid[startPoint.x][startPoint.y];
   var end = graph.grid[endPoint.x][endPoint.y];
   var result = Astar.astar.search(graph, start, end);
   // if no path is found, the cube is an exile
   if (result.length === 0) {
      return true;
   }
   return false;
};

CubeGroup.prototype.countCubes = function() {
	var row, col;
	var num  = 0;
	for (row = 0; row < this.cubesWidth(); row++) {
		for (col = 0; col < this.cubesHeight(); col++) {
			if (this.cubes[row][col] !== undefined) {
				num++;
			}
		}
	}
	//console.log(num);
	this.numCubes = num;
};

module.exports = CubeGroup;

















},{"../libs/javascript-astar/astar":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\libs\\javascript-astar\\astar.js","./enemy_ai":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\enemy_ai.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\enemy_ai.js":[function(require,module,exports){
var Utils = require('../utils.js');

var EnemyAI = function(game, group, type, playerGroup) {
   this.game = game;
   this.group = group;
   this.type = type;
   this.playerGroup = playerGroup;
   this.player = this.playerGroup.root;
   this.ramDist = 500;
   this.shootDist = 500;
   this.rotationForce = 50;
   this.facingAllowance = Math.PI / 15;
   this.acting = false;
   switch (this.type) {
      case 'ram':
      this.allocateTo('thruster');
      break;
      case 'shoot':
      this.allocateTo('gun');
   }
};

EnemyAI.prototype.constructor = EnemyAI;

EnemyAI.prototype.update = function() {
   switch (this.type) {
      case 'ram':
      this.customUpdate('thruster', this.ramDist);
      break;
      case 'shoot':
      this.customUpdate('gun', this.shootDist);
   }
};

EnemyAI.prototype.customUpdate = function(type, threshold) {
   if (!this.group.root) {
      return;
   }
   else if(!this.group.root.body) {
		return;
   }
   var root = this.group.root;
   var myPos = new Phaser.Point(root.x, root.y);
   var playerPos = new Phaser.Point(this.player.x, this.player.y);
   var dist = Utils.distance(myPos.x, myPos.y, playerPos.x, playerPos.y);
   if (dist <= threshold) {
      var angleTo = this.angleTo(myPos, playerPos);
      var diffAngle = angleTo - root.body.rotation;
      if (diffAngle > 0) {
         root.body.angularForce = this.rotationForce;
      } else {
         root.body.angularForce = -this.rotationForce;
      }
      if (Math.abs(diffAngle) <= this.facingAllowance && !this.acting) {
         // this.group.call('beginAct');
         this.group.callOnType('beginAct', type);
         this.acting = true;
         // this.allocateTo(type);
      } else if (Math.abs(diffAngle) > this.facingAllowance && this.acting){
         // this.group.call('endAct');
         this.group.callOnType('endAct', type);
         this.acting = false;
      }
   }
};

EnemyAI.prototype.allocateTo = function(type) {
   var panels = [];
   var types = [];
   for (var row = 0; row < this.group.cubesWidth(); row++) {
      for (var col = 0; col < this.group.cubesHeight(); col++) {
         var cube = this.group.cubes[row][col];
         if (cube && cube.module) {
            if (cube.module.type === 'solarPanel' && !cube.myConnection) {
               panels.push(cube.module);
            } else if (cube.module.type === type && !cube.myConnection) {
               types.push(cube.module);
            }
         }
      }
   }
   var i = 0;
   while (i < types.length && i < panels.length) {
      var tarPanel = panels[i];
      var tarType = types[i];
      var newConnection = {start: tarPanel.cube, end: tarType.cube};
      tarPanel.cube.myConnection = newConnection;
      tarType.cube.myConnection = newConnection;
      this.group.displayConnection(tarPanel.cube.myConnection);
      i++;
   }
};

EnemyAI.prototype.angleTo = function(from, to) {
  var angleToOther = Phaser.Point.angle(from, to);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
  return angleToOther;
};

module.exports = EnemyAI;











},{"../utils.js":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\utils.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\helper.js":[function(require,module,exports){
var Helper = function(state) {
	this.state = state;
   this.game = this.state.game;
   this.cam = this.game.camera;
   this.sm = this.state.soundManager;
   this.helpBanner = this.state.uiBuilder.buildBanner(0.5, 0.5, 'tutorial_text');
	this.helpButton = this.game.add.button(this.cam.x - 100, this.cam.y - 100, 'helpButton', this.helpBanner.toggle, this.helpBanner, 1, 0, 2);
	this.helpButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.helpButton.onInputDown.add(this.sm.playDownClick, this.sm);
};

Helper.prototype.constructor = Helper;

Helper.prototype.update = function() {
   this.helpButton.x = this.cam.x + 16;
   this.helpButton.y = this.cam.y + 16;
};

module.exports = Helper;
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\level_setup.js":[function(require,module,exports){
var Renderables = require('../functionAccess/Renderables');
var UIBuilder = require('../ui/UIBuilder');
var ModuleBuilder = require('../entities/ModuleBuilder');
var CubeGroup = require('../entities/cube_group');
var Emitter = require('../effects/Emitter');
var Mouse = require('../entities/mouse');
var SoundManager = require('../entities/sound_manager');
var Shop = require('../ui/shop');
var Helper = require('../entities/helper');
var Cheating = require('../entities/cheating');
var Asteroids = require('../entities/asteroids');
var Warning = require('../entities/warning');
var MissionPrompt = require('../ui/MissionPrompt');

var LevelSetup = function(state, level) {
	// initialise
	this.state = state;
   this.game = this.state.game;
   this.level = level;
   // simplify
   this.simplify = false;
   // setup
   this.game.world.setBounds(0, 0, 8000, 4000);
   this.bg = this.game.add.sprite(0, 0, 'earthNight');
	this.bg2 = this.game.add.sprite(-8000, 0, 'earthNight');
   this.game.physics.startSystem(Phaser.Physics.P2JS);
	this.game.physics.p2.setImpactEvents(true);
   this.state.collisionGroup = this.game.physics.p2.createCollisionGroup();
   this.updateDependents = [];
   this.renderables = new Renderables();
   this.state.uiBuilder = new UIBuilder(this.state, this.renderables);
   this.state.moduleBuilder = new ModuleBuilder(this.state);
   this.state.coreModule = this.state.moduleBuilder.build('core', 1200, 1200, true);
	this.cubeWidth = this.state.coreModule.cube.width;
	this.cubeBuffer = 2;
	var playerGroup = new CubeGroup(this.state, this.state.coreModule.cube);
	this.updateDependents.push(playerGroup);
	this.state.player = playerGroup;
	this.state.player.isPlayer = true;
   this.state.BinaryEmitter = new Emitter(this.state);
   this.leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.A);
	this.rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.D);
   this.levelData = JSON.parse(this.game.cache.getText(this.level));
   if (!this.simplify) { this.loadLevel(); }
   this.game.juicy = this.game.plugins.add(new Phaser.Plugin.Juicy(this.state));
   this.game.camera.follow(this.state.coreModule.cube);
   this.state.mouse = new Mouse(this.game, this.state.input, this.state.player);
   this.updateDependents.push(this.state.mouse);
   this.state.soundManager = new SoundManager(this.state);
   this.state.shop = new Shop(this.state);
   this.updateDependents.push(this.state.shop);
   this.helper = new Helper(this.state);
   this.updateDependents.push(this.helper);
   this.cheating = new Cheating(this.state);
   this.asteroids = new Asteroids(this.state, this.simplify);
   this.updateDependents.push(this.asteroids);
   this.warning = new Warning(this.state);
   this.updateDependents.push(this.warning);
   this.missionPrompt = new MissionPrompt(this.state);
};

LevelSetup.prototype.constructor = LevelSetup;

LevelSetup.prototype.update = function() {
   if(this.leftKey.isDown) {
		if(this.state.coreModule.cube.body.angularVelocity > -9) { 
			this.state.coreModule.cube.body.angularForce += -7.5 * Math.pow(this.state.player.numCubes, 1.65);
		}
	}
	if(this.rightKey.isDown) {
		if(this.state.coreModule.cube.body.angularVelocity < 9) {
			this.state.coreModule.cube.body.angularForce += 7.5 * Math.pow(this.state.player.numCubes, 1.65);
		}
	}
   this.bg.x += 0.125;
   if (this.bg.x >= 8000) {
      this.bg.x = 0;
   }
   this.bg2.x += 0.125;
   if (this.bg2.x >= 8000) {
      this.bg2.x = 0;
   }
   for (var i = 0; i < this.updateDependents.length; i++) {
		if (this.updateDependents[i].update) {
			this.updateDependents[i].update();
		}
	}
};

LevelSetup.prototype.loadLevel = function() {
   var myLevel = this.levelData[this.level];
   for (var key in myLevel) {
      if (myLevel.hasOwnProperty(key)) {
         var element = myLevel[key];
         if (element.hasOwnProperty('blueprint')) { // enemy type
            var enemyX = element['x_pos'];
            var enemyY = element['y_pos'];
            var enemyGroup = new CubeGroup(this.state, undefined);
            this.updateDependents.push(enemyGroup);
            var blueprint = element['blueprint'];
            for (var row = 0; row < blueprint.length; row++) {
               for (var col = 0; col < blueprint[row].length; col++) {
                  var type = blueprint[row][col];
                  if (type !== 'none') {
                     var newModule = this.state.moduleBuilder.build(type, enemyX + row * (this.cubeWidth + this.cubeBuffer),
                     enemyY - col * (this.cubeWidth + this.cubeBuffer), false);
                     newModule.cube.tag = 'enemy_module';
                     var point = new Phaser.Point(row, col);
                     enemyGroup.add(newModule.cube, point);
                  }
               }
            }
            var aiType = element['type'];
            enemyGroup.giveAI(aiType, this.state.player);
         }
      }
   } 
};

LevelSetup.prototype.render = function() {
   this.state.mouse.render();
   this.renderables.renderAll(); 
};

module.exports = LevelSetup;


















},{"../effects/Emitter":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\effects\\Emitter.js","../entities/ModuleBuilder":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js","../entities/asteroids":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\asteroids.js","../entities/cheating":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\cheating.js","../entities/cube_group":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js","../entities/helper":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\helper.js","../entities/mouse":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\mouse.js","../entities/sound_manager":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\sound_manager.js","../entities/warning":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\warning.js","../functionAccess/Renderables":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\functionAccess\\Renderables.js","../ui/MissionPrompt":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\ui\\MissionPrompt.js","../ui/UIBuilder":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\ui\\UIBuilder.js","../ui/shop":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\ui\\shop.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\mouse.js":[function(require,module,exports){
var Utils = require('../utils.js');

var Mouse = function(game, input, playerGroup) {
   this.game = game;
   this.input = input;
	this.body = new p2.Body(); // jshint ignore:line
   this.game.physics.p2.world.addBody(this.body);
   this.input.onDown.add(this.click, this);
   this.input.onUp.add(this.release, this);
   this.input.addMoveCallback(this.move, this);
   this.x = 0;
   this.y = 0;
   this.grabbed = undefined;
   this.lastClicked = undefined;
   this.line = new Phaser.Line(0, 0, 0, 0);
   this.removeThreshold = 50; // distance you must pull to remove module
   this.removeDist = 0; // distance you are pulling
   this.playerGroup = playerGroup;
   // keys
   this.ccwKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Q);
	this.cwKey = this.game.input.keyboard.addKey(Phaser.Keyboard.E);
};

Mouse.prototype.constructor = Mouse;

Mouse.prototype.update = function() {
   if (this.grabbed) {
      var angle = Math.atan2(this.grabbed.sprite.y - (this.input.position.y + this.game.camera.y), this.grabbed.sprite.x - (this.input.position.x+ this.game.camera.x)) + Math.PI;
      var dist = Utils.distance(this.grabbed.sprite.x, this.grabbed.sprite.y, (this.input.position.x+ this.game.camera.x), (this.input.position.y + this.game.camera.y));
      var weight;
	  if(this.grabbed.sprite.key === 'asteroid') {
		weight = 1;
	  }
	  else {
		weight = 10;
	  }
	  if (!this.grabbed.sprite.group) {
         this.grabbed.force.x = Math.cos(angle) * dist * weight;
         this.grabbed.force.y = Math.sin(angle) * dist * weight;
      }
      this.line.setTo(this.grabbed.sprite.x, this.grabbed.sprite.y, (this.input.position.x+ this.game.camera.x), (this.input.position.y + this.game.camera.y));
      var deltaX = this.grabbed.sprite.x - this.x;
	  var deltaY = this.grabbed.sprite.y - this.y;
	  this.removeDist = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
      if(this.grabbed.sprite.tag === 'module') {
		  if (this.removeDist >= this.removeThreshold && this.grabbed.sprite.key !== 'asteroid') {
			 this.grabbed.sprite.remove();
		  }
	  }
    } else {
       this.line.setTo(0, 0, 0, 0);
    }
    var point = new Phaser.Point(this.x, this.y);
    var bodies = this.game.physics.p2.hitTest(point);
    if (bodies.length)
    {
        var hover = bodies[0].parent;
        if (hover.sprite.module && hover.sprite.module.mouseOver) {
           hover.sprite.module.mouseOver();
        }
    }
    // rotate
   if(this.ccwKey.isDown) {
		if(this.grabbed !== undefined && this.grabbed.sprite.group === undefined) {
			this.grabbed.angularForce += -5;
		}
	}
	if(this.cwKey.isDown) {
		if(this.grabbed !== undefined && this.grabbed.sprite.group === undefined) {
			this.grabbed.angularForce += 5;
		}
	}
};

Mouse.prototype.click = function(pointer) {
   var point = new Phaser.Point(pointer.x + this.game.camera.x, pointer.y + this.game.camera.y);
   var bodies = this.game.physics.p2.hitTest(point);
   if (bodies.length)
   {
     var temp = bodies[0].parent;
     this.grabbed = temp;
     if (this.grabbed.sprite.module && this.grabbed.sprite.module.hasOwnProperty('mouseDown')) {
       this.grabbed.sprite.module.mouseDown();
     }
     if (this.lastClicked && this.lastClicked.sprite && this.lastClicked.sprite.module &&
     this.lastClicked.sprite.module.giveTarget) {
        this.lastClicked.sprite.module.giveTarget(this.grabbed.sprite.module);
     }
     if (temp.sprite && temp.sprite.module && temp.sprite.module.type === 'core') {
        this.grabbed = undefined;
     }
     if (temp.sprite && temp.sprite.group && temp.sprite.group !== this.playerGroup) {
        this.grabbed = undefined;
     }
     this.lastClicked = temp;
   }
   
   //create sprite overlay to show selection
   if(this.grabbed) {
		this.selected = this.game.add.sprite(0, 0, 'selected');
		this.grabbed.sprite.addChild(this.selected);
		this.selected.x = 0 - this.grabbed.sprite.width;
		this.selected.y = 0 - this.grabbed.sprite.height;
		this.selected.bringToTop();
   }
};
  
 Mouse.prototype.release = function() {
   if (this.grabbed) {
		//destroy selected sprite
		this.grabbed.sprite.removeChild(this.selected);
		this.selected.destroy();
		this.grabbed = undefined;
   }
};

Mouse.prototype.move = function(pointer) {
   // p2 uses different coordinate system, so convert the pointer position to p2's coordinate system
   this.body.position[0] = this.game.physics.p2.pxmi(pointer.position.x);
   this.body.position[1] = this.game.physics.p2.pxmi(pointer.position.y);
   this.x = pointer.position.x + this.game.camera.x;
   this.y = pointer.position.y + this.game.camera.y;
};

Mouse.prototype.render = function() {
   //this.game.debug.geom(this.line);
};

module.exports = Mouse;















},{"../utils.js":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\utils.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\sound_manager.js":[function(require,module,exports){
/*
Plays sounds needed across multiple scripts.
*/
var SoundManager = function(state) {
   // initial variables
	this.state = state;
   this.game = this.state.game;
   this.cam = this.game.camera;
   // sounds
   this.hoverClick = this.game.add.audio('hoverClick');
   this.downClick = this.game.add.audio('downClick');
};

SoundManager.prototype.constructor = SoundManager;

SoundManager.prototype.playHoverClick = function() {
   this.hoverClick.play();
};

SoundManager.prototype.playDownClick = function() {
   this.downClick.play();
};

module.exports = SoundManager;













},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\warning.js":[function(require,module,exports){
var Warning = function(state) {
   // initialise
	this.state = state;
   this.game = this.state.game;
   this.cam = this.game.camera;
   this.timer = this.game.time.create(false);
	this.warning = this.game.add.image(this.game.camera.x, this.game.camera.y, 'warning');
	this.warning.kill();
};

Warning.prototype.constructor = Warning;

Warning.prototype.update = function() {
   // warning graphic
	if(this.state.coreModule.cube.x + (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) > 8000 ||
	this.state.coreModule.cube.x - (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) < 0 ||
	this.state.coreModule.cube.y + (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) > 4000 ||
	this.state.coreModule.cube.y - (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) < 0) {
		if(this.timer.length === 0) {
			this.warning.revive();
			this.timer.loop(Phaser.Timer.SECOND * 5, this.resetPlayer, this);
			this.timer.start();
		}
	}
	else {
		if(this.warning.alive === true) {
			this.warning.kill();
		}
		if(this.timer.length > 0) {
			this.timer.stop(true);
		}
	}
	this.warning.x = this.game.camera.x;
	this.warning.y = this.game.camera.y;
};

Warning.prototype.resetPlayer = function() {
   if(this.state.coreModule.cube.x + (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) > 8000) {
      this.state.coreModule.cube.body.moveLeft(this.state.player.numCubes * 750);
   }
   if(this.state.coreModule.cube.x - (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) < 0) {
      this.state.coreModule.cube.body.moveRight(this.state.player.numCubes * 750);
   }
   if(this.state.coreModule.cube.y + (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) > 4000) {
      this.state.coreModule.cube.body.moveUp(this.state.player.numCubes * 750);
   }
   else if(this.state.coreModule.cube.y - (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) < 0) {
      this.state.coreModule.cube.body.moveDown(this.state.player.numCubes * 750);
   }
};

module.exports = Warning;
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\functionAccess\\Renderables.js":[function(require,module,exports){
var Renderables = function() {
	if(Renderables.prototype.exists) {
		return Renderables.prototype.existingReference;
	}
	
	this.list = [];
	Renderables.prototype.exists = true;
	Renderables.prototype.existingReference = this;
};

Renderables.prototype.constructor = Renderables;
//These var's help create the singleton functionality
Renderables.prototype.exists = false;
Renderables.prototype.existingReference = null;

Renderables.prototype.subscribe = function(subscriber) {
	this.list.push(subscriber);
};

Renderables.prototype.unsubscribe = function(unsubscriber) {
	for(var i = 0; i < this.list.length; i++) {
		if(this.list[i] === unsubscriber) {
			this.list[i] = false;
		}
	}
};

Renderables.prototype.renderAll = function() {
	for(var i = 0; i < this.list.length; i++) {
		if(this.list[i] === false) {
			continue;
		}
		this.list[i].render();
	}
};

module.exports = Renderables;
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\libs\\javascript-astar\\astar.js":[function(require,module,exports){
// javascript-astar 0.4.0
// http://github.com/bgrins/javascript-astar
// Freely distributable under the MIT License.
// Implements the astar search algorithm in javascript using a Binary Heap.
// Includes Binary Heap (with modifications) from Marijn Haverbeke.
// http://eloquentjavascript.net/appendix2.html

(function(definition) {
    /* global module, define */
    if(typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = definition();
    } else if(typeof define === 'function' && define.amd) {
        define([], definition);
    } else {
        var exports = definition();
        window.astar = exports.astar;
        window.Graph = exports.Graph;
    }
})(function() {

function pathTo(node){
    var curr = node,
        path = [];
    while(curr.parent) {
        path.push(curr);
        curr = curr.parent;
    }
    return path.reverse();
}

function getHeap() {
    return new BinaryHeap(function(node) {
        return node.f;
    });
}

var astar = {
    /**
    * Perform an A* Search on a graph given a start and end node.
    * @param {Graph} graph
    * @param {GridNode} start
    * @param {GridNode} end
    * @param {Object} [options]
    * @param {bool} [options.closest] Specifies whether to return the
               path to the closest node if the target is unreachable.
    * @param {Function} [options.heuristic] Heuristic function (see
    *          astar.heuristics).
    */
    search: function(graph, start, end, options) {
        graph.cleanDirty();
        options = options || {};
        var heuristic = options.heuristic || astar.heuristics.manhattan,
            closest = options.closest || false;

        var openHeap = getHeap(),
            closestNode = start; // set the start node to be the closest if required

        start.h = heuristic(start, end);

        openHeap.push(start);

        while(openHeap.size() > 0) {

            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.
            var currentNode = openHeap.pop();

            // End case -- result has been found, return the traced path.
            if(currentNode === end) {
                return pathTo(currentNode);
            }

            // Normal case -- move currentNode from open to closed, process each of its neighbors.
            currentNode.closed = true;

            // Find all neighbors for the current node.
            var neighbors = graph.neighbors(currentNode);

            for (var i = 0, il = neighbors.length; i < il; ++i) {
                var neighbor = neighbors[i];

                if (neighbor.closed || neighbor.isWall()) {
                    // Not a valid node to process, skip to next neighbor.
                    continue;
                }

                // The g score is the shortest distance from start to current node.
                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.
                var gScore = currentNode.g + neighbor.getCost(currentNode),
                    beenVisited = neighbor.visited;

                if (!beenVisited || gScore < neighbor.g) {

                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.
                    neighbor.visited = true;
                    neighbor.parent = currentNode;
                    neighbor.h = neighbor.h || heuristic(neighbor, end);
                    neighbor.g = gScore;
                    neighbor.f = neighbor.g + neighbor.h;
                    graph.markDirty(neighbor);
                    if (closest) {
                        // If the neighbour is closer than the current closestNode or if it's equally close but has
                        // a cheaper path than the current closest node then it becomes the closest node
                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {
                            closestNode = neighbor;
                        }
                    }

                    if (!beenVisited) {
                        // Pushing to heap will put it in proper place based on the 'f' value.
                        openHeap.push(neighbor);
                    }
                    else {
                        // Already seen the node, but since it has been rescored we need to reorder it in the heap
                        openHeap.rescoreElement(neighbor);
                    }
                }
            }
        }

        if (closest) {
            return pathTo(closestNode);
        }

        // No result was found - empty array signifies failure to find path.
        return [];
    },
    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html
    heuristics: {
        manhattan: function(pos0, pos1) {
            var d1 = Math.abs(pos1.x - pos0.x);
            var d2 = Math.abs(pos1.y - pos0.y);
            return d1 + d2;
        },
        diagonal: function(pos0, pos1) {
            var D = 1;
            var D2 = Math.sqrt(2);
            var d1 = Math.abs(pos1.x - pos0.x);
            var d2 = Math.abs(pos1.y - pos0.y);
            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));
        }
    },
    cleanNode:function(node){
        node.f = 0;
        node.g = 0;
        node.h = 0;
        node.visited = false;
        node.closed = false;
        node.parent = null;
    }
};

/**
* A graph memory structure
* @param {Array} gridIn 2D array of input weights
* @param {Object} [options]
* @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed
*/
function Graph(gridIn, options) {
    options = options || {};
    this.nodes = [];
    this.diagonal = !!options.diagonal;
    this.grid = [];
    for (var x = 0; x < gridIn.length; x++) {
        this.grid[x] = [];

        for (var y = 0, row = gridIn[x]; y < row.length; y++) {
            var node = new GridNode(x, y, row[y]);
            this.grid[x][y] = node;
            this.nodes.push(node);
        }
    }
    this.init();
}

Graph.prototype.init = function() {
    this.dirtyNodes = [];
    for (var i = 0; i < this.nodes.length; i++) {
        astar.cleanNode(this.nodes[i]);
    }
};

Graph.prototype.cleanDirty = function() {
    for (var i = 0; i < this.dirtyNodes.length; i++) {
        astar.cleanNode(this.dirtyNodes[i]);
    }
    this.dirtyNodes = [];
};

Graph.prototype.markDirty = function(node) {
    this.dirtyNodes.push(node);
};

Graph.prototype.neighbors = function(node) {
    var ret = [],
        x = node.x,
        y = node.y,
        grid = this.grid;

    // West
    if(grid[x-1] && grid[x-1][y]) {
        ret.push(grid[x-1][y]);
    }

    // East
    if(grid[x+1] && grid[x+1][y]) {
        ret.push(grid[x+1][y]);
    }

    // South
    if(grid[x] && grid[x][y-1]) {
        ret.push(grid[x][y-1]);
    }

    // North
    if(grid[x] && grid[x][y+1]) {
        ret.push(grid[x][y+1]);
    }

    if (this.diagonal) {
        // Southwest
        if(grid[x-1] && grid[x-1][y-1]) {
            ret.push(grid[x-1][y-1]);
        }

        // Southeast
        if(grid[x+1] && grid[x+1][y-1]) {
            ret.push(grid[x+1][y-1]);
        }

        // Northwest
        if(grid[x-1] && grid[x-1][y+1]) {
            ret.push(grid[x-1][y+1]);
        }

        // Northeast
        if(grid[x+1] && grid[x+1][y+1]) {
            ret.push(grid[x+1][y+1]);
        }
    }

    return ret;
};

Graph.prototype.toString = function() {
    var graphString = [],
        nodes = this.grid, // when using grid
        rowDebug, row, y, l;
    for (var x = 0, len = nodes.length; x < len; x++) {
        rowDebug = [];
        row = nodes[x];
        for (y = 0, l = row.length; y < l; y++) {
            rowDebug.push(row[y].weight);
        }
        graphString.push(rowDebug.join(' '));
    }
    return graphString.join('\n');
};

function GridNode(x, y, weight) {
    this.x = x;
    this.y = y;
    this.weight = weight;
}

GridNode.prototype.toString = function() {
    return '[' + this.x + ' ' + this.y + ']';
};

GridNode.prototype.getCost = function(fromNeighbor) {
    // Take diagonal weight into consideration.
    if (fromNeighbor && fromNeighbor.x !== this.x && fromNeighbor.y !== this.y) {
        return this.weight * 1.41421;
    }
    return this.weight;
};

GridNode.prototype.isWall = function() {
    return this.weight === 0;
};

function BinaryHeap(scoreFunction){
    this.content = [];
    this.scoreFunction = scoreFunction;
}

BinaryHeap.prototype = {
    push: function(element) {
        // Add the new element to the end of the array.
        this.content.push(element);

        // Allow it to sink down.
        this.sinkDown(this.content.length - 1);
    },
    pop: function() {
        // Store the first element so we can return it later.
        var result = this.content[0];
        // Get the element at the end of the array.
        var end = this.content.pop();
        // If there are any elements left, put the end element at the
        // start, and let it bubble up.
        if (this.content.length > 0) {
            this.content[0] = end;
            this.bubbleUp(0);
        }
        return result;
    },
    remove: function(node) {
        var i = this.content.indexOf(node);

        // When it is found, the process seen in 'pop' is repeated
        // to fill up the hole.
        var end = this.content.pop();

        if (i !== this.content.length - 1) {
            this.content[i] = end;

            if (this.scoreFunction(end) < this.scoreFunction(node)) {
                this.sinkDown(i);
            }
            else {
                this.bubbleUp(i);
            }
        }
    },
    size: function() {
        return this.content.length;
    },
    rescoreElement: function(node) {
        this.sinkDown(this.content.indexOf(node));
    },
    sinkDown: function(n) {
        // Fetch the element that has to be sunk.
        var element = this.content[n];

        // When at 0, an element can not sink any further.
        while (n > 0) {

            // Compute the parent element's index, and fetch it.
            var parentN = ((n + 1) >> 1) - 1, parent = this.content[parentN]; // jshint ignore:line
            // Swap the elements if the parent is greater.
            if (this.scoreFunction(element) < this.scoreFunction(parent)) {
                this.content[parentN] = element;
                this.content[n] = parent;
                // Update 'n' to continue at the new position.
                n = parentN;
            }
            // Found a parent that is less, no need to sink any further.
            else {
                break;
            }
        }
    },
    bubbleUp: function(n) {
        // Look up the target element and its score.
        var length = this.content.length,
            element = this.content[n],
            elemScore = this.scoreFunction(element);

        while(true) {
            // Compute the indices of the child elements.
            var child2N = (n + 1) << 1, child1N = child2N - 1; // jshint ignore:line
            // This is used to store the new position of the element, if any.
            var swap = null,
                child1Score;
            // If the first child exists (is inside the array)...
            if (child1N < length) {
                // Look it up and compute its score.
                var child1 = this.content[child1N];
                child1Score = this.scoreFunction(child1);

                // If the score is less than our element's, we need to swap.
                if (child1Score < elemScore){
                    swap = child1N;
                }
            }

            // Do the same checks for the other child.
            if (child2N < length) {
                var child2 = this.content[child2N],
                    child2Score = this.scoreFunction(child2);
                if (child2Score < (swap === null ? elemScore : child1Score)) {
                    swap = child2N;
                }
            }

            // If the element needs to be moved, swap it, and continue.
            if (swap !== null) {
                this.content[n] = this.content[swap];
                this.content[swap] = element;
                n = swap;
            }
            // Otherwise, we are done.
            else {
                break;
            }
        }
    }
};

return {
    astar: astar,
    Graph: Graph
};

});

},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/images/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      //this.game.stage.scale.pageAlignHorizontally = true;
      this.game.scale.scaleMode = Phaser.ScaleManager.RESIZE;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\levelOne.js":[function(require,module,exports){
/*
Level 1
*/
var LevelSetup = require('../entities/level_setup');

var levelOne = function () { };

module.exports = levelOne;

levelOne.prototype = {
	
	init: function(params){
		this.levelSong = this.game.add.audio(params[0]);
		this.levelSong.play('',params[1],params[2],true,true);
	},
	
	create: function () {
		this.levelSetup = new LevelSetup(this, 'level_one');
		this.pauseMenu = this.game.add.image(-2000, -2000, 'pauseMenu');
		this.pauseMenu.kill();
		this.pauseMenu.anchor.setTo(0.5, 0.5);
		this.pauseKey = this.game.input.keyboard.addKey(27);
		this.pauseKey.onDown.add(this.pauseGame, {game: this, context: 'key'});
		this.menuKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
		this.menuKey.onDown.add(this.returnToMenu, this);
		this.restartKey = this.game.input.keyboard.addKey(Phaser.Keyboard.G);
		this.restartKey.onDown.add(this.restartLevel, {game: this, context: 'key'});
		this.state.game.input.onDown.add(this.pauseGame, {game: this, context: 'mouse'});
	},
  
	update: function () {
		this.levelSetup.update();
	},
  
	render: function () {
		this.levelSetup.render();
	},

	pauseGame: function() {
		if(!this.game.state.game.paused) {
			if(this.context === 'key') {
				this.game.pauseMenu = this.game.add.image(this.game.camera.x + (this.game.camera.width / 2), this.game.camera.y + (this.game.camera.height / 2), 'pauseMenu');
				this.game.pauseMenu.anchor.setTo(0.5, 0.5);
				this.game.state.game.paused = true;
			}
		}
		else {
			this.game.state.game.paused = false;
			this.game.pauseMenu.destroy();
		}
	},

	restartLevel: function() {
		if(this.context === 'key') {
			if(this.game.state.game.paused) {
				this.game.state.game.paused = false;
				this.game.levelSong.destroy();
				this.game.game.state.start('levelOne', true, false, ['mainSong', 0, 0.75]);
			}
		}
		else {
			this.game.levelSong.destroy();
			this.game.game.state.start('levelOne', true, false, ['mainSong', 0, 0.75]);
		}
	},
	
	returnToMenu: function() {
		if(this.state.game.paused) {
			this.state.game.paused = false;
			this.levelSong.destroy();
			this.game.state.start('Menu', true, false, ['menuSong', 0, 1]);
		}
	},
};




























},{"../entities/level_setup":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\level_setup.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\levelThree.js":[function(require,module,exports){
/*
Level 3
*/
var LevelSetup = require('../entities/level_setup');

var levelThree = function () { };

module.exports = levelThree;

levelThree.prototype = {
	
  init: function(params){
  	this.levelSong = this.game.add.audio(params[0]);
	this.levelSong.play('',params[1],params[2],true,true);
  },
	
  create: function () {
	this.levelSetup = new LevelSetup(this, 'level_three');
	this.pauseMenu = this.game.add.image(-2000, -2000, 'pauseMenu');
	this.pauseMenu.kill();
	this.pauseMenu.anchor.setTo(0.5, 0.5);
	this.pauseKey = this.game.input.keyboard.addKey(27);
	this.pauseKey.onDown.add(this.pauseGame, {game: this, context: 'key'});
	this.menuKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
	this.menuKey.onDown.add(this.returnToMenu, this);
	this.restartKey = this.game.input.keyboard.addKey(Phaser.Keyboard.G);
	this.restartKey.onDown.add(this.restartLevel, {game: this, context: 'key'});
	this.state.game.input.onDown.add(this.pauseGame, {game: this, context: 'mouse'});
  },
  
  update: function () {
   this.levelSetup.update();
  },
  
  render: function () {
   this.levelSetup.render();
  },
  
  pauseGame: function() {
		if(!this.game.state.game.paused) {
			if(this.context === 'key') {
				this.game.pauseMenu = this.game.add.image(this.game.camera.x + (this.game.camera.width / 2), this.game.camera.y + (this.game.camera.height / 2), 'pauseMenu');
				this.game.pauseMenu.anchor.setTo(0.5, 0.5);
				this.game.state.game.paused = true;
			}
		}
		else {
			this.game.state.game.paused = false;
			this.game.pauseMenu.destroy();
		}
	},

	restartLevel: function() {
		if(this.context === 'key') {
			if(this.game.state.game.paused) {
				this.game.state.game.paused = false;
				this.game.levelSong.destroy();
				this.game.game.state.start('levelThree', true, false, ['mainSong', 0, 0.75]);
			}
		}
		else {
			this.game.levelSong.destroy();
			this.game.game.state.start('levelThree', true, false, ['mainSong', 0, 0.75]);
		}
	},
	
	returnToMenu: function() {
		if(this.state.game.paused) {
			this.state.game.paused = false;
			this.levelSong.destroy();
			this.game.state.start('Menu', true, false, ['menuSong', 0, 1]);
		}
	},
};







},{"../entities/level_setup":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\level_setup.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\levelTwo.js":[function(require,module,exports){
/*
Level 2
*/
var LevelSetup = require('../entities/level_setup');

var levelTwo = function () { };

module.exports = levelTwo;

levelTwo.prototype = {
	
  init: function(params){
  	this.levelSong = this.game.add.audio(params[0]);
	this.levelSong.play('',params[1],params[2],true,true);
  },
	
  create: function () {
   this.levelSetup = new LevelSetup(this, 'level_two');
   this.pauseMenu = this.game.add.image(-2000, -2000, 'pauseMenu');
	this.pauseMenu.kill();
	this.pauseMenu.anchor.setTo(0.5, 0.5);
	this.pauseKey = this.game.input.keyboard.addKey(27);
	this.pauseKey.onDown.add(this.pauseGame, {game: this, context: 'key'});
	this.menuKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
	this.menuKey.onDown.add(this.returnToMenu, this);
	this.restartKey = this.game.input.keyboard.addKey(Phaser.Keyboard.G);
	this.restartKey.onDown.add(this.restartLevel, {game: this, context: 'key'});
	this.state.game.input.onDown.add(this.pauseGame, {game: this, context: 'mouse'});
  },
  
  update: function () {
   this.levelSetup.update();
  },
  
  render: function () {
   this.levelSetup.render();
  },
  
  pauseGame: function() {
		if(!this.game.state.game.paused) {
			if(this.context === 'key') {
				this.game.pauseMenu = this.game.add.image(this.game.camera.x + (this.game.camera.width / 2), this.game.camera.y + (this.game.camera.height / 2), 'pauseMenu');
				this.game.pauseMenu.anchor.setTo(0.5, 0.5);
				this.game.state.game.paused = true;
			}
		}
		else {
			this.game.state.game.paused = false;
			this.game.pauseMenu.destroy();
		}
	},

	restartLevel: function() {
		if(this.context === 'key') {
			if(this.game.state.game.paused) {
				this.game.state.game.paused = false;
				this.game.levelSong.destroy();
				this.game.game.state.start('levelTwo', true, false, ['mainSong', 0, 0.75]);
			}
		}
		else {
			this.game.levelSong.destroy();
			this.game.game.state.start('levelTwo', true, false, ['mainSong', 0, 0.75]);
		}
	},
	
	returnToMenu: function() {
		if(this.state.game.paused) {
			this.state.game.paused = false;
			this.levelSong.destroy();
			this.game.state.start('Menu', true, false, ['menuSong', 0, 1]);
		}
	},
};







},{"../entities/level_setup":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\level_setup.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  init: function(params){
  	
	this.menuSong = this.game.add.audio(params[0]);
	this.menuSong.play('',params[1],params[2],true,true);
	this.hoverClick = this.game.add.audio('hoverClick');
	this.downClick = this.game.add.audio('downClick');
  },
  
  create: function () {
	this.diff = 768;
	this.butDiff = 0;
	this.creditsSpeed = 16;
	this.butSpeed = 32;
	this.creditsOpening = false;
	this.creditsClosing = false;
	this.buttonsLeaving = false;
	this.buttonsComing = false;
	this.mainButtonsUp = true;
	
	this.bg = this.game.add.sprite(-4500, -500, 'earthNight');
	this.bg2 = this.game.add.sprite(-12500, -500, 'earthNight');
    
	//Main Screen
    this.title = this.add.image(this.game.camera.x + (this.game.camera.width / 2), this.game.camera.y + (this.game.camera.height / 2) + 32, 'title');
    this.title.anchor.setTo(0.5, 0.5);
    
    this.startButton = this.addButton(0, 'startGameButton', this.changeToLevel1, this);
	this.formatButton(this.startButton);
  	
  	this.missionSelectButton = this.addButton(1, 'missionSelectButton', this.switchButtons, this);
	this.formatButton(this.missionSelectButton);
  	
  	this.creditsButton = this.addButton(2, 'creditsButton', this.doCredits, {game: this, button: 'creditsButton'});
	this.formatButton(this.creditsButton);
	
	//Level Select
	this.level1Button = this.addButton(-1, 'level1Button', this.changeToLevel1, this);
	this.formatButton(this.level1Button);
  	
	this.level2Button = this.addButton(0, 'level2Button', this.changeToLevel2, this);
	this.formatButton(this.level2Button);
	
	this.level3Button = this.addButton(1, 'level3Button', this.changeToLevel3, this);
	this.formatButton(this.level3Button);
	
	this.backButton = this.addButton(2, 'backButton', this.switchButtons, this);
	this.formatButton(this.backButton);

	this.credits = this.add.image(this.game.camera.x + (this.game.camera.width / 2) - 360, this.game.camera.y + (this.game.camera.height / 2) - 256 + this.diff, 'credits');
	this.credits.kill();
	this.creditsCloseButton = this.addButton(10, 'closeButton', this.doCredits, {game: this, button: 'closeCreditsButton'});
	this.creditsCloseButton.x = this.credits.x + this.credits.width - 32;
	this.creditsCloseButton.y = this.credits.y;
	this.creditsCloseButton.onInputOver.add(this.playHoverClick, this);
	this.creditsCloseButton.onInputDown.add(this.playDownClick, this);
  },

  addButton: function(button, img, func, context){
    return this.add.button(this.game.camera.x + (this.game.camera.width / 2), this.game.camera.y + (this.game.camera.height / 2) + (button) * 90, img, func, context, 1, 0, 2);

  },
  
  draw: function(){
  },
  
  changeToLevel1: function(){
	if(!this.credits.alive) {
		this.menuSong.destroy();
		var params = ['mainSong', 0, 0.75];
		this.playDownClick();
		this.game.state.start('levelOne', true, false, params);
	}
  },
  
  changeToLevel2: function(){
	if(!this.credits.alive) {
		this.menuSong.destroy();
		var params = ['mainSong', 0, 0.75];
		this.playDownClick();
		this.game.state.start('levelTwo', true, false, params);
	}
  }, 
  
  changeToLevel3: function(){
	if(!this.credits.alive) {
		this.menuSong.destroy();
		var params = ['mainSong', 0, 0.75];
		this.playDownClick();
		this.game.state.start('levelThree', true, false, params);
	}
  }, 
/* 
  changeToMenu: function(){
	if(!this.credits.alive) {
		this.menuSong.destroy();
		this.playDownClick();
		this.game.state.start('Menu');
	}
  },
*/ 
  doCredits: function() {
	this.game.playDownClick();
	if(!this.game.credits.alive && !this.game.creditsOpening && !this.game.creditsClosing && this.button === 'creditsButton') {
	  this.game.credits.revive();
	  this.game.diff = 768;
	  this.game.creditsOpening = true;
   }
   else if(this.game.credits.alive && !this.game.creditsClosing && !this.game.creditsOpening && this.button === 'closeCreditsButton') {
	  this.game.creditsClosing = true;
	  this.game.killReviveButtons('revive');
   }
  },
  
  formatButton: function(button) {
	button.anchor.setTo(0.5, 0.5);
	button.onInputOver.add(this.playHoverClick, this);
	button.onInputDown.add(this.playDownClick, this);
  },
  
  killReviveButtons: function(key) {
	if(key === 'kill') {
		this.startButton.kill();
		this.missionSelectButton.kill();
		this.creditsButton.kill();
	}
	else if(key === 'revive') {
		this.startButton.revive();
		this.missionSelectButton.revive();
		this.creditsButton.revive();
	}
  },
  
  switchButtons: function() {
	this.playDownClick();
	if(!this.buttonsLeaving && this.mainButtonsUp === true) {
		this.butDiff = 0;
		this.buttonsLeaving = true;
	}
	else if(!this.buttonsComing && this.mainButtonsUp === false) {
		this.buttonsComing = true;
	}
  },
  
  /*
  changeState: function(state){
  	switch(state){
  		case 'game':
  			this.game.state.start('Game');
  			break;
  		case 'menu':
  			this.game.state.start('Menu');
  			break;
  		default:
  			break;
  	}
  },
  */
	update: function () {
		this.bg.x += 0.125;
		if(this.bg.x >= 0) {
			this.bg.x = -8000;
		}
		this.bg2.x += 0.125;
		if(this.bg2.x >= 0) {
			this.bg2.x = -8000;
		}
		if(this.creditsOpening === true) {	
		  this.diff -= this.creditsSpeed;
			if(this.diff <= 0) {
				this.killReviveButtons('kill');
				this.creditsOpening = false;
			}
		}
		else if(this.creditsClosing === true) {
		  this.diff += this.creditsSpeed;
			if(this.diff >= 768) {
				this.credits.kill();
				this.creditsClosing = false;
			}
		}
		this.credits.y = this.game.camera.y + (this.game.camera.height / 2) - 256 + this.diff;
		this.creditsCloseButton.x = this.credits.x + this.credits.width - 32;
		this.creditsCloseButton.y = this.credits.y;
		
		if(this.buttonsLeaving === true) {
			this.butDiff -= this.butSpeed;
			if(this.butDiff <= -768) {
				this.buttonsLeaving = false;
				this.mainButtonsUp = false;
			}
		}
		else if(this.buttonsComing === true) {
			this.butDiff += this.butSpeed;
			if(this.butDiff >= 0) {
				this.buttonsComing = false;
				this.mainButtonsUp = true;
			}
		}
		this.startButton.x = this.game.camera.x + (this.game.camera.width / 2) + this.butDiff;
		this.missionSelectButton.x = this.game.camera.x + (this.game.camera.width / 2) + this.butDiff;
		this.creditsButton.x = this.game.camera.x + (this.game.camera.width / 2) + this.butDiff;
		this.level1Button.x = this.startButton.x + 768;
		this.level2Button.x = this.startButton.x + 768;
		this.level3Button.x = this.startButton.x + 768;
		this.backButton.x = this.startButton.x + 768;
		
	},
	
	playHoverClick: function() {
		this.hoverClick.play();
	},
	
	playDownClick: function() {
		this.downClick.play();
	},

};

},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  game = null;
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(640, 360, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
	
	//Load Spritesheets
	this.load.spritesheet('core', 'assets/images/coreSheet.png', 64, 64); 
	this.load.spritesheet('thruster', 'assets/images/thrusterSheet.png', 64, 64);
	this.load.spritesheet('gun', 'assets/images/gunSheet.png', 64, 64);
	this.load.spritesheet('hacker', 'assets/images/hackSheet.png', 64, 64);
	this.load.spritesheet('shieldButton', 'assets/images/shieldButtonSheet.png', 256, 82);
	this.load.spritesheet('solarPanelButton', 'assets/images/solarPanelButtonSheet.png', 256, 82);
	this.load.spritesheet('thrusterButton', 'assets/images/thrusterButtonSheet.png', 256, 82);
	this.load.spritesheet('gunButton', 'assets/images/gunButtonSheet.png', 256, 82);
	this.load.spritesheet('hackButton', 'assets/images/hackButtonSheet.png', 256, 82);
	this.load.spritesheet('hackable', 'assets/images/hackableSheet.png', 64, 64);
	this.load.spritesheet('shopButton', 'assets/images/shopButtonSheet.png', 32, 32);
	this.load.spritesheet('closeButton', 'assets/images/closeButtonSheet.png', 32, 32);
	
	//Load Images
	this.load.image('earthNight', 'assets/images/bg_earthNightSmall.jpg');
	this.load.image('credits', 'assets/images/credits.png');
	this.load.image('bullet', 'assets/images/bullet.png');
	this.load.image('shield', 'assets/images/shield.png');
	this.load.image('solarPanel', 'assets/images/solarPanel.png');
	this.load.image('asteroid', 'assets/images/asteroid.png');
	this.load.image('shopPanel', 'assets/images/shopBackPanel.png');
	this.load.image('warning', 'assets/images/warning.png');
	this.load.image('be', 'assets/images/be.png');
	this.load.image('selected', 'assets/images/selected.png');
	this.load.image('pauseMenu', 'assets/images/pauseMenu.png');
	this.load.image('missionPrompt', 'assets/images/missionPrompt.png');
    
	//Load Fonts
	this.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');
	
	//Load JSON Files
	this.load.atlasJSONHash('connections', 'assets/images/connections.png', 'assets/json/connections.json');
	this.load.atlasJSONHash('connections', 'assets/images/connections.png', 'assets/json/connections.json');
	this.load.atlasJSONHash('helpButton', 'assets/images/helpButtonSheet.png', 'assets/json/help_button.json');
	this.load.atlasJSONHash('arrowButton', 'assets/images/arrowButtonSheet.png', 'assets/json/arrow_button.json');
	this.load.physics('module_physics', 'assets/json/module_physics.json');
	this.load.physics('asteroidPolygon', 'assets/json/asteroidPolygon.json');
	this.load.text('tutorial_text', 'assets/json/tutorial_text.json');
	//Load Level JSON Files
	this.load.text('level_one', 'assets/json/level_one.json');
	this.load.text('level_two', 'assets/json/level_two.json');
	this.load.text('level_three', 'assets/json/level_three.json');
	
	//Load Sound Effects
	this.load.audio('downClick', 'assets/sound/downClick.ogg');
	this.load.audio('hoverClick', 'assets/sound/hoverClick.ogg');
	this.load.audio('error', 'assets/sound/error.ogg');
	this.load.audio('cashRegister', 'assets/sound/cashRegister.ogg');
	this.load.audio('gun', 'assets/sound/gun.ogg');
	this.load.audio('hacking', 'assets/sound/hacking.ogg');
	this.load.audio('moduleImpact', 'assets/sound/moduleImpact.ogg');
	this.load.audio('moduleConnect', 'assets/sound/moduleConnect.ogg');
	this.load.audio('modulePower', 'assets/sound/modulePower.ogg');
	this.load.audio('thrusterLoop', 'assets/sound/thrusterLoop.ogg');
	
	this.load.text('tutorial_text', 'assets/json/tutorial_text.json');
	// this.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');
	this.load.atlasJSONHash('helpButton', 'assets/images/helpButtonSheet.png', 'assets/json/help_button.json');
	this.load.atlasJSONHash('arrowButton', 'assets/images/arrowButtonSheet.png', 'assets/json/arrow_button.json');
	
	//Menu Images & Sheets
	this.load.spritesheet('startGameButton', 'assets/images/startGameButtonSheet.png', 256, 82);
	this.load.spritesheet('missionSelectButton', 'assets/images/missionSelectButtonSheet.png', 256, 82);
	this.load.spritesheet('creditsButton', 'assets/images/creditsButtonSheet.png', 256, 82);
	this.load.spritesheet('level1Button', 'assets/images/level1ButtonSheet.png', 256, 82);
	this.load.spritesheet('level2Button', 'assets/images/level2ButtonSheet.png', 256, 82);
	this.load.spritesheet('level3Button', 'assets/images/level3ButtonSheet.png', 256, 82);
	this.load.spritesheet('backButton', 'assets/images/backButtonSheet.png', 256, 82);
	this.load.image('title', 'assets/images/title.png');

	
	
	//Load Music
	this.load.audio('menuSong', 'assets/sound/Yet Another.ogg');
	this.load.audio('mainSong', 'assets/sound/Top (down) Night.ogg');

  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      var params = ['menuSong', 0, 1];
      this.game.state.start('Menu', true, false, params);
      //this.game.state.start(playerState.currentLevel); // jshint ignore:line
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\ui\\MissionPrompt.js":[function(require,module,exports){
/*
Defines a hackable object.
*/

var MissionPrompt = function (state) {
   Phaser.Sprite.call(this, state.game, 0, 0, 'missionPrompt');
   state.game.add.existing(this);
	//store state
	this.state = state;
	this.cam = this.state.game.camera;
   this.anchor.setTo(0.5, 0.5);
   //add description text
   var style = { font: '26px Arial', fill: '#333333', align: 'center' };
   this.descriptionText = state.game.add.text(0, 0, 'No description Entered', style);
   this.descriptionText.anchor.setTo(0.5, 0.5);
   this.addChild(this.descriptionText);
   this.descriptionText.x = 0;
   this.descriptionText.y = -14;
   //add value progress text
	style = { font: '26px Arial', fill: '#FFFF66', align: 'center' };
   this.progressText = state.game.add.text(0, 0, '0/0', style);
   this.progressText.anchor.setTo(0.5, 0.5);
   this.addChild(this.progressText);
   this.progressText.x = 0;
   this.progressText.y = 14;
};

MissionPrompt.prototype = Object.create(Phaser.Sprite.prototype);
MissionPrompt.prototype.constructor = MissionPrompt;

//functions for changing the mission prompt text
MissionPrompt.prototype.setDescription = function(text) {
	this.descriptionText.text = text;
};

MissionPrompt.prototype.setProgress = function(text) {
	this.progressText.text = text;
};

/**
 * Automatically called by World.update
 */
MissionPrompt.prototype.update = function() {
	this.x = this.cam.x + this.cam.width/2;
	this.y = this.cam.y + 15*this.cam.height/16;
	this.bringToTop();
};

module.exports = MissionPrompt;
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\ui\\ProgressBar.js":[function(require,module,exports){
//NOTE: DON'T USE this code to create a ProgressBar. Instead, use the UIBuilder object and call buildProgressBar

var ProgressBar = function(setType, setMaxValue, setGraphics, setRenderables) {
	this.type = setType; //Two types, "growing" (starts at 0, triggers event when full) 
						 //and "shrinking" (starts full, triggers at 0)
	this.bgBorderSize = 2;			//default size of background border
	this.bgBorderColor = 0xAAAAAA;	//default color of background border
	this.bgColor = 0x888888;		//default color of background
	this.paddingHoriz = 5;			//default sum of padding on left and right side inner value bar
	this.paddingVert = 5;			//default sum (i.e. half on each side) of vertical padding of inner value bar
	this.valueBorderSize = 1;		//default size of value border
	this.valueBorderColor = 0x8888FF; //default color of value border
	this.valueColor = 0x000099;		//default color of inner value bar
	this.x = null;
	this.y = null;
	this.width = null;
	this.height = null;
	this.maxValue = setMaxValue;
	this.graphics = setGraphics; //store graphics class (used to draw bar)
	this.renderables = setRenderables;
	
	this.onEvent = function() {}; //overwrite this function to make whatever you want happen when progressBar reaches limit
	
	//switch(this.type) {
	//case 'growing' : 
	if(setType === 'growing') {
		this.value = 0;
		//tryTrigger is called automatically when you add/subtract value, and will trigger the onEvent() function
		this.tryTrigger = function() {
			if(this.value >= this.maxValue) {
				this.onEvent();
			}
		};
		//break;
	}
	else if(setType === 'shrinking') {
	//case 'shrinking' :
		this.value = this.maxValue;
		this.tryTrigger = function() {
			if(this.value <= 0) {
				this.onEvent();
			}
		};
	}
};

ProgressBar.prototype.constructor = ProgressBar;

ProgressBar.prototype.destroy = function() {
	this.graphics.clear();
	this.renderables.unsubscribe(this);
};

//To subtract value, just use negative numbers as argument i.e. foo.addValue(-5);
ProgressBar.prototype.addValue = function (addThis) {
	this.value += addThis;
	if(this.value > this.maxValue) {
		this.value = this.maxValue;
	}
	if(this.value < 0) {
		this.value = 0;
	}
	this.tryTrigger();
};

//Sets the location where progress bar is rendered
ProgressBar.prototype.setLocation = function(setX, setY) {
	this.x = setX;
	this.y = setY;
};

//Sets the size of the progress bar
ProgressBar.prototype.setSize = function(setWidth, setHeight) {
	this.width = setWidth;
	this.height = setHeight;
};

ProgressBar.prototype.setStyle = function(bgBorderSize, bgBorderColor, bgColor, paddingHoriz, paddingVert, valueBorderSize, valueBorderColor, valueColor) {
	this.bgBorderSize = bgBorderSize;
	this.bgBorderColor = bgBorderColor;
	this.bgColor = bgColor;
	this.paddingHoriz = paddingHoriz;
	this.paddingVert = paddingVert;
	this.valueBorderSize = valueBorderSize;
	this.valueBorderColor = valueBorderColor;
	this.valueColor = valueColor;
};

//update for progress bar, called just before drawing progress bar
//Overwrite this function if desired
ProgressBar.prototype.update = function() {};

//Renders progressBar
ProgressBar.prototype.render = function() {
	this.update();
	this.graphics.clear();
	//Draw background of bar
	this.graphics.lineStyle(this.bgBorderSize, this.bgBorderColor, 1); //sets border color and size
	this.graphics.beginFill(this.bgColor); //sets color of background fill
	this.graphics.drawRect(this.x-this.width/2, this.y-this.height/2, this.width, this.height);
	this.graphics.endFill();
	//Draw value of bar
	var percentage = this.value / this.maxValue;
	var barWidth = this.width - this.paddingHoriz;
	var barHeight = this.height - this.paddingVert;
	this.graphics.lineStyle(this.valueBorderSize, this.valueBorderColor, 1);
	this.graphics.beginFill(this.valueColor);
	this.graphics.drawRect(this.x-(barWidth/2), this.y-(barHeight/2), barWidth*percentage, barHeight);
	this.graphics.endFill();
};

module.exports = ProgressBar;
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\ui\\UIBuilder.js":[function(require,module,exports){
var ProgressBar = require('./ProgressBar');
var Banner = require('./banner');

var UIBuilder = function(setGameState, setRenderables) {
	//Ensure that cannot create multiple instances of this class
	if(UIBuilder.prototype.exists) {
		return UIBuilder.prototype.existingReference;
	}
	
	this.gameState = setGameState;
	this.renderables = setRenderables;
	//Create and store a graphics object (used for stuff like drawing rectangles)
	UIBuilder.prototype.exists = true;
	UIBuilder.prototype.existingReference = this;
};

UIBuilder.prototype.constructor = UIBuilder;
//These var's help create the singleton functionality
UIBuilder.prototype.exists = false;
UIBuilder.prototype.existingReference = null;

//Use this function to create a progress bar
//Usage: type: can be "growing" or "shrinking", this will effect if bar starts at 0 and goes up or vis versa
//		 maxValue: sets the max value of the progress bar, i.e. using 100 creates a bar from 0 to 100
//		 x,y: sets location
//		 DON'T FORGET to overwrite the onEvent() function for the progress bar after creating it
//			-onEvent() is automatically called when bar fills/shrinks past limit (depending on bar type)
UIBuilder.prototype.buildProgressBar = function(type, x, y, width, height, maxValue) {
	//create and format new prog bar
	var graphics = this.gameState.game.add.graphics(0,0);
	var newProgBar = new ProgressBar(type, maxValue, graphics, this.renderables);
	newProgBar.setLocation(x,y);
	newProgBar.setSize(width, height);
	//subscribe to 'renderables' so that render() is called automatically
	this.renderables.subscribe(newProgBar);
	return newProgBar;
};

UIBuilder.prototype.buildBanner = function(xRatio, yRatio, texts) {
   var graphics = this.gameState.game.add.graphics(0, 0);
   var newBanner = new Banner(this.gameState, xRatio, yRatio, texts, graphics, this.renderables);
   this.renderables.subscribe(newBanner);
   return newBanner;
};

module.exports = UIBuilder;
},{"./ProgressBar":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\ui\\ProgressBar.js","./banner":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\ui\\banner.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\ui\\banner.js":[function(require,module,exports){
var Utils = require('../utils');

//NOTE: DON'T USE this code to create a Banner. Instead, use the UIBuilder object and call buildBanner
var Banner = function(state, xRatio, yRatio, textJSON, graphics, renderables) {
   this.bgBorderSize = 6;			//default size of background border
	this.bgBorderColor = 0xffffff;	//default color of background border
	this.bgColor = 0x4a4a4a;		//default color of background
   this.shadowOffsetX = 3;
   this.shadowOffsetY = 3;
   this.shadowColor = 'rgba(0,0,0,0.9)';
   this.shadowBlur = 5;
   this.normalText = '#ffffff';
   this.highlightText = '#00ff00';
   this.textWrapPadding = 10;
   this.offScreenPadding = -200;
   this.textJSON = textJSON;
   this.state = state;
   this.game = state.game;
   this.cam = this.game.camera;
   this.sm = this.state.soundManager;
   this.xRatio = xRatio;
   this.yRatio = yRatio;
   this.graphics = graphics;
   this.renderables = renderables;
   this.width = 400;
   this.height = 200;
   this.index = 0;
   this.x = 0;
   this.hideBuffer = -50;
   this.hideHeight = -this.height - this.hideBuffer;
   this.y = this.cam.y - this.cam.height / 2 - this.hideHeight;
   this.slideY = this.hideHeight;
   this.goalY = this.y;
   this.slideRate = 0.2;
   this.visible = false;
   // add buttons
   this.rightButton = this.game.add.button(0, 0, 'arrowButton', this.nextIndex, this, 1, 0, 2);
	this.rightButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.rightButton.onInputDown.add(this.sm.playDownClick, this.sm);
   this.leftButton = this.game.add.button(0, 0, 'arrowButton', this.prevIndex, this, 1, 0, 2);
	this.leftButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.leftButton.onInputDown.add(this.sm.playDownClick, this.sm);
   this.leftButton.scale.x = -1;
   this.group = new Phaser.Group(this.game);
   this.group.add(this.graphics);
   this.group.add(this.rightButton);
   this.group.add(this.leftButton);
   this.addTexts();
   this.game.world.bringToTop(this.group);
   this.debug = false;
};

Banner.prototype.constructor = Banner;

Banner.prototype.destroy = function() {
	this.graphics.clear();
	this.renderables.unsubscribe(this);
};

Banner.prototype.update = function() {
   // TODO: add layer groups to other things
   this.game.world.bringToTop(this.group);
   // my pos
   this.x = this.cam.x + this.cam.width * this.xRatio;
   if (this.visible) {
      this.goalY = this.cam.height / 2;
   } else {
      this.goalY = this.hideHeight;
   }
   this.slideY = Utils.lerp(this.slideY, this.goalY, this.slideRate);
   if (this.debug) { console.log('this.cam.y:', this.cam.y, 'this.slideY:', this.slideY, 'this.y:', this.y); }
   this.y = this.cam.y + this.slideY;
   // text pos
   var curText = this.textObjs[this.index];
   curText.x = this.x;
   curText.y = this.y;
   // button pos
   this.rightButton.x = this.x + this.width / 2 + this.rightButton.width / 2;
   this.rightButton.y = this.y - this.rightButton.height / 2;
   this.leftButton.x = this.x - this.width / 2 + this.leftButton.width / 2;
   this.leftButton.y = this.y - this.leftButton.height / 2;
};

Banner.prototype.addTexts = function() {
   if (!this.textObs) {
      this.textObjs = [];
   }
   var textDefs = JSON.parse(this.game.cache.getText(this.textJSON));
   var textArray = textDefs['text'];
   var textColors = textDefs['colors'];
   for (var i = 0; i < textArray.length; i++) {
      var text = textArray[i];
      var newText = this.game.add.text(this.offScreenPadding, this.offScreenPadding, text);
      newText.font = 'Roboto';
      newText.fontSize = 24;
      newText.align = 'center';
      newText.fill = this.normalText;
      newText.wordWrap = true;
      newText.wordWrapWidth = this.width - this.textWrapPadding;
      newText.anchor.set(0.5);
      newText.setShadow(this.shadowOffsetX, this.shadowOffsetY, this.shadowColor, this.shadowBlur);
      var newColors = textColors[i];
      for (var j = 0; j < newColors.length; j++) {
         newText.addColor(this.highlightText, newColors[j]);
         j++;
         newText.addColor(this.normalText, newColors[j]);
      }
      this.textObjs.push(newText);
      this.group.add(newText);
   }
};

Banner.prototype.render = function() {
	this.update();
	this.graphics.clear();
	//Draw background
	this.graphics.lineStyle(this.bgBorderSize, this.bgBorderColor, 1); //sets border color and size
	this.graphics.beginFill(this.bgColor); //sets color of background fill
	this.graphics.drawRect(this.x-this.width/2, this.y-this.height/2, this.width, this.height);
	this.graphics.endFill();
};

Banner.prototype.show = function() {
   // this.goalY = this.cam.y + this.cam.height * this.yRatio;
   this.visible = true;
};

Banner.prototype.hide = function() {
   // this.goalY = this.hideHeight;
   this.visible = false;
};

Banner.prototype.toggle = function() {
  if (this.visible) {
     this.hide();
  } else {
     this.show();
  }  
};

Banner.prototype.hideCurText = function() {
  this.textObjs[this.index].x = this.textObjs[this.index].y = 0; 
};

Banner.prototype.nextIndex = function() {
   this.hideCurText();
   this.index++;
   if (this.index >= this.textObjs.length) {
      this.index = 0;
   }
};

Banner.prototype.prevIndex = function() {
   this.hideCurText();
   this.index--;
   if (this.index < 0) {
      this.index = this.textObjs.length - 1;
   }
};

module.exports = Banner;









},{"../utils":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\utils.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\ui\\shop.js":[function(require,module,exports){
var Shop = function(state) {
   // initial variables
	this.state = state;
   this.game = this.state.game;
   this.cam = this.game.camera;
   this.sm = this.state.soundManager;
   this.mouse = this.state.mouse;
   this.money = 500;
   this.shopSpeed = 1;
   this.diff = 0;
   this.newModuleSpeed = 1500;
   // create button
   this.shopButton = this.game.add.button(this.game.camera.x + this.game.camera.width - 48, 16, 'shopButton', this.useShopButton, this, 1, 0, 2);
	this.shopButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.shopButton.onInputDown.add(this.sm.playDownClick, this.sm);
	this.shopKey = this.game.input.keyboard.addKey(Phaser.Keyboard.R);
	this.shopKey.onDown.add(this.useShopButton, this);
   // create text
   this.moneyText = this.game.add.text(this.shopButton.x - 8, this.shopButton.y + 48, this.money);
   this.moneyText.font = 'VT323';
   this.moneyText.fontSize = 24;
   this.moneyText.fill = '#ffffff';
   this.moneyText.text = this.money;
	this.be = this.game.add.image(this.moneyText.x + this.moneyText.width + 8, this.moneyText.y, 'be');
   // create sounds
   this.cashRegister = this.game.add.audio('cashRegister');
   this.cashRegister.allowMultiple = true;
   this.error = this.game.add.audio('error');
   // add controls
   this.addMoneyKey = this.game.input.keyboard.addKey(Phaser.Keyboard.K);
	this.addMoneyKey.onDown.add(this.debugAddMoney, this);
   // create buttons
	this.shopPanel = this.game.add.image(this.cam.x + this.cam.width + 256 + 16, this.cam.y + 16, 'shopPanel');
	this.shopPanel.kill();
	this.shieldButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 1), 'shieldButton', this.purchaseModule, {state: this, key: 'shield'}, 1, 0, 2);
	this.formatButton(this.shieldButton);
	this.solarPanelButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 2), 'solarPanelButton', this.purchaseModule, {state: this, key: 'solarPanel'}, 1, 0, 2);
	this.formatButton(this.solarPanelButton);
	this.thrusterButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 3), 'thrusterButton', this.purchaseModule, {state: this, key: 'thruster'}, 1, 0, 2);
	this.formatButton(this.thrusterButton);
	this.gunButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 4), 'gunButton', this.purchaseModule, {state: this, key: 'gun'}, 1, 0, 2);
	this.formatButton(this.gunButton);
	this.hackButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 5), 'hackButton', this.purchaseModule, {state: this, key: 'hacker'}, 1, 0, 2);
	this.formatButton(this.hackButton);
   /*
	this.shopButton = this.game.add.button(this.cam.x + this.cam.width - 48, 16, 'shopButton', this.useShopButton, this, 1, 0, 2);
	this.shopButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.shopButton.onInputDown.add(this.sm.playDownClick, this.sm);
   */
};

Shop.prototype.constructor = Shop;

Shop.prototype.update = function() {
   // find diff
	if(this.shopMenuOpening === true) {	
      this.diff += this.shopSpeed * this.game.time.elapsed;
		if(this.diff >= 276) {
			this.shopMenuOpening = false;
			this.addShopButtons();
		}
	}
	else if(this.shopMenuClosing === true) {
      this.diff -= this.shopSpeed * this.game.time.elapsed;
		if(this.diff <= 0) {
			this.shopPanel.kill();
			this.shopMenuClosing = false;
		}
	}
   // update opening button position
   this.shopButton.x = this.cam.x + this.cam.width - 48 - this.diff;
	this.shopButton.y = this.cam.y + 16;
   // update text position
   this.moneyText.x = this.shopButton.x - 16;
	this.moneyText.y = this.shopButton.y + 48;
	this.be.x = this.moneyText.x + this.moneyText.width + 8;
	this.be.y = this.moneyText.y;
   // update purchasing button position
   this.shopPanel.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.shopPanel.y = this.cam.y + 16;
	this.shieldButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.shieldButton.y = this.cam.y + 70 + (86 * 0);
	this.solarPanelButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.solarPanelButton.y = this.cam.y + 70 + (86 * 1);
	this.thrusterButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.thrusterButton.y = this.cam.y + 70 + (86 * 2);
	this.gunButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.gunButton.y = this.cam.y + 70 + (86 * 3);
	this.hackButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.hackButton.y = this.cam.y + 70 + (86 * 4);
};

Shop.prototype.purchaseModule = function() {
   var randY = this.state.game.rnd.integerInRange(100, this.state.cam.height - 100);
   if(this.key === 'shield' && this.state.mouse.x > this.state.shieldButton.x && this.state.mouse.x < this.state.shieldButton.x + 256 && this.state.mouse.y > this.state.shieldButton.y && this.state.mouse.y < this.state.shieldButton.y + 82) {
      if(this.state.money >= 45) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 45;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'solarPanel' && this.state.mouse.x > this.state.solarPanelButton.x && this.state.mouse.x < this.state.solarPanelButton.x + 256 && this.state.mouse.y > this.state.solarPanelButton.y && this.state.mouse.y < this.state.solarPanelButton.y + 82) {
      if(this.state.money >= 105) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 105;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'thruster' && this.state.mouse.x > this.state.thrusterButton.x && this.state.mouse.x < this.state.thrusterButton.x + 256 && this.state.mouse.y > this.state.thrusterButton.y && this.state.mouse.y < this.state.thrusterButton.y + 82) {
      if(this.state.money >= 90) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 90;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'gun' && this.state.mouse.x > this.state.gunButton.x && this.state.mouse.x < this.state.gunButton.x + 256 && this.state.mouse.y > this.state.gunButton.y && this.state.mouse.y < this.state.gunButton.y + 82) {
      if(this.state.money >= 120) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 120;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'hacker' && this.state.mouse.x > this.state.hackButton.x && this.state.mouse.x < this.state.hackButton.x + 256 && this.state.mouse.y > this.state.hackButton.y && this.state.mouse.y < this.state.hackButton.y + 82) {
      if(this.state.money >= 200) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 200;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   this.state.moneyText.text = this.state.money; 
};

Shop.prototype.addModule = function (x, y, key) {
   var newModule = this.state.moduleBuilder.build(key, x, y, true);
   newModule.cube.body.moveLeft(this.newModuleSpeed);
};

Shop.prototype.addShopButtons = function() {
   this.shieldButton.revive();
   this.solarPanelButton.revive();
   this.thrusterButton.revive();
   this.gunButton.revive();
   this.hackButton.revive(); 
};

Shop.prototype.formatButton = function(button) {
   button.onInputOver.add(this.sm.playHoverClick, this.sm);
   button.onInputDown.add(this.sm.playDownClick, this.sm);
   button.kill();
};

Shop.prototype.addMoney = function(amt) {
   this.money += amt;
   this.moneyText.text = this.money;
   this.cashRegister.play();
};

Shop.prototype.debugAddMoney = function() {
  this.addMoney(1000); 
};

Shop.prototype.useShopButton = function() {
	this.sm.playDownClick();
   if(!this.shopPanel.alive && !this.shopMenuOpening && !this.shopMenuClosing) {
      this.shopPanel.revive();
      this.diff = 0;
      this.shopMenuOpening = true;
   }
   else if(this.shopPanel.alive&& !this.shopMenuClosing && !this.shopMenuOpening) {
      this.shopMenuClosing = true;
   }
};

module.exports = Shop;







},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\utils.js":[function(require,module,exports){
/*
Collection of utility functions.
*/

var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
    distance: function(x1, y1, x2, y2) {
       return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    },
    lerp: function(a, b, t) {
       if (t < 0 || t > 1) {
          console.log('bad range for Utils.lerp(), must be between 0 and 1');
          return 0;
       }
       return a + t * (b - a);
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlc1xcYnJvd3NlcmlmeVxcbm9kZV9tb2R1bGVzXFxicm93c2VyLXBhY2tcXF9wcmVsdWRlLmpzIiwic3JjL2pzL21haW4uanMiLCJzcmMvanMvZWZmZWN0cy9CaW5hcnlQYXJ0aWNsZS5qcyIsInNyYy9qcy9lZmZlY3RzL0VtaXR0ZXIuanMiLCJzcmMvanMvZW50aXRpZXMvQnVsbGV0LmpzIiwic3JjL2pzL2VudGl0aWVzL01vZHVsZS5qcyIsInNyYy9qcy9lbnRpdGllcy9Nb2R1bGVCdWlsZGVyLmpzIiwic3JjL2pzL2VudGl0aWVzL2FzdGVyb2lkcy5qcyIsInNyYy9qcy9lbnRpdGllcy9jaGVhdGluZy5qcyIsInNyYy9qcy9lbnRpdGllcy9jdWJlLmpzIiwic3JjL2pzL2VudGl0aWVzL2N1YmVfZ3JvdXAuanMiLCJzcmMvanMvZW50aXRpZXMvZW5lbXlfYWkuanMiLCJzcmMvanMvZW50aXRpZXMvaGVscGVyLmpzIiwic3JjL2pzL2VudGl0aWVzL2xldmVsX3NldHVwLmpzIiwic3JjL2pzL2VudGl0aWVzL21vdXNlLmpzIiwic3JjL2pzL2VudGl0aWVzL3NvdW5kX21hbmFnZXIuanMiLCJzcmMvanMvZW50aXRpZXMvd2FybmluZy5qcyIsInNyYy9qcy9mdW5jdGlvbkFjY2Vzcy9SZW5kZXJhYmxlcy5qcyIsInNyYy9qcy9saWJzL2phdmFzY3JpcHQtYXN0YXIvYXN0YXIuanMiLCJzcmMvanMvc3RhdGVzL2Jvb3QuanMiLCJzcmMvanMvc3RhdGVzL2xldmVsT25lLmpzIiwic3JjL2pzL3N0YXRlcy9sZXZlbFRocmVlLmpzIiwic3JjL2pzL3N0YXRlcy9sZXZlbFR3by5qcyIsInNyYy9qcy9zdGF0ZXMvbWVudS5qcyIsInNyYy9qcy9zdGF0ZXMvcHJlbG9hZGVyLmpzIiwic3JjL2pzL3N0YXRlcy9zcGxhc2guanMiLCJzcmMvanMvdWkvTWlzc2lvblByb21wdC5qcyIsInNyYy9qcy91aS9Qcm9ncmVzc0Jhci5qcyIsInNyYy9qcy91aS9VSUJ1aWxkZXIuanMiLCJzcmMvanMvdWkvYmFubmVyLmpzIiwic3JjL2pzL3VpL3Nob3AuanMiLCJzcmMvanMvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9WQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNTZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDak9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIGdhbWUgPSBuZXcgUGhhc2VyLkdhbWUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdoLCBQaGFzZXIuQVVUTywgJ2F0aWMtZ2FtZScpO1xyXG5cclxud2luZG93LnBsYXllclN0YXRlID0ge1xyXG4gICAgY3VycmVudExldmVsOiAnTWVudSdcclxufTtcclxuXHJcbi8vICBUaGUgR29vZ2xlIFdlYkZvbnQgTG9hZGVyIHdpbGwgbG9vayBmb3IgdGhpcyBvYmplY3QsIHNvIGNyZWF0ZSBpdCBiZWZvcmUgbG9hZGluZyB0aGUgc2NyaXB0LlxyXG5XZWJGb250Q29uZmlnID0geyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuICAgIC8vICBUaGUgR29vZ2xlIEZvbnRzIHdlIHdhbnQgdG8gbG9hZCAoc3BlY2lmeSBhcyBtYW55IGFzIHlvdSBsaWtlIGluIHRoZSBhcnJheSlcclxuICAgIGdvb2dsZToge1xyXG4gICAgICBmYW1pbGllczogWydSb2JvdG86OmxhdGluJywgJ1ZUMzIzOjpsYXRpbiddXHJcbiAgICB9XHJcbn07XHJcblxyXG5nYW1lLnN0YXRlLmFkZCgnQm9vdCcsIHJlcXVpcmUoJy4vc3RhdGVzL2Jvb3QnKSk7XHJcbmdhbWUuc3RhdGUuYWRkKCdTcGxhc2gnLCByZXF1aXJlKCcuL3N0YXRlcy9zcGxhc2gnKSk7XHJcbmdhbWUuc3RhdGUuYWRkKCdQcmVsb2FkZXInLCByZXF1aXJlKCcuL3N0YXRlcy9wcmVsb2FkZXInKSk7XHJcbmdhbWUuc3RhdGUuYWRkKCdNZW51JywgcmVxdWlyZSgnLi9zdGF0ZXMvbWVudScpKTtcclxuZ2FtZS5zdGF0ZS5hZGQoJ2xldmVsT25lJywgcmVxdWlyZSgnLi9zdGF0ZXMvbGV2ZWxPbmUnKSk7XHJcbmdhbWUuc3RhdGUuYWRkKCdsZXZlbFR3bycsIHJlcXVpcmUoJy4vc3RhdGVzL2xldmVsVHdvJykpO1xyXG5nYW1lLnN0YXRlLmFkZCgnbGV2ZWxUaHJlZScsIHJlcXVpcmUoJy4vc3RhdGVzL2xldmVsVGhyZWUnKSk7XHJcblxyXG5nYW1lLnN0YXRlLnN0YXJ0KCdCb290Jyk7IiwidmFyIEJpbmFyeVBhcnRpY2xlID0gZnVuY3Rpb24oZ2FtZSwgdGFyZ2V0T2JqLCB4LCB5LCB0YXJPZmZzZXRYLCB0YXJPZmZzZXRZKSB7XHJcblx0dmFyIHN0eWxlID0ge2ZvbnQ6ICcyMHB4IFZUMzIzJywgZmlsbDogJyNGRkZGRkYnLCBhbGlnbjogJ2NlbnRlcid9O1xyXG5cdHZhciBieXRlU3ltYm9sID0gTWF0aC5yYW5kb20oKSA+PSAwLjUgPyAnMScgOiAnMCc7XHJcblx0UGhhc2VyLlRleHQuY2FsbCh0aGlzLCBnYW1lLCB4LCB5LCBieXRlU3ltYm9sLCBzdHlsZSk7XHJcblx0Z2FtZS5hZGQuZXhpc3RpbmcodGhpcyk7XHJcblx0dGhpcy50YXJnZXRPYmogPSB0YXJnZXRPYmo7XHJcblx0dGhpcy5zcGVlZCA9IDMuNjtcclxuXHR0aGlzLnRhck9mZnNldFggPSB0YXJPZmZzZXRYO1xyXG5cdHRoaXMudGFyT2Zmc2V0WSA9IHRhck9mZnNldFk7XHJcbn07XHJcblxyXG5CaW5hcnlQYXJ0aWNsZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBoYXNlci5UZXh0LnByb3RvdHlwZSk7XHJcbkJpbmFyeVBhcnRpY2xlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJpbmFyeVBhcnRpY2xlO1xyXG5cclxuQmluYXJ5UGFydGljbGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdC8vR2V0IGRlbHRhIHZlY3RvciB0byB0YXJnZXQgb2JqZWN0XHJcblx0dmFyIGRlbHRhID0gW3RoaXMudGFyZ2V0T2JqLnggKyB0aGlzLnRhck9mZnNldFggLSB0aGlzLngsIHRoaXMudGFyZ2V0T2JqLnkgKyB0aGlzLnRhck9mZnNldFkgLSB0aGlzLnldO1xyXG5cdC8vR2V0IGRpc3RhbmNlIGFuZCBjaGVjayBpZiB3ZSd2ZSByZWFjaGVkIHRhcmdldCBkaXN0YW5jZVxyXG5cdHZhciBkaXN0ID0gTWF0aC5zcXJ0KE1hdGgucG93KGRlbHRhWzBdLCAyKSArIE1hdGgucG93KGRlbHRhWzFdLCAyKSk7XHJcblx0aWYoZGlzdCA8PSB0aGlzLnNwZWVkKSB7XHJcblx0XHR0aGlzLmRlc3Ryb3koKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0Ly9Ob3JtYWxpemUgZGVsdGEgdmVjdG9yXHJcblx0ZGVsdGEgPSBbZGVsdGFbMF0vZGlzdCwgZGVsdGFbMV0vZGlzdF07XHJcblx0Ly9VcGRhdGUgcG9zaXRpb25cclxuXHR0aGlzLnggPSB0aGlzLnggKyB0aGlzLnNwZWVkKmRlbHRhWzBdO1xyXG5cdHRoaXMueSA9IHRoaXMueSArIHRoaXMuc3BlZWQqZGVsdGFbMV07XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJpbmFyeVBhcnRpY2xlOyIsInZhciBCaW5hcnlQYXJ0aWNsZSA9IHJlcXVpcmUoJy4vQmluYXJ5UGFydGljbGUnKTtcclxuXHJcbnZhciBFbWl0dGVyID0gZnVuY3Rpb24oZ2FtZVN0YXRlKSB7XHJcblx0dGhpcy5nYW1lU3RhdGUgPSBnYW1lU3RhdGU7XHJcbn07XHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEVtaXR0ZXI7XHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0QmluYXJ5ID0gZnVuY3Rpb24gKHRhcmdldE9iaiwgeCwgeSwgc3BhY2luZykge1xyXG5cdHZhciBvZmZzZXRYID0gKE1hdGgucmFuZG9tKCktMC41KSpzcGFjaW5nO1xyXG5cdHZhciBvZmZzZXRZID0gKE1hdGgucmFuZG9tKCktMC41KSpzcGFjaW5nO1xyXG5cdHZhciBuZXdQYXJ0aWNsZSA9IG5ldyBCaW5hcnlQYXJ0aWNsZSh0aGlzLmdhbWVTdGF0ZS5nYW1lLCB0YXJnZXRPYmosIHgsIHksIG9mZnNldFgsIG9mZnNldFkpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyOyIsIi8vQnVsbGV0cyBhcmUgdGFnZ2VkIGFzICdwbGF5ZXJCdWxsZXQnIG9yICdlbmVteUJ1bGxldCdcclxudmFyIEJ1bGxldCA9IGZ1bmN0aW9uKGdhbWVTdGF0ZSwgeCwgeSwgZGlyZWN0aW9uLCBpbmhlcnRpdFNwZWVkLCB0YWcpIHtcclxuICAgIFBoYXNlci5TcHJpdGUuY2FsbCh0aGlzLCBnYW1lU3RhdGUuZ2FtZSwgeCwgeSwgJ2J1bGxldCcpO1xyXG5cdHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uOyAvL1VuaXQgdmVjdG9yIHJlcHJlc2VudGluZyBkaXJlY3Rpb24gYnVsbGV0IGlzIHRyYXZlbGxpbmc7XHJcblx0dGhpcy5zcGVlZCA9IDUwMCArIGluaGVydGl0U3BlZWQ7XHRcdFx0XHQvL1NwZWVkIGJ1bGxldCBpcyB0cmF2ZWxsaW5nO1xyXG5cdHRoaXMudGFnID0gdGFnO1xyXG5cdHRoaXMuZ2FtZSA9IGdhbWVTdGF0ZS5nYW1lO1xyXG5cdHRoaXMuZ2FtZS5hZGQuZXhpc3RpbmcodGhpcyk7XHJcblx0dGhpcy5saWZlVGltZSA9IDMwMDtcclxuXHR2YXIgc2NhbGUgPSAwLjU7XHJcblx0dGhpcy5zY2FsZS54ID0gc2NhbGU7XHJcblx0dGhpcy5zY2FsZS55ID0gc2NhbGU7XHJcblx0dGhpcy5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG5cdHRoaXMuZGVzdHJveUJ1ZmZlciA9IDEwMDtcclxuXHRcclxuXHQvL3NldCBwaHlzaWNzXHJcblx0Z2FtZVN0YXRlLmdhbWUucGh5c2ljcy5wMi5lbmFibGUodGhpcyk7XHJcblx0dGhpcy5ib2R5LnNldENvbGxpc2lvbkdyb3VwKGdhbWVTdGF0ZS5jb2xsaXNpb25Hcm91cCk7XHJcblx0dGhpcy5ib2R5LmNvbGxpZGVzKGdhbWVTdGF0ZS5jb2xsaXNpb25Hcm91cCk7XHJcblx0Ly9TZXQgcHJvcGVyIGNvbGxpc2lvbiBmdW5jdGlvbiBieSBkZXRlcm1pbmluZyB0eXBlIGZyb20gJ3RhZydcclxuXHRpZih0aGlzLnRhZyA9PT0gJ2VuZW15QnVsbGV0Jykge1xyXG5cdFx0dGhpcy5jb2xsaXNpb24gPSBmdW5jdGlvbihvdGhlcikge1xyXG5cdFx0XHRpZihvdGhlcikge1xyXG5cdFx0XHRcdGlmKG90aGVyLnNwcml0ZSl7XHJcblx0XHRcdFx0XHRpZihvdGhlci5zcHJpdGUudGFnKSB7XHJcblx0XHRcdFx0XHRcdGlmKG90aGVyLnNwcml0ZS50YWcgPT09ICdtb2R1bGUnKSB7XHJcblx0XHRcdFx0XHRcdFx0b3RoZXIuc3ByaXRlLnRha2VEYW1hZ2UoMSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0dGhpcy5kZXN0cm95KCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHRlbHNlIGlmKHRoaXMudGFnID09PSAncGxheWVyQnVsbGV0Jykge1xyXG5cdFx0dGhpcy5jb2xsaXNpb24gPSBmdW5jdGlvbihvdGhlcikge1xyXG5cdFx0XHRpZihvdGhlcikge1xyXG5cdFx0XHRcdGlmKG90aGVyLnNwcml0ZSl7XHJcblx0XHRcdFx0XHRpZihvdGhlci5zcHJpdGUudGFnKSB7XHJcblx0XHRcdFx0XHRcdGlmKG90aGVyLnNwcml0ZS50YWcgPT09ICdlbmVteV9tb2R1bGUnKSB7XHJcblx0XHRcdFx0XHRcdFx0b3RoZXIuc3ByaXRlLnRha2VEYW1hZ2UoMSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5kZXN0cm95KCk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHR0aGlzLmJvZHkub25CZWdpbkNvbnRhY3QuYWRkKHRoaXMuY29sbGlzaW9uLCB0aGlzKTtcclxuXHR0aGlzLmJvZHkuc2V0WmVyb0RhbXBpbmcoKTtcclxuXHR0aGlzLmJvZHkubWFzcyA9IDAuMTtcclxuXHR0aGlzLmJvZHkudmVsb2NpdHkueCA9IGRpcmVjdGlvblswXSp0aGlzLnNwZWVkO1xyXG5cdHRoaXMuYm9keS52ZWxvY2l0eS55ID0gZGlyZWN0aW9uWzFdKnRoaXMuc3BlZWQ7XHJcbn07XHJcblxyXG5CdWxsZXQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQaGFzZXIuU3ByaXRlLnByb3RvdHlwZSk7XHJcbkJ1bGxldC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCdWxsZXQ7XHJcblxyXG5CdWxsZXQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdGlmKHRoaXMuYm9keS54ID4gdGhpcy5nYW1lLmNhbWVyYS54ICsgdGhpcy5nYW1lLmNhbWVyYS53aWR0aCArIHRoaXMuZGVzdHJveUJ1ZmZlciB8fCB0aGlzLmJvZHkueCAgPCB0aGlzLmdhbWUuY2FtZXJhLnggLSB0aGlzLmRlc3Ryb3lCdWZmZXIgfHwgXHJcblx0dGhpcy5ib2R5LnkgPiB0aGlzLmdhbWUuY2FtZXJhLnkgKyB0aGlzLmdhbWUuY2FtZXJhLmhlaWdodCArIHRoaXMuZGVzdHJveUJ1ZmZlciB8fCB0aGlzLmJvZHkueSA8IHRoaXMuZ2FtZS5jYW1lcmEueSAtIHRoaXMuZGVzdHJveUJ1ZmZlcikge1xyXG5cdFx0dGhpcy5kZXN0cm95KHRydWUpO1xyXG5cdH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQnVsbGV0OyIsIi8vRG9uJ3QgdXNlIHRoaXMgZnVuY3Rpb24gdG8gY3JlYXRlIG1vZHVsZXMsIGluc3RlYWQgdXNlIG1vZHVsZUJ1aWxkZXIoKVxyXG52YXIgTW9kdWxlID0gZnVuY3Rpb24oc2V0VHlwZSwgc2V0Q3ViZSwgc2V0R2FtZVN0YXRlKSB7XHJcblx0dGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xyXG5cdHRoaXMudHlwZSA9IHNldFR5cGU7XHJcblx0dGhpcy5jdWJlID0gc2V0Q3ViZTtcclxuXHRzZXRDdWJlLm1vZHVsZSA9IHRoaXM7XHJcblx0dGhpcy5nYW1lU3RhdGUgPSBzZXRHYW1lU3RhdGU7XHJcbn07XHJcblxyXG5Nb2R1bGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTW9kdWxlO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNb2R1bGU7IiwidmFyIEN1YmUgPSByZXF1aXJlKCcuL2N1YmUnKTtcclxudmFyIE1vZHVsZSA9IHJlcXVpcmUoJy4vTW9kdWxlJyk7XHJcbnZhciBCdWxsZXQgPSByZXF1aXJlKCcuL0J1bGxldCcpO1xyXG5cclxudmFyIHRocnVzdEFtdCA9IDUwMDA7XHJcblxyXG4vL1VzZSB0aGlzIHRvIGNyZWF0ZSBhIG1vZHVsZUJ1aWxkZXItIG9ubHkgbmVlZCB0byBjcmVhdGUgb25lIGluc3RhbmNlIG9mIGl0XHJcbnZhciBNb2R1bGVCdWlsZGVyID0gZnVuY3Rpb24oc2V0R2FtZVN0YXRlLCBzZXRDb2xHcm91cCkge1xyXG5cdC8vRW5zdXJlIHRoYXQgY2Fubm90IGNyZWF0ZSBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzc1xyXG5cdGlmKE1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0cykge1xyXG5cdFx0cmV0dXJuIE1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlO1xyXG5cdH1cclxuXHRcdFxyXG5cdHRoaXMuZ2FtZVN0YXRlID0gc2V0R2FtZVN0YXRlO1xyXG4gICB0aGlzLmNvbEdyb3VwID0gc2V0Q29sR3JvdXA7XHJcblx0Ly8gdGhpcy5jb3JlRXhpc3RzID0gZmFsc2U7XHQvL3JlY29yZHMgaWYgY29yZSBoYXMgYmVlbiBjcmVhdGVkXHJcblx0dGhpcy5jb3JlID0gbnVsbDtcdFx0XHQvL3N0b3JlcyBjb3JlIHdoZW4gaXQgaXMgY3JlYXRlZFxyXG5cdC8vdmFyIHNwYWNlID0gdGhpcy5nYW1lU3RhdGUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUik7XHJcblx0TW9kdWxlQnVpbGRlci5wcm90b3R5cGUuZXhpc3RzID0gdHJ1ZTtcclxuXHRNb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5leGlzdGluZ1JlZmVyZW5jZSA9IHRoaXM7XHJcbn07XHJcblxyXG5Nb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1vZHVsZUJ1aWxkZXI7XHJcblxyXG4vL1RoZXNlIHZhcidzIGhlbHAgY3JlYXRlIHRoZSBzaW5nbGV0b24gZnVuY3Rpb25hbGl0eVxyXG5Nb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5leGlzdHMgPSBmYWxzZTtcclxuTW9kdWxlQnVpbGRlci5wcm90b3R5cGUuZXhpc3RpbmdSZWZlcmVuY2UgPSBudWxsO1xyXG5cclxuLyoqIE1vZHVsZSBmdW5jdGlvbnMgKiovXHJcbmZ1bmN0aW9uIHNvbGFyUGFuZWxHaXZlVGFyZ2V0KHRhcmdldCkge1xyXG4gICBpZiAodGhpcyA9PT0gdGFyZ2V0IHx8ICF0aGlzLmN1YmUuZ3JvdXAgfHwgIXRhcmdldC5jdWJlLmdyb3VwIHx8IHRoaXMuY3ViZS5ncm91cCAhPT0gdGFyZ2V0LmN1YmUuZ3JvdXApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIHRoaXMuY3ViZS5sb3NlQ29ubmVjdGlvbigpO1xyXG4gICB2YXIgb3VyR3JvdXAgPSB0aGlzLmN1YmUuZ3JvdXA7XHJcbiAgIHZhciBuZXdDb25uZWN0aW9uID0ge3N0YXJ0OiB0aGlzLmN1YmUsIGVuZDogdGFyZ2V0LmN1YmV9O1xyXG4gICB0aGlzLmN1YmUubXlDb25uZWN0aW9uID0gbmV3Q29ubmVjdGlvbjtcclxuICAgdGFyZ2V0LmN1YmUubXlDb25uZWN0aW9uID0gbmV3Q29ubmVjdGlvbjtcclxuICAgb3VyR3JvdXAuZGlzcGxheUNvbm5lY3Rpb24odGhpcy5jdWJlLm15Q29ubmVjdGlvbik7XHJcblx0aWYoIXRhcmdldC5pc0FjdGl2ZSkge1xyXG5cdFx0Ly9BY3RpdmF0ZSB0aGUgbW9kdWxlXHJcblx0XHR0YXJnZXQuaXNBY3RpdmUgPSB0cnVlO1xyXG5cdFx0dGhpcy5tb2R1bGVQb3dlci5wbGF5KCk7XHJcblx0XHRpZih0YXJnZXQudHlwZSA9PT0gJ2hhY2tlcicpIHtcclxuXHRcdFx0b3VyR3JvdXAuYWN0aXZlSGFja2VyTW9kdWxlcy5wdXNoKHRhcmdldCk7XHJcblx0XHR9XHJcblx0XHQvL0lmIHRoaXMgaXMgb25lIG9mIHRoZSBwb3dlcmFibGUgdHlwZXMsIHN3aXRjaCB0aGUgZnJhbWUgZnJvbSAnZ3JleWVkJyB0byAnYWN0aXZlJ1xyXG5cdFx0aWYodGFyZ2V0LnR5cGUgPT09ICdndW4nIHx8IHRhcmdldC50eXBlID09PSAnaGFja2VyJyB8fCB0YXJnZXQudHlwZSA9PT0gJ3RocnVzdGVyJykge1xyXG5cdFx0XHR0YXJnZXQuY3ViZS5mcmFtZSA9IDE7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBzb2xhclBhbmVsTW91c2VPdmVyKCkge1xyXG4gICBpZiAoIXRoaXMuY3ViZS5teUNvbm5lY3Rpb24gfHwgIXRoaXMuY3ViZS5ncm91cCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgdGhpcy5jdWJlLmdyb3VwLmRpc3BsYXlDb25uZWN0aW9uKHRoaXMuY3ViZS5teUNvbm5lY3Rpb24pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmljT25SZW1vdmUoKSB7XHJcbiAgIHRoaXMuY3ViZS5sb3NlQ29ubmVjdGlvbigpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYWNrZXJPbkxvc2VDb25uZWN0aW9uKCkge1xyXG4gICB2YXIgaGFja0luZGV4ID0gdGhpcy5nYW1lU3RhdGUucGxheWVyLmFjdGl2ZUhhY2tlck1vZHVsZXMuaW5kZXhPZih0aGlzKTtcclxuICAgdGhpcy5nYW1lU3RhdGUucGxheWVyLmFjdGl2ZUhhY2tlck1vZHVsZXMuc3BsaWNlKGhhY2tJbmRleCwgMSk7XHJcbiAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gYmVnaW5BY3QoKSB7XHJcbiAgIHRoaXMudGltZXIgPSAwO1xyXG4gICB0aGlzLmFjdCA9IHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuZEFjdCgpIHtcclxuICAgdGhpcy5hY3QgPSBmYWxzZTtcclxuICAgdGhpcy5jdWJlLmZyYW1lID0gMTtcclxufVxyXG5cclxuZnVuY3Rpb24gdGhydXN0ZXJVcGRhdGUoKSB7XHJcbiAgIGlmICh0aGlzLmhhbHRUaW1lICYmIHRoaXMuaGFsdFRpbWUgPiAwKSB7XHJcbiAgICAgIHRoaXMuaGFsdFRpbWUgLT0gdGhpcy5jdWJlLmdhbWUudGltZS5lbGFwc2VkO1xyXG4gICAgICB0aGlzLmN1YmUuZnJhbWUgPSAxO1xyXG4gICB9IGVsc2UgaWYgKHRoaXMuYWN0ICYmIHRoaXMuY3ViZS5teUNvbm5lY3Rpb24pIHtcclxuXHQgIGlmKHRoaXMuaXNUaHJ1c3QgPT09IHRydWUpIHtcclxuXHRcdHRoaXMuaXNUaHJ1c3RQcmV2ID0gdHJ1ZTtcclxuXHQgIH1cclxuXHQgIHRoaXMuaXNUaHJ1c3QgPSB0cnVlO1xyXG4gICAgICB0aGlzLmN1YmUuYm9keS5mb3JjZS54ID0gdGhydXN0QW10ICogTWF0aC5jb3ModGhpcy5jdWJlLnJvdGF0aW9uIC0gTWF0aC5QSSAvIDIpO1xyXG4gICAgICB0aGlzLmN1YmUuYm9keS5mb3JjZS55ID0gdGhydXN0QW10ICogTWF0aC5zaW4odGhpcy5jdWJlLnJvdGF0aW9uIC0gTWF0aC5QSSAvIDIpO1xyXG5cdCAgaWYodGhpcy5jdWJlLmZyYW1lID09PSAxKSB7XHJcblx0XHR0aGlzLmN1YmUuZnJhbWUgPSAzO1xyXG5cdCAgfVxyXG5cdCAgZWxzZSB7XHJcblx0XHR0aGlzLmN1YmUuZnJhbWUgPSAyO1xyXG5cdCAgfVxyXG5cdCAgaWYodGhpcy5pc1RocnVzdCA9PT0gdHJ1ZSAmJiB0aGlzLmlzVGhydXN0UHJldiA9PT0gZmFsc2UpIHtcclxuXHRcdHRoaXMudGhydXN0ZXJMb29wLnBsYXkoKTtcclxuXHQgIH1cclxuICAgfVxyXG4gICBlbHNlIGlmKCF0aGlzLmFjdCkge1xyXG5cdCAgaWYodGhpcy5pc1RocnVzdCA9PT0gZmFsc2UpIHtcclxuXHRcdHRoaXMuaXNUaHJ1c3RQcmV2ID0gZmFsc2U7XHJcblx0ICB9XHJcblx0ICB0aGlzLmlzVGhydXN0ID0gZmFsc2U7XHJcblx0ICBpZih0aGlzLmlzVGhydXN0ID09PSBmYWxzZSAmJiB0aGlzLmlzVGhydXN0UHJldiA9PT0gdHJ1ZSkge1xyXG5cdFx0dGhpcy50aHJ1c3Rlckxvb3Auc3RvcCgpO1xyXG5cdCAgfVxyXG4gICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRocnVzdGVySGFsdCgpIHtcclxuICAgdGhpcy5oYWx0VGltZSA9IDE1MDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGd1blVwZGF0ZSgpIHtcclxuICAgaWYgKCF0aGlzLmN1YmUubXlDb25uZWN0aW9uIHx8ICF0aGlzLmFjdCkge1xyXG4gICAgICB0aGlzLmN1YmUuYW5pbWF0aW9ucy5zdG9wKCk7XHJcblx0ICByZXR1cm47XHJcbiAgIH1cclxuICAgaWYgKHRoaXMudGltZXIgPD0gMCkge1xyXG4gICAgICB2YXIgYW5nbGUgPSB0aGlzLmN1YmUuYm9keS5yb3RhdGlvbiAlICgyKk1hdGguUEkpO1xyXG4gICAgICB2YXIgZGlyZWN0aW9uID0gW01hdGguc2luKGFuZ2xlKSwgLU1hdGguY29zKGFuZ2xlKV07XHJcbiAgICAgIHZhciBkZWx0YURpc3QgPSBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy5jdWJlLmRlbHRhWCwgMikgKyBNYXRoLnBvdyh0aGlzLmN1YmUuZGVsdGFZLCAyKSk7XHJcbiAgICAgIHZhciBzcGVlZCA9IGRlbHRhRGlzdCAqIDUwO1xyXG4gICAgICBuZXcgQnVsbGV0KHRoaXMuZ2FtZVN0YXRlLCB0aGlzLmN1YmUueCArIDMwKmRpcmVjdGlvblswXSwgdGhpcy5jdWJlLnkgKyAzMCpkaXJlY3Rpb25bMV0sIFxyXG4gICAgICAgICAgICAgICBkaXJlY3Rpb24sIHNwZWVkLCB0aGlzLnRhZyArICdCdWxsZXQnKTtcclxuXHQgIHRoaXMuZ3VuLnBsYXkoKTtcclxuICAgICAgdGhpcy50aW1lciA9IDQwMDtcclxuICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy50aW1lciAtPSB0aGlzLmdhbWVTdGF0ZS5nYW1lLnRpbWUuZWxhcHNlZDtcclxuICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYWNrYWJsZVVwZGF0ZSgpIHtcclxuICAgdGhpcy5oYWNrQmFyLnNldExvY2F0aW9uKHRoaXMuY3ViZS54LCB0aGlzLmN1YmUueSAtIDI1KTtcclxuICAgaWYgKHRoaXMuYmFyRmFkZURlbGF5IDw9IDAgJiYgdGhpcy5oYWNrQmFyLmdyYXBoaWNzLmFscGhhID4gMCkge1xyXG4gICAgICB0aGlzLmhhY2tCYXIuZ3JhcGhpY3MuYWxwaGEgLT0gdGhpcy5nYW1lU3RhdGUudGltZS5lbGFwc2VkICogdGhpcy5iYXJGYWRlO1xyXG4gICB9IGVsc2UgaWYgKHRoaXMuYmFyRmFkZURlbGF5ID4gMCkge1xyXG4gICAgICB0aGlzLmJhckZhZGVEZWxheSAtPSB0aGlzLmdhbWVTdGF0ZS50aW1lLmVsYXBzZWQ7XHJcbiAgIH1cclxuXHQvL2NoZWNrIGlmIGdldHRpbmcgaGFja2VkXHJcblx0aWYoIXRoaXMuaXNIYWNrZWQpIHtcclxuXHRcdHRoaXMuY3ViZS5hbmltYXRpb25zLnBsYXkoJ2hhY2thYmxlJyk7XHJcblx0XHRpZih0aGlzLmdhbWVTdGF0ZS5wbGF5ZXIuYWN0aXZlSGFja2VyTW9kdWxlcy5sZW5ndGggPiAwKSB7XHJcblx0XHRcdHZhciBkaXN0O1xyXG5cdFx0XHR2YXIgaGFja2VyO1xyXG5cdFx0XHQvL0xvb3AgdGhyb3VnaCBhbGwgaGFja2VyIG1vZHVsZXMgb24gdGhlIHBsYXllcidzIGN1YnNhdFxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5nYW1lU3RhdGUucGxheWVyLmFjdGl2ZUhhY2tlck1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRoYWNrZXIgPSB0aGlzLmdhbWVTdGF0ZS5wbGF5ZXIuYWN0aXZlSGFja2VyTW9kdWxlc1tpXTtcclxuXHRcdFx0XHRkaXN0ID0gTWF0aC5zcXJ0KCBNYXRoLnBvdyh0aGlzLmN1YmUueCAtIGhhY2tlci5jdWJlLngsIDIpICsgTWF0aC5wb3codGhpcy5jdWJlLnkgLSBoYWNrZXIuY3ViZS55LCAyKSApO1xyXG5cdFx0XHRcdGlmKGRpc3QgPCB0aGlzLmhhY2tEaXN0YW5jZSkge1xyXG5cdFx0XHRcdFx0Ly9JZiBoYWNrZXIgaXMgaW4gcmFuZ2UsIGluY3JlYXNlIGhhY2sgdmFsdWUgYW5kIHRyeSB0byBlbWl0IGJpbmFyeSBwYXJ0aWNsZVxyXG4gICAgICAgICAgICAgICBpZiAodGhpcy5iZWluZ0hhY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmJlaW5nSGFja2VkUHJldiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgdGhpcy5iZWluZ0hhY2tlZCA9IHRydWU7XHJcblx0XHRcdFx0XHR0aGlzLmhhY2tCYXIuYWRkVmFsdWUoMC4xKTtcclxuXHRcdFx0XHRcdGhhY2tlci5jb3VudCsrO1xyXG5cdFx0XHRcdFx0aWYoaGFja2VyLmNvdW50ID49IGhhY2tlci5jeWNsZSkge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmhhY2tCYXIuZ3JhcGhpY3MuYWxwaGEgPSAxO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmJhckZhZGVEZWxheSA9IHRoaXMuYmFyRmFkZU1heERlbGF5O1xyXG5cdFx0XHRcdFx0XHRoYWNrZXIuY291bnQgPSAwO1xyXG5cdFx0XHRcdFx0XHR0aGlzLmdhbWVTdGF0ZS5CaW5hcnlFbWl0dGVyLmVtaXRCaW5hcnkodGhpcy5jdWJlLCBoYWNrZXIuY3ViZS54LCBoYWNrZXIuY3ViZS55LCA2MCk7XHJcblx0XHRcdFx0XHRcdGlmKGhhY2tlci5jdWJlLmZyYW1lID09PSA1KSB7XHJcblx0XHRcdFx0XHRcdFx0aGFja2VyLmN1YmUuZnJhbWUgPSAwO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGhhY2tlci5jdWJlLmZyYW1lKys7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdGhhY2tlci5jdWJlLmFuaW1hdGlvbnMuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICBpZighdGhpcy5iZWluZ0hhY2tlZCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmJlaW5nSGFja2VkUHJldiA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dGhpcy5iZWluZ0hhY2tlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAodGhpcy5kZWxheSA8IDApIHtcclxuICAgICAgdGhpcy5oYWNraW5nLnN0b3AoKTtcclxuICAgICAgdGhpcy5oYWNrQmFyLmRlc3Ryb3koKTtcclxuICAgICAgdGhpcy5jdWJlLmRpZVF1aWNrKCk7XHJcbiAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuaGFja2luZy5zdG9wKCk7XHJcbiAgICAgIHRoaXMuZGVsYXkgLT0gdGhpcy5nYW1lU3RhdGUudGltZS5lbGFwc2VkO1xyXG4gICB9XHJcbiAgIGlmKHRoaXMuYmVpbmdIYWNrZWQgPT09IHRydWUgJiYgdGhpcy5iZWluZ0hhY2tlZFByZXYgPT09IGZhbHNlKSB7XHJcblx0XHRpZih0aGlzLmhhY2tpbmcucGF1c2VkID09PSB0cnVlKSB7XHJcblx0XHRcdHRoaXMuaGFja2luZy5yZXN1bWUoKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHR0aGlzLmhhY2tpbmcucGxheSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRlbHNlIGlmKHRoaXMuYmVpbmdIYWNrZWQgPT09IGZhbHNlICYmIHRoaXMuYmVpbmdIYWNrZWRQcmV2ID09PSB0cnVlKXtcclxuXHRcdHRoaXMuaGFja2luZy5wYXVzZSgpO1xyXG5cdH1cclxufVxyXG4vKiogRW5kIG1vZHVsZSBmdW5jdGlvbnMgKiovXHJcblxyXG4vL2NhbGwgdGhpcyBmdW5jdGlvbiBmcm9tIE1vZHVsZUJ1aWxkZXIgdG8gY29uc3RydWN0IG1vZHVsZXNcclxuLy9UWVBFUzogJ2NvcmUnICdzaGllbGQnICd0aHJ1c3RlcicgJ3NvbGFyUGFubmVsJyAnaGFja2VyJ1xyXG5Nb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uKHR5cGUsIHgsIHksIGZvclBsYXllcikge1x0XHJcblx0Ly9DcmVhdGUgY3ViZSBvYmplY3QgdG8gYmUgc3RvcmVkIHdpdGhpbiBtb2R1bGVcclxuXHQvL1Nwcml0ZSBuYW1lcyBmb3IgbW9kdWxlcyBhcmUgZGlyZWN0bHkgbWFwcGVkIHRvIG1vZHVsZSBuYW1lcywgc28ganVzdCBwYXNzICd0eXBlJyBhcyBzcHJpdGUgbmFtZVxyXG5cdHZhciBuZXdDdWJlID0gbmV3IEN1YmUodGhpcy5nYW1lU3RhdGUsIHgsIHksIHR5cGUpO1xyXG4gICAgdmFyIHNjYWxlID0gMC41O1xyXG4gICAgbmV3Q3ViZS5uYW1lID0gdGhpcy5nYW1lU3RhdGUuZGVidWdOdW0rKztcclxuICAgIG5ld0N1YmUuc2NhbGUuc2V0VG8oc2NhbGUsIHNjYWxlKTtcclxuICAgIG5ld0N1YmUuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuXHRcclxuXHQvL0NyZWF0ZSBwaHlzaWNzIGZvciBuZXcgY3ViZVxyXG4gICAgdGhpcy5nYW1lU3RhdGUuZ2FtZS5waHlzaWNzLnAyLmVuYWJsZShuZXdDdWJlKTtcclxuXHRuZXdDdWJlLmJvZHkuc2V0Q29sbGlzaW9uR3JvdXAodGhpcy5nYW1lU3RhdGUuY29sbGlzaW9uR3JvdXApO1xyXG5cdG5ld0N1YmUuYm9keS5jb2xsaWRlcyh0aGlzLmdhbWVTdGF0ZS5jb2xsaXNpb25Hcm91cCk7XHJcblx0bmV3Q3ViZS5ib2R5Lm9uQmVnaW5Db250YWN0LmFkZChuZXdDdWJlLmN1YmVDb2xsaWRlLCBuZXdDdWJlKTtcclxuICAgbmV3Q3ViZS5ib2R5LmRhbXBpbmcgPSAwLjk7XHJcbiAgIG5ld0N1YmUuYm9keS5hbmd1bGFyRGFtcGluZyA9IDAuOTtcclxuIFxyXG4gICB2YXIgY0luZGljYXRvciA9IHRoaXMuZ2FtZVN0YXRlLmFkZC5zcHJpdGUoMCwgMCwgJ2Nvbm5lY3Rpb25zJywgJ2Nvbm5lY3Rpb25fbGluZS5wbmcnKTtcclxuICAgY0luZGljYXRvci5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG4gICBjSW5kaWNhdG9yLmFuaW1hdGlvbnMuYWRkKCdlbmQnLCBbJ2Nvbm5lY3Rpb25fZW5kLnBuZyddLCA2MCwgdHJ1ZSk7XHJcbiAgIGNJbmRpY2F0b3IuYW5pbWF0aW9ucy5hZGQoJ2xpbmUnLCBbJ2Nvbm5lY3Rpb25fbGluZS5wbmcnXSwgNjAsIHRydWUpO1xyXG4gICBjSW5kaWNhdG9yLmFuaW1hdGlvbnMuYWRkKCdyaWdodCcsIFsnY29ubmVjdGlvbl9yaWdodC5wbmcnXSwgNjAsIHRydWUpO1xyXG4gICBuZXdDdWJlLmFkZENoaWxkKGNJbmRpY2F0b3IpO1xyXG4gICBuZXdDdWJlLmNJbmRpY2F0b3IgPSBjSW5kaWNhdG9yO1xyXG4gICBjSW5kaWNhdG9yLmFscGhhID0gMDtcclxuXHRcclxuXHQvL0NyZWF0ZSBtb2R1bGUgdG8gd3JhcCBhcm91bmQgY3ViZSBjbGFzc1xyXG5cdHZhciBuZXdNb2R1bGUgPSBuZXcgTW9kdWxlKHR5cGUsIG5ld0N1YmUsIHRoaXMuZ2FtZVN0YXRlKTtcclxuXHRcdFxyXG5cdC8vVE9ETzogZWRpdCBzcGVjaWFsIG1vZHVsZSBhdHRyaWJ1dGVzIGJhc2VkIG9uICd0eXBlJ1xyXG5cdGlmKHR5cGUgPT09ICdoYWNrZXInKSB7XHJcblx0XHRuZXdNb2R1bGUuY3ljbGUgPSA2O1xyXG5cdFx0bmV3TW9kdWxlLmNvdW50ID0gMDtcclxuXHRcdG5ld01vZHVsZS5jdWJlLmFuaW1hdGlvbnMuYWRkKCdoYWNrZXInLCBbMCwxLDIsMyw0XSwgMTAsIHRydWUpO1xyXG4gICAgICBuZXdNb2R1bGUub25SZW1vdmUgPSBnZW5lcmljT25SZW1vdmU7XHJcbiAgICAgIG5ld01vZHVsZS5vbkxvc2VDb25uZWN0aW9uID0gaGFja2VyT25Mb3NlQ29ubmVjdGlvbjtcclxuICAgICAgbmV3TW9kdWxlLnBvd2VyYWJsZSA9IHRydWU7XHJcblx0fVxyXG5cdFxyXG5cdC8vU3RvcmUgbW9kdWxlIGlmIGl0IGlzIGNvcmVcclxuXHRpZih0eXBlID09PSAnY29yZScpXHJcblx0e1xyXG5cdFx0bmV3TW9kdWxlLmN1YmUuYW5pbWF0aW9ucy5hZGQoJ2NvcmUnLCBbMCwxLDJdLCAyMCwgdHJ1ZSk7XHJcblx0XHRuZXdNb2R1bGUuY3ViZS5hbmltYXRpb25zLnBsYXkoJ2NvcmUnKTtcclxuXHRcdHRoaXMuY29yZSA9IG5ld01vZHVsZTtcclxuXHRcdHRoaXMuY29yZUV4aXN0cyA9IHRydWU7XHJcbiAgICAgIG5ld01vZHVsZS5vblJlbW92ZSA9IGdlbmVyaWNPblJlbW92ZTtcclxuXHR9XHJcbiAgIFxyXG4gICAvLyBzb2xhciBwYW5lbCB0ZXN0aW5nXHJcbiAgIGlmICh0eXBlID09PSAnc29sYXJQYW5lbCcpIHtcclxuXHQgIG5ld01vZHVsZS5tb2R1bGVQb3dlciA9IHRoaXMuZ2FtZVN0YXRlLmFkZC5hdWRpbygnbW9kdWxlUG93ZXInLCAwLjUpO1xyXG4gICAgICBuZXdNb2R1bGUuZ2l2ZVRhcmdldCA9IHNvbGFyUGFuZWxHaXZlVGFyZ2V0O1xyXG4gICAgICBuZXdNb2R1bGUubW91c2VPdmVyID0gc29sYXJQYW5lbE1vdXNlT3ZlcjtcclxuICAgICAgbmV3TW9kdWxlLm9uUmVtb3ZlID0gZ2VuZXJpY09uUmVtb3ZlO1xyXG4gICB9XHJcbiAgIFxyXG4gICAvL1RocnVzdGVyIG1vZHVsZSBldmVudHNcclxuXHRpZih0eXBlID09PSAndGhydXN0ZXInKSB7XHJcblx0ICBuZXdNb2R1bGUuaXNUaHJ1c3QgPSBmYWxzZTtcclxuXHQgIG5ld01vZHVsZS5pc1RocnVzdFByZXYgPSBmYWxzZTtcclxuXHQgIG5ld01vZHVsZS50aHJ1c3Rlckxvb3AgPSB0aGlzLmdhbWVTdGF0ZS5hZGQuYXVkaW8oJ3RocnVzdGVyTG9vcCcsIDEsIHRydWUpO1xyXG5cdCAgbmV3TW9kdWxlLnRocnVzdGVyTG9vcC5hbGxvd011bHRpcGxlID0gdHJ1ZTtcclxuICAgICAgaWYgKGZvclBsYXllcikge1xyXG4gICAgICAgICB2YXIgdGhydXN0ZXJLZXkgPSB0aGlzLmdhbWVTdGF0ZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlcpOyBcclxuICAgICAgICAgdGhpcy5nYW1lU3RhdGUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5Q2FwdHVyZShbdGhydXN0ZXJLZXldKTtcclxuICAgICAgICAgdGhydXN0ZXJLZXkub25Eb3duLmFkZChiZWdpbkFjdCwgbmV3TW9kdWxlKTtcclxuICAgICAgICAgdGhydXN0ZXJLZXkub25VcC5hZGQoZW5kQWN0LCBuZXdNb2R1bGUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAvLyBuZXdNb2R1bGUudGhydXN0ID0gZmFsc2U7XHJcbiAgICAgICAgIG5ld01vZHVsZS5iZWdpbkFjdCA9IGJlZ2luQWN0O1xyXG4gICAgICAgICBuZXdNb2R1bGUuZW5kQWN0ID0gZW5kQWN0O1xyXG4gICAgICB9XHJcbiAgICAgIG5ld01vZHVsZS51cGRhdGUgPSB0aHJ1c3RlclVwZGF0ZTtcclxuICAgICAgbmV3TW9kdWxlLnRocnVzdGVySGFsdCA9IHRocnVzdGVySGFsdDtcclxuICAgICAgbmV3TW9kdWxlLm9uUmVtb3ZlID0gZ2VuZXJpY09uUmVtb3ZlO1xyXG4gICAgICBuZXdNb2R1bGUucG93ZXJhYmxlID0gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdC8vR3VuIG1vZHVsZSBldmVudHNcclxuXHRpZih0eXBlID09PSAnZ3VuJykge1xyXG5cdCAgbmV3TW9kdWxlLmN1YmUuYW5pbWF0aW9ucy5hZGQoJ2d1bicsIFswLDEsMiwzLDQsNV0sIDE2LCB0cnVlKTtcclxuXHQgIG5ld01vZHVsZS5ndW4gPSB0aGlzLmdhbWVTdGF0ZS5hZGQuYXVkaW8oJ2d1bicpO1xyXG5cdCAgbmV3TW9kdWxlLmd1bi5hbGxvd011bHRpcGxlID0gdHJ1ZTtcclxuICAgICAgaWYgKGZvclBsYXllcikge1xyXG5cdCAgICAgbmV3TW9kdWxlLnRhZyA9ICdwbGF5ZXInO1xyXG4gICAgICAgICB2YXIgYWN0S2V5ID0gdGhpcy5nYW1lU3RhdGUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUik7XHJcbiAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmlucHV0LmtleWJvYXJkLmFkZEtleUNhcHR1cmUoW2FjdEtleV0pO1xyXG4gICAgICAgICBhY3RLZXkub25Eb3duLmFkZChiZWdpbkFjdCwgbmV3TW9kdWxlKTtcclxuICAgICAgICAgYWN0S2V5Lm9uVXAuYWRkKGVuZEFjdCwgbmV3TW9kdWxlKTtcclxuICAgICAgfSBlbHNlIHtcclxuXHRcdCBuZXdNb2R1bGUudGFnID0gJ2VuZW15JztcclxuICAgICAgICAgbmV3TW9kdWxlLmJlZ2luQWN0ID0gYmVnaW5BY3Q7XHJcbiAgICAgICAgIG5ld01vZHVsZS5lbmRBY3QgPSBlbmRBY3Q7XHJcbiAgICAgIH1cclxuXHQgIG5ld01vZHVsZS51cGRhdGUgPSBndW5VcGRhdGU7XHJcbiAgICAgbmV3TW9kdWxlLm9uUmVtb3ZlID0gZ2VuZXJpY09uUmVtb3ZlO1xyXG4gICAgIG5ld01vZHVsZS5wb3dlcmFibGUgPSB0cnVlO1xyXG5cdH1cclxuICAgXHJcbiAgIGlmICh0eXBlID09PSAnaGFja2FibGUnKSB7XHJcbiAgICAgIC8vIHNldCB2YWx1ZXNcclxuICAgICAgbmV3TW9kdWxlLmlzSGFja2VkID0gZmFsc2U7XHJcbiAgICAgIG5ld01vZHVsZS5oYWNrRGlzdGFuY2UgPSA0MDA7XHJcbiAgICAgIG5ld01vZHVsZS5jdWJlLmFuaW1hdGlvbnMuYWRkKCdoYWNrYWJsZScsIFswLDEsMiwzLDRdLCAxMCwgdHJ1ZSk7XHJcbiAgICAgIG5ld01vZHVsZS5jdWJlLmFuaW1hdGlvbnMuYWRkKCdoYWNrZWQnLCBbNSw2LDcsOCw5XSwgMTAsIHRydWUpO1xyXG4gICAgICBuZXdNb2R1bGUuYmFyRmFkZSA9IDAuMDAxO1xyXG4gICAgICBuZXdNb2R1bGUuYmFyRmFkZU1heERlbGF5ID0gMjAwO1xyXG4gICAgICBuZXdNb2R1bGUuYmFyRmFkZURlbGF5ID0gMDtcclxuICAgICAgbmV3TW9kdWxlLmRlbGF5ID0gMTYwMDtcclxuICAgICAgbmV3TW9kdWxlLmJlaW5nSGFja2VkID0gZmFsc2U7XHJcbiAgICAgIG5ld01vZHVsZS5iZWluZ0hhY2tlZFByZXYgPSBmYWxzZTtcclxuICAgICAgbmV3TW9kdWxlLmhhY2tpbmcgPSB0aGlzLmdhbWVTdGF0ZS5hZGQuYXVkaW8oJ2hhY2tpbmcnLCAxLCB0cnVlKTtcclxuICAgICAgLy8gZ2l2ZSBwcm9ncmVzcyBiYXJcclxuICAgICAgbmV3TW9kdWxlLmhhY2tCYXIgPSB0aGlzLmdhbWVTdGF0ZS51aUJ1aWxkZXIuYnVpbGRQcm9ncmVzc0JhcignZ3Jvd2luZycsIDE1MDAsIDEyMDAsIDEwMCwgMTAsICAyMDApO1xyXG4gICAgICBuZXdNb2R1bGUuaGFja0Jhci5zZXRTdHlsZSgwLCAweEZGRkZGRiwgMHgzNjM2MzYsIDAsIDAsIDAsIDB4RkZGRkZGLCAweDIwMjBDQyk7XHJcbiAgICAgIG5ld01vZHVsZS5oYWNrQmFyLmhhY2thYmxlID0gbmV3TW9kdWxlLmN1YmU7XHJcbiAgICAgIG5ld01vZHVsZS5oYWNrQmFyLm9uRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgdGhpcy5oYWNrYWJsZS5hbmltYXRpb25zLnN0b3AoKTtcclxuICAgICAgICAgdGhpcy5oYWNrYWJsZS5hbmltYXRpb25zLnBsYXkoJ2hhY2tlZCcpO1xyXG4gICAgICAgICB0aGlzLmhhY2thYmxlLm1vZHVsZS5pc0hhY2tlZCA9IHRydWU7XHJcbiAgICAgIH07XHJcbiAgICAgIC8vIGFkZCBmdW5jdGlvbnNcclxuICAgICAgbmV3TW9kdWxlLnVwZGF0ZSA9IGhhY2thYmxlVXBkYXRlO1xyXG4gICAgICBuZXdNb2R1bGUub25SZW1vdmUgPSBnZW5lcmljT25SZW1vdmU7XHJcbiAgIH1cclxuXHQvL1JldHVybiB0aGUgbW9kdWxlIG9iamVjdFxyXG5cdHJldHVybiBuZXdNb2R1bGU7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1vZHVsZUJ1aWxkZXI7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsInZhciBBc3Rlcm9pZHMgPSBmdW5jdGlvbihzdGF0ZSwgc2ltcGxpZnkpIHtcclxuICAgLy8gaW5pdGlhbGlzZVxyXG5cdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgdGhpcy5zaW1wbGlmeSA9IHNpbXBsaWZ5O1xyXG4gICB0aGlzLmdhbWUgPSB0aGlzLnN0YXRlLmdhbWU7XHJcbiAgIHRoaXMuY2FtID0gdGhpcy5nYW1lLmNhbWVyYTtcclxuICAgdGhpcy5udW1Sb2lkcyA9IDA7XHJcbiAgIHRoaXMubWF4Um9pZHMgPSAxMDA7XHJcbiAgIHRoaXMuYXN0ZXJvaWRzID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xyXG5cdHRoaXMuYXN0ZXJvaWRzLmVuYWJsZUJvZHkgPSB0cnVlO1xyXG5cdHRoaXMuYXN0ZXJvaWRzLnBoeXNpY3NCb2R5VHlwZSA9IFBoYXNlci5QaHlzaWNzLlAySlM7XHJcblx0dGhpcy5hc3Rlcm9pZExpc3QgPSBuZXcgUGhhc2VyLkFycmF5U2V0KCk7XHJcblx0aWYgKCF0aGlzLnNpbXBsaWZ5KSB7IHRoaXMuZ2VuZXJhdGVBc3Rlcm9pZHMoKTsgfVxyXG59O1xyXG5cclxuQXN0ZXJvaWRzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFzdGVyb2lkcztcclxuXHJcbkFzdGVyb2lkcy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIFxyXG59O1xyXG5cclxuQXN0ZXJvaWRzLnByb3RvdHlwZS5nZW5lcmF0ZUFzdGVyb2lkcyA9IGZ1bmN0aW9uKCkge1xyXG4gIGZvcig7IHRoaXMubnVtUm9pZHMgPCB0aGlzLm1heFJvaWRzOyB0aGlzLm51bVJvaWRzKyspIHtcclxuICAgICAgdmFyIHJhbmRYID0gdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgwLCB0aGlzLmdhbWUud29ybGQud2lkdGgpO1xyXG4gICAgICB2YXIgcmFuZFkgPSB0aGlzLmdhbWUucm5kLmludGVnZXJJblJhbmdlKDAsIHRoaXMuZ2FtZS53b3JsZC5oZWlnaHQpO1xyXG4gICAgICAvKiBUT0RPOiBwcmV2ZW50IGNvbGxpc2lvbiBzcGF3bmluZ1xyXG4gICAgICB3aGlsZShyYW5kWCA8IHRoaXMuY29yZU1vZHVsZS5jdWJlLnggLSAodGhpcy5wbGF5ZXIuY3ViZXNXaWR0aCgpIC8gMiArIDEwMCkgJiYgcmFuZFggPiB0aGlzLmNvcmVNb2R1bGUuY3ViZS54ICsgKHRoaXMucGxheWVyLmN1YmVzV2lkdGgoKSAvIDIgKyAxMDApICYmXHJcbiAgICAgIHJhbmRZIDwgdGhpcy5jb3JlTW9kdWxlLmN1YmUueSAtICh0aGlzLnBsYXllci5jdWJlc0hlaWdodCgpIC8gMiArIDEwMCkgJiYgcmFuZFkgPiB0aGlzLmNvcmVNb2R1bGUuY3ViZS55ICsgKHRoaXMucGxheWVyLmN1YmVzSGVpZ2h0KCkgLyAyICsgMTAwKSkge1xyXG4gICAgICAgICByYW5kWCA9IHRoaXMuZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoMCwgdGhpcy5nYW1lLndvcmxkLndpZHRoKTtcclxuICAgICAgICAgcmFuZFkgPSB0aGlzLmdhbWUucm5kLmludGVnZXJJblJhbmdlKDAsIHRoaXMuZ2FtZS53b3JsZC5oZWlnaHQpO1xyXG4gICAgICB9XHJcbiAgICAgICovXHJcbiAgICAgIHZhciBhc3Rlcm9pZCA9IHRoaXMuYXN0ZXJvaWRzLmNyZWF0ZShyYW5kWCwgcmFuZFksICdhc3Rlcm9pZCcpO1xyXG4gICAgICBhc3Rlcm9pZC5ib2R5LmNsZWFyU2hhcGVzKCk7IFxyXG4gICAgICBhc3Rlcm9pZC5ib2R5LmxvYWRQb2x5Z29uKCdhc3Rlcm9pZFBvbHlnb24nLCAnYXN0ZXJvaWQnKTsgLy9DaGFuZ2UgdGhlIGNvbGxpc2lvbiBkZXRlY3Rpb24gZnJvbSBhbiBBQUJCIHRvIGEgcG9seWdvblxyXG4gICAgICBhc3Rlcm9pZC5ib2R5LmRhbXBpbmcgPSB0aGlzLmdhbWUucm5kLnJlYWxJblJhbmdlKDAsIDAuMykgKiB0aGlzLmdhbWUucm5kLmludGVnZXJJblJhbmdlKDAsIDEpICogdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgwLCAxKTtcclxuICAgICAgYXN0ZXJvaWQuYm9keS5yb3RhdGlvbiA9IHRoaXMuZ2FtZS5ybmQucmVhbEluUmFuZ2UoMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICBhc3Rlcm9pZC5ib2R5LmZvcmNlLnggPSB0aGlzLmdhbWUucm5kLmludGVnZXJJblJhbmdlKC0xMCwgMTApICogNzUwO1xyXG4gICAgICBhc3Rlcm9pZC5ib2R5LmZvcmNlLnkgPSB0aGlzLmdhbWUucm5kLmludGVnZXJJblJhbmdlKC0xMCwgMTApICogNzUwO1xyXG4gICAgICBhc3Rlcm9pZC5ib2R5LnNldENvbGxpc2lvbkdyb3VwKHRoaXMuc3RhdGUuY29sbGlzaW9uR3JvdXApO1xyXG4gICAgICBhc3Rlcm9pZC5ib2R5LmNvbGxpZGVzKHRoaXMuc3RhdGUuY29sbGlzaW9uR3JvdXApO1xyXG4gICAgICBhc3Rlcm9pZC5ib2R5LmNvbGxpZGVXb3JsZEJvdW5kcyA9IGZhbHNlO1xyXG4gICAgICBhc3Rlcm9pZC5hdXRvQ3VsbCA9IHRydWU7XHJcbiAgICAgIGFzdGVyb2lkLmNoZWNrV29ybGRCb3VuZHMgPSB0cnVlO1xyXG4gICAgICBhc3Rlcm9pZC5ldmVudHMub25PdXRPZkJvdW5kcy5hZGQodGhpcy5yZXNldEFzdGVyb2lkLCB7Y2FsbGVyOiB0aGlzLCBhc3Rlcm9pZDogYXN0ZXJvaWR9KTtcclxuICAgICAgdGhpcy5hc3Rlcm9pZExpc3QuYWRkKGFzdGVyb2lkKTtcclxuICAgfVxyXG59O1xyXG5cclxuQXN0ZXJvaWRzLnByb3RvdHlwZS5yZXNldEFzdGVyb2lkID0gZnVuY3Rpb24oKSB7XHJcbiAgIHZhciByYW5kWCA9IHRoaXMuY2FsbGVyLmdhbWUucm5kLmludGVnZXJJblJhbmdlKDAsIHRoaXMuY2FsbGVyLmdhbWUud29ybGQud2lkdGgpO1xyXG4gICB2YXIgcmFuZFkgPSB0aGlzLmNhbGxlci5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgwLCB0aGlzLmNhbGxlci5nYW1lLndvcmxkLmhlaWdodCk7XHJcbiAgIC8vIFRPRE86IHByZXZlbnQgb3ZlcmxhcCBvbiByZXNldFxyXG4gICB0aGlzLmFzdGVyb2lkLnggPSByYW5kWDtcclxuICAgdGhpcy5hc3Rlcm9pZC55ID0gcmFuZFk7XHJcbiAgIHRoaXMuYXN0ZXJvaWQuYm9keS5yb3RhdGlvbiA9IHRoaXMuY2FsbGVyLmdhbWUucm5kLnJlYWxJblJhbmdlKDAsIDIgKiBNYXRoLlBJKTtcclxuICAgdGhpcy5hc3Rlcm9pZC5ib2R5LmZvcmNlLnggPSB0aGlzLmNhbGxlci5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgtMTAsIDEwKSAqIDc1MDtcclxuICAgdGhpcy5hc3Rlcm9pZC5ib2R5LmZvcmNlLnkgPSB0aGlzLmNhbGxlci5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgtMTAsIDEwKSAqIDc1MDtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQXN0ZXJvaWRzO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsInZhciBDaGVhdGluZyA9IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgIC8vIGluaXRpYWxpc2F0aW9uXHJcblx0dGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICB0aGlzLmdhbWUgPSBzdGF0ZS5nYW1lO1xyXG4gICB0aGlzLmNhbSA9IHRoaXMuZ2FtZS5jYW1lcmE7XHJcbiAgIHRoaXMubW91c2UgPSB0aGlzLnN0YXRlLm1vdXNlO1xyXG4gICAvLyBidXR0b25zXHJcbiAgIC8vY29yZVxyXG5cdHRoaXMucGxhY2VDb3JlS2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUCk7XHJcblx0dGhpcy5wbGFjZUNvcmVLZXkub25Eb3duLmFkZCh0aGlzLmRlYnVnQWRkTW9kdWxlLCB7Y2FsbGVyOiB0aGlzLCBrZXk6ICdjb3JlJ30pO1xyXG5cdC8vc2hpZWxkXHJcblx0dGhpcy5wbGFjZVNoaWVsZEtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLk8pO1xyXG4gICAgdGhpcy5wbGFjZVNoaWVsZEtleS5vbkRvd24uYWRkKHRoaXMuZGVidWdBZGRNb2R1bGUsIHtjYWxsZXI6IHRoaXMsIGtleTogJ3NoaWVsZCd9KTtcclxuXHQvL3RocnVzdGVyXHJcblx0dGhpcy5wbGFjZVRocnVzdGVyS2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuSSk7XHJcbiAgICB0aGlzLnBsYWNlVGhydXN0ZXJLZXkub25Eb3duLmFkZCh0aGlzLmRlYnVnQWRkTW9kdWxlLCB7Y2FsbGVyOiB0aGlzLCBrZXk6ICd0aHJ1c3Rlcid9KTtcclxuXHQvL3NvbGFyUGFuZWxcclxuXHR0aGlzLnBsYWNlU1BLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5VKTtcclxuICAgIHRoaXMucGxhY2VTUEtleS5vbkRvd24uYWRkKHRoaXMuZGVidWdBZGRNb2R1bGUsIHtjYWxsZXI6IHRoaXMsIGtleTogJ3NvbGFyUGFuZWwnfSk7XHJcblx0Ly9oYWNrZXJcclxuXHR0aGlzLnBsYWNlSGFja0tleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlkpO1xyXG5cdHRoaXMucGxhY2VIYWNrS2V5Lm9uRG93bi5hZGQodGhpcy5kZWJ1Z0FkZE1vZHVsZSwge2NhbGxlcjogdGhpcywga2V5OiAnaGFja2VyJ30pO1xyXG5cdC8vZ3VuXHJcblx0dGhpcy5wbGFjZUd1bktleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlQpO1xyXG4gICAgdGhpcy5wbGFjZUd1bktleS5vbkRvd24uYWRkKHRoaXMuZGVidWdBZGRNb2R1bGUsIHtjYWxsZXI6IHRoaXMsIGtleTogJ2d1bid9KTtcclxuXHQvL2hhY2thYmxlXHJcblx0dGhpcy5wbGFjZUhhY2thYmxlS2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuTCk7XHJcbiAgIHRoaXMucGxhY2VIYWNrYWJsZUtleS5vbkRvd24uYWRkKHRoaXMuZGVidWdBZGRNb2R1bGUsIHtjYWxsZXI6IHRoaXMsIGtleTogJ2hhY2thYmxlJ30pO1xyXG4gICAvLyByZXNldGluZ1xyXG4gICB0aGlzLnJlc2V0S2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuTSk7XHJcbiAgIHRoaXMucmVzZXRLZXkub25Eb3duLmFkZCh0aGlzLnJlc2V0LCB0aGlzKTtcclxufTtcclxuXHJcbkNoZWF0aW5nLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENoZWF0aW5nO1xyXG5cclxuQ2hlYXRpbmcucHJvdG90eXBlLmRlYnVnQWRkTW9kdWxlID0gZnVuY3Rpb24oKSB7XHJcbiAgIHRoaXMuY2FsbGVyLnN0YXRlLm1vZHVsZUJ1aWxkZXIuYnVpbGQodGhpcy5rZXksIHRoaXMuY2FsbGVyLm1vdXNlLngsIHRoaXMuY2FsbGVyLm1vdXNlLnksIHRydWUpO1xyXG59O1xyXG5cclxuQ2hlYXRpbmcucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5zdGF0ZS5sZXZlbFNldHVwLnJlc3RhcnRMZXZlbCgpOyBcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQ2hlYXRpbmc7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCIvKlxyXG5EZWZpbmVzIGEgY3ViZS5cclxuKi9cclxuXHJcbnZhciBDdWJlID0gZnVuY3Rpb24gKHN0YXRlLCB4LCB5LCBzcHJpdGUpIHtcclxuICAgIFBoYXNlci5TcHJpdGUuY2FsbCh0aGlzLCBzdGF0ZS5nYW1lLCB4LCB5LCBzcHJpdGUpO1xyXG5cdCB0aGlzLnRhZyA9ICdtb2R1bGUnO1x0Ly90YWcgaXMgdXNlZCB0byBkZXRlY3Qgb2JqZWN0IHR5cGUgZHVyaW5nIGNvbGxpc2lvbiBjaGVja2luZ1xyXG5cdCB0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgICB0aGlzLmdhbWUgPSB0aGlzLnN0YXRlLmdhbWU7XHJcbiAgICB0aGlzLmdhbWUuYWRkLmV4aXN0aW5nKHRoaXMpO1xyXG4gICAgdGhpcy5ncm91cCA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMubW9kdWxlID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5pbmRpY2F0b3JGYWRlID0gMC4wMjtcclxuICAgIHRoaXMuaGVhbHRoQmFyID0gdGhpcy5zdGF0ZS51aUJ1aWxkZXIuYnVpbGRQcm9ncmVzc0Jhcignc2hyaW5raW5nJywgMCwgMCwgMjAsIDQsIDMpO1xyXG5cdHRoaXMuaGVhbHRoQmFyLnNldFN0eWxlKDAsIDB4RkZGRkZGLCAweDM2MzYzNiwgMCwgMCwgMCwgMHhGRkZGRkYsIDB4MjBDQzIwKTtcclxuXHR0aGlzLmhlYWx0aEJhci5jdWJlID0gdGhpcztcclxuXHR0aGlzLmhlYWx0aEJhckZhZGUgPSAwLjAwMDg7XHJcblx0dGhpcy5pbXBhY3QgPSB0aGlzLmdhbWUuYWRkLmF1ZGlvKCdtb2R1bGVJbXBhY3QnKTtcclxuXHR0aGlzLmltcGFjdC52b2x1bWUgPSAwLjI1O1xyXG5cdHRoaXMuaW1wYWN0LmFsbG93TXVsdGlwbGUgPSB0cnVlO1xyXG5cdC8vc2V0IHVwZGF0ZSBmdW5jdGlvbiBvZiBoZWFsdGggYmFyXHJcblx0dGhpcy5oZWFsdGhCYXIudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcblx0XHR0aGlzLnNldExvY2F0aW9uKHRoaXMuY3ViZS54LCB0aGlzLmN1YmUueSsxMCk7XHJcblx0fTtcclxuXHQvL29uRXZlbnQgY2FsbGVkIHdoZW4gY3ViZSBydW5zIG91dCBvZiBoZWFsdGhcclxuXHR0aGlzLmhlYWx0aEJhci5vbkV2ZW50ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR0aGlzLmN1YmUuZHlpbmcgPSB0cnVlO1xyXG5cdFx0dGhpcy5jdWJlLmxpZmUgPSA1MDtcclxuXHRcdC8vIHRoaXMuZ3JvdXAuY291bnRDdWJlcygpO1xyXG5cdFx0Ly8gdGhpcy5kZXN0cm95KCk7XHJcblx0fTtcclxuXHR0aGlzLmNvbnN0cmFpbnRzID0gW107XHJcbn07XHJcblxyXG5DdWJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUGhhc2VyLlNwcml0ZS5wcm90b3R5cGUpO1xyXG5DdWJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmU7XHJcblxyXG4vKipcclxuICogQXV0b21hdGljYWxseSBjYWxsZWQgYnkgV29ybGQudXBkYXRlXHJcbiAqL1xyXG5DdWJlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgaWYgKHRoaXMuY0luZGljYXRvciAmJiB0aGlzLmNJbmRpY2F0b3IuYWxwaGEgPiAwKSB7XHJcbiAgICAgIHRoaXMuY0luZGljYXRvci5hbHBoYSAtPSB0aGlzLmluZGljYXRvckZhZGU7XHJcbiAgIH1cclxuICAgaWYgKHRoaXMubW9kdWxlLnVwZGF0ZSkge1xyXG4gICAgICB0aGlzLm1vZHVsZS51cGRhdGUoKTtcclxuICAgfVxyXG4gICBpZiAodGhpcy5oZWFsdGhCYXIuZ3JhcGhpY3MuYWxwaGEgPiAwKSB7XHJcbiAgICAgIHRoaXMuaGVhbHRoQmFyLmdyYXBoaWNzLmFscGhhIC09IHRoaXMuaGVhbHRoQmFyRmFkZSAqIHRoaXMuZ2FtZS50aW1lLmVsYXBzZWQ7XHJcbiAgIH1cclxuICAgaWYgKHRoaXMuZHlpbmcpIHtcclxuICAgICAgdGhpcy5saWZlIC09IHRoaXMuZ2FtZS50aW1lLmVsYXBzZWQ7XHJcbiAgICAgIGlmICh0aGlzLmxpZmUgPCAwKSB7XHJcbiAgICAgICAgIHRoaXMuZHlpbmcgPSBmYWxzZTtcclxuICAgICAgICAgdGhpcy5oZWFsdGhCYXIuZGVzdHJveSgpO1xyXG4gICAgICAgICBpZiAodGhpcy5ncm91cCkge1xyXG4gICAgICAgICAgICBpZih0aGlzLnRhZyA9PT0gJ2VuZW15X21vZHVsZScpIHtcclxuICAgICAgICAgICAgICAgaWYodGhpcy5rZXkgPT09ICd0aHJ1c3RlcicpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zaG9wLmFkZE1vbmV5KDM1KTtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMua2V5ID09PSAnc2hpZWxkJykge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNob3AuYWRkTW9uZXkoMTApO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIGVsc2UgaWYodGhpcy5rZXkgPT09ICdndW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvcC5hZGRNb25leSg1MCk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgZWxzZSBpZih0aGlzLmtleSA9PT0gJ3NvbGFyUGFuZWwnKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvcC5hZGRNb25leSgyNSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLmRlc3Ryb3lDdWJlKHRoaXMpO1xyXG4gICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZih0aGlzLmtleSA9PT0gJ2NvcmUnICYmIHRoaXMudGFnID09PSAnbW9kdWxlJykge1xyXG4gICAgICAgICAgICAgICB0aGlzLmtpbGwoKTtcclxuICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5yZXN0YXJ0TGV2ZWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLmxvc2VDb25uZWN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCF0aGlzLm15Q29ubmVjdGlvbikge1xyXG4gICAgcmV0dXJuO1xyXG4gIH0gIFxyXG4gIGlmICh0aGlzLm15Q29ubmVjdGlvbi5zdGFydCA9PT0gdGhpcykge1xyXG4gICAgICB2YXIgZW5kTW9kdWxlID0gdGhpcy5teUNvbm5lY3Rpb24uZW5kLm1vZHVsZTtcclxuICAgICAgaWYgKGVuZE1vZHVsZS5oYXNPd25Qcm9wZXJ0eSgnb25Mb3NlQ29ubmVjdGlvbicpKSB7XHJcbiAgICAgICAgIGVuZE1vZHVsZS5vbkxvc2VDb25uZWN0aW9uKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5teUNvbm5lY3Rpb24uZW5kLm15Q29ubmVjdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgICAgdGhpcy5teUNvbm5lY3Rpb24gPSB1bmRlZmluZWQ7XHJcbiAgIH0gZWxzZSBpZiAodGhpcy5teUNvbm5lY3Rpb24uZW5kID09PSB0aGlzKSB7XHJcbiAgICAgIHZhciBzdGFydE1vZHVsZSA9IHRoaXMubXlDb25uZWN0aW9uLmVuZC5tb2R1bGU7XHJcbiAgICAgIGlmIChzdGFydE1vZHVsZS5oYXNPd25Qcm9wZXJ0eSgnb25Mb3NlQ29ubmVjdGlvbicpKSB7XHJcbiAgICAgICAgIHN0YXJ0TW9kdWxlLm9uTG9zZUNvbm5lY3Rpb24oKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLm15Q29ubmVjdGlvbi5zdGFydC5teUNvbm5lY3Rpb24gPSB1bmRlZmluZWQ7XHJcbiAgICAgIHRoaXMubXlDb25uZWN0aW9uID0gdW5kZWZpbmVkO1xyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlLnByb3RvdHlwZS5jdWJlQ29sbGlkZSA9IGZ1bmN0aW9uKG90aGVyKSB7XHJcbiAgIC8vIGJhZCBjb2xsaXNpb24sIGNvbGxpc2lvbiB3aXRoIG5vbi1zcHJpdGUsIGNvbGxpc2lvbiB3aXRoIG5vbi1jdWJlXHJcbiAgIGlmICghb3RoZXIgfHwgIW90aGVyLnNwcml0ZSB8fCBvdGhlci5wcm90b3R5cGUgIT09IHRoaXMucHJvdG90eXBlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICBpZiAoIXRoaXMuZ3JvdXAgJiYgb3RoZXIuc3ByaXRlLmdyb3VwICYmIG90aGVyLnNwcml0ZS5ncm91cC5pc1BsYXllcikgeyAvLyBmbG9hdGluZyBoaXR0aW5nIHBsYXllclxyXG4gICAgICBvdGhlci5zcHJpdGUuZ3JvdXAuaGFuZGxlQXR0YXRjaChvdGhlci5zcHJpdGUsIHRoaXMpO1xyXG4gICB9IGVsc2UgaWYgKG90aGVyLmdyb3VwICYmIHRoaXMuZ3JvdXAgPT09IG90aGVyLmdyb3VwKSB7Ly8gaWYgY3ViZXMgaW4gc2FtZSBncm91cFxyXG4gICAgICAvLyBtYWdpYyBjb25jaCwgd2hhdCBzaG91bGQgd2UgZG8gaGVyZT9cclxuICAgfSBlbHNlIGlmICh0aGlzLmdyb3VwKSB7XHJcbiAgICAgIGlmICh0aGlzLmdyb3VwLmlzUGxheWVyKSB7IC8vIHBsYXllclxyXG4gICAgICAgICBpZiAob3RoZXIuc3ByaXRlLnRhZyA9PT0gJ2VuZW15X21vZHVsZScpIHsgLy8gY29sbGlzaW9uIHdpdGggZW5lbXksIHJhbW1pbmdcclxuICAgICAgICAgICAgdGhpcy5ncm91cC5oYW5kbGVSYW1taW5nKHRoaXMsIG90aGVyLnNwcml0ZSk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfSBlbHNlIHsvLyBlbmVteVxyXG4gICAgICAgICB0aGlzLmdyb3VwLmhhbmRsZVJhbW1pbmcodGhpcywgb3RoZXIuc3ByaXRlKTsgLy8gZW5lbWllcyBvbmx5IHJhbSBvbiBjb2xsaXNpb25cclxuICAgICAgfVxyXG4gICAgICB0aGlzLmdyb3VwLmNvdW50Q3ViZXMoKTtcclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgdmFyIHN0cmluZyA9ICcnO1xyXG4gICBzdHJpbmcgKz0gdGhpcy5jb25jYXQoJ25hbWUnLCB0aGlzLm5hbWUpO1xyXG4gICByZXR1cm4gc3RyaW5nO1xyXG59O1xyXG5cclxuQ3ViZS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24oc3RyaW5nLCB2YWwpIHtcclxuICAgcmV0dXJuIHN0cmluZyArICc6ICcgKyB2YWwgKyAnXFxuJztcclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLmRpc3BsYXlJbmRpY2F0b3IgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmNJbmRpY2F0b3IuYWxwaGEgPSAxOyBcclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLmhpZGVJbmRpY2F0b3IgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmNJbmRpY2F0b3IuYWxwaGEgPSAwOyBcclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLnRha2VEYW1hZ2UgPSBmdW5jdGlvbihhbXQpIHtcclxuICAgdGhpcy5pbXBhY3QucGxheSgpO1xyXG4gICB0aGlzLmhlYWx0aEJhci5hZGRWYWx1ZSgtYW10KTtcclxuICAgdGhpcy5oZWFsdGhCYXIuZ3JhcGhpY3MuYWxwaGEgPSAxO1xyXG59O1xyXG5cclxuQ3ViZS5wcm90b3R5cGUuZGllUXVpY2sgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmR5aW5nID0gdHJ1ZTtcclxuICB0aGlzLmxpZmUgPSAwO1xyXG59O1xyXG5cclxuQ3ViZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgIGlmICghdGhpcy5ncm91cCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgdGhpcy5ncm91cC5yZW1vdmUodGhpcyk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEN1YmU7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwidmFyIEFzdGFyID0gcmVxdWlyZSgnLi4vbGlicy9qYXZhc2NyaXB0LWFzdGFyL2FzdGFyJyk7XHJcbnZhciBFbmVteUFJID0gcmVxdWlyZSgnLi9lbmVteV9haScpO1xyXG5cclxuLypcclxuRGVmaW5lcyBhIGN1YmUgZ3JvdXAuXHJcbiovXHJcblxyXG52YXIgQ3ViZUdyb3VwID0gZnVuY3Rpb24gKHN0YXRlLCByb290KSB7XHJcbiAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgdGhpcy5nYW1lID0gdGhpcy5zdGF0ZS5nYW1lO1xyXG4gICB0aGlzLnJvb3QgPSByb290O1xyXG4gICB0aGlzLmN1YmVzID0gW107XHJcbiAgIHZhciBjb2wgPSBbXTtcclxuICAgY29sLnB1c2godGhpcy5yb290KTtcclxuICAgdGhpcy5jdWJlcy5wdXNoKGNvbCk7XHJcbiAgIGlmICh0aGlzLnJvb3QpIHtcclxuICAgICAgdGhpcy5yb290Lmdyb3VwID0gdGhpcztcclxuICAgfVxyXG4gICB0aGlzLkRJUiA9IHtOT1JUSDogMCwgRUFTVDogMSwgU09VVEg6IDIsIFdFU1Q6IDN9O1xyXG4gICB0aGlzLm9mZnNldCA9IDI7XHJcblx0dGhpcy5hY3RpdmVIYWNrZXJNb2R1bGVzID0gW107XHQvL2xpc3Qgb2YgaGFja2VyIG1vZHVsZXMgaW4gdGhpcyBncm91cFxyXG5cdHRoaXMubW9kdWxlQ29ubmVjdCA9IHRoaXMuZ2FtZS5hZGQuYXVkaW8oJ21vZHVsZUNvbm5lY3QnKTtcclxuXHR0aGlzLm1vZHVsZUNvbm5lY3QuYWxsb3dNdWx0aXBsZSA9IHRydWU7XHJcbiAgIHRoaXMubnVtQ3ViZXMgPSAxO1xyXG4gICB0aGlzLmJvdW5jZUJhY2tGb3JjZSA9IDMwO1xyXG4gICB0aGlzLm1pblJhbVZlbCA9IDMwMDtcclxuICAgdGhpcy5kZWJ1ZyA9IGZhbHNlO1xyXG4gICB0aGlzLmRlYnVnSGFuZGxlQXR0YXRjaCA9IGZhbHNlO1xyXG4gICB0aGlzLmRlYnVnQ3JlYXRlQ29uc3RyYWludHMgPSBmYWxzZTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJlR3JvdXA7XHJcblxyXG4vKipcclxuICogQXV0b21hdGljYWxseSBjYWxsZWQgYnkgV29ybGQudXBkYXRlXHJcbiAqL1xyXG5DdWJlR3JvdXAucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICBpZiAodGhpcy5BSSkge1xyXG4gICAgICB0aGlzLkFJLnVwZGF0ZSgpO1xyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbihmdW4pIHtcclxuICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMuY3ViZXNIZWlnaHQoKTsgY29sKyspIHtcclxuICAgICAgICAgdmFyIGN1YmUgPSB0aGlzLmN1YmVzW3Jvd11bY29sXTtcclxuICAgICAgICAgaWYgKGN1YmUgJiYgY3ViZS5oYXNPd25Qcm9wZXJ0eShmdW4pKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIGN1YmVzIG5lZWQgZnVuY3Rpb25zIGNhbGxlZFxyXG4gICAgICAgICB9IGVsc2UgaWYgKGN1YmUgJiYgY3ViZS5tb2R1bGUgJiYgY3ViZS5tb2R1bGUuaGFzT3duUHJvcGVydHkoZnVuKSkge1xyXG4gICAgICAgICAgICB2YXIgZm4gPSBjdWJlLm1vZHVsZVtmdW5dO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgIGZuLmNhbGwoY3ViZS5tb2R1bGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmNhbGxPblR5cGUgPSBmdW5jdGlvbihmdW4sIHR5cGUpIHtcclxuICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMuY3ViZXNIZWlnaHQoKTsgY29sKyspIHtcclxuICAgICAgICAgdmFyIGN1YmUgPSB0aGlzLmN1YmVzW3Jvd11bY29sXTtcclxuICAgICAgICAgaWYgKGN1YmUgJiYgY3ViZS5oYXNPd25Qcm9wZXJ0eShmdW4pKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIGN1YmVzIG5lZWQgZnVuY3Rpb25zIGNhbGxlZFxyXG4gICAgICAgICB9IGVsc2UgaWYgKGN1YmUgJiYgY3ViZS5tb2R1bGUgJiYgY3ViZS5tb2R1bGUudHlwZSA9PT0gdHlwZSAmJiBjdWJlLm1vZHVsZS5oYXNPd25Qcm9wZXJ0eShmdW4pKSB7XHJcbiAgICAgICAgICAgIHZhciBmbiA9IGN1YmUubW9kdWxlW2Z1bl07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgZm4uY2FsbChjdWJlLm1vZHVsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZ2V0TW9kdWxlcyA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgdmFyIG1vZHVsZXMgPSBbXTtcclxuICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMuY3ViZXNIZWlnaHQoKTsgY29sKyspIHtcclxuICAgICAgICAgdmFyIGN1YmUgPSB0aGlzLmN1YmVzW3Jvd11bY29sXTtcclxuICAgICAgICAgaWYgKGN1YmUgJiYgY3ViZS5tb2R1bGUudHlwZSA9PT0gdHlwZSkge1xyXG4gICAgICAgICAgICBtb2R1bGVzLnB1c2goY3ViZS5tb2R1bGUpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICByZXR1cm4gbW9kdWxlcztcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZ2l2ZUFJID0gZnVuY3Rpb24odHlwZSwgcGxheWVyKSB7XHJcbiAgIHRoaXMuQUkgPSBuZXcgRW5lbXlBSSh0aGlzLmdhbWUsIHRoaXMsIHR5cGUsIHBsYXllcik7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGN1YmUsIHBvaW50KSB7XHJcbiAgaWYgKCF0aGlzLnJvb3QgJiYgY3ViZS5tb2R1bGUudHlwZSA9PT0gJ2NvcmUnKSB7XHJcbiAgICAgdGhpcy5yb290ID0gY3ViZTtcclxuICB9XHJcbiAgY3ViZS5ncm91cCA9IHRoaXM7XHJcbiAgdGhpcy5zZXQoY3ViZSwgcG9pbnQpO1xyXG4gIHRoaXMuY3JlYXRlQ29uc3RyYWludHNTcGVjaWFsKGN1YmUpO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5oYW5kbGVBdHRhdGNoID0gZnVuY3Rpb24ob3JpZ2luLCBvdGhlcikge1xyXG4gICBpZiAodGhpcy5kZWJ1Z0hhbmRsZUF0dGF0Y2gpIHsgY29uc29sZS5sb2coJ2hhbmRsZUNvbGxpc2lvbigpIHN0YXJ0OicsIG9yaWdpbi5tb2R1bGUudHlwZSwgb3RoZXIubW9kdWxlLnR5cGUpOyB9XHJcbiAgIGlmICh0aGlzLmRlYnVnSGFuZGxlQXR0YXRjaCkgeyB0aGlzLmRpc3BsYXlDdWJlcygpOyB9XHJcbiAgIGlmICh0aGlzLmdldChvdGhlcikpIHtcclxuICAgICAgY29uc29sZS5sb2coJ2hhbmRsZUF0dGF0Y2goKSB3YXMgZ2l2ZW4gYSBtZW1iZXInKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIHZhciByZWxTaWRlID0gdGhpcy5yZWxhdGl2ZVNpZGUob3JpZ2luLmJvZHksIG90aGVyLmJvZHkpO1xyXG4gICB2YXIgb3JpZ2luTG9jID0gdGhpcy5maW5kKG9yaWdpbik7XHJcbiAgIHZhciBvdGhlckxvYyA9IHRoaXMuY2FsY1BvcyhvcmlnaW4sIHJlbFNpZGUpO1xyXG4gICB0aGlzLm1vZHVsZUNvbm5lY3QucGxheSgpO1xyXG4gICBpZiAodGhpcy5kZWJ1Z0hhbmRsZUF0dGF0Y2gpIGNvbnNvbGUubG9nKCdoYW5kbGVDb2xsaXNpb24oKSBwcmUtZmluZDonLCAncmVsU2lkZTonLCByZWxTaWRlLCAnb3JpZ2luTG9jOicsIE1hdGguZmxvb3Iob3JpZ2luTG9jLngpLCBNYXRoLmZsb29yKG9yaWdpbkxvYy55KSwgJ290aGVyTG9jOicsIE1hdGguZmxvb3Iob3RoZXJMb2MueCksIE1hdGguZmxvb3Iob3RoZXJMb2MueSkpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuICAgdGhpcy5zZXQob3RoZXIsIG90aGVyTG9jKTtcclxuICAgb3RoZXJMb2MgPSB0aGlzLmZpbmQob3RoZXIpOyAvLyB1cGRhdGUgcG9zaXRpb24gc2luY2Ugc2V0IGNhbiBzaGlmdCBncmlkXHJcbiAgIGlmICghb3RoZXJMb2MpIHtcclxuICAgICAgaWYgKHRoaXMuZGVidWdIYW5kbGVBdHRhdGNoKSB7XHJcbiAgICAgICAgIGNvbnNvbGUubG9nKCdoYW5kbGVDb2xsaXNpb24oKTogb3RoZXJMb2MgRE5FJywgJy0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xyXG4gICAgICAgICB0aGlzLmRpc3BsYXlDdWJlcygpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICB2YXIgcmVsYXRpdmVOb3J0aCA9IHRoaXMucmVsYXRpdmVOb3J0aChvdGhlcik7IC8vIG90aGVyJ3Mgbm9ydGggcG9pbnRzIHRoaXMgZGlyIHJlbGF0aXZlIHRvIHRoZSByb290XHJcbiAgIGlmICh0aGlzLmRlYnVnSGFuZGxlQXR0YXRjaCkgeyBjb25zb2xlLmxvZygnaGFuZGxlQ29sbGlzaW9uKCkgcG9zdC1maW5kOicsICdvdGhlckxvYzonLCBNYXRoLmZsb29yKG90aGVyTG9jLngpLCBNYXRoLmZsb29yKG90aGVyTG9jLnkpLCAncmVsYXRpdmVOb3J0aDonLCByZWxhdGl2ZU5vcnRoKTsgfVxyXG4gICB0aGlzLmNyZWF0ZUNvbnN0cmFpbnRzKG90aGVyLCBvdGhlckxvYywgcmVsYXRpdmVOb3J0aCk7XHJcbiAgIGlmIChvdGhlci5tb2R1bGUudHlwZSA9PT0gJ3NvbGFyUGFuZWwnKSB7XHJcbiAgICAgIHRoaXMuY3JlYXRlQ29ubmVjdGlvbkZyb20ob3RoZXIpO1xyXG4gICB9IGVsc2UgaWYgKG90aGVyLm1vZHVsZS5wb3dlcmFibGUpIHtcclxuICAgICAgdmFyIHNwYXJlU29sYXJQYW5lbCA9IHRoaXMuc3BhcmVTb2xhclBhbmVsKCk7XHJcbiAgICAgIGlmIChzcGFyZVNvbGFyUGFuZWwpIHtcclxuICAgICAgICAgc3BhcmVTb2xhclBhbmVsLmdpdmVUYXJnZXQob3RoZXIubW9kdWxlKTtcclxuICAgICAgfVxyXG4gICB9XHJcbiAgIGlmICh0aGlzLmRlYnVnSGFuZGxlQXR0YXRjaCkgeyB0aGlzLmRpc3BsYXlDdWJlcygpOyB9XHJcbiAgIGlmICh0aGlzLmRlYnVnSGFuZGxlQXR0YXRjaCkgeyBjb25zb2xlLmxvZygnaGFuZGxlQ29sbGlzaW9uKCkgZW5kOicsICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTsgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5yZWxhdGl2ZU5vcnRoID0gZnVuY3Rpb24oY3ViZSkge1xyXG4gICB2YXIgZGlmZkFuZ2xlID0gY3ViZS5ib2R5LnJvdGF0aW9uIC0gdGhpcy5yb290LmJvZHkucm90YXRpb247XHJcbiAgIHZhciByZWxhdGl2ZSA9IHRoaXMuYW5nbGVUb0RpcihkaWZmQW5nbGUpO1xyXG4gICByZXR1cm4gcmVsYXRpdmU7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmNyZWF0ZUNvbm5lY3Rpb25Gcm9tID0gZnVuY3Rpb24ocGFuZWwpIHtcclxuICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMuY3ViZXNIZWlnaHQoKTsgY29sKyspIHtcclxuICAgICAgICAgdmFyIGN1YmUgPSB0aGlzLmN1YmVzW3Jvd11bY29sXTtcclxuICAgICAgICAgaWYgKGN1YmUgJiYgY3ViZSAhPT0gcGFuZWwgJiYgIWN1YmUubXlDb25uZWN0aW9uICYmIGN1YmUubW9kdWxlLnBvd2VyYWJsZSkge1xyXG4gICAgICAgICAgICBwYW5lbC5tb2R1bGUuZ2l2ZVRhcmdldChjdWJlLm1vZHVsZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuc3BhcmVTb2xhclBhbmVsID0gZnVuY3Rpb24oKSB7XHJcbiAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmN1YmVzSGVpZ2h0KCk7IGNvbCsrKSB7XHJcbiAgICAgICAgIHZhciBjdWJlID0gdGhpcy5jdWJlc1tyb3ddW2NvbF07XHJcbiAgICAgICAgIGlmIChjdWJlICYmICFjdWJlLm15Q29ubmVjdGlvbiAmJiBjdWJlLm1vZHVsZS50eXBlID09PSAnc29sYXJQYW5lbCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGN1YmUubW9kdWxlO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5oYW5kbGVSYW1taW5nID0gZnVuY3Rpb24ob3JpZ2luLCBvdGhlcikge1xyXG4gICBpZiAoIW90aGVyLmdyb3VwIHx8IG90aGVyLmdyb3VwID09PSB0aGlzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICB2YXIgc3VtVmVsID0gTWF0aC5hYnMob3JpZ2luLmJvZHkudmVsb2NpdHkueCkgKyBNYXRoLmFicyhvcmlnaW4uYm9keS52ZWxvY2l0eS55KTtcclxuICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2hhbmRsZVJhbW1pbmcoKTonLCAnc3VtVmVsOicsIHN1bVZlbC50b1ByZWNpc2lvbig0KSk7IH1cclxuICAgaWYgKHN1bVZlbCA+PSB0aGlzLm1pblJhbVZlbCkge1xyXG4gICAgICBpZiAodGhpcy5nYW1lLmp1aWN5KSB7XHJcbiAgICAgICAgIHRoaXMuZ2FtZS5qdWljeS5zaGFrZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIG90aGVyLnRha2VEYW1hZ2UoMyk7XHJcbiAgICAgIHRoaXMuY2FsbCgndGhydXN0ZXJIYWx0Jyk7XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuY2FsY1BvcyA9IGZ1bmN0aW9uKG9yaWdpbiwgcmVsU2lkZSkge1xyXG4gICB2YXIgZGlmZkFuZ2xlID0gb3JpZ2luLmJvZHkucm90YXRpb24gLSB0aGlzLnJvb3QuYm9keS5yb3RhdGlvbjtcclxuICAgdmFyIHJlbGF0aXZlID0gdGhpcy5hbmdsZVRvRGlyKGRpZmZBbmdsZSk7XHJcbiAgIHZhciBvdXRwdXQgPSB0aGlzLmZpbmQob3JpZ2luKTtcclxuICAgaWYgKCFvdXRwdXQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIGlmIChyZWxhdGl2ZSA9PT0gMCkgeyAvLyBub3J0aCByZWxhdGl2ZSB0byB0aGUgcm9vdFxyXG4gICAgICBpZiAocmVsU2lkZSA9PT0gMCkge1xyXG4gICAgICAgICBvdXRwdXQueSsrO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbFNpZGUgPT09IDEpIHtcclxuICAgICAgICAgb3V0cHV0LngrKztcclxuICAgICAgfSBlbHNlIGlmIChyZWxTaWRlID09PSAyKSB7XHJcbiAgICAgICAgIG91dHB1dC55LS07XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsU2lkZSA9PT0gMykge1xyXG4gICAgICAgICBvdXRwdXQueC0tO1xyXG4gICAgICB9XHJcbiAgIH0gZWxzZSBpZiAocmVsYXRpdmUgPT09IDEpIHsgLy8gZWFzdCByZWxhdGl2ZSB0byByb290XHJcbiAgICAgIGlmIChyZWxTaWRlID09PSAwKSB7XHJcbiAgICAgICAgIG91dHB1dC54Kys7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsU2lkZSA9PT0gMSkge1xyXG4gICAgICAgICBvdXRwdXQueS0tO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbFNpZGUgPT09IDIpIHtcclxuICAgICAgICAgb3V0cHV0LngtLTtcclxuICAgICAgfSBlbHNlIGlmIChyZWxTaWRlID09PSAzKSB7XHJcbiAgICAgICAgIG91dHB1dC55Kys7XHJcbiAgICAgIH1cclxuICAgfSBlbHNlIGlmIChyZWxhdGl2ZSA9PT0gMikgeyAvLyBzb3V0aCByZWxhdGl2ZSB0byByb290XHJcbiAgICAgIGlmIChyZWxTaWRlID09PSAwKSB7XHJcbiAgICAgICAgIG91dHB1dC55LS07XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsU2lkZSA9PT0gMSkge1xyXG4gICAgICAgICBvdXRwdXQueC0tO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbFNpZGUgPT09IDIpIHtcclxuICAgICAgICAgb3V0cHV0LnkrKztcclxuICAgICAgfSBlbHNlIGlmIChyZWxTaWRlID09PSAzKSB7XHJcbiAgICAgICAgIG91dHB1dC54Kys7XHJcbiAgICAgIH1cclxuICAgfSBlbHNlIGlmIChyZWxhdGl2ZSA9PT0gMykgeyAvLyB3ZXN0IHJlbGF0aXZlIHRvIHJvb3RcclxuICAgICAgaWYgKHJlbFNpZGUgPT09IDApIHtcclxuICAgICAgICAgb3V0cHV0LngtLTtcclxuICAgICAgfSBlbHNlIGlmIChyZWxTaWRlID09PSAxKSB7XHJcbiAgICAgICAgIG91dHB1dC55Kys7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsU2lkZSA9PT0gMikge1xyXG4gICAgICAgICBvdXRwdXQueCsrO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbFNpZGUgPT09IDMpIHtcclxuICAgICAgICAgb3V0cHV0LnktLTtcclxuICAgICAgfVxyXG4gICB9XHJcbiAgIHJldHVybiBvdXRwdXQ7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmFuZ2xlVG9EaXIgPSBmdW5jdGlvbihhbmdsZSkge1xyXG4gICBpZiAoYW5nbGUgPj0gMCkge1xyXG4gICAgIGFuZ2xlICU9IDIgKiBNYXRoLlBJO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAgYW5nbGUgKj0gLTE7XHJcbiAgICAgYW5nbGUgJT0gMiAqIE1hdGguUEk7XHJcbiAgICAgYW5nbGUgKj0gLTE7XHJcbiAgfVxyXG4gIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdhbmdsZVRvRGlyKCk6JywgJ2FuZ2xlOicsIGFuZ2xlLnRvUHJlY2lzaW9uKDQpKTsgfVxyXG4gIGlmICgoYW5nbGUgPj0gLTEgLyA0ICogTWF0aC5QSSAmJiBhbmdsZSA8IDEgLyA0ICogTWF0aC5QSSkgfHwgYW5nbGUgPiA3IC8gNCAqIE1hdGguUEkpIHtcclxuICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnYW5nbGVUb0RpcigpIGNhc2Ugb25lIE5PUlRIJyk7IH1cclxuICAgICByZXR1cm4gdGhpcy5ESVIuTk9SVEg7XHJcbiAgfSBlbHNlIGlmIChhbmdsZSA+PSAxIC8gNCAqIE1hdGguUEkgJiYgYW5nbGUgPCAzIC8gNCAqIE1hdGguUEkpIHtcclxuICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnYW5nbGVUb0RpcigpIGNhc2UgdHdvIEVBU1QnKTsgfVxyXG4gICAgIHJldHVybiB0aGlzLkRJUi5FQVNUO1xyXG4gIH0gZWxzZSBpZiAoYW5nbGUgPj0gMyAvIDQgKiBNYXRoLlBJICYmIGFuZ2xlIDwgNSAvIDQgKiBNYXRoLlBJKSB7XHJcbiAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2FuZ2xlVG9EaXIoKSBjYXNlIHRocmVlIFNPVVRIJyk7IH1cclxuICAgICByZXR1cm4gdGhpcy5ESVIuU09VVEg7XHJcbiAgfSBlbHNlIGlmIChhbmdsZSA+PSA1IC8gNCAqIE1hdGguUEkgJiYgYW5nbGUgPCA3IC8gNCAqIE1hdGguUEkpIHtcclxuICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnYW5nbGVUb0RpcigpIGNhc2UgZm91ciBXRVNUJyk7IH1cclxuICAgICByZXR1cm4gdGhpcy5ESVIuV0VTVDtcclxuICB9IGVsc2UgaWYgKGFuZ2xlID49IC0zIC8gNCAqIE1hdGguUEkgJiYgYW5nbGUgPCAtMSAvIDQgKiBNYXRoLlBJKSB7XHJcbiAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2FuZ2xlVG9EaXIoKSBjYXNlIGZpdmUgV0VTVCcpOyB9XHJcbiAgICAgcmV0dXJuIHRoaXMuRElSLldFU1Q7XHJcbiAgfSBlbHNlIGlmIChhbmdsZSA+PSAtNSAvIDQgKiBNYXRoLlBJICYmIGFuZ2xlIDwgLTMgLyA0ICogTWF0aC5QSSkge1xyXG4gICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdhbmdsZVRvRGlyKCkgY2FzZSBzaXggU09VVEgnKTsgfVxyXG4gICAgIHJldHVybiB0aGlzLkRJUi5TT1VUSDtcclxuICB9IGVsc2UgaWYgKGFuZ2xlID49IC03IC8gNCAqIE1hdGguUEkgJiYgYW5nbGUgPCAtNSAvIDQgKiBNYXRoLlBJKSB7XHJcbiAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2FuZ2xlVG9EaXIoKSBjYXNlIHNldmVuIEVBU1QnKTsgfVxyXG4gICAgIHJldHVybiB0aGlzLkRJUi5FQVNUO1xyXG4gIH0gZWxzZSBpZiAoYW5nbGUgPCAtNyAvIDQgKiBNYXRoLlBJKSB7XHJcbiAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2FuZ2xlVG9EaXIoKSBjYXNlIGVpZ2h0IE5PUlRIJyk7IH1cclxuICAgICByZXR1cm4gdGhpcy5ESVIuTk9SVEg7XHJcbiAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5kaXJUb05laWdoYm91clJlbGF0aXZlID0gZnVuY3Rpb24ocG9pbnRBLCBwb2ludEIpIHtcclxuICBpZiAocG9pbnRBLnggPiBwb2ludEIueCkgeyAvLyBuZWlnaGJvdXIgaXMgdG8gdGhlIGxlZnRcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLldFU1Q7XHJcbiAgfSBlbHNlIGlmIChwb2ludEEueCA8IHBvaW50Qi54KSB7IC8vIG5laWdoYm91ciBpcyB0byB0aGUgcmlnaHRcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLkVBU1Q7XHJcbiAgfSBlbHNlIGlmIChwb2ludEEueSA+IHBvaW50Qi55KSB7IC8vIG5laWdoYm91ciBpcyB0byBiZWxvd1xyXG4gICAgIHJldHVybiB0aGlzLkRJUi5TT1VUSDtcclxuICB9IGVsc2UgeyAvLyBuZWlnaGJvdXIgaXMgYWJvdmVcclxuICAgICByZXR1cm4gdGhpcy5ESVIuTk9SVEg7XHJcbiAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5kZWNpZGVTaWRlUmVsYXRpdmUgPSBmdW5jdGlvbihwb2ludEEsIHBvaW50QiwgcmVsYXRpdmVOb3J0aCkge1xyXG4gIGlmIChwb2ludEEueCA+IHBvaW50Qi54KSB7IC8vIG5laWdoYm91ciBpcyB0byB0aGUgbGVmdFxyXG4gICBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuTk9SVEgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLldFU1Q7XHJcbiAgIH0gZWxzZSBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuRUFTVCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ESVIuU09VVEg7XHJcbiAgIH0gZWxzZSBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuU09VVEgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLkVBU1Q7XHJcbiAgIH0gZWxzZSBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuV0VTVCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ESVIuTk9SVEg7XHJcbiAgIH1cclxuICB9IGVsc2UgaWYgKHBvaW50QS54IDwgcG9pbnRCLngpIHsgLy8gbmVpZ2hib3VyIGlzIHRvIHRoZSByaWdodFxyXG4gICAgICBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuTk9SVEgpIHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuRElSLkVBU1Q7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuRUFTVCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5ESVIuTk9SVEg7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuU09VVEgpIHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuRElSLldFU1Q7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuV0VTVCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5ESVIuU09VVEg7XHJcbiAgICAgIH1cclxuICB9IGVsc2UgaWYgKHBvaW50QS55ID4gcG9pbnRCLnkpIHsgLy8gbmVpZ2hib3VyIGlzIHRvIGJlbG93XHJcbiAgICAgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLk5PUlRIKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLkRJUi5TT1VUSDtcclxuICAgICAgfSBlbHNlIGlmIChyZWxhdGl2ZU5vcnRoID09PSB0aGlzLkRJUi5FQVNUKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLkRJUi5FQVNUO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLlNPVVRIKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLkRJUi5OT1JUSDtcclxuICAgICAgfSBlbHNlIGlmIChyZWxhdGl2ZU5vcnRoID09PSB0aGlzLkRJUi5XRVNUKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLkRJUi5XRVNUO1xyXG4gICAgICB9XHJcbiAgfSBlbHNlIHsgLy8gbmVpZ2hib3VyIGlzIGFib3ZlXHJcbiAgICAgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLk5PUlRIKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLkRJUi5OT1JUSDtcclxuICAgICAgfSBlbHNlIGlmIChyZWxhdGl2ZU5vcnRoID09PSB0aGlzLkRJUi5FQVNUKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLkRJUi5XRVNUO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLlNPVVRIKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLkRJUi5TT1VUSDtcclxuICAgICAgfSBlbHNlIGlmIChyZWxhdGl2ZU5vcnRoID09PSB0aGlzLkRJUi5XRVNUKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLkRJUi5FQVNUO1xyXG4gICAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jcmVhdGVDb25zdHJhaW50cyA9IGZ1bmN0aW9uKG1lLCBteVBvaW50LCByZWxhdGl2ZU5vcnRoKSB7XHJcbiAgIHZhciBuZWlnaGJvdXJzID0gdGhpcy5nZXROZWlnaGJvdXJzKG1lKTtcclxuICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZWlnaGJvdXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBuZWlnaGJvdXIgPSBuZWlnaGJvdXJzW2ldO1xyXG4gICAgICB2YXIgbmVpZ2hib3VyUG9pbnQgPSB0aGlzLmZpbmQobmVpZ2hib3VyKTtcclxuICAgICAgdmFyIG5laWdoYm91clJlbGF0aXZlTm9ydGggPSB0aGlzLnJlbGF0aXZlTm9ydGgobmVpZ2hib3VyKTtcclxuICAgICAgdmFyIG15U2lkZSA9IHRoaXMuZGVjaWRlU2lkZVJlbGF0aXZlKG15UG9pbnQsIG5laWdoYm91clBvaW50LCByZWxhdGl2ZU5vcnRoKTtcclxuICAgICAgdmFyIG5laWdoYm91clNpZGUgPSB0aGlzLmRlY2lkZVNpZGVSZWxhdGl2ZShuZWlnaGJvdXJQb2ludCwgbXlQb2ludCwgbmVpZ2hib3VyUmVsYXRpdmVOb3J0aCk7XHJcbiAgICAgIGlmICh0aGlzLmRlYnVnQ3JlYXRlQ29uc3RyYWludHMpIHsgY29uc29sZS5sb2coJ2NyZWF0ZUNvbnN0cmFpbnRzKCk6JywgJ215U2lkZTonLCBteVNpZGUsICduZWlnaGJvdXJTaWRlOicsIG5laWdoYm91clNpZGUpOyB9XHJcbiAgICAgIHZhciBjb25zdHJhaW50O1xyXG4gICAgICB2YXIgb2Zmc2V0ID0gbWUud2lkdGggKyB0aGlzLm9mZnNldDtcclxuICAgICAgaWYgKG15U2lkZSA9PT0gMCkge1xyXG4gICAgICAgIGlmIChuZWlnaGJvdXJTaWRlID09PSAwKSB7XHJcbiAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgb2Zmc2V0XSwgTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWzAsIG9mZnNldF0sIDEgLyAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWzAsIG9mZnNldF0sIDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMykge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFswLCBvZmZzZXRdLCAzIC8gMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIH1cclxuICAgICB9IGVsc2UgaWYgKG15U2lkZSA9PT0gMSkge1xyXG4gICAgICAgIGlmIChuZWlnaGJvdXJTaWRlID09PSAwKSB7XHJcbiAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbLW9mZnNldCwgMF0sIC0xIC8gMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFstb2Zmc2V0LCAwXSwgTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWy1vZmZzZXQsIDBdLCAxIC8gMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMykge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFstb2Zmc2V0LCAwXSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgIH0gZWxzZSBpZiAobXlTaWRlID09PSAyKSB7XHJcbiAgICAgICAgIGlmIChuZWlnaGJvdXJTaWRlID09PSAwKSB7XHJcbiAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgLW9mZnNldF0sIDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFswLCAtb2Zmc2V0XSwgMyAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDIpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgLW9mZnNldF0sIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMykge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFswLCAtb2Zmc2V0XSwgMSAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9XHJcbiAgICAgfSBlbHNlIGlmIChteVNpZGUgPT09IDMpIHtcclxuICAgICAgICBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMCkge1xyXG4gICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgW29mZnNldCwgMF0sIDEgLyAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgW29mZnNldCwgMF0sIDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMikge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFtvZmZzZXQsIDBdLCAtMSAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDMpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbb2Zmc2V0LCAwXSwgTWF0aC5QSSk7XHJcbiAgICAgICAgfVxyXG4gICAgIH1cclxuICAgICBtZS5jb25zdHJhaW50cy5wdXNoKGNvbnN0cmFpbnQpO1xyXG4gICAgIG5laWdoYm91ci5jb25zdHJhaW50cy5wdXNoKGNvbnN0cmFpbnQpO1xyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmNyZWF0ZUNvbnN0cmFpbnRzU3BlY2lhbCA9IGZ1bmN0aW9uKG1lKSB7XHJcbiAgIHZhciBuZWlnaGJvdXJzID0gdGhpcy5nZXROZWlnaGJvdXJzKG1lKTtcclxuICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZWlnaGJvdXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBuZWlnaGJvdXIgPSBuZWlnaGJvdXJzW2ldO1xyXG4gICAgICB2YXIgbXlTaWRlID0gdGhpcy5yZWxhdGl2ZVNpZGUobWUuYm9keSwgbmVpZ2hib3VyLmJvZHkpO1xyXG4gICAgICB2YXIgbmVpZ2hib3VyU2lkZSA9IHRoaXMucmVsYXRpdmVTaWRlKG5laWdoYm91ci5ib2R5LCBtZS5ib2R5KTtcclxuICAgICAgaWYgKHRoaXMuZGVidWdDcmVhdGVDb25zdHJhaW50cykgeyBjb25zb2xlLmxvZygnY3JlYXRlQ29uc3RyYWludHNTcGVjaWFsKCk6JywgJ215U2lkZTonLCBteVNpZGUsICduZWlnaGJvdXJTaWRlOicsIG5laWdoYm91clNpZGUpOyB9XHJcbiAgICAgIHZhciBjb25zdHJhaW50O1xyXG4gICAgICB2YXIgb2Zmc2V0ID0gbWUud2lkdGggKyB0aGlzLm9mZnNldDtcclxuICAgICAgaWYgKG15U2lkZSA9PT0gMCkge1xyXG4gICAgICAgIGlmIChuZWlnaGJvdXJTaWRlID09PSAwKSB7XHJcbiAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgb2Zmc2V0XSwgTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWzAsIG9mZnNldF0sIDEgLyAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWzAsIG9mZnNldF0sIDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMykge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFswLCBvZmZzZXRdLCAzIC8gMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIH1cclxuICAgICB9IGVsc2UgaWYgKG15U2lkZSA9PT0gMSkge1xyXG4gICAgICAgIGlmIChuZWlnaGJvdXJTaWRlID09PSAwKSB7XHJcbiAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbLW9mZnNldCwgMF0sIC0xIC8gMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFstb2Zmc2V0LCAwXSwgTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWy1vZmZzZXQsIDBdLCAxIC8gMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMykge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFstb2Zmc2V0LCAwXSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgIH0gZWxzZSBpZiAobXlTaWRlID09PSAyKSB7XHJcbiAgICAgICAgIGlmIChuZWlnaGJvdXJTaWRlID09PSAwKSB7XHJcbiAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgLW9mZnNldF0sIDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFswLCAtb2Zmc2V0XSwgMyAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDIpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgLW9mZnNldF0sIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMykge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFswLCAtb2Zmc2V0XSwgMSAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9XHJcbiAgICAgfSBlbHNlIGlmIChteVNpZGUgPT09IDMpIHtcclxuICAgICAgICBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMCkge1xyXG4gICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgW29mZnNldCwgMF0sIDEgLyAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgW29mZnNldCwgMF0sIDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMikge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFtvZmZzZXQsIDBdLCAtMSAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDMpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbb2Zmc2V0LCAwXSwgTWF0aC5QSSk7XHJcbiAgICAgICAgfVxyXG4gICAgIH1cclxuICAgICBtZS5jb25zdHJhaW50cy5wdXNoKGNvbnN0cmFpbnQpO1xyXG4gICAgIG5laWdoYm91ci5jb25zdHJhaW50cy5wdXNoKGNvbnN0cmFpbnQpO1xyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLnJlbGF0aXZlU2lkZSA9IGZ1bmN0aW9uKHRoaXNCb2R5LCBvdGhlckJvZHkpIHtcclxuICB2YXIgdGhpc1BvaW50ID0gbmV3IFBoYXNlci5Qb2ludCh0aGlzQm9keS54LCB0aGlzQm9keS55KTtcclxuICB2YXIgb3RoZXJQb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQob3RoZXJCb2R5LngsIG90aGVyQm9keS55KTtcclxuICB2YXIgYW5nbGVUb090aGVyID0gdGhpcy5hbmdsZUJldHdlZW5Qb2ludHModGhpc1BvaW50LCBvdGhlclBvaW50KTtcclxuICB2YXIgZGlmZkFuZ2xlID0gYW5nbGVUb090aGVyIC0gdGhpc0JvZHkucm90YXRpb247XHJcbiAgdmFyIHJldHVybkRpciA9IHRoaXMuYW5nbGVUb0RpcihkaWZmQW5nbGUpO1xyXG4gIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdyZWxhdGl2ZVNpZGUoKTonLCAnYW5nbGVUb090aGVyOicsIGFuZ2xlVG9PdGhlci50b1ByZWNpc2lvbig0KSwgJ3RoaXNCb2R5LnJvdGF0aW9uOicsIHRoaXNCb2R5LnJvdGF0aW9uLnRvUHJlY2lzaW9uKDQpLCAnZGlmZkFuZ2xlOicsIGRpZmZBbmdsZS50b1ByZWNpc2lvbig0KSwgJ3JldHVybkRpcjonLCByZXR1cm5EaXIpOyB9XHJcbiAgcmV0dXJuIHJldHVybkRpcjtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuYW5nbGVCZXR3ZWVuUG9pbnRzID0gZnVuY3Rpb24odGhpc1BvaW50LCBvdGhlclBvaW50KSB7XHJcbiAgdmFyIGFuZ2xlVG9PdGhlciA9IFBoYXNlci5Qb2ludC5hbmdsZSh0aGlzUG9pbnQsIG90aGVyUG9pbnQpO1xyXG4gIGlmIChhbmdsZVRvT3RoZXIgPCAwKSB7IC8vIGZpeCBkdW1iIHBhcnQgb2YgUGhhc2VyLlBvaW50LmFuZ2xlKClcclxuICAgICBhbmdsZVRvT3RoZXIgPSAyICogTWF0aC5QSSArIGFuZ2xlVG9PdGhlcjtcclxuICB9XHJcbiAgYW5nbGVUb090aGVyID0gKGFuZ2xlVG9PdGhlciArIDMvMiAqIE1hdGguUEkpICUgKDIgKiBNYXRoLlBJKTsgLy8gcm90YXRlIDkwIGQgY2xvY2t3aXNlXHJcbiAgIHJldHVybiBhbmdsZVRvT3RoZXI7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihjdWJlKSB7XHJcbiAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmN1YmVzSGVpZ2h0KCk7IGNvbCsrKSB7XHJcbiAgICAgICAgIGlmICh0aGlzLmN1YmVzW3Jvd11bY29sXSA9PT0gY3ViZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBoYXNlci5Qb2ludChyb3csIGNvbCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcbiAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHBvaW50KSB7XHJcbiAgaWYgKCFwb2ludCB8fCB0aGlzLm91dE9mQm91bmRzKHBvaW50KSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgfVxyXG4gIHJldHVybiB0aGlzLmN1YmVzW3BvaW50LnhdW3BvaW50LnldO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jdWJlc1dpZHRoID0gZnVuY3Rpb24oKSB7XHJcbiAgIHJldHVybiB0aGlzLmN1YmVzLmxlbmd0aDtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuY3ViZXNIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuICAgcmV0dXJuIHRoaXMuY3ViZXNbMF0ubGVuZ3RoO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5hZGRUb3BSb3cgPSBmdW5jdGlvbigpIHtcclxuICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIHRoaXMuY3ViZXNbcm93XS5wdXNoKHVuZGVmaW5lZCk7XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuYWRkUmlnaHRDb2wgPSBmdW5jdGlvbigpIHtcclxuICAgdmFyIG5ld0NvbCA9IFtdO1xyXG4gICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY3ViZXNIZWlnaHQoKTsgaSsrKSB7XHJcbiAgICAgIG5ld0NvbC5wdXNoKHVuZGVmaW5lZCk7XHJcbiAgIH1cclxuICAgdGhpcy5jdWJlcy5wdXNoKG5ld0NvbCk7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmFkZEJvdFJvdyA9IGZ1bmN0aW9uKCkge1xyXG4gICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCB0aGlzLmN1YmVzV2lkdGgoKTsgcm93KyspIHtcclxuICAgICAgdGhpcy5jdWJlc1tyb3ddLnVuc2hpZnQodW5kZWZpbmVkKTtcclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5hZGRMZWZ0Q29sID0gZnVuY3Rpb24oKSB7XHJcbiAgIHZhciBuZXdDb2wgPSBuZXcgQXJyYXkodGhpcy5jdWJlc0hlaWdodCgpKTtcclxuICAgdGhpcy5jdWJlcy51bnNoaWZ0KG5ld0NvbCk7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmdldEN1YmUgPSBmdW5jdGlvbihwb2ludCkge1xyXG4gICBpZiAoIXBvaW50IHx8IHRoaXMub3V0T2ZCb3VuZHMocG9pbnQpKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgIH1cclxuICAgcmV0dXJuIHRoaXMuY3ViZXNbcG9pbnQueF1bcG9pbnQueV07XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmFkanVzdCA9IGZ1bmN0aW9uKHBvaW50LCBkaXIpIHtcclxuICBpZiAoIXBvaW50KSB7XHJcbiAgICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgbmV3UG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KHBvaW50LngsIHBvaW50LnkpO1xyXG4gIHN3aXRjaCAoZGlyKSB7XHJcbiAgICAgIGNhc2UgdGhpcy5ESVIuTk9SVEg6XHJcbiAgICAgIG5ld1BvaW50LnkrKztcclxuICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgdGhpcy5ESVIuRUFTVDpcclxuICAgICAgbmV3UG9pbnQueCsrO1xyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSB0aGlzLkRJUi5TT1VUSDpcclxuICAgICAgbmV3UG9pbnQueS0tO1xyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSB0aGlzLkRJUi5XRVNUOlxyXG4gICAgICBuZXdQb2ludC54LS07XHJcbiAgICAgIGJyZWFrO1xyXG4gICB9XHJcbiAgIHJldHVybiBuZXdQb2ludDtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oY3ViZSwgcG9pbnQpIHtcclxuICAgaWYgKCFwb2ludCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnc2V0IGdpdmVuIHVuZGVmaW5lZCBwb2ludCcpO1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgaWYgKHBvaW50LnggPCAwKSB7XHJcbiAgICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdhZGQgbGVmdCBjb2wnKTsgfVxyXG4gICAgICB0aGlzLmFkZExlZnRDb2woKTtcclxuICAgICAgcG9pbnQueCA9IDA7XHJcbiAgIH0gZWxzZSBpZiAocG9pbnQueCA+PSB0aGlzLmN1YmVzV2lkdGgoKSkge1xyXG4gICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnYWRkIHJpZ2h0IGNvbCcpOyB9XHJcbiAgICAgIHRoaXMuYWRkUmlnaHRDb2woKTtcclxuICAgICAgcG9pbnQueCA9IHRoaXMuY3ViZXNXaWR0aCgpIC0gMTtcclxuICAgfSBlbHNlIGlmIChwb2ludC55IDwgMCkge1xyXG4gICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnYWRkIGJvdCByb3cnKTsgfVxyXG4gICAgICB0aGlzLmFkZEJvdFJvdygpO1xyXG4gICAgICBwb2ludC55ID0gMDtcclxuICAgfSBlbHNlIGlmIChwb2ludC55ID49IHRoaXMuY3ViZXNIZWlnaHQoKSkge1xyXG4gICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnYWRkIHRvcCByb3cnKTsgfVxyXG4gICAgICB0aGlzLmFkZFRvcFJvdygpO1xyXG4gICAgICBwb2ludC55ID0gdGhpcy5jdWJlc0hlaWdodCgpIC0gMTtcclxuICAgfVxyXG4gICBpZiAodGhpcy5nZXQocG9pbnQpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICB0aGlzLmN1YmVzW3BvaW50LnhdW3BvaW50LnldID0gY3ViZTtcclxuICAgY3ViZS5ncm91cCA9IHRoaXM7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLm91dE9mQm91bmRzID0gZnVuY3Rpb24ocG9pbnQpIHtcclxuICAgaWYgKCFwb2ludCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnb3V0IG9mIGJvdW5kcyBnaXZlbiB1bmRlZmluZWQgcG9pbnQnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIGlmIChwb2ludC54IDwgMCB8fCBwb2ludC54ID49IHRoaXMuY3ViZXNXaWR0aCgpIHx8IHBvaW50LnkgPCAwIHx8IHBvaW50LnkgPj0gdGhpcy5jdWJlc0hlaWdodCgpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICB9XHJcbiAgIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZGlzcGxheUN1YmVzID0gZnVuY3Rpb24oKSB7XHJcbiAgIHZhciBvdXRwdXQgPSAnZGlzcGxheUN1YmVzKCk6XFxuJztcclxuICAgdmFyIHJvdyA9IDA7XHJcbiAgIHZhciBjb2wgPSB0aGlzLmN1YmVzSGVpZ2h0KCkgLSAxO1xyXG4gICB3aGlsZSAoY29sID49IDApIHtcclxuICAgICAgd2hpbGUgKHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpKSB7XHJcbiAgICAgICAgIHZhciBjdWJlID0gdGhpcy5jdWJlc1tyb3ddW2NvbF07XHJcbiAgICAgICAgIGlmIChjdWJlKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoY3ViZS5tb2R1bGUudHlwZSkge1xyXG4gICAgICAgICAgICAgICBjYXNlICdzaGllbGQnOlxyXG4gICAgICAgICAgICAgICBvdXRwdXQgKz0gJ1MgJztcclxuICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgIGNhc2UgJ2NvcmUnOlxyXG4gICAgICAgICAgICAgICBvdXRwdXQgKz0gJ0MgJztcclxuICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgIGNhc2UgJ3RocnVzdGVyJzpcclxuICAgICAgICAgICAgICAgb3V0cHV0ICs9ICdUICc7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICBjYXNlICdzb2xhclBhbmVsJzpcclxuICAgICAgICAgICAgICAgb3V0cHV0ICs9ICdQICc7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICBjYXNlICdoYWNrZXInOlxyXG4gICAgICAgICAgICAgICBvdXRwdXQgKz0gJ0ggJztcclxuICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgIGNhc2UgJ2d1bic6XHJcbiAgICAgICAgICAgICAgIG91dHB1dCArPSAnRyAnO1xyXG4gICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRwdXQgKz0gJ18gJztcclxuICAgICAgICAgfVxyXG4gICAgICAgICByb3crKztcclxuICAgICAgfVxyXG4gICAgICByb3cgPSAwO1xyXG4gICAgICBjb2wtLTtcclxuICAgICAgb3V0cHV0ICs9ICdcXG4nO1xyXG4gICB9XHJcbiAgIGNvbnNvbGUubG9nKG91dHB1dCk7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmRpc3BsYXlDb25uZWN0aW9uID0gZnVuY3Rpb24oY29ubmVjdGlvbikge1xyXG4gICB0aGlzLmhpZGVPdGhlckNvbm5lY3Rpb25zKGNvbm5lY3Rpb24pO1xyXG4gICB2YXIgZ3JhcGggPSBuZXcgQXN0YXIuR3JhcGgodGhpcy5jdWJlc1RvR3JhcGgoKSk7XHJcbiAgIHZhciBzdGFydFBvaW50ID0gdGhpcy5maW5kKGNvbm5lY3Rpb24uc3RhcnQpO1xyXG4gICB2YXIgZW5kUG9pbnQgPSB0aGlzLmZpbmQoY29ubmVjdGlvbi5lbmQpO1xyXG4gICBpZiAoIXN0YXJ0UG9pbnQgfHwgIWVuZFBvaW50KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdkaXNwbGF5Q29ubmVjdGlvbiBmYWlsZWQgdG8gZ2V0IHBvaW50cycpO1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgdmFyIHN0YXJ0ID0gZ3JhcGguZ3JpZFtzdGFydFBvaW50LnhdW3N0YXJ0UG9pbnQueV07XHJcbiAgIHZhciBlbmQgPSBncmFwaC5ncmlkW2VuZFBvaW50LnhdW2VuZFBvaW50LnldO1xyXG4gICB2YXIgcmVzdWx0ID0gQXN0YXIuYXN0YXIuc2VhcmNoKGdyYXBoLCBzdGFydCwgZW5kKTtcclxuICAgcmVzdWx0LnVuc2hpZnQoc3RhcnQpO1xyXG4gICB2YXIgcHJldmlvdXM7XHJcbiAgIGZvcih2YXIgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGN1clBvaW50ID0gbmV3IFBoYXNlci5Qb2ludChyZXN1bHRbaV0ueCwgcmVzdWx0W2ldLnkpO1xyXG4gICAgICB2YXIgY3VyQ3ViZSA9IHRoaXMuZ2V0KGN1clBvaW50KTtcclxuICAgICAgdmFyIGluZGljYXRvciA9IGN1ckN1YmUuY0luZGljYXRvcjtcclxuICAgICAgdmFyIHByZXZQb2ludDtcclxuICAgICAgdmFyIG5leHRQb2ludDtcclxuICAgICAgdmFyIHNpZGU7XHJcbiAgICAgIHZhciBwcmV2Q3ViZTtcclxuICAgICAgdmFyIG5leHRDdWJlO1xyXG4gICAgICBpZiAoIXByZXZpb3VzKSB7XHJcbiAgICAgICAgIGluZGljYXRvci5hbmltYXRpb25zLnBsYXkoJ2VuZCcpO1xyXG4gICAgICAgICBuZXh0UG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KHJlc3VsdFtpKzFdLngsIHJlc3VsdFtpKzFdLnkpO1xyXG4gICAgICAgICBuZXh0Q3ViZSA9IHRoaXMuZ2V0KG5leHRQb2ludCk7XHJcbiAgICAgICAgIHNpZGUgPSB0aGlzLnJlbGF0aXZlU2lkZShjdXJDdWJlLmJvZHksIG5leHRDdWJlLmJvZHkpO1xyXG4gICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSB0aGlzLmRpclRvQW5nbGUoc2lkZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoaSA9PT0gcmVzdWx0Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgaW5kaWNhdG9yLmFuaW1hdGlvbnMucGxheSgnZW5kJyk7XHJcbiAgICAgICAgIHByZXZQb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQocHJldmlvdXMueCwgcHJldmlvdXMueSk7XHJcbiAgICAgICAgIHByZXZDdWJlID0gdGhpcy5nZXQocHJldlBvaW50KTtcclxuICAgICAgICAgc2lkZSA9IHRoaXMucmVsYXRpdmVTaWRlKGN1ckN1YmUuYm9keSwgcHJldkN1YmUuYm9keSk7XHJcbiAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IHRoaXMuZGlyVG9BbmdsZShzaWRlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgaW5kaWNhdG9yLmFuaW1hdGlvbnMucGxheSgnbGluZScpO1xyXG4gICAgICAgICBwcmV2UG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KHByZXZpb3VzLngsIHByZXZpb3VzLnkpO1xyXG4gICAgICAgICBuZXh0UG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KHJlc3VsdFtpKzFdLngsIHJlc3VsdFtpKzFdLnkpO1xyXG4gICAgICAgICBwcmV2Q3ViZSA9IHRoaXMuZ2V0KHByZXZQb2ludCk7XHJcbiAgICAgICAgIG5leHRDdWJlID0gdGhpcy5nZXQobmV4dFBvaW50KTtcclxuICAgICAgICAgdmFyIHByZXZTaWRlID0gdGhpcy5yZWxhdGl2ZVNpZGUoY3VyQ3ViZS5ib2R5LCBwcmV2Q3ViZS5ib2R5KTtcclxuICAgICAgICAgdmFyIG5leHRTaWRlID0gdGhpcy5yZWxhdGl2ZVNpZGUoY3VyQ3ViZS5ib2R5LCBuZXh0Q3ViZS5ib2R5KTtcclxuICAgICAgICAgdGhpcy5tYW5hZ2VJbmRpY2F0b3IoaW5kaWNhdG9yLCBwcmV2U2lkZSwgbmV4dFNpZGUpO1xyXG4gICAgICB9XHJcbiAgICAgIHByZXZpb3VzID0gcmVzdWx0W2ldO1xyXG4gICAgICBjdXJDdWJlLmRpc3BsYXlJbmRpY2F0b3IoKTtcclxuICAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUubWFuYWdlSW5kaWNhdG9yID0gZnVuY3Rpb24oaW5kaWNhdG9yLCBwcmV2RGlyLCBuZXh0RGlyKSB7XHJcbiAgaW5kaWNhdG9yLnNjYWxlLnNldFRvKE1hdGguYWJzKGluZGljYXRvci5zY2FsZS54KSwgaW5kaWNhdG9yLnNjYWxlLnkpO1xyXG4gIGlmIChwcmV2RGlyID09PSB0aGlzLkRJUi5OT1JUSCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5TT1VUSCkgeyAvLyAyXHJcbiAgICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdjYXNlIDInKTsgfVxyXG4gICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSBNYXRoLlBJO1xyXG4gICB9IGVsc2UgaWYgKHByZXZEaXIgPT09IHRoaXMuRElSLlNPVVRIICYmIG5leHREaXIgPT09IHRoaXMuRElSLk5PUlRIKSB7IC8vIDFcclxuICAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2Nhc2UgMScpOyB9XHJcbiAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IDA7XHJcbiAgIH0gZWxzZSBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuRUFTVCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5XRVNUKSB7IC8vIDRcclxuICAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2Nhc2UgNCcpOyB9XHJcbiAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IDEgLyAyICogTWF0aC5QSTtcclxuICAgfSBlbHNlIGlmIChwcmV2RGlyID09PSB0aGlzLkRJUi5XRVNUICYmIG5leHREaXIgPT09IHRoaXMuRElSLkVBU1QpIHsgLy8gM1xyXG4gICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnY2FzZSAzJyk7IH1cclxuICAgICAgaW5kaWNhdG9yLnJvdGF0aW9uID0gMyAvIDIgICogTWF0aC5QSTtcclxuICAgfSBlbHNlIHtcclxuICAgICAgaW5kaWNhdG9yLmFuaW1hdGlvbnMucGxheSgncmlnaHQnKTtcclxuICAgICAgaWYgKHByZXZEaXIgPT09IHRoaXMuRElSLlNPVVRIICYmIG5leHREaXIgPT09IHRoaXMuRElSLkVBU1QpIHsgLy8gNVxyXG4gICAgICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnY2FzZSA1Jyk7IH1cclxuICAgICAgICAgaW5kaWNhdG9yLnJvdGF0aW9uID0gMDtcclxuICAgICAgfSBlbHNlIGlmIChwcmV2RGlyID09PSB0aGlzLkRJUi5XRVNUICYmIG5leHREaXIgPT09IHRoaXMuRElSLlNPVVRIKSB7IC8vIDZcclxuICAgICAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2Nhc2UgNicpOyB9XHJcbiAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IDEgLyAyICogTWF0aC5QSTtcclxuICAgICAgfSBlbHNlIGlmIChwcmV2RGlyID09PSB0aGlzLkRJUi5OT1JUSCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5XRVNUKSB7IC8vIDdcclxuICAgICAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2Nhc2UgNycpOyB9XHJcbiAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IE1hdGguUEk7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuRUFTVCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5OT1JUSCkgeyAvLyA4XHJcbiAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdjYXNlIDgnKTsgfVxyXG4gICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSAzIC8gMiAqIE1hdGguUEk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGluZGljYXRvci5zY2FsZS5zZXRUbygtTWF0aC5hYnMoaW5kaWNhdG9yLnNjYWxlLngpLCBpbmRpY2F0b3Iuc2NhbGUueSk7XHJcbiAgICAgICAgIGlmIChwcmV2RGlyID09PSB0aGlzLkRJUi5TT1VUSCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5XRVNUKSB7IC8vIDlcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2Nhc2UgOScpOyB9XHJcbiAgICAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IDA7XHJcbiAgICAgICAgIH0gZWxzZSBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuV0VTVCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5OT1JUSCkgeyAvLyAxMFxyXG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnY2FzZSAxMCcpOyB9XHJcbiAgICAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IDEgLyAyICogTWF0aC5QSTtcclxuICAgICAgICAgfSBlbHNlIGlmIChwcmV2RGlyID09PSB0aGlzLkRJUi5OT1JUSCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5FQVNUKSB7IC8vIDExXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdjYXNlIDExJyk7IH1cclxuICAgICAgICAgICAgaW5kaWNhdG9yLnJvdGF0aW9uID0gTWF0aC5QSTtcclxuICAgICAgICAgfSBlbHNlIGlmIChwcmV2RGlyID09PSB0aGlzLkRJUi5FQVNUICYmIG5leHREaXIgPT09IHRoaXMuRElSLlNPVVRIKSB7IC8vIDEyXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdjYXNlIDEyJyk7IH1cclxuICAgICAgICAgICAgaW5kaWNhdG9yLnJvdGF0aW9uID0gMyAvIDIgKiBNYXRoLlBJO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfSBcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuaGlkZU90aGVyQ29ubmVjdGlvbnMgPSBmdW5jdGlvbihleGNlcHRpb24pIHtcclxuICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMuY3ViZXNIZWlnaHQoKTsgY29sKyspIHtcclxuICAgICAgICAgdmFyIGN1YmUgPSB0aGlzLmN1YmVzW3Jvd11bY29sXTtcclxuICAgICAgICAgaWYgKGN1YmUgJiYgY3ViZS5teUNvbm5lY3Rpb24gJiYgY3ViZS5teUNvbm5lY3Rpb24gIT09IGV4Y2VwdGlvbikge1xyXG4gICAgICAgICAgICBjdWJlLmhpZGVJbmRpY2F0b3IoKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuY3ViZXNUb0dyYXBoID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGdyYXBoID0gW107XHJcbiAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgdmFyIG5ld0NvbCA9IFtdO1xyXG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmN1YmVzSGVpZ2h0KCk7IGNvbCsrKSB7XHJcbiAgICAgICAgIGlmICh0aGlzLmN1YmVzW3Jvd11bY29sXSkge1xyXG4gICAgICAgICAgICBuZXdDb2wucHVzaCgxKTtcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbmV3Q29sLnB1c2goMCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBncmFwaC5wdXNoKG5ld0NvbCk7XHJcbiAgIH1cclxuICAgcmV0dXJuIGdyYXBoO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5kaXJCZXR3ZWVuID0gZnVuY3Rpb24oYSwgYikge1xyXG4gICB2YXIgZGVsdGFYID0gYS54IC0gYi54O1xyXG4gICB2YXIgZGVsdGFZID0gYS55IC0gYi55O1xyXG4gICBpZiAoZGVsdGFYID4gMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ESVIuV0VTVDtcclxuICAgfVxyXG4gICBpZiAoZGVsdGFYIDwgMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ESVIuRUFTVDtcclxuICAgfVxyXG4gICBpZiAoZGVsdGFZID4gMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ESVIuU09VVEg7XHJcbiAgIH1cclxuICAgaWYgKGRlbHRhWSA8IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLk5PUlRIO1xyXG4gICB9XHJcbiAgIHJldHVybiB0aGlzLkRJUi5OT1JUSDtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZGlyVG9BbmdsZSA9IGZ1bmN0aW9uKGRpcikge1xyXG4gIHN3aXRjaCAoZGlyKSB7XHJcbiAgIGNhc2UgdGhpcy5ESVIuTk9SVEg6XHJcbiAgIHJldHVybiBNYXRoLlBJO1xyXG4gICBjYXNlIHRoaXMuRElSLkVBU1Q6XHJcbiAgIHJldHVybiAzIC8gMiAqIE1hdGguUEk7XHJcbiAgIGNhc2UgdGhpcy5ESVIuU09VVEg6XHJcbiAgIHJldHVybiAwO1xyXG4gICBjYXNlIHRoaXMuRElSLldFU1Q6XHJcbiAgIHJldHVybiAxIC8gMiAqIE1hdGguUEk7XHJcbiAgfSAgXHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmRlc3Ryb3lDdWJlID0gZnVuY3Rpb24oY3ViZSkge1xyXG4gIHZhciBsb2MgPSB0aGlzLmZpbmQoY3ViZSk7XHJcbiAgaWYgKCFsb2MpIHtcclxuICAgICBjb25zb2xlLmxvZygnYXR0ZW1wdCB0byBkZXN0cm95IGN1YmUgbm90IGluIGdyb3VwJyk7XHJcbiAgICAgcmV0dXJuO1xyXG4gIH1cclxuICAvLyByZW1vdmUgY3ViZSBmcm9tIGdyb3VwXHJcbiAgdGhpcy5yZW1vdmUoY3ViZSk7XHJcbiAgLy8gZGVzdHJveSBjdWJlXHJcbiAgaWYoY3ViZS5rZXkgPT09ICdjb3JlJyAmJiBjdWJlLnRhZyA9PT0gJ21vZHVsZScpIHtcclxuXHRjdWJlLmtpbGwoKTtcclxuXHQvLyB0aGlzLnN0YXRlLmxldmVsU2V0dXAucmVzdGFydExldmVsKCk7XHJcbiAgfVxyXG4gIGN1YmUuZGVzdHJveSh0cnVlKTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oY3ViZSkge1xyXG4gICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygncmVtb3ZlKCknKTsgfVxyXG4gICBpZiAodGhpcy5yb290ID09PSBjdWJlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICAvLyByZW1vdmUgY3ViZSBmcm9tIGFycmF5XHJcbiAgIHZhciByb3csIGNvbDtcclxuICAgZm9yIChyb3cgPSAwOyByb3cgPCB0aGlzLmN1YmVzV2lkdGgoKTsgcm93KyspIHtcclxuICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCB0aGlzLmN1YmVzSGVpZ2h0KCk7IGNvbCsrKSB7XHJcbiAgICAgICAgIGlmICh0aGlzLmN1YmVzW3Jvd11bY29sXSA9PT0gY3ViZSkge1xyXG4gICAgICAgICAgICBjdWJlLmdyb3VwID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBjdWJlLnRhZyA9ICdtb2R1bGUnO1xyXG4gICAgICAgICAgICB0aGlzLmN1YmVzW3Jvd11bY29sXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcbiAgIC8vSWYgdGhpcyBpcyBhbiBhY3RpdmUgbW9kdWxlLCBzcGxpY2UgaXQgZnJvbSB0aGUgYWN0aXZlIGxpc3RcclxuICAgaWYoY3ViZS5tb2R1bGUuaXNBY3RpdmUpe1xyXG5cdCAgIGlmKGN1YmUubW9kdWxlLnR5cGUgPT09ICdoYWNrZXInKSB7XHJcblx0XHRcdHZhciBoYWNrSW5kZXggPSB0aGlzLmFjdGl2ZUhhY2tlck1vZHVsZXMuaW5kZXhPZihjdWJlLm1vZHVsZSk7XHJcblx0XHRcdHRoaXMuYWN0aXZlSGFja2VyTW9kdWxlcy5zcGxpY2UoaGFja0luZGV4LCAxKTtcclxuXHQgICB9XHJcblx0ICAgY3ViZS5tb2R1bGUuaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgfVxyXG4gICAvL3NldCBzcHJpdGUgb2YgY3ViZSB0byBncmV5ZWQgaWYgbmVjaXNhcnJ5XHJcbiAgIGlmKGN1YmUubW9kdWxlLnR5cGUgPT09ICd0aHJ1c3RlcicgfHwgY3ViZS5tb2R1bGUudHlwZSA9PT0gJ2d1bicgfHwgY3ViZS5tb2R1bGUudHlwZSA9PT0gJ2hhY2tlcicpIHtcclxuXHRcdGN1YmUuZnJhbWUgPSAwO1xyXG4gICB9XHJcbiAgIC8vIHJlbW92ZSBjb25zdHJhaW50cyBmcm9tIGN1YmVcclxuICAgdGhpcy5yZW1vdmVDb25zdHJhaW50cyhjdWJlKTtcclxuICAgY3ViZS5ncm91cCA9IHVuZGVmaW5lZDtcclxuICAgaWYgKGN1YmUubW9kdWxlICYmIGN1YmUubW9kdWxlLmhhc093blByb3BlcnR5KCdvblJlbW92ZScpKSB7XHJcbiAgICAgIGN1YmUubW9kdWxlLm9uUmVtb3ZlKCk7XHJcbiAgIH1cclxuICAgLy8gdGVzdCBmb3IgZXhpbGVzXHJcbiAgIGZvciAocm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIGZvciAoY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICB2YXIgZXhpbGUgPSB0aGlzLmN1YmVzW3Jvd11bY29sXTtcclxuICAgICAgICAgaWYgKGV4aWxlICYmIHRoaXMuaXNFeGlsZShleGlsZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmUoZXhpbGUpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICBpZiAodGhpcy5kZWJ1ZykgeyB0aGlzLmRpc3BsYXlDdWJlcygpOyB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLnJlbW92ZW5laWdoYm91cnNDb25zdHJhaW50ID0gZnVuY3Rpb24oY29uc3RyYWludCwgY3ViZSkge1xyXG4gICAvLyBjb25zb2xlLmxvZygncmVtb3ZlbmVpZ2hib3Vyc0NvbnN0cmFpbnQnKTtcclxuICAgdmFyIG5laWdoYm91cnMgPSB0aGlzLmdldE5laWdoYm91cnMoY3ViZSk7XHJcbiAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmVpZ2hib3Vycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgbmVpZ2hib3VyID0gbmVpZ2hib3Vyc1tpXTtcclxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZWlnaGJvdXIuY29uc3RyYWludHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgaWYgKG5laWdoYm91ci5jb25zdHJhaW50c1tqXSA9PT0gY29uc3RyYWludCkge1xyXG4gICAgICAgICAgICBuZWlnaGJvdXIuY29uc3RyYWludHMuc3BsaWNlKGosIDEpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5nZXROZWlnaGJvdXJzID0gZnVuY3Rpb24oY3ViZSkge1xyXG4gICB2YXIgbG9jID0gdGhpcy5maW5kKGN1YmUpO1xyXG4gICB2YXIgbm9ydGggPSB0aGlzLmdldCh0aGlzLmFkanVzdChsb2MsIHRoaXMuRElSLk5PUlRIKSk7XHJcbiAgIHZhciBlYXN0ID0gdGhpcy5nZXQodGhpcy5hZGp1c3QobG9jLCB0aGlzLkRJUi5FQVNUKSk7XHJcbiAgIHZhciBzb3V0aCA9IHRoaXMuZ2V0KHRoaXMuYWRqdXN0KGxvYywgdGhpcy5ESVIuU09VVEgpKTtcclxuICAgdmFyIHdlc3QgPSB0aGlzLmdldCh0aGlzLmFkanVzdChsb2MsIHRoaXMuRElSLldFU1QpKTtcclxuICAgdmFyIG5laWdoYm91cnMgPSBbXTtcclxuICAgaWYgKG5vcnRoKSB7XHJcbiAgICAgIG5laWdoYm91cnMucHVzaChub3J0aCk7XHJcbiAgIH1cclxuICAgaWYgKGVhc3QpIHtcclxuICAgICAgbmVpZ2hib3Vycy5wdXNoKGVhc3QpO1xyXG4gICB9XHJcbiAgIGlmIChzb3V0aCkge1xyXG4gICAgICBuZWlnaGJvdXJzLnB1c2goc291dGgpO1xyXG4gICB9XHJcbiAgIGlmICh3ZXN0KSB7XHJcbiAgICAgIG5laWdoYm91cnMucHVzaCh3ZXN0KTtcclxuICAgfVxyXG4gICByZXR1cm4gbmVpZ2hib3VycztcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUucmVtb3ZlQ29uc3RyYWludHMgPSBmdW5jdGlvbihjdWJlKSB7XHJcbiAgIC8vIGNvbnNvbGUubG9nKCdyZW1vdmVDb25zdHJhaW50cycpO1xyXG4gICB3aGlsZSAoY3ViZS5jb25zdHJhaW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlbmVpZ2hib3Vyc0NvbnN0cmFpbnQoY3ViZS5jb25zdHJhaW50c1swXSwgY3ViZSk7XHJcbiAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlbW92ZUNvbnN0cmFpbnQoY3ViZS5jb25zdHJhaW50c1swXSk7XHJcbiAgICAgIGN1YmUuY29uc3RyYWludHMuc3BsaWNlKDAsIDEpO1xyXG4gICB9XHJcbn07XHJcblxyXG4vLyBvbmx5IHVzZWQgdG8gdGVzdCBBc3RhclxyXG5DdWJlR3JvdXAucHJvdG90eXBlLnRlc3RQYXRoID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGdyYXBoID0gbmV3IEFzdGFyLkdyYXBoKFtcclxuICAgICAgICBbMSwxLDEsMV0sXHJcbiAgICAgICAgWzAsMSwxLDBdLFxyXG4gICAgICAgIFswLDAsMCwxXVxyXG4gICAgXSk7XHJcbiAgIHZhciBzdGFydCA9IGdyYXBoLmdyaWRbMF1bMF07XHJcbiAgIHZhciBlbmQgPSBncmFwaC5ncmlkWzJdWzNdO1xyXG4gICB2YXIgcmVzdWx0ID0gQXN0YXIuYXN0YXIuc2VhcmNoKGdyYXBoLCBzdGFydCwgZW5kKTtcclxuICAgcmVzdWx0LnVuc2hpZnQoc3RhcnQpO1xyXG4gICBmb3IodmFyIGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKHJlc3VsdFtpXS54LCByZXN1bHRbaV0ueSk7XHJcbiAgICB9IFxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5pc0V4aWxlID0gZnVuY3Rpb24oY3ViZSkge1xyXG4gICBpZiAoY3ViZSA9PT0gdGhpcy5yb290KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICB2YXIgZ3JhcGggPSBuZXcgQXN0YXIuR3JhcGgodGhpcy5jdWJlc1RvR3JhcGgoKSk7XHJcbiAgIHZhciBzdGFydFBvaW50ID0gdGhpcy5maW5kKHRoaXMucm9vdCk7XHJcbiAgIHZhciBlbmRQb2ludCA9IHRoaXMuZmluZChjdWJlKTtcclxuICAgdmFyIHN0YXJ0ID0gZ3JhcGguZ3JpZFtzdGFydFBvaW50LnhdW3N0YXJ0UG9pbnQueV07XHJcbiAgIHZhciBlbmQgPSBncmFwaC5ncmlkW2VuZFBvaW50LnhdW2VuZFBvaW50LnldO1xyXG4gICB2YXIgcmVzdWx0ID0gQXN0YXIuYXN0YXIuc2VhcmNoKGdyYXBoLCBzdGFydCwgZW5kKTtcclxuICAgLy8gaWYgbm8gcGF0aCBpcyBmb3VuZCwgdGhlIGN1YmUgaXMgYW4gZXhpbGVcclxuICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgIH1cclxuICAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jb3VudEN1YmVzID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIHJvdywgY29sO1xyXG5cdHZhciBudW0gID0gMDtcclxuXHRmb3IgKHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG5cdFx0Zm9yIChjb2wgPSAwOyBjb2wgPCB0aGlzLmN1YmVzSGVpZ2h0KCk7IGNvbCsrKSB7XHJcblx0XHRcdGlmICh0aGlzLmN1YmVzW3Jvd11bY29sXSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0bnVtKys7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0Ly9jb25zb2xlLmxvZyhudW0pO1xyXG5cdHRoaXMubnVtQ3ViZXMgPSBudW07XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEN1YmVHcm91cDtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsInZhciBVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzLmpzJyk7XHJcblxyXG52YXIgRW5lbXlBSSA9IGZ1bmN0aW9uKGdhbWUsIGdyb3VwLCB0eXBlLCBwbGF5ZXJHcm91cCkge1xyXG4gICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICB0aGlzLmdyb3VwID0gZ3JvdXA7XHJcbiAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgIHRoaXMucGxheWVyR3JvdXAgPSBwbGF5ZXJHcm91cDtcclxuICAgdGhpcy5wbGF5ZXIgPSB0aGlzLnBsYXllckdyb3VwLnJvb3Q7XHJcbiAgIHRoaXMucmFtRGlzdCA9IDUwMDtcclxuICAgdGhpcy5zaG9vdERpc3QgPSA1MDA7XHJcbiAgIHRoaXMucm90YXRpb25Gb3JjZSA9IDUwO1xyXG4gICB0aGlzLmZhY2luZ0FsbG93YW5jZSA9IE1hdGguUEkgLyAxNTtcclxuICAgdGhpcy5hY3RpbmcgPSBmYWxzZTtcclxuICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcclxuICAgICAgY2FzZSAncmFtJzpcclxuICAgICAgdGhpcy5hbGxvY2F0ZVRvKCd0aHJ1c3RlcicpO1xyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSAnc2hvb3QnOlxyXG4gICAgICB0aGlzLmFsbG9jYXRlVG8oJ2d1bicpO1xyXG4gICB9XHJcbn07XHJcblxyXG5FbmVteUFJLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEVuZW15QUk7XHJcblxyXG5FbmVteUFJLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcclxuICAgICAgY2FzZSAncmFtJzpcclxuICAgICAgdGhpcy5jdXN0b21VcGRhdGUoJ3RocnVzdGVyJywgdGhpcy5yYW1EaXN0KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3Nob290JzpcclxuICAgICAgdGhpcy5jdXN0b21VcGRhdGUoJ2d1bicsIHRoaXMuc2hvb3REaXN0KTtcclxuICAgfVxyXG59O1xyXG5cclxuRW5lbXlBSS5wcm90b3R5cGUuY3VzdG9tVXBkYXRlID0gZnVuY3Rpb24odHlwZSwgdGhyZXNob2xkKSB7XHJcbiAgIGlmICghdGhpcy5ncm91cC5yb290KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICBlbHNlIGlmKCF0aGlzLmdyb3VwLnJvb3QuYm9keSkge1xyXG5cdFx0cmV0dXJuO1xyXG4gICB9XHJcbiAgIHZhciByb290ID0gdGhpcy5ncm91cC5yb290O1xyXG4gICB2YXIgbXlQb3MgPSBuZXcgUGhhc2VyLlBvaW50KHJvb3QueCwgcm9vdC55KTtcclxuICAgdmFyIHBsYXllclBvcyA9IG5ldyBQaGFzZXIuUG9pbnQodGhpcy5wbGF5ZXIueCwgdGhpcy5wbGF5ZXIueSk7XHJcbiAgIHZhciBkaXN0ID0gVXRpbHMuZGlzdGFuY2UobXlQb3MueCwgbXlQb3MueSwgcGxheWVyUG9zLngsIHBsYXllclBvcy55KTtcclxuICAgaWYgKGRpc3QgPD0gdGhyZXNob2xkKSB7XHJcbiAgICAgIHZhciBhbmdsZVRvID0gdGhpcy5hbmdsZVRvKG15UG9zLCBwbGF5ZXJQb3MpO1xyXG4gICAgICB2YXIgZGlmZkFuZ2xlID0gYW5nbGVUbyAtIHJvb3QuYm9keS5yb3RhdGlvbjtcclxuICAgICAgaWYgKGRpZmZBbmdsZSA+IDApIHtcclxuICAgICAgICAgcm9vdC5ib2R5LmFuZ3VsYXJGb3JjZSA9IHRoaXMucm90YXRpb25Gb3JjZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgcm9vdC5ib2R5LmFuZ3VsYXJGb3JjZSA9IC10aGlzLnJvdGF0aW9uRm9yY2U7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKE1hdGguYWJzKGRpZmZBbmdsZSkgPD0gdGhpcy5mYWNpbmdBbGxvd2FuY2UgJiYgIXRoaXMuYWN0aW5nKSB7XHJcbiAgICAgICAgIC8vIHRoaXMuZ3JvdXAuY2FsbCgnYmVnaW5BY3QnKTtcclxuICAgICAgICAgdGhpcy5ncm91cC5jYWxsT25UeXBlKCdiZWdpbkFjdCcsIHR5cGUpO1xyXG4gICAgICAgICB0aGlzLmFjdGluZyA9IHRydWU7XHJcbiAgICAgICAgIC8vIHRoaXMuYWxsb2NhdGVUbyh0eXBlKTtcclxuICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhkaWZmQW5nbGUpID4gdGhpcy5mYWNpbmdBbGxvd2FuY2UgJiYgdGhpcy5hY3Rpbmcpe1xyXG4gICAgICAgICAvLyB0aGlzLmdyb3VwLmNhbGwoJ2VuZEFjdCcpO1xyXG4gICAgICAgICB0aGlzLmdyb3VwLmNhbGxPblR5cGUoJ2VuZEFjdCcsIHR5cGUpO1xyXG4gICAgICAgICB0aGlzLmFjdGluZyA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgIH1cclxufTtcclxuXHJcbkVuZW15QUkucHJvdG90eXBlLmFsbG9jYXRlVG8gPSBmdW5jdGlvbih0eXBlKSB7XHJcbiAgIHZhciBwYW5lbHMgPSBbXTtcclxuICAgdmFyIHR5cGVzID0gW107XHJcbiAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuZ3JvdXAuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmdyb3VwLmN1YmVzSGVpZ2h0KCk7IGNvbCsrKSB7XHJcbiAgICAgICAgIHZhciBjdWJlID0gdGhpcy5ncm91cC5jdWJlc1tyb3ddW2NvbF07XHJcbiAgICAgICAgIGlmIChjdWJlICYmIGN1YmUubW9kdWxlKSB7XHJcbiAgICAgICAgICAgIGlmIChjdWJlLm1vZHVsZS50eXBlID09PSAnc29sYXJQYW5lbCcgJiYgIWN1YmUubXlDb25uZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgIHBhbmVscy5wdXNoKGN1YmUubW9kdWxlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjdWJlLm1vZHVsZS50eXBlID09PSB0eXBlICYmICFjdWJlLm15Q29ubmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICB0eXBlcy5wdXNoKGN1YmUubW9kdWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICB2YXIgaSA9IDA7XHJcbiAgIHdoaWxlIChpIDwgdHlwZXMubGVuZ3RoICYmIGkgPCBwYW5lbHMubGVuZ3RoKSB7XHJcbiAgICAgIHZhciB0YXJQYW5lbCA9IHBhbmVsc1tpXTtcclxuICAgICAgdmFyIHRhclR5cGUgPSB0eXBlc1tpXTtcclxuICAgICAgdmFyIG5ld0Nvbm5lY3Rpb24gPSB7c3RhcnQ6IHRhclBhbmVsLmN1YmUsIGVuZDogdGFyVHlwZS5jdWJlfTtcclxuICAgICAgdGFyUGFuZWwuY3ViZS5teUNvbm5lY3Rpb24gPSBuZXdDb25uZWN0aW9uO1xyXG4gICAgICB0YXJUeXBlLmN1YmUubXlDb25uZWN0aW9uID0gbmV3Q29ubmVjdGlvbjtcclxuICAgICAgdGhpcy5ncm91cC5kaXNwbGF5Q29ubmVjdGlvbih0YXJQYW5lbC5jdWJlLm15Q29ubmVjdGlvbik7XHJcbiAgICAgIGkrKztcclxuICAgfVxyXG59O1xyXG5cclxuRW5lbXlBSS5wcm90b3R5cGUuYW5nbGVUbyA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XHJcbiAgdmFyIGFuZ2xlVG9PdGhlciA9IFBoYXNlci5Qb2ludC5hbmdsZShmcm9tLCB0byk7XHJcbiAgaWYgKGFuZ2xlVG9PdGhlciA8IDApIHsgLy8gZml4IGR1bWIgcGFydCBvZiBQaGFzZXIuUG9pbnQuYW5nbGUoKVxyXG4gICAgIGFuZ2xlVG9PdGhlciA9IDIgKiBNYXRoLlBJICsgYW5nbGVUb090aGVyO1xyXG4gIH1cclxuICBhbmdsZVRvT3RoZXIgPSAoYW5nbGVUb090aGVyICsgMy8yICogTWF0aC5QSSkgJSAoMiAqIE1hdGguUEkpOyAvLyByb3RhdGUgOTAgZCBjbG9ja3dpc2VcclxuICByZXR1cm4gYW5nbGVUb090aGVyO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBFbmVteUFJO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwidmFyIEhlbHBlciA9IGZ1bmN0aW9uKHN0YXRlKSB7XHJcblx0dGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICB0aGlzLmdhbWUgPSB0aGlzLnN0YXRlLmdhbWU7XHJcbiAgIHRoaXMuY2FtID0gdGhpcy5nYW1lLmNhbWVyYTtcclxuICAgdGhpcy5zbSA9IHRoaXMuc3RhdGUuc291bmRNYW5hZ2VyO1xyXG4gICB0aGlzLmhlbHBCYW5uZXIgPSB0aGlzLnN0YXRlLnVpQnVpbGRlci5idWlsZEJhbm5lcigwLjUsIDAuNSwgJ3R1dG9yaWFsX3RleHQnKTtcclxuXHR0aGlzLmhlbHBCdXR0b24gPSB0aGlzLmdhbWUuYWRkLmJ1dHRvbih0aGlzLmNhbS54IC0gMTAwLCB0aGlzLmNhbS55IC0gMTAwLCAnaGVscEJ1dHRvbicsIHRoaXMuaGVscEJhbm5lci50b2dnbGUsIHRoaXMuaGVscEJhbm5lciwgMSwgMCwgMik7XHJcblx0dGhpcy5oZWxwQnV0dG9uLm9uSW5wdXRPdmVyLmFkZCh0aGlzLnNtLnBsYXlIb3ZlckNsaWNrLCB0aGlzLnNtKTtcclxuXHR0aGlzLmhlbHBCdXR0b24ub25JbnB1dERvd24uYWRkKHRoaXMuc20ucGxheURvd25DbGljaywgdGhpcy5zbSk7XHJcbn07XHJcblxyXG5IZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSGVscGVyO1xyXG5cclxuSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgdGhpcy5oZWxwQnV0dG9uLnggPSB0aGlzLmNhbS54ICsgMTY7XHJcbiAgIHRoaXMuaGVscEJ1dHRvbi55ID0gdGhpcy5jYW0ueSArIDE2O1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBIZWxwZXI7IiwidmFyIFJlbmRlcmFibGVzID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25BY2Nlc3MvUmVuZGVyYWJsZXMnKTtcclxudmFyIFVJQnVpbGRlciA9IHJlcXVpcmUoJy4uL3VpL1VJQnVpbGRlcicpO1xyXG52YXIgTW9kdWxlQnVpbGRlciA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL01vZHVsZUJ1aWxkZXInKTtcclxudmFyIEN1YmVHcm91cCA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL2N1YmVfZ3JvdXAnKTtcclxudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCcuLi9lZmZlY3RzL0VtaXR0ZXInKTtcclxudmFyIE1vdXNlID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvbW91c2UnKTtcclxudmFyIFNvdW5kTWFuYWdlciA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL3NvdW5kX21hbmFnZXInKTtcclxudmFyIFNob3AgPSByZXF1aXJlKCcuLi91aS9zaG9wJyk7XHJcbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9oZWxwZXInKTtcclxudmFyIENoZWF0aW5nID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvY2hlYXRpbmcnKTtcclxudmFyIEFzdGVyb2lkcyA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL2FzdGVyb2lkcycpO1xyXG52YXIgV2FybmluZyA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL3dhcm5pbmcnKTtcclxudmFyIE1pc3Npb25Qcm9tcHQgPSByZXF1aXJlKCcuLi91aS9NaXNzaW9uUHJvbXB0Jyk7XHJcblxyXG52YXIgTGV2ZWxTZXR1cCA9IGZ1bmN0aW9uKHN0YXRlLCBsZXZlbCkge1xyXG5cdC8vIGluaXRpYWxpc2VcclxuXHR0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgIHRoaXMuZ2FtZSA9IHRoaXMuc3RhdGUuZ2FtZTtcclxuICAgdGhpcy5sZXZlbCA9IGxldmVsO1xyXG4gICAvLyBzaW1wbGlmeVxyXG4gICB0aGlzLnNpbXBsaWZ5ID0gZmFsc2U7XHJcbiAgIC8vIHNldHVwXHJcbiAgIHRoaXMuZ2FtZS53b3JsZC5zZXRCb3VuZHMoMCwgMCwgODAwMCwgNDAwMCk7XHJcbiAgIHRoaXMuYmcgPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSgwLCAwLCAnZWFydGhOaWdodCcpO1xyXG5cdHRoaXMuYmcyID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUoLTgwMDAsIDAsICdlYXJ0aE5pZ2h0Jyk7XHJcbiAgIHRoaXMuZ2FtZS5waHlzaWNzLnN0YXJ0U3lzdGVtKFBoYXNlci5QaHlzaWNzLlAySlMpO1xyXG5cdHRoaXMuZ2FtZS5waHlzaWNzLnAyLnNldEltcGFjdEV2ZW50cyh0cnVlKTtcclxuICAgdGhpcy5zdGF0ZS5jb2xsaXNpb25Hcm91cCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUNvbGxpc2lvbkdyb3VwKCk7XHJcbiAgIHRoaXMudXBkYXRlRGVwZW5kZW50cyA9IFtdO1xyXG4gICB0aGlzLnJlbmRlcmFibGVzID0gbmV3IFJlbmRlcmFibGVzKCk7XHJcbiAgIHRoaXMuc3RhdGUudWlCdWlsZGVyID0gbmV3IFVJQnVpbGRlcih0aGlzLnN0YXRlLCB0aGlzLnJlbmRlcmFibGVzKTtcclxuICAgdGhpcy5zdGF0ZS5tb2R1bGVCdWlsZGVyID0gbmV3IE1vZHVsZUJ1aWxkZXIodGhpcy5zdGF0ZSk7XHJcbiAgIHRoaXMuc3RhdGUuY29yZU1vZHVsZSA9IHRoaXMuc3RhdGUubW9kdWxlQnVpbGRlci5idWlsZCgnY29yZScsIDEyMDAsIDEyMDAsIHRydWUpO1xyXG5cdHRoaXMuY3ViZVdpZHRoID0gdGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUud2lkdGg7XHJcblx0dGhpcy5jdWJlQnVmZmVyID0gMjtcclxuXHR2YXIgcGxheWVyR3JvdXAgPSBuZXcgQ3ViZUdyb3VwKHRoaXMuc3RhdGUsIHRoaXMuc3RhdGUuY29yZU1vZHVsZS5jdWJlKTtcclxuXHR0aGlzLnVwZGF0ZURlcGVuZGVudHMucHVzaChwbGF5ZXJHcm91cCk7XHJcblx0dGhpcy5zdGF0ZS5wbGF5ZXIgPSBwbGF5ZXJHcm91cDtcclxuXHR0aGlzLnN0YXRlLnBsYXllci5pc1BsYXllciA9IHRydWU7XHJcbiAgIHRoaXMuc3RhdGUuQmluYXJ5RW1pdHRlciA9IG5ldyBFbWl0dGVyKHRoaXMuc3RhdGUpO1xyXG4gICB0aGlzLmxlZnRLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5BKTtcclxuXHR0aGlzLnJpZ2h0S2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuRCk7XHJcbiAgIHRoaXMubGV2ZWxEYXRhID0gSlNPTi5wYXJzZSh0aGlzLmdhbWUuY2FjaGUuZ2V0VGV4dCh0aGlzLmxldmVsKSk7XHJcbiAgIGlmICghdGhpcy5zaW1wbGlmeSkgeyB0aGlzLmxvYWRMZXZlbCgpOyB9XHJcbiAgIHRoaXMuZ2FtZS5qdWljeSA9IHRoaXMuZ2FtZS5wbHVnaW5zLmFkZChuZXcgUGhhc2VyLlBsdWdpbi5KdWljeSh0aGlzLnN0YXRlKSk7XHJcbiAgIHRoaXMuZ2FtZS5jYW1lcmEuZm9sbG93KHRoaXMuc3RhdGUuY29yZU1vZHVsZS5jdWJlKTtcclxuICAgdGhpcy5zdGF0ZS5tb3VzZSA9IG5ldyBNb3VzZSh0aGlzLmdhbWUsIHRoaXMuc3RhdGUuaW5wdXQsIHRoaXMuc3RhdGUucGxheWVyKTtcclxuICAgdGhpcy51cGRhdGVEZXBlbmRlbnRzLnB1c2godGhpcy5zdGF0ZS5tb3VzZSk7XHJcbiAgIHRoaXMuc3RhdGUuc291bmRNYW5hZ2VyID0gbmV3IFNvdW5kTWFuYWdlcih0aGlzLnN0YXRlKTtcclxuICAgdGhpcy5zdGF0ZS5zaG9wID0gbmV3IFNob3AodGhpcy5zdGF0ZSk7XHJcbiAgIHRoaXMudXBkYXRlRGVwZW5kZW50cy5wdXNoKHRoaXMuc3RhdGUuc2hvcCk7XHJcbiAgIHRoaXMuaGVscGVyID0gbmV3IEhlbHBlcih0aGlzLnN0YXRlKTtcclxuICAgdGhpcy51cGRhdGVEZXBlbmRlbnRzLnB1c2godGhpcy5oZWxwZXIpO1xyXG4gICB0aGlzLmNoZWF0aW5nID0gbmV3IENoZWF0aW5nKHRoaXMuc3RhdGUpO1xyXG4gICB0aGlzLmFzdGVyb2lkcyA9IG5ldyBBc3Rlcm9pZHModGhpcy5zdGF0ZSwgdGhpcy5zaW1wbGlmeSk7XHJcbiAgIHRoaXMudXBkYXRlRGVwZW5kZW50cy5wdXNoKHRoaXMuYXN0ZXJvaWRzKTtcclxuICAgdGhpcy53YXJuaW5nID0gbmV3IFdhcm5pbmcodGhpcy5zdGF0ZSk7XHJcbiAgIHRoaXMudXBkYXRlRGVwZW5kZW50cy5wdXNoKHRoaXMud2FybmluZyk7XHJcbiAgIHRoaXMubWlzc2lvblByb21wdCA9IG5ldyBNaXNzaW9uUHJvbXB0KHRoaXMuc3RhdGUpO1xyXG59O1xyXG5cclxuTGV2ZWxTZXR1cC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMZXZlbFNldHVwO1xyXG5cclxuTGV2ZWxTZXR1cC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIGlmKHRoaXMubGVmdEtleS5pc0Rvd24pIHtcclxuXHRcdGlmKHRoaXMuc3RhdGUuY29yZU1vZHVsZS5jdWJlLmJvZHkuYW5ndWxhclZlbG9jaXR5ID4gLTkpIHsgXHJcblx0XHRcdHRoaXMuc3RhdGUuY29yZU1vZHVsZS5jdWJlLmJvZHkuYW5ndWxhckZvcmNlICs9IC03LjUgKiBNYXRoLnBvdyh0aGlzLnN0YXRlLnBsYXllci5udW1DdWJlcywgMS42NSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmKHRoaXMucmlnaHRLZXkuaXNEb3duKSB7XHJcblx0XHRpZih0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS5ib2R5LmFuZ3VsYXJWZWxvY2l0eSA8IDkpIHtcclxuXHRcdFx0dGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUuYm9keS5hbmd1bGFyRm9yY2UgKz0gNy41ICogTWF0aC5wb3codGhpcy5zdGF0ZS5wbGF5ZXIubnVtQ3ViZXMsIDEuNjUpO1xyXG5cdFx0fVxyXG5cdH1cclxuICAgdGhpcy5iZy54ICs9IDAuMTI1O1xyXG4gICBpZiAodGhpcy5iZy54ID49IDgwMDApIHtcclxuICAgICAgdGhpcy5iZy54ID0gMDtcclxuICAgfVxyXG4gICB0aGlzLmJnMi54ICs9IDAuMTI1O1xyXG4gICBpZiAodGhpcy5iZzIueCA+PSA4MDAwKSB7XHJcbiAgICAgIHRoaXMuYmcyLnggPSAwO1xyXG4gICB9XHJcbiAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy51cGRhdGVEZXBlbmRlbnRzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRpZiAodGhpcy51cGRhdGVEZXBlbmRlbnRzW2ldLnVwZGF0ZSkge1xyXG5cdFx0XHR0aGlzLnVwZGF0ZURlcGVuZGVudHNbaV0udXBkYXRlKCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuTGV2ZWxTZXR1cC5wcm90b3R5cGUubG9hZExldmVsID0gZnVuY3Rpb24oKSB7XHJcbiAgIHZhciBteUxldmVsID0gdGhpcy5sZXZlbERhdGFbdGhpcy5sZXZlbF07XHJcbiAgIGZvciAodmFyIGtleSBpbiBteUxldmVsKSB7XHJcbiAgICAgIGlmIChteUxldmVsLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgdmFyIGVsZW1lbnQgPSBteUxldmVsW2tleV07XHJcbiAgICAgICAgIGlmIChlbGVtZW50Lmhhc093blByb3BlcnR5KCdibHVlcHJpbnQnKSkgeyAvLyBlbmVteSB0eXBlXHJcbiAgICAgICAgICAgIHZhciBlbmVteVggPSBlbGVtZW50Wyd4X3BvcyddO1xyXG4gICAgICAgICAgICB2YXIgZW5lbXlZID0gZWxlbWVudFsneV9wb3MnXTtcclxuICAgICAgICAgICAgdmFyIGVuZW15R3JvdXAgPSBuZXcgQ3ViZUdyb3VwKHRoaXMuc3RhdGUsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRGVwZW5kZW50cy5wdXNoKGVuZW15R3JvdXApO1xyXG4gICAgICAgICAgICB2YXIgYmx1ZXByaW50ID0gZWxlbWVudFsnYmx1ZXByaW50J107XHJcbiAgICAgICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IGJsdWVwcmludC5sZW5ndGg7IHJvdysrKSB7XHJcbiAgICAgICAgICAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IGJsdWVwcmludFtyb3ddLmxlbmd0aDsgY29sKyspIHtcclxuICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBibHVlcHJpbnRbcm93XVtjb2xdO1xyXG4gICAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gJ25vbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdNb2R1bGUgPSB0aGlzLnN0YXRlLm1vZHVsZUJ1aWxkZXIuYnVpbGQodHlwZSwgZW5lbXlYICsgcm93ICogKHRoaXMuY3ViZVdpZHRoICsgdGhpcy5jdWJlQnVmZmVyKSxcclxuICAgICAgICAgICAgICAgICAgICAgZW5lbXlZIC0gY29sICogKHRoaXMuY3ViZVdpZHRoICsgdGhpcy5jdWJlQnVmZmVyKSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICBuZXdNb2R1bGUuY3ViZS50YWcgPSAnZW5lbXlfbW9kdWxlJztcclxuICAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50ID0gbmV3IFBoYXNlci5Qb2ludChyb3csIGNvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgIGVuZW15R3JvdXAuYWRkKG5ld01vZHVsZS5jdWJlLCBwb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBhaVR5cGUgPSBlbGVtZW50Wyd0eXBlJ107XHJcbiAgICAgICAgICAgIGVuZW15R3JvdXAuZ2l2ZUFJKGFpVHlwZSwgdGhpcy5zdGF0ZS5wbGF5ZXIpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfSBcclxufTtcclxuXHJcbkxldmVsU2V0dXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICB0aGlzLnN0YXRlLm1vdXNlLnJlbmRlcigpO1xyXG4gICB0aGlzLnJlbmRlcmFibGVzLnJlbmRlckFsbCgpOyBcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGV2ZWxTZXR1cDtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy5qcycpO1xyXG5cclxudmFyIE1vdXNlID0gZnVuY3Rpb24oZ2FtZSwgaW5wdXQsIHBsYXllckdyb3VwKSB7XHJcbiAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuXHR0aGlzLmJvZHkgPSBuZXcgcDIuQm9keSgpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuICAgdGhpcy5nYW1lLnBoeXNpY3MucDIud29ybGQuYWRkQm9keSh0aGlzLmJvZHkpO1xyXG4gICB0aGlzLmlucHV0Lm9uRG93bi5hZGQodGhpcy5jbGljaywgdGhpcyk7XHJcbiAgIHRoaXMuaW5wdXQub25VcC5hZGQodGhpcy5yZWxlYXNlLCB0aGlzKTtcclxuICAgdGhpcy5pbnB1dC5hZGRNb3ZlQ2FsbGJhY2sodGhpcy5tb3ZlLCB0aGlzKTtcclxuICAgdGhpcy54ID0gMDtcclxuICAgdGhpcy55ID0gMDtcclxuICAgdGhpcy5ncmFiYmVkID0gdW5kZWZpbmVkO1xyXG4gICB0aGlzLmxhc3RDbGlja2VkID0gdW5kZWZpbmVkO1xyXG4gICB0aGlzLmxpbmUgPSBuZXcgUGhhc2VyLkxpbmUoMCwgMCwgMCwgMCk7XHJcbiAgIHRoaXMucmVtb3ZlVGhyZXNob2xkID0gNTA7IC8vIGRpc3RhbmNlIHlvdSBtdXN0IHB1bGwgdG8gcmVtb3ZlIG1vZHVsZVxyXG4gICB0aGlzLnJlbW92ZURpc3QgPSAwOyAvLyBkaXN0YW5jZSB5b3UgYXJlIHB1bGxpbmdcclxuICAgdGhpcy5wbGF5ZXJHcm91cCA9IHBsYXllckdyb3VwO1xyXG4gICAvLyBrZXlzXHJcbiAgIHRoaXMuY2N3S2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUSk7XHJcblx0dGhpcy5jd0tleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkUpO1xyXG59O1xyXG5cclxuTW91c2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTW91c2U7XHJcblxyXG5Nb3VzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIGlmICh0aGlzLmdyYWJiZWQpIHtcclxuICAgICAgdmFyIGFuZ2xlID0gTWF0aC5hdGFuMih0aGlzLmdyYWJiZWQuc3ByaXRlLnkgLSAodGhpcy5pbnB1dC5wb3NpdGlvbi55ICsgdGhpcy5nYW1lLmNhbWVyYS55KSwgdGhpcy5ncmFiYmVkLnNwcml0ZS54IC0gKHRoaXMuaW5wdXQucG9zaXRpb24ueCsgdGhpcy5nYW1lLmNhbWVyYS54KSkgKyBNYXRoLlBJO1xyXG4gICAgICB2YXIgZGlzdCA9IFV0aWxzLmRpc3RhbmNlKHRoaXMuZ3JhYmJlZC5zcHJpdGUueCwgdGhpcy5ncmFiYmVkLnNwcml0ZS55LCAodGhpcy5pbnB1dC5wb3NpdGlvbi54KyB0aGlzLmdhbWUuY2FtZXJhLngpLCAodGhpcy5pbnB1dC5wb3NpdGlvbi55ICsgdGhpcy5nYW1lLmNhbWVyYS55KSk7XHJcbiAgICAgIHZhciB3ZWlnaHQ7XHJcblx0ICBpZih0aGlzLmdyYWJiZWQuc3ByaXRlLmtleSA9PT0gJ2FzdGVyb2lkJykge1xyXG5cdFx0d2VpZ2h0ID0gMTtcclxuXHQgIH1cclxuXHQgIGVsc2Uge1xyXG5cdFx0d2VpZ2h0ID0gMTA7XHJcblx0ICB9XHJcblx0ICBpZiAoIXRoaXMuZ3JhYmJlZC5zcHJpdGUuZ3JvdXApIHtcclxuICAgICAgICAgdGhpcy5ncmFiYmVkLmZvcmNlLnggPSBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0ICogd2VpZ2h0O1xyXG4gICAgICAgICB0aGlzLmdyYWJiZWQuZm9yY2UueSA9IE1hdGguc2luKGFuZ2xlKSAqIGRpc3QgKiB3ZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5saW5lLnNldFRvKHRoaXMuZ3JhYmJlZC5zcHJpdGUueCwgdGhpcy5ncmFiYmVkLnNwcml0ZS55LCAodGhpcy5pbnB1dC5wb3NpdGlvbi54KyB0aGlzLmdhbWUuY2FtZXJhLngpLCAodGhpcy5pbnB1dC5wb3NpdGlvbi55ICsgdGhpcy5nYW1lLmNhbWVyYS55KSk7XHJcbiAgICAgIHZhciBkZWx0YVggPSB0aGlzLmdyYWJiZWQuc3ByaXRlLnggLSB0aGlzLng7XHJcblx0ICB2YXIgZGVsdGFZID0gdGhpcy5ncmFiYmVkLnNwcml0ZS55IC0gdGhpcy55O1xyXG5cdCAgdGhpcy5yZW1vdmVEaXN0ID0gTWF0aC5zcXJ0KE1hdGgucG93KGRlbHRhWCwgMikgKyBNYXRoLnBvdyhkZWx0YVksIDIpKTtcclxuICAgICAgaWYodGhpcy5ncmFiYmVkLnNwcml0ZS50YWcgPT09ICdtb2R1bGUnKSB7XHJcblx0XHQgIGlmICh0aGlzLnJlbW92ZURpc3QgPj0gdGhpcy5yZW1vdmVUaHJlc2hvbGQgJiYgdGhpcy5ncmFiYmVkLnNwcml0ZS5rZXkgIT09ICdhc3Rlcm9pZCcpIHtcclxuXHRcdFx0IHRoaXMuZ3JhYmJlZC5zcHJpdGUucmVtb3ZlKCk7XHJcblx0XHQgIH1cclxuXHQgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICB0aGlzLmxpbmUuc2V0VG8oMCwgMCwgMCwgMCk7XHJcbiAgICB9XHJcbiAgICB2YXIgcG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KHRoaXMueCwgdGhpcy55KTtcclxuICAgIHZhciBib2RpZXMgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5oaXRUZXN0KHBvaW50KTtcclxuICAgIGlmIChib2RpZXMubGVuZ3RoKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBob3ZlciA9IGJvZGllc1swXS5wYXJlbnQ7XHJcbiAgICAgICAgaWYgKGhvdmVyLnNwcml0ZS5tb2R1bGUgJiYgaG92ZXIuc3ByaXRlLm1vZHVsZS5tb3VzZU92ZXIpIHtcclxuICAgICAgICAgICBob3Zlci5zcHJpdGUubW9kdWxlLm1vdXNlT3ZlcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHJvdGF0ZVxyXG4gICBpZih0aGlzLmNjd0tleS5pc0Rvd24pIHtcclxuXHRcdGlmKHRoaXMuZ3JhYmJlZCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZ3JhYmJlZC5zcHJpdGUuZ3JvdXAgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLmdyYWJiZWQuYW5ndWxhckZvcmNlICs9IC01O1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZih0aGlzLmN3S2V5LmlzRG93bikge1xyXG5cdFx0aWYodGhpcy5ncmFiYmVkICE9PSB1bmRlZmluZWQgJiYgdGhpcy5ncmFiYmVkLnNwcml0ZS5ncm91cCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHRoaXMuZ3JhYmJlZC5hbmd1bGFyRm9yY2UgKz0gNTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5Nb3VzZS5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbihwb2ludGVyKSB7XHJcbiAgIHZhciBwb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQocG9pbnRlci54ICsgdGhpcy5nYW1lLmNhbWVyYS54LCBwb2ludGVyLnkgKyB0aGlzLmdhbWUuY2FtZXJhLnkpO1xyXG4gICB2YXIgYm9kaWVzID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuaGl0VGVzdChwb2ludCk7XHJcbiAgIGlmIChib2RpZXMubGVuZ3RoKVxyXG4gICB7XHJcbiAgICAgdmFyIHRlbXAgPSBib2RpZXNbMF0ucGFyZW50O1xyXG4gICAgIHRoaXMuZ3JhYmJlZCA9IHRlbXA7XHJcbiAgICAgaWYgKHRoaXMuZ3JhYmJlZC5zcHJpdGUubW9kdWxlICYmIHRoaXMuZ3JhYmJlZC5zcHJpdGUubW9kdWxlLmhhc093blByb3BlcnR5KCdtb3VzZURvd24nKSkge1xyXG4gICAgICAgdGhpcy5ncmFiYmVkLnNwcml0ZS5tb2R1bGUubW91c2VEb3duKCk7XHJcbiAgICAgfVxyXG4gICAgIGlmICh0aGlzLmxhc3RDbGlja2VkICYmIHRoaXMubGFzdENsaWNrZWQuc3ByaXRlICYmIHRoaXMubGFzdENsaWNrZWQuc3ByaXRlLm1vZHVsZSAmJlxyXG4gICAgIHRoaXMubGFzdENsaWNrZWQuc3ByaXRlLm1vZHVsZS5naXZlVGFyZ2V0KSB7XHJcbiAgICAgICAgdGhpcy5sYXN0Q2xpY2tlZC5zcHJpdGUubW9kdWxlLmdpdmVUYXJnZXQodGhpcy5ncmFiYmVkLnNwcml0ZS5tb2R1bGUpO1xyXG4gICAgIH1cclxuICAgICBpZiAodGVtcC5zcHJpdGUgJiYgdGVtcC5zcHJpdGUubW9kdWxlICYmIHRlbXAuc3ByaXRlLm1vZHVsZS50eXBlID09PSAnY29yZScpIHtcclxuICAgICAgICB0aGlzLmdyYWJiZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgfVxyXG4gICAgIGlmICh0ZW1wLnNwcml0ZSAmJiB0ZW1wLnNwcml0ZS5ncm91cCAmJiB0ZW1wLnNwcml0ZS5ncm91cCAhPT0gdGhpcy5wbGF5ZXJHcm91cCkge1xyXG4gICAgICAgIHRoaXMuZ3JhYmJlZCA9IHVuZGVmaW5lZDtcclxuICAgICB9XHJcbiAgICAgdGhpcy5sYXN0Q2xpY2tlZCA9IHRlbXA7XHJcbiAgIH1cclxuICAgXHJcbiAgIC8vY3JlYXRlIHNwcml0ZSBvdmVybGF5IHRvIHNob3cgc2VsZWN0aW9uXHJcbiAgIGlmKHRoaXMuZ3JhYmJlZCkge1xyXG5cdFx0dGhpcy5zZWxlY3RlZCA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKDAsIDAsICdzZWxlY3RlZCcpO1xyXG5cdFx0dGhpcy5ncmFiYmVkLnNwcml0ZS5hZGRDaGlsZCh0aGlzLnNlbGVjdGVkKTtcclxuXHRcdHRoaXMuc2VsZWN0ZWQueCA9IDAgLSB0aGlzLmdyYWJiZWQuc3ByaXRlLndpZHRoO1xyXG5cdFx0dGhpcy5zZWxlY3RlZC55ID0gMCAtIHRoaXMuZ3JhYmJlZC5zcHJpdGUuaGVpZ2h0O1xyXG5cdFx0dGhpcy5zZWxlY3RlZC5icmluZ1RvVG9wKCk7XHJcbiAgIH1cclxufTtcclxuICBcclxuIE1vdXNlLnByb3RvdHlwZS5yZWxlYXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgIGlmICh0aGlzLmdyYWJiZWQpIHtcclxuXHRcdC8vZGVzdHJveSBzZWxlY3RlZCBzcHJpdGVcclxuXHRcdHRoaXMuZ3JhYmJlZC5zcHJpdGUucmVtb3ZlQ2hpbGQodGhpcy5zZWxlY3RlZCk7XHJcblx0XHR0aGlzLnNlbGVjdGVkLmRlc3Ryb3koKTtcclxuXHRcdHRoaXMuZ3JhYmJlZCA9IHVuZGVmaW5lZDtcclxuICAgfVxyXG59O1xyXG5cclxuTW91c2UucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbihwb2ludGVyKSB7XHJcbiAgIC8vIHAyIHVzZXMgZGlmZmVyZW50IGNvb3JkaW5hdGUgc3lzdGVtLCBzbyBjb252ZXJ0IHRoZSBwb2ludGVyIHBvc2l0aW9uIHRvIHAyJ3MgY29vcmRpbmF0ZSBzeXN0ZW1cclxuICAgdGhpcy5ib2R5LnBvc2l0aW9uWzBdID0gdGhpcy5nYW1lLnBoeXNpY3MucDIucHhtaShwb2ludGVyLnBvc2l0aW9uLngpO1xyXG4gICB0aGlzLmJvZHkucG9zaXRpb25bMV0gPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5weG1pKHBvaW50ZXIucG9zaXRpb24ueSk7XHJcbiAgIHRoaXMueCA9IHBvaW50ZXIucG9zaXRpb24ueCArIHRoaXMuZ2FtZS5jYW1lcmEueDtcclxuICAgdGhpcy55ID0gcG9pbnRlci5wb3NpdGlvbi55ICsgdGhpcy5nYW1lLmNhbWVyYS55O1xyXG59O1xyXG5cclxuTW91c2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAvL3RoaXMuZ2FtZS5kZWJ1Zy5nZW9tKHRoaXMubGluZSk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1vdXNlO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIi8qXHJcblBsYXlzIHNvdW5kcyBuZWVkZWQgYWNyb3NzIG11bHRpcGxlIHNjcmlwdHMuXHJcbiovXHJcbnZhciBTb3VuZE1hbmFnZXIgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAvLyBpbml0aWFsIHZhcmlhYmxlc1xyXG5cdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgdGhpcy5nYW1lID0gdGhpcy5zdGF0ZS5nYW1lO1xyXG4gICB0aGlzLmNhbSA9IHRoaXMuZ2FtZS5jYW1lcmE7XHJcbiAgIC8vIHNvdW5kc1xyXG4gICB0aGlzLmhvdmVyQ2xpY2sgPSB0aGlzLmdhbWUuYWRkLmF1ZGlvKCdob3ZlckNsaWNrJyk7XHJcbiAgIHRoaXMuZG93bkNsaWNrID0gdGhpcy5nYW1lLmFkZC5hdWRpbygnZG93bkNsaWNrJyk7XHJcbn07XHJcblxyXG5Tb3VuZE1hbmFnZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU291bmRNYW5hZ2VyO1xyXG5cclxuU291bmRNYW5hZ2VyLnByb3RvdHlwZS5wbGF5SG92ZXJDbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICB0aGlzLmhvdmVyQ2xpY2sucGxheSgpO1xyXG59O1xyXG5cclxuU291bmRNYW5hZ2VyLnByb3RvdHlwZS5wbGF5RG93bkNsaWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgIHRoaXMuZG93bkNsaWNrLnBsYXkoKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU291bmRNYW5hZ2VyO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgV2FybmluZyA9IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgIC8vIGluaXRpYWxpc2VcclxuXHR0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgIHRoaXMuZ2FtZSA9IHRoaXMuc3RhdGUuZ2FtZTtcclxuICAgdGhpcy5jYW0gPSB0aGlzLmdhbWUuY2FtZXJhO1xyXG4gICB0aGlzLnRpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcclxuXHR0aGlzLndhcm5pbmcgPSB0aGlzLmdhbWUuYWRkLmltYWdlKHRoaXMuZ2FtZS5jYW1lcmEueCwgdGhpcy5nYW1lLmNhbWVyYS55LCAnd2FybmluZycpO1xyXG5cdHRoaXMud2FybmluZy5raWxsKCk7XHJcbn07XHJcblxyXG5XYXJuaW5nLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFdhcm5pbmc7XHJcblxyXG5XYXJuaW5nLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgLy8gd2FybmluZyBncmFwaGljXHJcblx0aWYodGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUueCArIChNYXRoLm1heCh0aGlzLnN0YXRlLnBsYXllci5jdWJlc1dpZHRoKCksIHRoaXMuc3RhdGUucGxheWVyLmN1YmVzSGVpZ2h0KCkpIC8gMiAqIDY0KSA+IDgwMDAgfHxcclxuXHR0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS54IC0gKE1hdGgubWF4KHRoaXMuc3RhdGUucGxheWVyLmN1YmVzV2lkdGgoKSwgdGhpcy5zdGF0ZS5wbGF5ZXIuY3ViZXNIZWlnaHQoKSkgLyAyICogNjQpIDwgMCB8fFxyXG5cdHRoaXMuc3RhdGUuY29yZU1vZHVsZS5jdWJlLnkgKyAoTWF0aC5tYXgodGhpcy5zdGF0ZS5wbGF5ZXIuY3ViZXNXaWR0aCgpLCB0aGlzLnN0YXRlLnBsYXllci5jdWJlc0hlaWdodCgpKSAvIDIgKiA2NCkgPiA0MDAwIHx8XHJcblx0dGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUueSAtIChNYXRoLm1heCh0aGlzLnN0YXRlLnBsYXllci5jdWJlc1dpZHRoKCksIHRoaXMuc3RhdGUucGxheWVyLmN1YmVzSGVpZ2h0KCkpIC8gMiAqIDY0KSA8IDApIHtcclxuXHRcdGlmKHRoaXMudGltZXIubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdHRoaXMud2FybmluZy5yZXZpdmUoKTtcclxuXHRcdFx0dGhpcy50aW1lci5sb29wKFBoYXNlci5UaW1lci5TRUNPTkQgKiA1LCB0aGlzLnJlc2V0UGxheWVyLCB0aGlzKTtcclxuXHRcdFx0dGhpcy50aW1lci5zdGFydCgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRlbHNlIHtcclxuXHRcdGlmKHRoaXMud2FybmluZy5hbGl2ZSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHR0aGlzLndhcm5pbmcua2lsbCgpO1xyXG5cdFx0fVxyXG5cdFx0aWYodGhpcy50aW1lci5sZW5ndGggPiAwKSB7XHJcblx0XHRcdHRoaXMudGltZXIuc3RvcCh0cnVlKTtcclxuXHRcdH1cclxuXHR9XHJcblx0dGhpcy53YXJuaW5nLnggPSB0aGlzLmdhbWUuY2FtZXJhLng7XHJcblx0dGhpcy53YXJuaW5nLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnk7XHJcbn07XHJcblxyXG5XYXJuaW5nLnByb3RvdHlwZS5yZXNldFBsYXllciA9IGZ1bmN0aW9uKCkge1xyXG4gICBpZih0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS54ICsgKE1hdGgubWF4KHRoaXMuc3RhdGUucGxheWVyLmN1YmVzV2lkdGgoKSwgdGhpcy5zdGF0ZS5wbGF5ZXIuY3ViZXNIZWlnaHQoKSkgLyAyICogNjQpID4gODAwMCkge1xyXG4gICAgICB0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS5ib2R5Lm1vdmVMZWZ0KHRoaXMuc3RhdGUucGxheWVyLm51bUN1YmVzICogNzUwKTtcclxuICAgfVxyXG4gICBpZih0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS54IC0gKE1hdGgubWF4KHRoaXMuc3RhdGUucGxheWVyLmN1YmVzV2lkdGgoKSwgdGhpcy5zdGF0ZS5wbGF5ZXIuY3ViZXNIZWlnaHQoKSkgLyAyICogNjQpIDwgMCkge1xyXG4gICAgICB0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS5ib2R5Lm1vdmVSaWdodCh0aGlzLnN0YXRlLnBsYXllci5udW1DdWJlcyAqIDc1MCk7XHJcbiAgIH1cclxuICAgaWYodGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUueSArIChNYXRoLm1heCh0aGlzLnN0YXRlLnBsYXllci5jdWJlc1dpZHRoKCksIHRoaXMuc3RhdGUucGxheWVyLmN1YmVzSGVpZ2h0KCkpIC8gMiAqIDY0KSA+IDQwMDApIHtcclxuICAgICAgdGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUuYm9keS5tb3ZlVXAodGhpcy5zdGF0ZS5wbGF5ZXIubnVtQ3ViZXMgKiA3NTApO1xyXG4gICB9XHJcbiAgIGVsc2UgaWYodGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUueSAtIChNYXRoLm1heCh0aGlzLnN0YXRlLnBsYXllci5jdWJlc1dpZHRoKCksIHRoaXMuc3RhdGUucGxheWVyLmN1YmVzSGVpZ2h0KCkpIC8gMiAqIDY0KSA8IDApIHtcclxuICAgICAgdGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUuYm9keS5tb3ZlRG93bih0aGlzLnN0YXRlLnBsYXllci5udW1DdWJlcyAqIDc1MCk7XHJcbiAgIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gV2FybmluZzsiLCJ2YXIgUmVuZGVyYWJsZXMgPSBmdW5jdGlvbigpIHtcclxuXHRpZihSZW5kZXJhYmxlcy5wcm90b3R5cGUuZXhpc3RzKSB7XHJcblx0XHRyZXR1cm4gUmVuZGVyYWJsZXMucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlO1xyXG5cdH1cclxuXHRcclxuXHR0aGlzLmxpc3QgPSBbXTtcclxuXHRSZW5kZXJhYmxlcy5wcm90b3R5cGUuZXhpc3RzID0gdHJ1ZTtcclxuXHRSZW5kZXJhYmxlcy5wcm90b3R5cGUuZXhpc3RpbmdSZWZlcmVuY2UgPSB0aGlzO1xyXG59O1xyXG5cclxuUmVuZGVyYWJsZXMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVuZGVyYWJsZXM7XHJcbi8vVGhlc2UgdmFyJ3MgaGVscCBjcmVhdGUgdGhlIHNpbmdsZXRvbiBmdW5jdGlvbmFsaXR5XHJcblJlbmRlcmFibGVzLnByb3RvdHlwZS5leGlzdHMgPSBmYWxzZTtcclxuUmVuZGVyYWJsZXMucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlID0gbnVsbDtcclxuXHJcblJlbmRlcmFibGVzLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbihzdWJzY3JpYmVyKSB7XHJcblx0dGhpcy5saXN0LnB1c2goc3Vic2NyaWJlcik7XHJcbn07XHJcblxyXG5SZW5kZXJhYmxlcy5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbih1bnN1YnNjcmliZXIpIHtcclxuXHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5saXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRpZih0aGlzLmxpc3RbaV0gPT09IHVuc3Vic2NyaWJlcikge1xyXG5cdFx0XHR0aGlzLmxpc3RbaV0gPSBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5SZW5kZXJhYmxlcy5wcm90b3R5cGUucmVuZGVyQWxsID0gZnVuY3Rpb24oKSB7XHJcblx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGlzdC5sZW5ndGg7IGkrKykge1xyXG5cdFx0aWYodGhpcy5saXN0W2ldID09PSBmYWxzZSkge1xyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHRcdHRoaXMubGlzdFtpXS5yZW5kZXIoKTtcclxuXHR9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFJlbmRlcmFibGVzOyIsIi8vIGphdmFzY3JpcHQtYXN0YXIgMC40LjBcclxuLy8gaHR0cDovL2dpdGh1Yi5jb20vYmdyaW5zL2phdmFzY3JpcHQtYXN0YXJcclxuLy8gRnJlZWx5IGRpc3RyaWJ1dGFibGUgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4vLyBJbXBsZW1lbnRzIHRoZSBhc3RhciBzZWFyY2ggYWxnb3JpdGhtIGluIGphdmFzY3JpcHQgdXNpbmcgYSBCaW5hcnkgSGVhcC5cclxuLy8gSW5jbHVkZXMgQmluYXJ5IEhlYXAgKHdpdGggbW9kaWZpY2F0aW9ucykgZnJvbSBNYXJpam4gSGF2ZXJiZWtlLlxyXG4vLyBodHRwOi8vZWxvcXVlbnRqYXZhc2NyaXB0Lm5ldC9hcHBlbmRpeDIuaHRtbFxyXG5cclxuKGZ1bmN0aW9uKGRlZmluaXRpb24pIHtcclxuICAgIC8qIGdsb2JhbCBtb2R1bGUsIGRlZmluZSAqL1xyXG4gICAgaWYodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpO1xyXG4gICAgfSBlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShbXSwgZGVmaW5pdGlvbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBleHBvcnRzID0gZGVmaW5pdGlvbigpO1xyXG4gICAgICAgIHdpbmRvdy5hc3RhciA9IGV4cG9ydHMuYXN0YXI7XHJcbiAgICAgICAgd2luZG93LkdyYXBoID0gZXhwb3J0cy5HcmFwaDtcclxuICAgIH1cclxufSkoZnVuY3Rpb24oKSB7XHJcblxyXG5mdW5jdGlvbiBwYXRoVG8obm9kZSl7XHJcbiAgICB2YXIgY3VyciA9IG5vZGUsXHJcbiAgICAgICAgcGF0aCA9IFtdO1xyXG4gICAgd2hpbGUoY3Vyci5wYXJlbnQpIHtcclxuICAgICAgICBwYXRoLnB1c2goY3Vycik7XHJcbiAgICAgICAgY3VyciA9IGN1cnIucGFyZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdGgucmV2ZXJzZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRIZWFwKCkge1xyXG4gICAgcmV0dXJuIG5ldyBCaW5hcnlIZWFwKGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZS5mO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbnZhciBhc3RhciA9IHtcclxuICAgIC8qKlxyXG4gICAgKiBQZXJmb3JtIGFuIEEqIFNlYXJjaCBvbiBhIGdyYXBoIGdpdmVuIGEgc3RhcnQgYW5kIGVuZCBub2RlLlxyXG4gICAgKiBAcGFyYW0ge0dyYXBofSBncmFwaFxyXG4gICAgKiBAcGFyYW0ge0dyaWROb2RlfSBzdGFydFxyXG4gICAgKiBAcGFyYW0ge0dyaWROb2RlfSBlbmRcclxuICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAgKiBAcGFyYW0ge2Jvb2x9IFtvcHRpb25zLmNsb3Nlc3RdIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcclxuICAgICAgICAgICAgICAgcGF0aCB0byB0aGUgY2xvc2VzdCBub2RlIGlmIHRoZSB0YXJnZXQgaXMgdW5yZWFjaGFibGUuXHJcbiAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmhldXJpc3RpY10gSGV1cmlzdGljIGZ1bmN0aW9uIChzZWVcclxuICAgICogICAgICAgICAgYXN0YXIuaGV1cmlzdGljcykuXHJcbiAgICAqL1xyXG4gICAgc2VhcmNoOiBmdW5jdGlvbihncmFwaCwgc3RhcnQsIGVuZCwgb3B0aW9ucykge1xyXG4gICAgICAgIGdyYXBoLmNsZWFuRGlydHkoKTtcclxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICB2YXIgaGV1cmlzdGljID0gb3B0aW9ucy5oZXVyaXN0aWMgfHwgYXN0YXIuaGV1cmlzdGljcy5tYW5oYXR0YW4sXHJcbiAgICAgICAgICAgIGNsb3Nlc3QgPSBvcHRpb25zLmNsb3Nlc3QgfHwgZmFsc2U7XHJcblxyXG4gICAgICAgIHZhciBvcGVuSGVhcCA9IGdldEhlYXAoKSxcclxuICAgICAgICAgICAgY2xvc2VzdE5vZGUgPSBzdGFydDsgLy8gc2V0IHRoZSBzdGFydCBub2RlIHRvIGJlIHRoZSBjbG9zZXN0IGlmIHJlcXVpcmVkXHJcblxyXG4gICAgICAgIHN0YXJ0LmggPSBoZXVyaXN0aWMoc3RhcnQsIGVuZCk7XHJcblxyXG4gICAgICAgIG9wZW5IZWFwLnB1c2goc3RhcnQpO1xyXG5cclxuICAgICAgICB3aGlsZShvcGVuSGVhcC5zaXplKCkgPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBHcmFiIHRoZSBsb3dlc3QgZih4KSB0byBwcm9jZXNzIG5leHQuICBIZWFwIGtlZXBzIHRoaXMgc29ydGVkIGZvciB1cy5cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gb3BlbkhlYXAucG9wKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBFbmQgY2FzZSAtLSByZXN1bHQgaGFzIGJlZW4gZm91bmQsIHJldHVybiB0aGUgdHJhY2VkIHBhdGguXHJcbiAgICAgICAgICAgIGlmKGN1cnJlbnROb2RlID09PSBlbmQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXRoVG8oY3VycmVudE5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBOb3JtYWwgY2FzZSAtLSBtb3ZlIGN1cnJlbnROb2RlIGZyb20gb3BlbiB0byBjbG9zZWQsIHByb2Nlc3MgZWFjaCBvZiBpdHMgbmVpZ2hib3JzLlxyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5jbG9zZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gRmluZCBhbGwgbmVpZ2hib3JzIGZvciB0aGUgY3VycmVudCBub2RlLlxyXG4gICAgICAgICAgICB2YXIgbmVpZ2hib3JzID0gZ3JhcGgubmVpZ2hib3JzKGN1cnJlbnROb2RlKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IG5laWdoYm9ycy5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmVpZ2hib3IgPSBuZWlnaGJvcnNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5laWdoYm9yLmNsb3NlZCB8fCBuZWlnaGJvci5pc1dhbGwoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdCBhIHZhbGlkIG5vZGUgdG8gcHJvY2Vzcywgc2tpcCB0byBuZXh0IG5laWdoYm9yLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRoZSBnIHNjb3JlIGlzIHRoZSBzaG9ydGVzdCBkaXN0YW5jZSBmcm9tIHN0YXJ0IHRvIGN1cnJlbnQgbm9kZS5cclxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHBhdGggd2UgaGF2ZSBhcnJpdmVkIGF0IHRoaXMgbmVpZ2hib3IgaXMgdGhlIHNob3J0ZXN0IG9uZSB3ZSBoYXZlIHNlZW4geWV0LlxyXG4gICAgICAgICAgICAgICAgdmFyIGdTY29yZSA9IGN1cnJlbnROb2RlLmcgKyBuZWlnaGJvci5nZXRDb3N0KGN1cnJlbnROb2RlKSxcclxuICAgICAgICAgICAgICAgICAgICBiZWVuVmlzaXRlZCA9IG5laWdoYm9yLnZpc2l0ZWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFiZWVuVmlzaXRlZCB8fCBnU2NvcmUgPCBuZWlnaGJvci5nKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIGFuIG9wdGltYWwgKHNvIGZhcikgcGF0aCB0byB0aGlzIG5vZGUuICBUYWtlIHNjb3JlIGZvciBub2RlIHRvIHNlZSBob3cgZ29vZCBpdCBpcy5cclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci52aXNpdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5wYXJlbnQgPSBjdXJyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5oID0gbmVpZ2hib3IuaCB8fCBoZXVyaXN0aWMobmVpZ2hib3IsIGVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3IuZyA9IGdTY29yZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5mID0gbmVpZ2hib3IuZyArIG5laWdoYm9yLmg7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGgubWFya0RpcnR5KG5laWdoYm9yKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbmVpZ2hib3VyIGlzIGNsb3NlciB0aGFuIHRoZSBjdXJyZW50IGNsb3Nlc3ROb2RlIG9yIGlmIGl0J3MgZXF1YWxseSBjbG9zZSBidXQgaGFzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgY2hlYXBlciBwYXRoIHRoYW4gdGhlIGN1cnJlbnQgY2xvc2VzdCBub2RlIHRoZW4gaXQgYmVjb21lcyB0aGUgY2xvc2VzdCBub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWlnaGJvci5oIDwgY2xvc2VzdE5vZGUuaCB8fCAobmVpZ2hib3IuaCA9PT0gY2xvc2VzdE5vZGUuaCAmJiBuZWlnaGJvci5nIDwgY2xvc2VzdE5vZGUuZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3ROb2RlID0gbmVpZ2hib3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYmVlblZpc2l0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHVzaGluZyB0byBoZWFwIHdpbGwgcHV0IGl0IGluIHByb3BlciBwbGFjZSBiYXNlZCBvbiB0aGUgJ2YnIHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuSGVhcC5wdXNoKG5laWdoYm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgc2VlbiB0aGUgbm9kZSwgYnV0IHNpbmNlIGl0IGhhcyBiZWVuIHJlc2NvcmVkIHdlIG5lZWQgdG8gcmVvcmRlciBpdCBpbiB0aGUgaGVhcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuSGVhcC5yZXNjb3JlRWxlbWVudChuZWlnaGJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2xvc2VzdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGF0aFRvKGNsb3Nlc3ROb2RlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5vIHJlc3VsdCB3YXMgZm91bmQgLSBlbXB0eSBhcnJheSBzaWduaWZpZXMgZmFpbHVyZSB0byBmaW5kIHBhdGguXHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfSxcclxuICAgIC8vIFNlZSBsaXN0IG9mIGhldXJpc3RpY3M6IGh0dHA6Ly90aGVvcnkuc3RhbmZvcmQuZWR1L35hbWl0cC9HYW1lUHJvZ3JhbW1pbmcvSGV1cmlzdGljcy5odG1sXHJcbiAgICBoZXVyaXN0aWNzOiB7XHJcbiAgICAgICAgbWFuaGF0dGFuOiBmdW5jdGlvbihwb3MwLCBwb3MxKSB7XHJcbiAgICAgICAgICAgIHZhciBkMSA9IE1hdGguYWJzKHBvczEueCAtIHBvczAueCk7XHJcbiAgICAgICAgICAgIHZhciBkMiA9IE1hdGguYWJzKHBvczEueSAtIHBvczAueSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkMSArIGQyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlhZ29uYWw6IGZ1bmN0aW9uKHBvczAsIHBvczEpIHtcclxuICAgICAgICAgICAgdmFyIEQgPSAxO1xyXG4gICAgICAgICAgICB2YXIgRDIgPSBNYXRoLnNxcnQoMik7XHJcbiAgICAgICAgICAgIHZhciBkMSA9IE1hdGguYWJzKHBvczEueCAtIHBvczAueCk7XHJcbiAgICAgICAgICAgIHZhciBkMiA9IE1hdGguYWJzKHBvczEueSAtIHBvczAueSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoRCAqIChkMSArIGQyKSkgKyAoKEQyIC0gKDIgKiBEKSkgKiBNYXRoLm1pbihkMSwgZDIpKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY2xlYW5Ob2RlOmZ1bmN0aW9uKG5vZGUpe1xyXG4gICAgICAgIG5vZGUuZiA9IDA7XHJcbiAgICAgICAgbm9kZS5nID0gMDtcclxuICAgICAgICBub2RlLmggPSAwO1xyXG4gICAgICAgIG5vZGUudmlzaXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIG5vZGUuY2xvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgbm9kZS5wYXJlbnQgPSBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiogQSBncmFwaCBtZW1vcnkgc3RydWN0dXJlXHJcbiogQHBhcmFtIHtBcnJheX0gZ3JpZEluIDJEIGFycmF5IG9mIGlucHV0IHdlaWdodHNcclxuKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiogQHBhcmFtIHtib29sfSBbb3B0aW9ucy5kaWFnb25hbF0gU3BlY2lmaWVzIHdoZXRoZXIgZGlhZ29uYWwgbW92ZXMgYXJlIGFsbG93ZWRcclxuKi9cclxuZnVuY3Rpb24gR3JhcGgoZ3JpZEluLCBvcHRpb25zKSB7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIHRoaXMubm9kZXMgPSBbXTtcclxuICAgIHRoaXMuZGlhZ29uYWwgPSAhIW9wdGlvbnMuZGlhZ29uYWw7XHJcbiAgICB0aGlzLmdyaWQgPSBbXTtcclxuICAgIGZvciAodmFyIHggPSAwOyB4IDwgZ3JpZEluLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgdGhpcy5ncmlkW3hdID0gW107XHJcblxyXG4gICAgICAgIGZvciAodmFyIHkgPSAwLCByb3cgPSBncmlkSW5beF07IHkgPCByb3cubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSBuZXcgR3JpZE5vZGUoeCwgeSwgcm93W3ldKTtcclxuICAgICAgICAgICAgdGhpcy5ncmlkW3hdW3ldID0gbm9kZTtcclxuICAgICAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuaW5pdCgpO1xyXG59XHJcblxyXG5HcmFwaC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5kaXJ0eU5vZGVzID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhc3Rhci5jbGVhbk5vZGUodGhpcy5ub2Rlc1tpXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5HcmFwaC5wcm90b3R5cGUuY2xlYW5EaXJ0eSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRpcnR5Tm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhc3Rhci5jbGVhbk5vZGUodGhpcy5kaXJ0eU5vZGVzW2ldKTtcclxuICAgIH1cclxuICAgIHRoaXMuZGlydHlOb2RlcyA9IFtdO1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLm1hcmtEaXJ0eSA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgIHRoaXMuZGlydHlOb2Rlcy5wdXNoKG5vZGUpO1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLm5laWdoYm9ycyA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgIHZhciByZXQgPSBbXSxcclxuICAgICAgICB4ID0gbm9kZS54LFxyXG4gICAgICAgIHkgPSBub2RlLnksXHJcbiAgICAgICAgZ3JpZCA9IHRoaXMuZ3JpZDtcclxuXHJcbiAgICAvLyBXZXN0XHJcbiAgICBpZihncmlkW3gtMV0gJiYgZ3JpZFt4LTFdW3ldKSB7XHJcbiAgICAgICAgcmV0LnB1c2goZ3JpZFt4LTFdW3ldKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFYXN0XHJcbiAgICBpZihncmlkW3grMV0gJiYgZ3JpZFt4KzFdW3ldKSB7XHJcbiAgICAgICAgcmV0LnB1c2goZ3JpZFt4KzFdW3ldKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTb3V0aFxyXG4gICAgaWYoZ3JpZFt4XSAmJiBncmlkW3hdW3ktMV0pIHtcclxuICAgICAgICByZXQucHVzaChncmlkW3hdW3ktMV0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vcnRoXHJcbiAgICBpZihncmlkW3hdICYmIGdyaWRbeF1beSsxXSkge1xyXG4gICAgICAgIHJldC5wdXNoKGdyaWRbeF1beSsxXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZGlhZ29uYWwpIHtcclxuICAgICAgICAvLyBTb3V0aHdlc3RcclxuICAgICAgICBpZihncmlkW3gtMV0gJiYgZ3JpZFt4LTFdW3ktMV0pIHtcclxuICAgICAgICAgICAgcmV0LnB1c2goZ3JpZFt4LTFdW3ktMV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU291dGhlYXN0XHJcbiAgICAgICAgaWYoZ3JpZFt4KzFdICYmIGdyaWRbeCsxXVt5LTFdKSB7XHJcbiAgICAgICAgICAgIHJldC5wdXNoKGdyaWRbeCsxXVt5LTFdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5vcnRod2VzdFxyXG4gICAgICAgIGlmKGdyaWRbeC0xXSAmJiBncmlkW3gtMV1beSsxXSkge1xyXG4gICAgICAgICAgICByZXQucHVzaChncmlkW3gtMV1beSsxXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOb3J0aGVhc3RcclxuICAgICAgICBpZihncmlkW3grMV0gJiYgZ3JpZFt4KzFdW3krMV0pIHtcclxuICAgICAgICAgICAgcmV0LnB1c2goZ3JpZFt4KzFdW3krMV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZ3JhcGhTdHJpbmcgPSBbXSxcclxuICAgICAgICBub2RlcyA9IHRoaXMuZ3JpZCwgLy8gd2hlbiB1c2luZyBncmlkXHJcbiAgICAgICAgcm93RGVidWcsIHJvdywgeSwgbDtcclxuICAgIGZvciAodmFyIHggPSAwLCBsZW4gPSBub2Rlcy5sZW5ndGg7IHggPCBsZW47IHgrKykge1xyXG4gICAgICAgIHJvd0RlYnVnID0gW107XHJcbiAgICAgICAgcm93ID0gbm9kZXNbeF07XHJcbiAgICAgICAgZm9yICh5ID0gMCwgbCA9IHJvdy5sZW5ndGg7IHkgPCBsOyB5KyspIHtcclxuICAgICAgICAgICAgcm93RGVidWcucHVzaChyb3dbeV0ud2VpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ3JhcGhTdHJpbmcucHVzaChyb3dEZWJ1Zy5qb2luKCcgJykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdyYXBoU3RyaW5nLmpvaW4oJ1xcbicpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gR3JpZE5vZGUoeCwgeSwgd2VpZ2h0KSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICAgIHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xyXG59XHJcblxyXG5HcmlkTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiAnWycgKyB0aGlzLnggKyAnICcgKyB0aGlzLnkgKyAnXSc7XHJcbn07XHJcblxyXG5HcmlkTm9kZS5wcm90b3R5cGUuZ2V0Q29zdCA9IGZ1bmN0aW9uKGZyb21OZWlnaGJvcikge1xyXG4gICAgLy8gVGFrZSBkaWFnb25hbCB3ZWlnaHQgaW50byBjb25zaWRlcmF0aW9uLlxyXG4gICAgaWYgKGZyb21OZWlnaGJvciAmJiBmcm9tTmVpZ2hib3IueCAhPT0gdGhpcy54ICYmIGZyb21OZWlnaGJvci55ICE9PSB0aGlzLnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53ZWlnaHQgKiAxLjQxNDIxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMud2VpZ2h0O1xyXG59O1xyXG5cclxuR3JpZE5vZGUucHJvdG90eXBlLmlzV2FsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMud2VpZ2h0ID09PSAwO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gQmluYXJ5SGVhcChzY29yZUZ1bmN0aW9uKXtcclxuICAgIHRoaXMuY29udGVudCA9IFtdO1xyXG4gICAgdGhpcy5zY29yZUZ1bmN0aW9uID0gc2NvcmVGdW5jdGlvbjtcclxufVxyXG5cclxuQmluYXJ5SGVhcC5wcm90b3R5cGUgPSB7XHJcbiAgICBwdXNoOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgLy8gQWRkIHRoZSBuZXcgZWxlbWVudCB0byB0aGUgZW5kIG9mIHRoZSBhcnJheS5cclxuICAgICAgICB0aGlzLmNvbnRlbnQucHVzaChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgLy8gQWxsb3cgaXQgdG8gc2luayBkb3duLlxyXG4gICAgICAgIHRoaXMuc2lua0Rvd24odGhpcy5jb250ZW50Lmxlbmd0aCAtIDEpO1xyXG4gICAgfSxcclxuICAgIHBvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gU3RvcmUgdGhlIGZpcnN0IGVsZW1lbnQgc28gd2UgY2FuIHJldHVybiBpdCBsYXRlci5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jb250ZW50WzBdO1xyXG4gICAgICAgIC8vIEdldCB0aGUgZWxlbWVudCBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheS5cclxuICAgICAgICB2YXIgZW5kID0gdGhpcy5jb250ZW50LnBvcCgpO1xyXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBhbnkgZWxlbWVudHMgbGVmdCwgcHV0IHRoZSBlbmQgZWxlbWVudCBhdCB0aGVcclxuICAgICAgICAvLyBzdGFydCwgYW5kIGxldCBpdCBidWJibGUgdXAuXHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFswXSA9IGVuZDtcclxuICAgICAgICAgICAgdGhpcy5idWJibGVVcCgwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICB2YXIgaSA9IHRoaXMuY29udGVudC5pbmRleE9mKG5vZGUpO1xyXG5cclxuICAgICAgICAvLyBXaGVuIGl0IGlzIGZvdW5kLCB0aGUgcHJvY2VzcyBzZWVuIGluICdwb3AnIGlzIHJlcGVhdGVkXHJcbiAgICAgICAgLy8gdG8gZmlsbCB1cCB0aGUgaG9sZS5cclxuICAgICAgICB2YXIgZW5kID0gdGhpcy5jb250ZW50LnBvcCgpO1xyXG5cclxuICAgICAgICBpZiAoaSAhPT0gdGhpcy5jb250ZW50Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50W2ldID0gZW5kO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcmVGdW5jdGlvbihlbmQpIDwgdGhpcy5zY29yZUZ1bmN0aW9uKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpbmtEb3duKGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWJibGVVcChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzaXplOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aDtcclxuICAgIH0sXHJcbiAgICByZXNjb3JlRWxlbWVudDogZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIHRoaXMuc2lua0Rvd24odGhpcy5jb250ZW50LmluZGV4T2Yobm9kZSkpO1xyXG4gICAgfSxcclxuICAgIHNpbmtEb3duOiBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgLy8gRmV0Y2ggdGhlIGVsZW1lbnQgdGhhdCBoYXMgdG8gYmUgc3Vuay5cclxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuY29udGVudFtuXTtcclxuXHJcbiAgICAgICAgLy8gV2hlbiBhdCAwLCBhbiBlbGVtZW50IGNhbiBub3Qgc2luayBhbnkgZnVydGhlci5cclxuICAgICAgICB3aGlsZSAobiA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbXB1dGUgdGhlIHBhcmVudCBlbGVtZW50J3MgaW5kZXgsIGFuZCBmZXRjaCBpdC5cclxuICAgICAgICAgICAgdmFyIHBhcmVudE4gPSAoKG4gKyAxKSA+PiAxKSAtIDEsIHBhcmVudCA9IHRoaXMuY29udGVudFtwYXJlbnROXTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgICAgICAgICAgIC8vIFN3YXAgdGhlIGVsZW1lbnRzIGlmIHRoZSBwYXJlbnQgaXMgZ3JlYXRlci5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcmVGdW5jdGlvbihlbGVtZW50KSA8IHRoaXMuc2NvcmVGdW5jdGlvbihwYXJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbcGFyZW50Tl0gPSBlbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50W25dID0gcGFyZW50O1xyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlICduJyB0byBjb250aW51ZSBhdCB0aGUgbmV3IHBvc2l0aW9uLlxyXG4gICAgICAgICAgICAgICAgbiA9IHBhcmVudE47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gRm91bmQgYSBwYXJlbnQgdGhhdCBpcyBsZXNzLCBubyBuZWVkIHRvIHNpbmsgYW55IGZ1cnRoZXIuXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgYnViYmxlVXA6IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICAvLyBMb29rIHVwIHRoZSB0YXJnZXQgZWxlbWVudCBhbmQgaXRzIHNjb3JlLlxyXG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmNvbnRlbnQubGVuZ3RoLFxyXG4gICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5jb250ZW50W25dLFxyXG4gICAgICAgICAgICBlbGVtU2NvcmUgPSB0aGlzLnNjb3JlRnVuY3Rpb24oZWxlbWVudCk7XHJcblxyXG4gICAgICAgIHdoaWxlKHRydWUpIHtcclxuICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgaW5kaWNlcyBvZiB0aGUgY2hpbGQgZWxlbWVudHMuXHJcbiAgICAgICAgICAgIHZhciBjaGlsZDJOID0gKG4gKyAxKSA8PCAxLCBjaGlsZDFOID0gY2hpbGQyTiAtIDE7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHVzZWQgdG8gc3RvcmUgdGhlIG5ldyBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCwgaWYgYW55LlxyXG4gICAgICAgICAgICB2YXIgc3dhcCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBjaGlsZDFTY29yZTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGZpcnN0IGNoaWxkIGV4aXN0cyAoaXMgaW5zaWRlIHRoZSBhcnJheSkuLi5cclxuICAgICAgICAgICAgaWYgKGNoaWxkMU4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIExvb2sgaXQgdXAgYW5kIGNvbXB1dGUgaXRzIHNjb3JlLlxyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkMSA9IHRoaXMuY29udGVudFtjaGlsZDFOXTtcclxuICAgICAgICAgICAgICAgIGNoaWxkMVNjb3JlID0gdGhpcy5zY29yZUZ1bmN0aW9uKGNoaWxkMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNjb3JlIGlzIGxlc3MgdGhhbiBvdXIgZWxlbWVudCdzLCB3ZSBuZWVkIHRvIHN3YXAuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQxU2NvcmUgPCBlbGVtU2NvcmUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YXAgPSBjaGlsZDFOO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBEbyB0aGUgc2FtZSBjaGVja3MgZm9yIHRoZSBvdGhlciBjaGlsZC5cclxuICAgICAgICAgICAgaWYgKGNoaWxkMk4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZDIgPSB0aGlzLmNvbnRlbnRbY2hpbGQyTl0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQyU2NvcmUgPSB0aGlzLnNjb3JlRnVuY3Rpb24oY2hpbGQyKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZDJTY29yZSA8IChzd2FwID09PSBudWxsID8gZWxlbVNjb3JlIDogY2hpbGQxU2NvcmUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dhcCA9IGNoaWxkMk47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBlbGVtZW50IG5lZWRzIHRvIGJlIG1vdmVkLCBzd2FwIGl0LCBhbmQgY29udGludWUuXHJcbiAgICAgICAgICAgIGlmIChzd2FwICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbbl0gPSB0aGlzLmNvbnRlbnRbc3dhcF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbc3dhcF0gPSBlbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgbiA9IHN3YXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBhcmUgZG9uZS5cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbnJldHVybiB7XHJcbiAgICBhc3RhcjogYXN0YXIsXHJcbiAgICBHcmFwaDogR3JhcGhcclxufTtcclxuXHJcbn0pO1xyXG4iLCJ2YXIgQm9vdCA9IGZ1bmN0aW9uICgpIHt9O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCb290O1xyXG5cclxuQm9vdC5wcm90b3R5cGUgPSB7XHJcblxyXG4gIHByZWxvYWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgncHJlbG9hZGVyJywgJ2Fzc2V0cy9pbWFnZXMvcHJlbG9hZGVyLmdpZicpO1xyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5nYW1lLmlucHV0Lm1heFBvaW50ZXJzID0gMTtcclxuXHJcbiAgICBpZiAodGhpcy5nYW1lLmRldmljZS5kZXNrdG9wKSB7XHJcbiAgICAgIC8vdGhpcy5nYW1lLnN0YWdlLnNjYWxlLnBhZ2VBbGlnbkhvcml6b250YWxseSA9IHRydWU7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zY2FsZU1vZGUgPSBQaGFzZXIuU2NhbGVNYW5hZ2VyLlJFU0laRTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zY2FsZU1vZGUgPSBQaGFzZXIuU2NhbGVNYW5hZ2VyLlNIT1dfQUxMO1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUubWluV2lkdGggPSAgNDgwO1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUubWluSGVpZ2h0ID0gMjYwO1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUubWF4V2lkdGggPSA2NDA7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5tYXhIZWlnaHQgPSA0ODA7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5mb3JjZUxhbmRzY2FwZSA9IHRydWU7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5wYWdlQWxpZ25Ib3Jpem9udGFsbHkgPSB0cnVlO1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUuc2V0U2NyZWVuU2l6ZSh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ1ByZWxvYWRlcicpO1xyXG4gIH1cclxufTtcclxuIiwiLypcclxuTGV2ZWwgMVxyXG4qL1xyXG52YXIgTGV2ZWxTZXR1cCA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL2xldmVsX3NldHVwJyk7XHJcblxyXG52YXIgbGV2ZWxPbmUgPSBmdW5jdGlvbiAoKSB7IH07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGxldmVsT25lO1xyXG5cclxubGV2ZWxPbmUucHJvdG90eXBlID0ge1xyXG5cdFxyXG5cdGluaXQ6IGZ1bmN0aW9uKHBhcmFtcyl7XHJcblx0XHR0aGlzLmxldmVsU29uZyA9IHRoaXMuZ2FtZS5hZGQuYXVkaW8ocGFyYW1zWzBdKTtcclxuXHRcdHRoaXMubGV2ZWxTb25nLnBsYXkoJycscGFyYW1zWzFdLHBhcmFtc1syXSx0cnVlLHRydWUpO1xyXG5cdH0sXHJcblx0XHJcblx0Y3JlYXRlOiBmdW5jdGlvbiAoKSB7XHJcblx0XHR0aGlzLmxldmVsU2V0dXAgPSBuZXcgTGV2ZWxTZXR1cCh0aGlzLCAnbGV2ZWxfb25lJyk7XHJcblx0XHR0aGlzLnBhdXNlTWVudSA9IHRoaXMuZ2FtZS5hZGQuaW1hZ2UoLTIwMDAsIC0yMDAwLCAncGF1c2VNZW51Jyk7XHJcblx0XHR0aGlzLnBhdXNlTWVudS5raWxsKCk7XHJcblx0XHR0aGlzLnBhdXNlTWVudS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG5cdFx0dGhpcy5wYXVzZUtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoMjcpO1xyXG5cdFx0dGhpcy5wYXVzZUtleS5vbkRvd24uYWRkKHRoaXMucGF1c2VHYW1lLCB7Z2FtZTogdGhpcywgY29udGV4dDogJ2tleSd9KTtcclxuXHRcdHRoaXMubWVudUtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlNQQUNFQkFSKTtcclxuXHRcdHRoaXMubWVudUtleS5vbkRvd24uYWRkKHRoaXMucmV0dXJuVG9NZW51LCB0aGlzKTtcclxuXHRcdHRoaXMucmVzdGFydEtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkcpO1xyXG5cdFx0dGhpcy5yZXN0YXJ0S2V5Lm9uRG93bi5hZGQodGhpcy5yZXN0YXJ0TGV2ZWwsIHtnYW1lOiB0aGlzLCBjb250ZXh0OiAna2V5J30pO1xyXG5cdFx0dGhpcy5zdGF0ZS5nYW1lLmlucHV0Lm9uRG93bi5hZGQodGhpcy5wYXVzZUdhbWUsIHtnYW1lOiB0aGlzLCBjb250ZXh0OiAnbW91c2UnfSk7XHJcblx0fSxcclxuICBcclxuXHR1cGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHRcdHRoaXMubGV2ZWxTZXR1cC51cGRhdGUoKTtcclxuXHR9LFxyXG4gIFxyXG5cdHJlbmRlcjogZnVuY3Rpb24gKCkge1xyXG5cdFx0dGhpcy5sZXZlbFNldHVwLnJlbmRlcigpO1xyXG5cdH0sXHJcblxyXG5cdHBhdXNlR2FtZTogZnVuY3Rpb24oKSB7XHJcblx0XHRpZighdGhpcy5nYW1lLnN0YXRlLmdhbWUucGF1c2VkKSB7XHJcblx0XHRcdGlmKHRoaXMuY29udGV4dCA9PT0gJ2tleScpIHtcclxuXHRcdFx0XHR0aGlzLmdhbWUucGF1c2VNZW51ID0gdGhpcy5nYW1lLmFkZC5pbWFnZSh0aGlzLmdhbWUuY2FtZXJhLnggKyAodGhpcy5nYW1lLmNhbWVyYS53aWR0aCAvIDIpLCB0aGlzLmdhbWUuY2FtZXJhLnkgKyAodGhpcy5nYW1lLmNhbWVyYS5oZWlnaHQgLyAyKSwgJ3BhdXNlTWVudScpO1xyXG5cdFx0XHRcdHRoaXMuZ2FtZS5wYXVzZU1lbnUuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuXHRcdFx0XHR0aGlzLmdhbWUuc3RhdGUuZ2FtZS5wYXVzZWQgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0dGhpcy5nYW1lLnN0YXRlLmdhbWUucGF1c2VkID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuZ2FtZS5wYXVzZU1lbnUuZGVzdHJveSgpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHJlc3RhcnRMZXZlbDogZnVuY3Rpb24oKSB7XHJcblx0XHRpZih0aGlzLmNvbnRleHQgPT09ICdrZXknKSB7XHJcblx0XHRcdGlmKHRoaXMuZ2FtZS5zdGF0ZS5nYW1lLnBhdXNlZCkge1xyXG5cdFx0XHRcdHRoaXMuZ2FtZS5zdGF0ZS5nYW1lLnBhdXNlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdHRoaXMuZ2FtZS5sZXZlbFNvbmcuZGVzdHJveSgpO1xyXG5cdFx0XHRcdHRoaXMuZ2FtZS5nYW1lLnN0YXRlLnN0YXJ0KCdsZXZlbE9uZScsIHRydWUsIGZhbHNlLCBbJ21haW5Tb25nJywgMCwgMC43NV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0dGhpcy5nYW1lLmxldmVsU29uZy5kZXN0cm95KCk7XHJcblx0XHRcdHRoaXMuZ2FtZS5nYW1lLnN0YXRlLnN0YXJ0KCdsZXZlbE9uZScsIHRydWUsIGZhbHNlLCBbJ21haW5Tb25nJywgMCwgMC43NV0pO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0XHJcblx0cmV0dXJuVG9NZW51OiBmdW5jdGlvbigpIHtcclxuXHRcdGlmKHRoaXMuc3RhdGUuZ2FtZS5wYXVzZWQpIHtcclxuXHRcdFx0dGhpcy5zdGF0ZS5nYW1lLnBhdXNlZCA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmxldmVsU29uZy5kZXN0cm95KCk7XHJcblx0XHRcdHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnTWVudScsIHRydWUsIGZhbHNlLCBbJ21lbnVTb25nJywgMCwgMV0pO1xyXG5cdFx0fVxyXG5cdH0sXHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIi8qXHJcbkxldmVsIDNcclxuKi9cclxudmFyIExldmVsU2V0dXAgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9sZXZlbF9zZXR1cCcpO1xyXG5cclxudmFyIGxldmVsVGhyZWUgPSBmdW5jdGlvbiAoKSB7IH07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGxldmVsVGhyZWU7XHJcblxyXG5sZXZlbFRocmVlLnByb3RvdHlwZSA9IHtcclxuXHRcclxuICBpbml0OiBmdW5jdGlvbihwYXJhbXMpe1xyXG4gIFx0dGhpcy5sZXZlbFNvbmcgPSB0aGlzLmdhbWUuYWRkLmF1ZGlvKHBhcmFtc1swXSk7XHJcblx0dGhpcy5sZXZlbFNvbmcucGxheSgnJyxwYXJhbXNbMV0scGFyYW1zWzJdLHRydWUsdHJ1ZSk7XHJcbiAgfSxcclxuXHRcclxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHR0aGlzLmxldmVsU2V0dXAgPSBuZXcgTGV2ZWxTZXR1cCh0aGlzLCAnbGV2ZWxfdGhyZWUnKTtcclxuXHR0aGlzLnBhdXNlTWVudSA9IHRoaXMuZ2FtZS5hZGQuaW1hZ2UoLTIwMDAsIC0yMDAwLCAncGF1c2VNZW51Jyk7XHJcblx0dGhpcy5wYXVzZU1lbnUua2lsbCgpO1xyXG5cdHRoaXMucGF1c2VNZW51LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcblx0dGhpcy5wYXVzZUtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoMjcpO1xyXG5cdHRoaXMucGF1c2VLZXkub25Eb3duLmFkZCh0aGlzLnBhdXNlR2FtZSwge2dhbWU6IHRoaXMsIGNvbnRleHQ6ICdrZXknfSk7XHJcblx0dGhpcy5tZW51S2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuU1BBQ0VCQVIpO1xyXG5cdHRoaXMubWVudUtleS5vbkRvd24uYWRkKHRoaXMucmV0dXJuVG9NZW51LCB0aGlzKTtcclxuXHR0aGlzLnJlc3RhcnRLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5HKTtcclxuXHR0aGlzLnJlc3RhcnRLZXkub25Eb3duLmFkZCh0aGlzLnJlc3RhcnRMZXZlbCwge2dhbWU6IHRoaXMsIGNvbnRleHQ6ICdrZXknfSk7XHJcblx0dGhpcy5zdGF0ZS5nYW1lLmlucHV0Lm9uRG93bi5hZGQodGhpcy5wYXVzZUdhbWUsIHtnYW1lOiB0aGlzLCBjb250ZXh0OiAnbW91c2UnfSk7XHJcbiAgfSxcclxuICBcclxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgdGhpcy5sZXZlbFNldHVwLnVwZGF0ZSgpO1xyXG4gIH0sXHJcbiAgXHJcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgIHRoaXMubGV2ZWxTZXR1cC5yZW5kZXIoKTtcclxuICB9LFxyXG4gIFxyXG4gIHBhdXNlR2FtZTogZnVuY3Rpb24oKSB7XHJcblx0XHRpZighdGhpcy5nYW1lLnN0YXRlLmdhbWUucGF1c2VkKSB7XHJcblx0XHRcdGlmKHRoaXMuY29udGV4dCA9PT0gJ2tleScpIHtcclxuXHRcdFx0XHR0aGlzLmdhbWUucGF1c2VNZW51ID0gdGhpcy5nYW1lLmFkZC5pbWFnZSh0aGlzLmdhbWUuY2FtZXJhLnggKyAodGhpcy5nYW1lLmNhbWVyYS53aWR0aCAvIDIpLCB0aGlzLmdhbWUuY2FtZXJhLnkgKyAodGhpcy5nYW1lLmNhbWVyYS5oZWlnaHQgLyAyKSwgJ3BhdXNlTWVudScpO1xyXG5cdFx0XHRcdHRoaXMuZ2FtZS5wYXVzZU1lbnUuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuXHRcdFx0XHR0aGlzLmdhbWUuc3RhdGUuZ2FtZS5wYXVzZWQgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0dGhpcy5nYW1lLnN0YXRlLmdhbWUucGF1c2VkID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuZ2FtZS5wYXVzZU1lbnUuZGVzdHJveSgpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHJlc3RhcnRMZXZlbDogZnVuY3Rpb24oKSB7XHJcblx0XHRpZih0aGlzLmNvbnRleHQgPT09ICdrZXknKSB7XHJcblx0XHRcdGlmKHRoaXMuZ2FtZS5zdGF0ZS5nYW1lLnBhdXNlZCkge1xyXG5cdFx0XHRcdHRoaXMuZ2FtZS5zdGF0ZS5nYW1lLnBhdXNlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdHRoaXMuZ2FtZS5sZXZlbFNvbmcuZGVzdHJveSgpO1xyXG5cdFx0XHRcdHRoaXMuZ2FtZS5nYW1lLnN0YXRlLnN0YXJ0KCdsZXZlbFRocmVlJywgdHJ1ZSwgZmFsc2UsIFsnbWFpblNvbmcnLCAwLCAwLjc1XSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHR0aGlzLmdhbWUubGV2ZWxTb25nLmRlc3Ryb3koKTtcclxuXHRcdFx0dGhpcy5nYW1lLmdhbWUuc3RhdGUuc3RhcnQoJ2xldmVsVGhyZWUnLCB0cnVlLCBmYWxzZSwgWydtYWluU29uZycsIDAsIDAuNzVdKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdFxyXG5cdHJldHVyblRvTWVudTogZnVuY3Rpb24oKSB7XHJcblx0XHRpZih0aGlzLnN0YXRlLmdhbWUucGF1c2VkKSB7XHJcblx0XHRcdHRoaXMuc3RhdGUuZ2FtZS5wYXVzZWQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5sZXZlbFNvbmcuZGVzdHJveSgpO1xyXG5cdFx0XHR0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ01lbnUnLCB0cnVlLCBmYWxzZSwgWydtZW51U29uZycsIDAsIDFdKTtcclxuXHRcdH1cclxuXHR9LFxyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCIvKlxyXG5MZXZlbCAyXHJcbiovXHJcbnZhciBMZXZlbFNldHVwID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvbGV2ZWxfc2V0dXAnKTtcclxuXHJcbnZhciBsZXZlbFR3byA9IGZ1bmN0aW9uICgpIHsgfTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbGV2ZWxUd287XHJcblxyXG5sZXZlbFR3by5wcm90b3R5cGUgPSB7XHJcblx0XHJcbiAgaW5pdDogZnVuY3Rpb24ocGFyYW1zKXtcclxuICBcdHRoaXMubGV2ZWxTb25nID0gdGhpcy5nYW1lLmFkZC5hdWRpbyhwYXJhbXNbMF0pO1xyXG5cdHRoaXMubGV2ZWxTb25nLnBsYXkoJycscGFyYW1zWzFdLHBhcmFtc1syXSx0cnVlLHRydWUpO1xyXG4gIH0sXHJcblx0XHJcbiAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgIHRoaXMubGV2ZWxTZXR1cCA9IG5ldyBMZXZlbFNldHVwKHRoaXMsICdsZXZlbF90d28nKTtcclxuICAgdGhpcy5wYXVzZU1lbnUgPSB0aGlzLmdhbWUuYWRkLmltYWdlKC0yMDAwLCAtMjAwMCwgJ3BhdXNlTWVudScpO1xyXG5cdHRoaXMucGF1c2VNZW51LmtpbGwoKTtcclxuXHR0aGlzLnBhdXNlTWVudS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG5cdHRoaXMucGF1c2VLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KDI3KTtcclxuXHR0aGlzLnBhdXNlS2V5Lm9uRG93bi5hZGQodGhpcy5wYXVzZUdhbWUsIHtnYW1lOiB0aGlzLCBjb250ZXh0OiAna2V5J30pO1xyXG5cdHRoaXMubWVudUtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlNQQUNFQkFSKTtcclxuXHR0aGlzLm1lbnVLZXkub25Eb3duLmFkZCh0aGlzLnJldHVyblRvTWVudSwgdGhpcyk7XHJcblx0dGhpcy5yZXN0YXJ0S2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuRyk7XHJcblx0dGhpcy5yZXN0YXJ0S2V5Lm9uRG93bi5hZGQodGhpcy5yZXN0YXJ0TGV2ZWwsIHtnYW1lOiB0aGlzLCBjb250ZXh0OiAna2V5J30pO1xyXG5cdHRoaXMuc3RhdGUuZ2FtZS5pbnB1dC5vbkRvd24uYWRkKHRoaXMucGF1c2VHYW1lLCB7Z2FtZTogdGhpcywgY29udGV4dDogJ21vdXNlJ30pO1xyXG4gIH0sXHJcbiAgXHJcbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgIHRoaXMubGV2ZWxTZXR1cC51cGRhdGUoKTtcclxuICB9LFxyXG4gIFxyXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xyXG4gICB0aGlzLmxldmVsU2V0dXAucmVuZGVyKCk7XHJcbiAgfSxcclxuICBcclxuICBwYXVzZUdhbWU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYoIXRoaXMuZ2FtZS5zdGF0ZS5nYW1lLnBhdXNlZCkge1xyXG5cdFx0XHRpZih0aGlzLmNvbnRleHQgPT09ICdrZXknKSB7XHJcblx0XHRcdFx0dGhpcy5nYW1lLnBhdXNlTWVudSA9IHRoaXMuZ2FtZS5hZGQuaW1hZ2UodGhpcy5nYW1lLmNhbWVyYS54ICsgKHRoaXMuZ2FtZS5jYW1lcmEud2lkdGggLyAyKSwgdGhpcy5nYW1lLmNhbWVyYS55ICsgKHRoaXMuZ2FtZS5jYW1lcmEuaGVpZ2h0IC8gMiksICdwYXVzZU1lbnUnKTtcclxuXHRcdFx0XHR0aGlzLmdhbWUucGF1c2VNZW51LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcblx0XHRcdFx0dGhpcy5nYW1lLnN0YXRlLmdhbWUucGF1c2VkID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdHRoaXMuZ2FtZS5zdGF0ZS5nYW1lLnBhdXNlZCA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmdhbWUucGF1c2VNZW51LmRlc3Ryb3koKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRyZXN0YXJ0TGV2ZWw6IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYodGhpcy5jb250ZXh0ID09PSAna2V5Jykge1xyXG5cdFx0XHRpZih0aGlzLmdhbWUuc3RhdGUuZ2FtZS5wYXVzZWQpIHtcclxuXHRcdFx0XHR0aGlzLmdhbWUuc3RhdGUuZ2FtZS5wYXVzZWQgPSBmYWxzZTtcclxuXHRcdFx0XHR0aGlzLmdhbWUubGV2ZWxTb25nLmRlc3Ryb3koKTtcclxuXHRcdFx0XHR0aGlzLmdhbWUuZ2FtZS5zdGF0ZS5zdGFydCgnbGV2ZWxUd28nLCB0cnVlLCBmYWxzZSwgWydtYWluU29uZycsIDAsIDAuNzVdKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdHRoaXMuZ2FtZS5sZXZlbFNvbmcuZGVzdHJveSgpO1xyXG5cdFx0XHR0aGlzLmdhbWUuZ2FtZS5zdGF0ZS5zdGFydCgnbGV2ZWxUd28nLCB0cnVlLCBmYWxzZSwgWydtYWluU29uZycsIDAsIDAuNzVdKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdFxyXG5cdHJldHVyblRvTWVudTogZnVuY3Rpb24oKSB7XHJcblx0XHRpZih0aGlzLnN0YXRlLmdhbWUucGF1c2VkKSB7XHJcblx0XHRcdHRoaXMuc3RhdGUuZ2FtZS5wYXVzZWQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5sZXZlbFNvbmcuZGVzdHJveSgpO1xyXG5cdFx0XHR0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ01lbnUnLCB0cnVlLCBmYWxzZSwgWydtZW51U29uZycsIDAsIDFdKTtcclxuXHRcdH1cclxuXHR9LFxyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgTWVudSA9IGZ1bmN0aW9uICgpIHtcclxuICB0aGlzLnRleHQgPSBudWxsO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNZW51O1xyXG5cclxuTWVudS5wcm90b3R5cGUgPSB7XHJcblxyXG4gIGluaXQ6IGZ1bmN0aW9uKHBhcmFtcyl7XHJcbiAgXHRcclxuXHR0aGlzLm1lbnVTb25nID0gdGhpcy5nYW1lLmFkZC5hdWRpbyhwYXJhbXNbMF0pO1xyXG5cdHRoaXMubWVudVNvbmcucGxheSgnJyxwYXJhbXNbMV0scGFyYW1zWzJdLHRydWUsdHJ1ZSk7XHJcblx0dGhpcy5ob3ZlckNsaWNrID0gdGhpcy5nYW1lLmFkZC5hdWRpbygnaG92ZXJDbGljaycpO1xyXG5cdHRoaXMuZG93bkNsaWNrID0gdGhpcy5nYW1lLmFkZC5hdWRpbygnZG93bkNsaWNrJyk7XHJcbiAgfSxcclxuICBcclxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHR0aGlzLmRpZmYgPSA3Njg7XHJcblx0dGhpcy5idXREaWZmID0gMDtcclxuXHR0aGlzLmNyZWRpdHNTcGVlZCA9IDE2O1xyXG5cdHRoaXMuYnV0U3BlZWQgPSAzMjtcclxuXHR0aGlzLmNyZWRpdHNPcGVuaW5nID0gZmFsc2U7XHJcblx0dGhpcy5jcmVkaXRzQ2xvc2luZyA9IGZhbHNlO1xyXG5cdHRoaXMuYnV0dG9uc0xlYXZpbmcgPSBmYWxzZTtcclxuXHR0aGlzLmJ1dHRvbnNDb21pbmcgPSBmYWxzZTtcclxuXHR0aGlzLm1haW5CdXR0b25zVXAgPSB0cnVlO1xyXG5cdFxyXG5cdHRoaXMuYmcgPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSgtNDUwMCwgLTUwMCwgJ2VhcnRoTmlnaHQnKTtcclxuXHR0aGlzLmJnMiA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKC0xMjUwMCwgLTUwMCwgJ2VhcnRoTmlnaHQnKTtcclxuICAgIFxyXG5cdC8vTWFpbiBTY3JlZW5cclxuICAgIHRoaXMudGl0bGUgPSB0aGlzLmFkZC5pbWFnZSh0aGlzLmdhbWUuY2FtZXJhLnggKyAodGhpcy5nYW1lLmNhbWVyYS53aWR0aCAvIDIpLCB0aGlzLmdhbWUuY2FtZXJhLnkgKyAodGhpcy5nYW1lLmNhbWVyYS5oZWlnaHQgLyAyKSArIDMyLCAndGl0bGUnKTtcclxuICAgIHRoaXMudGl0bGUuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuICAgIFxyXG4gICAgdGhpcy5zdGFydEJ1dHRvbiA9IHRoaXMuYWRkQnV0dG9uKDAsICdzdGFydEdhbWVCdXR0b24nLCB0aGlzLmNoYW5nZVRvTGV2ZWwxLCB0aGlzKTtcclxuXHR0aGlzLmZvcm1hdEJ1dHRvbih0aGlzLnN0YXJ0QnV0dG9uKTtcclxuICBcdFxyXG4gIFx0dGhpcy5taXNzaW9uU2VsZWN0QnV0dG9uID0gdGhpcy5hZGRCdXR0b24oMSwgJ21pc3Npb25TZWxlY3RCdXR0b24nLCB0aGlzLnN3aXRjaEJ1dHRvbnMsIHRoaXMpO1xyXG5cdHRoaXMuZm9ybWF0QnV0dG9uKHRoaXMubWlzc2lvblNlbGVjdEJ1dHRvbik7XHJcbiAgXHRcclxuICBcdHRoaXMuY3JlZGl0c0J1dHRvbiA9IHRoaXMuYWRkQnV0dG9uKDIsICdjcmVkaXRzQnV0dG9uJywgdGhpcy5kb0NyZWRpdHMsIHtnYW1lOiB0aGlzLCBidXR0b246ICdjcmVkaXRzQnV0dG9uJ30pO1xyXG5cdHRoaXMuZm9ybWF0QnV0dG9uKHRoaXMuY3JlZGl0c0J1dHRvbik7XHJcblx0XHJcblx0Ly9MZXZlbCBTZWxlY3RcclxuXHR0aGlzLmxldmVsMUJ1dHRvbiA9IHRoaXMuYWRkQnV0dG9uKC0xLCAnbGV2ZWwxQnV0dG9uJywgdGhpcy5jaGFuZ2VUb0xldmVsMSwgdGhpcyk7XHJcblx0dGhpcy5mb3JtYXRCdXR0b24odGhpcy5sZXZlbDFCdXR0b24pO1xyXG4gIFx0XHJcblx0dGhpcy5sZXZlbDJCdXR0b24gPSB0aGlzLmFkZEJ1dHRvbigwLCAnbGV2ZWwyQnV0dG9uJywgdGhpcy5jaGFuZ2VUb0xldmVsMiwgdGhpcyk7XHJcblx0dGhpcy5mb3JtYXRCdXR0b24odGhpcy5sZXZlbDJCdXR0b24pO1xyXG5cdFxyXG5cdHRoaXMubGV2ZWwzQnV0dG9uID0gdGhpcy5hZGRCdXR0b24oMSwgJ2xldmVsM0J1dHRvbicsIHRoaXMuY2hhbmdlVG9MZXZlbDMsIHRoaXMpO1xyXG5cdHRoaXMuZm9ybWF0QnV0dG9uKHRoaXMubGV2ZWwzQnV0dG9uKTtcclxuXHRcclxuXHR0aGlzLmJhY2tCdXR0b24gPSB0aGlzLmFkZEJ1dHRvbigyLCAnYmFja0J1dHRvbicsIHRoaXMuc3dpdGNoQnV0dG9ucywgdGhpcyk7XHJcblx0dGhpcy5mb3JtYXRCdXR0b24odGhpcy5iYWNrQnV0dG9uKTtcclxuXHJcblx0dGhpcy5jcmVkaXRzID0gdGhpcy5hZGQuaW1hZ2UodGhpcy5nYW1lLmNhbWVyYS54ICsgKHRoaXMuZ2FtZS5jYW1lcmEud2lkdGggLyAyKSAtIDM2MCwgdGhpcy5nYW1lLmNhbWVyYS55ICsgKHRoaXMuZ2FtZS5jYW1lcmEuaGVpZ2h0IC8gMikgLSAyNTYgKyB0aGlzLmRpZmYsICdjcmVkaXRzJyk7XHJcblx0dGhpcy5jcmVkaXRzLmtpbGwoKTtcclxuXHR0aGlzLmNyZWRpdHNDbG9zZUJ1dHRvbiA9IHRoaXMuYWRkQnV0dG9uKDEwLCAnY2xvc2VCdXR0b24nLCB0aGlzLmRvQ3JlZGl0cywge2dhbWU6IHRoaXMsIGJ1dHRvbjogJ2Nsb3NlQ3JlZGl0c0J1dHRvbid9KTtcclxuXHR0aGlzLmNyZWRpdHNDbG9zZUJ1dHRvbi54ID0gdGhpcy5jcmVkaXRzLnggKyB0aGlzLmNyZWRpdHMud2lkdGggLSAzMjtcclxuXHR0aGlzLmNyZWRpdHNDbG9zZUJ1dHRvbi55ID0gdGhpcy5jcmVkaXRzLnk7XHJcblx0dGhpcy5jcmVkaXRzQ2xvc2VCdXR0b24ub25JbnB1dE92ZXIuYWRkKHRoaXMucGxheUhvdmVyQ2xpY2ssIHRoaXMpO1xyXG5cdHRoaXMuY3JlZGl0c0Nsb3NlQnV0dG9uLm9uSW5wdXREb3duLmFkZCh0aGlzLnBsYXlEb3duQ2xpY2ssIHRoaXMpO1xyXG4gIH0sXHJcblxyXG4gIGFkZEJ1dHRvbjogZnVuY3Rpb24oYnV0dG9uLCBpbWcsIGZ1bmMsIGNvbnRleHQpe1xyXG4gICAgcmV0dXJuIHRoaXMuYWRkLmJ1dHRvbih0aGlzLmdhbWUuY2FtZXJhLnggKyAodGhpcy5nYW1lLmNhbWVyYS53aWR0aCAvIDIpLCB0aGlzLmdhbWUuY2FtZXJhLnkgKyAodGhpcy5nYW1lLmNhbWVyYS5oZWlnaHQgLyAyKSArIChidXR0b24pICogOTAsIGltZywgZnVuYywgY29udGV4dCwgMSwgMCwgMik7XHJcblxyXG4gIH0sXHJcbiAgXHJcbiAgZHJhdzogZnVuY3Rpb24oKXtcclxuICB9LFxyXG4gIFxyXG4gIGNoYW5nZVRvTGV2ZWwxOiBmdW5jdGlvbigpe1xyXG5cdGlmKCF0aGlzLmNyZWRpdHMuYWxpdmUpIHtcclxuXHRcdHRoaXMubWVudVNvbmcuZGVzdHJveSgpO1xyXG5cdFx0dmFyIHBhcmFtcyA9IFsnbWFpblNvbmcnLCAwLCAwLjc1XTtcclxuXHRcdHRoaXMucGxheURvd25DbGljaygpO1xyXG5cdFx0dGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdsZXZlbE9uZScsIHRydWUsIGZhbHNlLCBwYXJhbXMpO1xyXG5cdH1cclxuICB9LFxyXG4gIFxyXG4gIGNoYW5nZVRvTGV2ZWwyOiBmdW5jdGlvbigpe1xyXG5cdGlmKCF0aGlzLmNyZWRpdHMuYWxpdmUpIHtcclxuXHRcdHRoaXMubWVudVNvbmcuZGVzdHJveSgpO1xyXG5cdFx0dmFyIHBhcmFtcyA9IFsnbWFpblNvbmcnLCAwLCAwLjc1XTtcclxuXHRcdHRoaXMucGxheURvd25DbGljaygpO1xyXG5cdFx0dGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdsZXZlbFR3bycsIHRydWUsIGZhbHNlLCBwYXJhbXMpO1xyXG5cdH1cclxuICB9LCBcclxuICBcclxuICBjaGFuZ2VUb0xldmVsMzogZnVuY3Rpb24oKXtcclxuXHRpZighdGhpcy5jcmVkaXRzLmFsaXZlKSB7XHJcblx0XHR0aGlzLm1lbnVTb25nLmRlc3Ryb3koKTtcclxuXHRcdHZhciBwYXJhbXMgPSBbJ21haW5Tb25nJywgMCwgMC43NV07XHJcblx0XHR0aGlzLnBsYXlEb3duQ2xpY2soKTtcclxuXHRcdHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnbGV2ZWxUaHJlZScsIHRydWUsIGZhbHNlLCBwYXJhbXMpO1xyXG5cdH1cclxuICB9LCBcclxuLyogXHJcbiAgY2hhbmdlVG9NZW51OiBmdW5jdGlvbigpe1xyXG5cdGlmKCF0aGlzLmNyZWRpdHMuYWxpdmUpIHtcclxuXHRcdHRoaXMubWVudVNvbmcuZGVzdHJveSgpO1xyXG5cdFx0dGhpcy5wbGF5RG93bkNsaWNrKCk7XHJcblx0XHR0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ01lbnUnKTtcclxuXHR9XHJcbiAgfSxcclxuKi8gXHJcbiAgZG9DcmVkaXRzOiBmdW5jdGlvbigpIHtcclxuXHR0aGlzLmdhbWUucGxheURvd25DbGljaygpO1xyXG5cdGlmKCF0aGlzLmdhbWUuY3JlZGl0cy5hbGl2ZSAmJiAhdGhpcy5nYW1lLmNyZWRpdHNPcGVuaW5nICYmICF0aGlzLmdhbWUuY3JlZGl0c0Nsb3NpbmcgJiYgdGhpcy5idXR0b24gPT09ICdjcmVkaXRzQnV0dG9uJykge1xyXG5cdCAgdGhpcy5nYW1lLmNyZWRpdHMucmV2aXZlKCk7XHJcblx0ICB0aGlzLmdhbWUuZGlmZiA9IDc2ODtcclxuXHQgIHRoaXMuZ2FtZS5jcmVkaXRzT3BlbmluZyA9IHRydWU7XHJcbiAgIH1cclxuICAgZWxzZSBpZih0aGlzLmdhbWUuY3JlZGl0cy5hbGl2ZSAmJiAhdGhpcy5nYW1lLmNyZWRpdHNDbG9zaW5nICYmICF0aGlzLmdhbWUuY3JlZGl0c09wZW5pbmcgJiYgdGhpcy5idXR0b24gPT09ICdjbG9zZUNyZWRpdHNCdXR0b24nKSB7XHJcblx0ICB0aGlzLmdhbWUuY3JlZGl0c0Nsb3NpbmcgPSB0cnVlO1xyXG5cdCAgdGhpcy5nYW1lLmtpbGxSZXZpdmVCdXR0b25zKCdyZXZpdmUnKTtcclxuICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgZm9ybWF0QnV0dG9uOiBmdW5jdGlvbihidXR0b24pIHtcclxuXHRidXR0b24uYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuXHRidXR0b24ub25JbnB1dE92ZXIuYWRkKHRoaXMucGxheUhvdmVyQ2xpY2ssIHRoaXMpO1xyXG5cdGJ1dHRvbi5vbklucHV0RG93bi5hZGQodGhpcy5wbGF5RG93bkNsaWNrLCB0aGlzKTtcclxuICB9LFxyXG4gIFxyXG4gIGtpbGxSZXZpdmVCdXR0b25zOiBmdW5jdGlvbihrZXkpIHtcclxuXHRpZihrZXkgPT09ICdraWxsJykge1xyXG5cdFx0dGhpcy5zdGFydEJ1dHRvbi5raWxsKCk7XHJcblx0XHR0aGlzLm1pc3Npb25TZWxlY3RCdXR0b24ua2lsbCgpO1xyXG5cdFx0dGhpcy5jcmVkaXRzQnV0dG9uLmtpbGwoKTtcclxuXHR9XHJcblx0ZWxzZSBpZihrZXkgPT09ICdyZXZpdmUnKSB7XHJcblx0XHR0aGlzLnN0YXJ0QnV0dG9uLnJldml2ZSgpO1xyXG5cdFx0dGhpcy5taXNzaW9uU2VsZWN0QnV0dG9uLnJldml2ZSgpO1xyXG5cdFx0dGhpcy5jcmVkaXRzQnV0dG9uLnJldml2ZSgpO1xyXG5cdH1cclxuICB9LFxyXG4gIFxyXG4gIHN3aXRjaEJ1dHRvbnM6IGZ1bmN0aW9uKCkge1xyXG5cdHRoaXMucGxheURvd25DbGljaygpO1xyXG5cdGlmKCF0aGlzLmJ1dHRvbnNMZWF2aW5nICYmIHRoaXMubWFpbkJ1dHRvbnNVcCA9PT0gdHJ1ZSkge1xyXG5cdFx0dGhpcy5idXREaWZmID0gMDtcclxuXHRcdHRoaXMuYnV0dG9uc0xlYXZpbmcgPSB0cnVlO1xyXG5cdH1cclxuXHRlbHNlIGlmKCF0aGlzLmJ1dHRvbnNDb21pbmcgJiYgdGhpcy5tYWluQnV0dG9uc1VwID09PSBmYWxzZSkge1xyXG5cdFx0dGhpcy5idXR0b25zQ29taW5nID0gdHJ1ZTtcclxuXHR9XHJcbiAgfSxcclxuICBcclxuICAvKlxyXG4gIGNoYW5nZVN0YXRlOiBmdW5jdGlvbihzdGF0ZSl7XHJcbiAgXHRzd2l0Y2goc3RhdGUpe1xyXG4gIFx0XHRjYXNlICdnYW1lJzpcclxuICBcdFx0XHR0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ0dhbWUnKTtcclxuICBcdFx0XHRicmVhaztcclxuICBcdFx0Y2FzZSAnbWVudSc6XHJcbiAgXHRcdFx0dGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdNZW51Jyk7XHJcbiAgXHRcdFx0YnJlYWs7XHJcbiAgXHRcdGRlZmF1bHQ6XHJcbiAgXHRcdFx0YnJlYWs7XHJcbiAgXHR9XHJcbiAgfSxcclxuICAqL1xyXG5cdHVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdFx0dGhpcy5iZy54ICs9IDAuMTI1O1xyXG5cdFx0aWYodGhpcy5iZy54ID49IDApIHtcclxuXHRcdFx0dGhpcy5iZy54ID0gLTgwMDA7XHJcblx0XHR9XHJcblx0XHR0aGlzLmJnMi54ICs9IDAuMTI1O1xyXG5cdFx0aWYodGhpcy5iZzIueCA+PSAwKSB7XHJcblx0XHRcdHRoaXMuYmcyLnggPSAtODAwMDtcclxuXHRcdH1cclxuXHRcdGlmKHRoaXMuY3JlZGl0c09wZW5pbmcgPT09IHRydWUpIHtcdFxyXG5cdFx0ICB0aGlzLmRpZmYgLT0gdGhpcy5jcmVkaXRzU3BlZWQ7XHJcblx0XHRcdGlmKHRoaXMuZGlmZiA8PSAwKSB7XHJcblx0XHRcdFx0dGhpcy5raWxsUmV2aXZlQnV0dG9ucygna2lsbCcpO1xyXG5cdFx0XHRcdHRoaXMuY3JlZGl0c09wZW5pbmcgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZih0aGlzLmNyZWRpdHNDbG9zaW5nID09PSB0cnVlKSB7XHJcblx0XHQgIHRoaXMuZGlmZiArPSB0aGlzLmNyZWRpdHNTcGVlZDtcclxuXHRcdFx0aWYodGhpcy5kaWZmID49IDc2OCkge1xyXG5cdFx0XHRcdHRoaXMuY3JlZGl0cy5raWxsKCk7XHJcblx0XHRcdFx0dGhpcy5jcmVkaXRzQ2xvc2luZyA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR0aGlzLmNyZWRpdHMueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArICh0aGlzLmdhbWUuY2FtZXJhLmhlaWdodCAvIDIpIC0gMjU2ICsgdGhpcy5kaWZmO1xyXG5cdFx0dGhpcy5jcmVkaXRzQ2xvc2VCdXR0b24ueCA9IHRoaXMuY3JlZGl0cy54ICsgdGhpcy5jcmVkaXRzLndpZHRoIC0gMzI7XHJcblx0XHR0aGlzLmNyZWRpdHNDbG9zZUJ1dHRvbi55ID0gdGhpcy5jcmVkaXRzLnk7XHJcblx0XHRcclxuXHRcdGlmKHRoaXMuYnV0dG9uc0xlYXZpbmcgPT09IHRydWUpIHtcclxuXHRcdFx0dGhpcy5idXREaWZmIC09IHRoaXMuYnV0U3BlZWQ7XHJcblx0XHRcdGlmKHRoaXMuYnV0RGlmZiA8PSAtNzY4KSB7XHJcblx0XHRcdFx0dGhpcy5idXR0b25zTGVhdmluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdHRoaXMubWFpbkJ1dHRvbnNVcCA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKHRoaXMuYnV0dG9uc0NvbWluZyA9PT0gdHJ1ZSkge1xyXG5cdFx0XHR0aGlzLmJ1dERpZmYgKz0gdGhpcy5idXRTcGVlZDtcclxuXHRcdFx0aWYodGhpcy5idXREaWZmID49IDApIHtcclxuXHRcdFx0XHR0aGlzLmJ1dHRvbnNDb21pbmcgPSBmYWxzZTtcclxuXHRcdFx0XHR0aGlzLm1haW5CdXR0b25zVXAgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR0aGlzLnN0YXJ0QnV0dG9uLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyAodGhpcy5nYW1lLmNhbWVyYS53aWR0aCAvIDIpICsgdGhpcy5idXREaWZmO1xyXG5cdFx0dGhpcy5taXNzaW9uU2VsZWN0QnV0dG9uLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyAodGhpcy5nYW1lLmNhbWVyYS53aWR0aCAvIDIpICsgdGhpcy5idXREaWZmO1xyXG5cdFx0dGhpcy5jcmVkaXRzQnV0dG9uLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyAodGhpcy5nYW1lLmNhbWVyYS53aWR0aCAvIDIpICsgdGhpcy5idXREaWZmO1xyXG5cdFx0dGhpcy5sZXZlbDFCdXR0b24ueCA9IHRoaXMuc3RhcnRCdXR0b24ueCArIDc2ODtcclxuXHRcdHRoaXMubGV2ZWwyQnV0dG9uLnggPSB0aGlzLnN0YXJ0QnV0dG9uLnggKyA3Njg7XHJcblx0XHR0aGlzLmxldmVsM0J1dHRvbi54ID0gdGhpcy5zdGFydEJ1dHRvbi54ICsgNzY4O1xyXG5cdFx0dGhpcy5iYWNrQnV0dG9uLnggPSB0aGlzLnN0YXJ0QnV0dG9uLnggKyA3Njg7XHJcblx0XHRcclxuXHR9LFxyXG5cdFxyXG5cdHBsYXlIb3ZlckNsaWNrOiBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuaG92ZXJDbGljay5wbGF5KCk7XHJcblx0fSxcclxuXHRcclxuXHRwbGF5RG93bkNsaWNrOiBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuZG93bkNsaWNrLnBsYXkoKTtcclxuXHR9LFxyXG5cclxufTtcclxuIiwidmFyIFByZWxvYWRlciA9IGZ1bmN0aW9uIChnYW1lKSB7XHJcbiAgZ2FtZSA9IG51bGw7XHJcbiAgdGhpcy5hc3NldCA9IG51bGw7XHJcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQcmVsb2FkZXI7XHJcblxyXG5QcmVsb2FkZXIucHJvdG90eXBlID0ge1xyXG5cclxuICBwcmVsb2FkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmFzc2V0ID0gdGhpcy5hZGQuc3ByaXRlKDY0MCwgMzYwLCAncHJlbG9hZGVyJyk7XHJcbiAgICB0aGlzLmFzc2V0LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcblxyXG4gICAgdGhpcy5sb2FkLm9uTG9hZENvbXBsZXRlLmFkZE9uY2UodGhpcy5vbkxvYWRDb21wbGV0ZSwgdGhpcyk7XHJcbiAgICB0aGlzLmxvYWQuc2V0UHJlbG9hZFNwcml0ZSh0aGlzLmFzc2V0KTtcclxuXHRcclxuXHQvL0xvYWQgU3ByaXRlc2hlZXRzXHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdjb3JlJywgJ2Fzc2V0cy9pbWFnZXMvY29yZVNoZWV0LnBuZycsIDY0LCA2NCk7IFxyXG5cdHRoaXMubG9hZC5zcHJpdGVzaGVldCgndGhydXN0ZXInLCAnYXNzZXRzL2ltYWdlcy90aHJ1c3RlclNoZWV0LnBuZycsIDY0LCA2NCk7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdndW4nLCAnYXNzZXRzL2ltYWdlcy9ndW5TaGVldC5wbmcnLCA2NCwgNjQpO1xyXG5cdHRoaXMubG9hZC5zcHJpdGVzaGVldCgnaGFja2VyJywgJ2Fzc2V0cy9pbWFnZXMvaGFja1NoZWV0LnBuZycsIDY0LCA2NCk7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdzaGllbGRCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9zaGllbGRCdXR0b25TaGVldC5wbmcnLCAyNTYsIDgyKTtcclxuXHR0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ3NvbGFyUGFuZWxCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9zb2xhclBhbmVsQnV0dG9uU2hlZXQucG5nJywgMjU2LCA4Mik7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCd0aHJ1c3RlckJ1dHRvbicsICdhc3NldHMvaW1hZ2VzL3RocnVzdGVyQnV0dG9uU2hlZXQucG5nJywgMjU2LCA4Mik7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdndW5CdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9ndW5CdXR0b25TaGVldC5wbmcnLCAyNTYsIDgyKTtcclxuXHR0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ2hhY2tCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9oYWNrQnV0dG9uU2hlZXQucG5nJywgMjU2LCA4Mik7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdoYWNrYWJsZScsICdhc3NldHMvaW1hZ2VzL2hhY2thYmxlU2hlZXQucG5nJywgNjQsIDY0KTtcclxuXHR0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ3Nob3BCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9zaG9wQnV0dG9uU2hlZXQucG5nJywgMzIsIDMyKTtcclxuXHR0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ2Nsb3NlQnV0dG9uJywgJ2Fzc2V0cy9pbWFnZXMvY2xvc2VCdXR0b25TaGVldC5wbmcnLCAzMiwgMzIpO1xyXG5cdFxyXG5cdC8vTG9hZCBJbWFnZXNcclxuXHR0aGlzLmxvYWQuaW1hZ2UoJ2VhcnRoTmlnaHQnLCAnYXNzZXRzL2ltYWdlcy9iZ19lYXJ0aE5pZ2h0U21hbGwuanBnJyk7XHJcblx0dGhpcy5sb2FkLmltYWdlKCdjcmVkaXRzJywgJ2Fzc2V0cy9pbWFnZXMvY3JlZGl0cy5wbmcnKTtcclxuXHR0aGlzLmxvYWQuaW1hZ2UoJ2J1bGxldCcsICdhc3NldHMvaW1hZ2VzL2J1bGxldC5wbmcnKTtcclxuXHR0aGlzLmxvYWQuaW1hZ2UoJ3NoaWVsZCcsICdhc3NldHMvaW1hZ2VzL3NoaWVsZC5wbmcnKTtcclxuXHR0aGlzLmxvYWQuaW1hZ2UoJ3NvbGFyUGFuZWwnLCAnYXNzZXRzL2ltYWdlcy9zb2xhclBhbmVsLnBuZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnYXN0ZXJvaWQnLCAnYXNzZXRzL2ltYWdlcy9hc3Rlcm9pZC5wbmcnKTtcclxuXHR0aGlzLmxvYWQuaW1hZ2UoJ3Nob3BQYW5lbCcsICdhc3NldHMvaW1hZ2VzL3Nob3BCYWNrUGFuZWwucG5nJyk7XHJcblx0dGhpcy5sb2FkLmltYWdlKCd3YXJuaW5nJywgJ2Fzc2V0cy9pbWFnZXMvd2FybmluZy5wbmcnKTtcclxuXHR0aGlzLmxvYWQuaW1hZ2UoJ2JlJywgJ2Fzc2V0cy9pbWFnZXMvYmUucG5nJyk7XHJcblx0dGhpcy5sb2FkLmltYWdlKCdzZWxlY3RlZCcsICdhc3NldHMvaW1hZ2VzL3NlbGVjdGVkLnBuZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgncGF1c2VNZW51JywgJ2Fzc2V0cy9pbWFnZXMvcGF1c2VNZW51LnBuZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnbWlzc2lvblByb21wdCcsICdhc3NldHMvaW1hZ2VzL21pc3Npb25Qcm9tcHQucG5nJyk7XHJcbiAgICBcclxuXHQvL0xvYWQgRm9udHNcclxuXHR0aGlzLmxvYWQuc2NyaXB0KCd3ZWJmb250JywgJy8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvd2ViZm9udC8xLjQuNy93ZWJmb250LmpzJyk7XHJcblx0XHJcblx0Ly9Mb2FkIEpTT04gRmlsZXNcclxuXHR0aGlzLmxvYWQuYXRsYXNKU09OSGFzaCgnY29ubmVjdGlvbnMnLCAnYXNzZXRzL2ltYWdlcy9jb25uZWN0aW9ucy5wbmcnLCAnYXNzZXRzL2pzb24vY29ubmVjdGlvbnMuanNvbicpO1xyXG5cdHRoaXMubG9hZC5hdGxhc0pTT05IYXNoKCdjb25uZWN0aW9ucycsICdhc3NldHMvaW1hZ2VzL2Nvbm5lY3Rpb25zLnBuZycsICdhc3NldHMvanNvbi9jb25uZWN0aW9ucy5qc29uJyk7XHJcblx0dGhpcy5sb2FkLmF0bGFzSlNPTkhhc2goJ2hlbHBCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9oZWxwQnV0dG9uU2hlZXQucG5nJywgJ2Fzc2V0cy9qc29uL2hlbHBfYnV0dG9uLmpzb24nKTtcclxuXHR0aGlzLmxvYWQuYXRsYXNKU09OSGFzaCgnYXJyb3dCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9hcnJvd0J1dHRvblNoZWV0LnBuZycsICdhc3NldHMvanNvbi9hcnJvd19idXR0b24uanNvbicpO1xyXG5cdHRoaXMubG9hZC5waHlzaWNzKCdtb2R1bGVfcGh5c2ljcycsICdhc3NldHMvanNvbi9tb2R1bGVfcGh5c2ljcy5qc29uJyk7XHJcblx0dGhpcy5sb2FkLnBoeXNpY3MoJ2FzdGVyb2lkUG9seWdvbicsICdhc3NldHMvanNvbi9hc3Rlcm9pZFBvbHlnb24uanNvbicpO1xyXG5cdHRoaXMubG9hZC50ZXh0KCd0dXRvcmlhbF90ZXh0JywgJ2Fzc2V0cy9qc29uL3R1dG9yaWFsX3RleHQuanNvbicpO1xyXG5cdC8vTG9hZCBMZXZlbCBKU09OIEZpbGVzXHJcblx0dGhpcy5sb2FkLnRleHQoJ2xldmVsX29uZScsICdhc3NldHMvanNvbi9sZXZlbF9vbmUuanNvbicpO1xyXG5cdHRoaXMubG9hZC50ZXh0KCdsZXZlbF90d28nLCAnYXNzZXRzL2pzb24vbGV2ZWxfdHdvLmpzb24nKTtcclxuXHR0aGlzLmxvYWQudGV4dCgnbGV2ZWxfdGhyZWUnLCAnYXNzZXRzL2pzb24vbGV2ZWxfdGhyZWUuanNvbicpO1xyXG5cdFxyXG5cdC8vTG9hZCBTb3VuZCBFZmZlY3RzXHJcblx0dGhpcy5sb2FkLmF1ZGlvKCdkb3duQ2xpY2snLCAnYXNzZXRzL3NvdW5kL2Rvd25DbGljay5vZ2cnKTtcclxuXHR0aGlzLmxvYWQuYXVkaW8oJ2hvdmVyQ2xpY2snLCAnYXNzZXRzL3NvdW5kL2hvdmVyQ2xpY2sub2dnJyk7XHJcblx0dGhpcy5sb2FkLmF1ZGlvKCdlcnJvcicsICdhc3NldHMvc291bmQvZXJyb3Iub2dnJyk7XHJcblx0dGhpcy5sb2FkLmF1ZGlvKCdjYXNoUmVnaXN0ZXInLCAnYXNzZXRzL3NvdW5kL2Nhc2hSZWdpc3Rlci5vZ2cnKTtcclxuXHR0aGlzLmxvYWQuYXVkaW8oJ2d1bicsICdhc3NldHMvc291bmQvZ3VuLm9nZycpO1xyXG5cdHRoaXMubG9hZC5hdWRpbygnaGFja2luZycsICdhc3NldHMvc291bmQvaGFja2luZy5vZ2cnKTtcclxuXHR0aGlzLmxvYWQuYXVkaW8oJ21vZHVsZUltcGFjdCcsICdhc3NldHMvc291bmQvbW9kdWxlSW1wYWN0Lm9nZycpO1xyXG5cdHRoaXMubG9hZC5hdWRpbygnbW9kdWxlQ29ubmVjdCcsICdhc3NldHMvc291bmQvbW9kdWxlQ29ubmVjdC5vZ2cnKTtcclxuXHR0aGlzLmxvYWQuYXVkaW8oJ21vZHVsZVBvd2VyJywgJ2Fzc2V0cy9zb3VuZC9tb2R1bGVQb3dlci5vZ2cnKTtcclxuXHR0aGlzLmxvYWQuYXVkaW8oJ3RocnVzdGVyTG9vcCcsICdhc3NldHMvc291bmQvdGhydXN0ZXJMb29wLm9nZycpO1xyXG5cdFxyXG5cdHRoaXMubG9hZC50ZXh0KCd0dXRvcmlhbF90ZXh0JywgJ2Fzc2V0cy9qc29uL3R1dG9yaWFsX3RleHQuanNvbicpO1xyXG5cdC8vIHRoaXMubG9hZC5zY3JpcHQoJ3dlYmZvbnQnLCAnLy9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy93ZWJmb250LzEuNC43L3dlYmZvbnQuanMnKTtcclxuXHR0aGlzLmxvYWQuYXRsYXNKU09OSGFzaCgnaGVscEJ1dHRvbicsICdhc3NldHMvaW1hZ2VzL2hlbHBCdXR0b25TaGVldC5wbmcnLCAnYXNzZXRzL2pzb24vaGVscF9idXR0b24uanNvbicpO1xyXG5cdHRoaXMubG9hZC5hdGxhc0pTT05IYXNoKCdhcnJvd0J1dHRvbicsICdhc3NldHMvaW1hZ2VzL2Fycm93QnV0dG9uU2hlZXQucG5nJywgJ2Fzc2V0cy9qc29uL2Fycm93X2J1dHRvbi5qc29uJyk7XHJcblx0XHJcblx0Ly9NZW51IEltYWdlcyAmIFNoZWV0c1xyXG5cdHRoaXMubG9hZC5zcHJpdGVzaGVldCgnc3RhcnRHYW1lQnV0dG9uJywgJ2Fzc2V0cy9pbWFnZXMvc3RhcnRHYW1lQnV0dG9uU2hlZXQucG5nJywgMjU2LCA4Mik7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdtaXNzaW9uU2VsZWN0QnV0dG9uJywgJ2Fzc2V0cy9pbWFnZXMvbWlzc2lvblNlbGVjdEJ1dHRvblNoZWV0LnBuZycsIDI1NiwgODIpO1xyXG5cdHRoaXMubG9hZC5zcHJpdGVzaGVldCgnY3JlZGl0c0J1dHRvbicsICdhc3NldHMvaW1hZ2VzL2NyZWRpdHNCdXR0b25TaGVldC5wbmcnLCAyNTYsIDgyKTtcclxuXHR0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ2xldmVsMUJ1dHRvbicsICdhc3NldHMvaW1hZ2VzL2xldmVsMUJ1dHRvblNoZWV0LnBuZycsIDI1NiwgODIpO1xyXG5cdHRoaXMubG9hZC5zcHJpdGVzaGVldCgnbGV2ZWwyQnV0dG9uJywgJ2Fzc2V0cy9pbWFnZXMvbGV2ZWwyQnV0dG9uU2hlZXQucG5nJywgMjU2LCA4Mik7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdsZXZlbDNCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9sZXZlbDNCdXR0b25TaGVldC5wbmcnLCAyNTYsIDgyKTtcclxuXHR0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ2JhY2tCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9iYWNrQnV0dG9uU2hlZXQucG5nJywgMjU2LCA4Mik7XHJcblx0dGhpcy5sb2FkLmltYWdlKCd0aXRsZScsICdhc3NldHMvaW1hZ2VzL3RpdGxlLnBuZycpO1xyXG5cclxuXHRcclxuXHRcclxuXHQvL0xvYWQgTXVzaWNcclxuXHR0aGlzLmxvYWQuYXVkaW8oJ21lbnVTb25nJywgJ2Fzc2V0cy9zb3VuZC9ZZXQgQW5vdGhlci5vZ2cnKTtcclxuXHR0aGlzLmxvYWQuYXVkaW8oJ21haW5Tb25nJywgJ2Fzc2V0cy9zb3VuZC9Ub3AgKGRvd24pIE5pZ2h0Lm9nZycpO1xyXG5cclxuICB9LFxyXG5cclxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuYXNzZXQuY3JvcEVuYWJsZWQgPSBmYWxzZTtcclxuICB9LFxyXG5cclxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICghIXRoaXMucmVhZHkpIHtcclxuICAgICAgdmFyIHBhcmFtcyA9IFsnbWVudVNvbmcnLCAwLCAxXTtcclxuICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdNZW51JywgdHJ1ZSwgZmFsc2UsIHBhcmFtcyk7XHJcbiAgICAgIC8vdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KHBsYXllclN0YXRlLmN1cnJlbnRMZXZlbCk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIG9uTG9hZENvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcclxuICB9XHJcbn07XHJcbiIsInZhciBTcGxhc2ggPSBmdW5jdGlvbiAoKSB7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNwbGFzaDtcclxuXHJcblNwbGFzaC5wcm90b3R5cGUgPSB7XHJcbiAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgfVxyXG59OyIsIi8qXHJcbkRlZmluZXMgYSBoYWNrYWJsZSBvYmplY3QuXHJcbiovXHJcblxyXG52YXIgTWlzc2lvblByb21wdCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICBQaGFzZXIuU3ByaXRlLmNhbGwodGhpcywgc3RhdGUuZ2FtZSwgMCwgMCwgJ21pc3Npb25Qcm9tcHQnKTtcclxuICAgc3RhdGUuZ2FtZS5hZGQuZXhpc3RpbmcodGhpcyk7XHJcblx0Ly9zdG9yZSBzdGF0ZVxyXG5cdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHR0aGlzLmNhbSA9IHRoaXMuc3RhdGUuZ2FtZS5jYW1lcmE7XHJcbiAgIHRoaXMuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuICAgLy9hZGQgZGVzY3JpcHRpb24gdGV4dFxyXG4gICB2YXIgc3R5bGUgPSB7IGZvbnQ6ICcyNnB4IEFyaWFsJywgZmlsbDogJyMzMzMzMzMnLCBhbGlnbjogJ2NlbnRlcicgfTtcclxuICAgdGhpcy5kZXNjcmlwdGlvblRleHQgPSBzdGF0ZS5nYW1lLmFkZC50ZXh0KDAsIDAsICdObyBkZXNjcmlwdGlvbiBFbnRlcmVkJywgc3R5bGUpO1xyXG4gICB0aGlzLmRlc2NyaXB0aW9uVGV4dC5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG4gICB0aGlzLmFkZENoaWxkKHRoaXMuZGVzY3JpcHRpb25UZXh0KTtcclxuICAgdGhpcy5kZXNjcmlwdGlvblRleHQueCA9IDA7XHJcbiAgIHRoaXMuZGVzY3JpcHRpb25UZXh0LnkgPSAtMTQ7XHJcbiAgIC8vYWRkIHZhbHVlIHByb2dyZXNzIHRleHRcclxuXHRzdHlsZSA9IHsgZm9udDogJzI2cHggQXJpYWwnLCBmaWxsOiAnI0ZGRkY2NicsIGFsaWduOiAnY2VudGVyJyB9O1xyXG4gICB0aGlzLnByb2dyZXNzVGV4dCA9IHN0YXRlLmdhbWUuYWRkLnRleHQoMCwgMCwgJzAvMCcsIHN0eWxlKTtcclxuICAgdGhpcy5wcm9ncmVzc1RleHQuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuICAgdGhpcy5hZGRDaGlsZCh0aGlzLnByb2dyZXNzVGV4dCk7XHJcbiAgIHRoaXMucHJvZ3Jlc3NUZXh0LnggPSAwO1xyXG4gICB0aGlzLnByb2dyZXNzVGV4dC55ID0gMTQ7XHJcbn07XHJcblxyXG5NaXNzaW9uUHJvbXB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUGhhc2VyLlNwcml0ZS5wcm90b3R5cGUpO1xyXG5NaXNzaW9uUHJvbXB0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1pc3Npb25Qcm9tcHQ7XHJcblxyXG4vL2Z1bmN0aW9ucyBmb3IgY2hhbmdpbmcgdGhlIG1pc3Npb24gcHJvbXB0IHRleHRcclxuTWlzc2lvblByb21wdC5wcm90b3R5cGUuc2V0RGVzY3JpcHRpb24gPSBmdW5jdGlvbih0ZXh0KSB7XHJcblx0dGhpcy5kZXNjcmlwdGlvblRleHQudGV4dCA9IHRleHQ7XHJcbn07XHJcblxyXG5NaXNzaW9uUHJvbXB0LnByb3RvdHlwZS5zZXRQcm9ncmVzcyA9IGZ1bmN0aW9uKHRleHQpIHtcclxuXHR0aGlzLnByb2dyZXNzVGV4dC50ZXh0ID0gdGV4dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBdXRvbWF0aWNhbGx5IGNhbGxlZCBieSBXb3JsZC51cGRhdGVcclxuICovXHJcbk1pc3Npb25Qcm9tcHQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdHRoaXMueCA9IHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aC8yO1xyXG5cdHRoaXMueSA9IHRoaXMuY2FtLnkgKyAxNSp0aGlzLmNhbS5oZWlnaHQvMTY7XHJcblx0dGhpcy5icmluZ1RvVG9wKCk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1pc3Npb25Qcm9tcHQ7IiwiLy9OT1RFOiBET04nVCBVU0UgdGhpcyBjb2RlIHRvIGNyZWF0ZSBhIFByb2dyZXNzQmFyLiBJbnN0ZWFkLCB1c2UgdGhlIFVJQnVpbGRlciBvYmplY3QgYW5kIGNhbGwgYnVpbGRQcm9ncmVzc0JhclxyXG5cclxudmFyIFByb2dyZXNzQmFyID0gZnVuY3Rpb24oc2V0VHlwZSwgc2V0TWF4VmFsdWUsIHNldEdyYXBoaWNzLCBzZXRSZW5kZXJhYmxlcykge1xyXG5cdHRoaXMudHlwZSA9IHNldFR5cGU7IC8vVHdvIHR5cGVzLCBcImdyb3dpbmdcIiAoc3RhcnRzIGF0IDAsIHRyaWdnZXJzIGV2ZW50IHdoZW4gZnVsbCkgXHJcblx0XHRcdFx0XHRcdCAvL2FuZCBcInNocmlua2luZ1wiIChzdGFydHMgZnVsbCwgdHJpZ2dlcnMgYXQgMClcclxuXHR0aGlzLmJnQm9yZGVyU2l6ZSA9IDI7XHRcdFx0Ly9kZWZhdWx0IHNpemUgb2YgYmFja2dyb3VuZCBib3JkZXJcclxuXHR0aGlzLmJnQm9yZGVyQ29sb3IgPSAweEFBQUFBQTtcdC8vZGVmYXVsdCBjb2xvciBvZiBiYWNrZ3JvdW5kIGJvcmRlclxyXG5cdHRoaXMuYmdDb2xvciA9IDB4ODg4ODg4O1x0XHQvL2RlZmF1bHQgY29sb3Igb2YgYmFja2dyb3VuZFxyXG5cdHRoaXMucGFkZGluZ0hvcml6ID0gNTtcdFx0XHQvL2RlZmF1bHQgc3VtIG9mIHBhZGRpbmcgb24gbGVmdCBhbmQgcmlnaHQgc2lkZSBpbm5lciB2YWx1ZSBiYXJcclxuXHR0aGlzLnBhZGRpbmdWZXJ0ID0gNTtcdFx0XHQvL2RlZmF1bHQgc3VtIChpLmUuIGhhbGYgb24gZWFjaCBzaWRlKSBvZiB2ZXJ0aWNhbCBwYWRkaW5nIG9mIGlubmVyIHZhbHVlIGJhclxyXG5cdHRoaXMudmFsdWVCb3JkZXJTaXplID0gMTtcdFx0Ly9kZWZhdWx0IHNpemUgb2YgdmFsdWUgYm9yZGVyXHJcblx0dGhpcy52YWx1ZUJvcmRlckNvbG9yID0gMHg4ODg4RkY7IC8vZGVmYXVsdCBjb2xvciBvZiB2YWx1ZSBib3JkZXJcclxuXHR0aGlzLnZhbHVlQ29sb3IgPSAweDAwMDA5OTtcdFx0Ly9kZWZhdWx0IGNvbG9yIG9mIGlubmVyIHZhbHVlIGJhclxyXG5cdHRoaXMueCA9IG51bGw7XHJcblx0dGhpcy55ID0gbnVsbDtcclxuXHR0aGlzLndpZHRoID0gbnVsbDtcclxuXHR0aGlzLmhlaWdodCA9IG51bGw7XHJcblx0dGhpcy5tYXhWYWx1ZSA9IHNldE1heFZhbHVlO1xyXG5cdHRoaXMuZ3JhcGhpY3MgPSBzZXRHcmFwaGljczsgLy9zdG9yZSBncmFwaGljcyBjbGFzcyAodXNlZCB0byBkcmF3IGJhcilcclxuXHR0aGlzLnJlbmRlcmFibGVzID0gc2V0UmVuZGVyYWJsZXM7XHJcblx0XHJcblx0dGhpcy5vbkV2ZW50ID0gZnVuY3Rpb24oKSB7fTsgLy9vdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiB0byBtYWtlIHdoYXRldmVyIHlvdSB3YW50IGhhcHBlbiB3aGVuIHByb2dyZXNzQmFyIHJlYWNoZXMgbGltaXRcclxuXHRcclxuXHQvL3N3aXRjaCh0aGlzLnR5cGUpIHtcclxuXHQvL2Nhc2UgJ2dyb3dpbmcnIDogXHJcblx0aWYoc2V0VHlwZSA9PT0gJ2dyb3dpbmcnKSB7XHJcblx0XHR0aGlzLnZhbHVlID0gMDtcclxuXHRcdC8vdHJ5VHJpZ2dlciBpcyBjYWxsZWQgYXV0b21hdGljYWxseSB3aGVuIHlvdSBhZGQvc3VidHJhY3QgdmFsdWUsIGFuZCB3aWxsIHRyaWdnZXIgdGhlIG9uRXZlbnQoKSBmdW5jdGlvblxyXG5cdFx0dGhpcy50cnlUcmlnZ2VyID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmKHRoaXMudmFsdWUgPj0gdGhpcy5tYXhWYWx1ZSkge1xyXG5cdFx0XHRcdHRoaXMub25FdmVudCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0Ly9icmVhaztcclxuXHR9XHJcblx0ZWxzZSBpZihzZXRUeXBlID09PSAnc2hyaW5raW5nJykge1xyXG5cdC8vY2FzZSAnc2hyaW5raW5nJyA6XHJcblx0XHR0aGlzLnZhbHVlID0gdGhpcy5tYXhWYWx1ZTtcclxuXHRcdHRoaXMudHJ5VHJpZ2dlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZih0aGlzLnZhbHVlIDw9IDApIHtcclxuXHRcdFx0XHR0aGlzLm9uRXZlbnQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcbn07XHJcblxyXG5Qcm9ncmVzc0Jhci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQcm9ncmVzc0JhcjtcclxuXHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblx0dGhpcy5ncmFwaGljcy5jbGVhcigpO1xyXG5cdHRoaXMucmVuZGVyYWJsZXMudW5zdWJzY3JpYmUodGhpcyk7XHJcbn07XHJcblxyXG4vL1RvIHN1YnRyYWN0IHZhbHVlLCBqdXN0IHVzZSBuZWdhdGl2ZSBudW1iZXJzIGFzIGFyZ3VtZW50IGkuZS4gZm9vLmFkZFZhbHVlKC01KTtcclxuUHJvZ3Jlc3NCYXIucHJvdG90eXBlLmFkZFZhbHVlID0gZnVuY3Rpb24gKGFkZFRoaXMpIHtcclxuXHR0aGlzLnZhbHVlICs9IGFkZFRoaXM7XHJcblx0aWYodGhpcy52YWx1ZSA+IHRoaXMubWF4VmFsdWUpIHtcclxuXHRcdHRoaXMudmFsdWUgPSB0aGlzLm1heFZhbHVlO1xyXG5cdH1cclxuXHRpZih0aGlzLnZhbHVlIDwgMCkge1xyXG5cdFx0dGhpcy52YWx1ZSA9IDA7XHJcblx0fVxyXG5cdHRoaXMudHJ5VHJpZ2dlcigpO1xyXG59O1xyXG5cclxuLy9TZXRzIHRoZSBsb2NhdGlvbiB3aGVyZSBwcm9ncmVzcyBiYXIgaXMgcmVuZGVyZWRcclxuUHJvZ3Jlc3NCYXIucHJvdG90eXBlLnNldExvY2F0aW9uID0gZnVuY3Rpb24oc2V0WCwgc2V0WSkge1xyXG5cdHRoaXMueCA9IHNldFg7XHJcblx0dGhpcy55ID0gc2V0WTtcclxufTtcclxuXHJcbi8vU2V0cyB0aGUgc2l6ZSBvZiB0aGUgcHJvZ3Jlc3MgYmFyXHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS5zZXRTaXplID0gZnVuY3Rpb24oc2V0V2lkdGgsIHNldEhlaWdodCkge1xyXG5cdHRoaXMud2lkdGggPSBzZXRXaWR0aDtcclxuXHR0aGlzLmhlaWdodCA9IHNldEhlaWdodDtcclxufTtcclxuXHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS5zZXRTdHlsZSA9IGZ1bmN0aW9uKGJnQm9yZGVyU2l6ZSwgYmdCb3JkZXJDb2xvciwgYmdDb2xvciwgcGFkZGluZ0hvcml6LCBwYWRkaW5nVmVydCwgdmFsdWVCb3JkZXJTaXplLCB2YWx1ZUJvcmRlckNvbG9yLCB2YWx1ZUNvbG9yKSB7XHJcblx0dGhpcy5iZ0JvcmRlclNpemUgPSBiZ0JvcmRlclNpemU7XHJcblx0dGhpcy5iZ0JvcmRlckNvbG9yID0gYmdCb3JkZXJDb2xvcjtcclxuXHR0aGlzLmJnQ29sb3IgPSBiZ0NvbG9yO1xyXG5cdHRoaXMucGFkZGluZ0hvcml6ID0gcGFkZGluZ0hvcml6O1xyXG5cdHRoaXMucGFkZGluZ1ZlcnQgPSBwYWRkaW5nVmVydDtcclxuXHR0aGlzLnZhbHVlQm9yZGVyU2l6ZSA9IHZhbHVlQm9yZGVyU2l6ZTtcclxuXHR0aGlzLnZhbHVlQm9yZGVyQ29sb3IgPSB2YWx1ZUJvcmRlckNvbG9yO1xyXG5cdHRoaXMudmFsdWVDb2xvciA9IHZhbHVlQ29sb3I7XHJcbn07XHJcblxyXG4vL3VwZGF0ZSBmb3IgcHJvZ3Jlc3MgYmFyLCBjYWxsZWQganVzdCBiZWZvcmUgZHJhd2luZyBwcm9ncmVzcyBiYXJcclxuLy9PdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiBpZiBkZXNpcmVkXHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cclxuLy9SZW5kZXJzIHByb2dyZXNzQmFyXHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcclxuXHR0aGlzLnVwZGF0ZSgpO1xyXG5cdHRoaXMuZ3JhcGhpY3MuY2xlYXIoKTtcclxuXHQvL0RyYXcgYmFja2dyb3VuZCBvZiBiYXJcclxuXHR0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSh0aGlzLmJnQm9yZGVyU2l6ZSwgdGhpcy5iZ0JvcmRlckNvbG9yLCAxKTsgLy9zZXRzIGJvcmRlciBjb2xvciBhbmQgc2l6ZVxyXG5cdHRoaXMuZ3JhcGhpY3MuYmVnaW5GaWxsKHRoaXMuYmdDb2xvcik7IC8vc2V0cyBjb2xvciBvZiBiYWNrZ3JvdW5kIGZpbGxcclxuXHR0aGlzLmdyYXBoaWNzLmRyYXdSZWN0KHRoaXMueC10aGlzLndpZHRoLzIsIHRoaXMueS10aGlzLmhlaWdodC8yLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcblx0dGhpcy5ncmFwaGljcy5lbmRGaWxsKCk7XHJcblx0Ly9EcmF3IHZhbHVlIG9mIGJhclxyXG5cdHZhciBwZXJjZW50YWdlID0gdGhpcy52YWx1ZSAvIHRoaXMubWF4VmFsdWU7XHJcblx0dmFyIGJhcldpZHRoID0gdGhpcy53aWR0aCAtIHRoaXMucGFkZGluZ0hvcml6O1xyXG5cdHZhciBiYXJIZWlnaHQgPSB0aGlzLmhlaWdodCAtIHRoaXMucGFkZGluZ1ZlcnQ7XHJcblx0dGhpcy5ncmFwaGljcy5saW5lU3R5bGUodGhpcy52YWx1ZUJvcmRlclNpemUsIHRoaXMudmFsdWVCb3JkZXJDb2xvciwgMSk7XHJcblx0dGhpcy5ncmFwaGljcy5iZWdpbkZpbGwodGhpcy52YWx1ZUNvbG9yKTtcclxuXHR0aGlzLmdyYXBoaWNzLmRyYXdSZWN0KHRoaXMueC0oYmFyV2lkdGgvMiksIHRoaXMueS0oYmFySGVpZ2h0LzIpLCBiYXJXaWR0aCpwZXJjZW50YWdlLCBiYXJIZWlnaHQpO1xyXG5cdHRoaXMuZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQcm9ncmVzc0JhcjsiLCJ2YXIgUHJvZ3Jlc3NCYXIgPSByZXF1aXJlKCcuL1Byb2dyZXNzQmFyJyk7XHJcbnZhciBCYW5uZXIgPSByZXF1aXJlKCcuL2Jhbm5lcicpO1xyXG5cclxudmFyIFVJQnVpbGRlciA9IGZ1bmN0aW9uKHNldEdhbWVTdGF0ZSwgc2V0UmVuZGVyYWJsZXMpIHtcclxuXHQvL0Vuc3VyZSB0aGF0IGNhbm5vdCBjcmVhdGUgbXVsdGlwbGUgaW5zdGFuY2VzIG9mIHRoaXMgY2xhc3NcclxuXHRpZihVSUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0cykge1xyXG5cdFx0cmV0dXJuIFVJQnVpbGRlci5wcm90b3R5cGUuZXhpc3RpbmdSZWZlcmVuY2U7XHJcblx0fVxyXG5cdFxyXG5cdHRoaXMuZ2FtZVN0YXRlID0gc2V0R2FtZVN0YXRlO1xyXG5cdHRoaXMucmVuZGVyYWJsZXMgPSBzZXRSZW5kZXJhYmxlcztcclxuXHQvL0NyZWF0ZSBhbmQgc3RvcmUgYSBncmFwaGljcyBvYmplY3QgKHVzZWQgZm9yIHN0dWZmIGxpa2UgZHJhd2luZyByZWN0YW5nbGVzKVxyXG5cdFVJQnVpbGRlci5wcm90b3R5cGUuZXhpc3RzID0gdHJ1ZTtcclxuXHRVSUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlID0gdGhpcztcclxufTtcclxuXHJcblVJQnVpbGRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVSUJ1aWxkZXI7XHJcbi8vVGhlc2UgdmFyJ3MgaGVscCBjcmVhdGUgdGhlIHNpbmdsZXRvbiBmdW5jdGlvbmFsaXR5XHJcblVJQnVpbGRlci5wcm90b3R5cGUuZXhpc3RzID0gZmFsc2U7XHJcblVJQnVpbGRlci5wcm90b3R5cGUuZXhpc3RpbmdSZWZlcmVuY2UgPSBudWxsO1xyXG5cclxuLy9Vc2UgdGhpcyBmdW5jdGlvbiB0byBjcmVhdGUgYSBwcm9ncmVzcyBiYXJcclxuLy9Vc2FnZTogdHlwZTogY2FuIGJlIFwiZ3Jvd2luZ1wiIG9yIFwic2hyaW5raW5nXCIsIHRoaXMgd2lsbCBlZmZlY3QgaWYgYmFyIHN0YXJ0cyBhdCAwIGFuZCBnb2VzIHVwIG9yIHZpcyB2ZXJzYVxyXG4vL1x0XHQgbWF4VmFsdWU6IHNldHMgdGhlIG1heCB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgYmFyLCBpLmUuIHVzaW5nIDEwMCBjcmVhdGVzIGEgYmFyIGZyb20gMCB0byAxMDBcclxuLy9cdFx0IHgseTogc2V0cyBsb2NhdGlvblxyXG4vL1x0XHQgRE9OJ1QgRk9SR0VUIHRvIG92ZXJ3cml0ZSB0aGUgb25FdmVudCgpIGZ1bmN0aW9uIGZvciB0aGUgcHJvZ3Jlc3MgYmFyIGFmdGVyIGNyZWF0aW5nIGl0XHJcbi8vXHRcdFx0LW9uRXZlbnQoKSBpcyBhdXRvbWF0aWNhbGx5IGNhbGxlZCB3aGVuIGJhciBmaWxscy9zaHJpbmtzIHBhc3QgbGltaXQgKGRlcGVuZGluZyBvbiBiYXIgdHlwZSlcclxuVUlCdWlsZGVyLnByb3RvdHlwZS5idWlsZFByb2dyZXNzQmFyID0gZnVuY3Rpb24odHlwZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgbWF4VmFsdWUpIHtcclxuXHQvL2NyZWF0ZSBhbmQgZm9ybWF0IG5ldyBwcm9nIGJhclxyXG5cdHZhciBncmFwaGljcyA9IHRoaXMuZ2FtZVN0YXRlLmdhbWUuYWRkLmdyYXBoaWNzKDAsMCk7XHJcblx0dmFyIG5ld1Byb2dCYXIgPSBuZXcgUHJvZ3Jlc3NCYXIodHlwZSwgbWF4VmFsdWUsIGdyYXBoaWNzLCB0aGlzLnJlbmRlcmFibGVzKTtcclxuXHRuZXdQcm9nQmFyLnNldExvY2F0aW9uKHgseSk7XHJcblx0bmV3UHJvZ0Jhci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG5cdC8vc3Vic2NyaWJlIHRvICdyZW5kZXJhYmxlcycgc28gdGhhdCByZW5kZXIoKSBpcyBjYWxsZWQgYXV0b21hdGljYWxseVxyXG5cdHRoaXMucmVuZGVyYWJsZXMuc3Vic2NyaWJlKG5ld1Byb2dCYXIpO1xyXG5cdHJldHVybiBuZXdQcm9nQmFyO1xyXG59O1xyXG5cclxuVUlCdWlsZGVyLnByb3RvdHlwZS5idWlsZEJhbm5lciA9IGZ1bmN0aW9uKHhSYXRpbywgeVJhdGlvLCB0ZXh0cykge1xyXG4gICB2YXIgZ3JhcGhpY3MgPSB0aGlzLmdhbWVTdGF0ZS5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcclxuICAgdmFyIG5ld0Jhbm5lciA9IG5ldyBCYW5uZXIodGhpcy5nYW1lU3RhdGUsIHhSYXRpbywgeVJhdGlvLCB0ZXh0cywgZ3JhcGhpY3MsIHRoaXMucmVuZGVyYWJsZXMpO1xyXG4gICB0aGlzLnJlbmRlcmFibGVzLnN1YnNjcmliZShuZXdCYW5uZXIpO1xyXG4gICByZXR1cm4gbmV3QmFubmVyO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBVSUJ1aWxkZXI7IiwidmFyIFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcclxuXHJcbi8vTk9URTogRE9OJ1QgVVNFIHRoaXMgY29kZSB0byBjcmVhdGUgYSBCYW5uZXIuIEluc3RlYWQsIHVzZSB0aGUgVUlCdWlsZGVyIG9iamVjdCBhbmQgY2FsbCBidWlsZEJhbm5lclxyXG52YXIgQmFubmVyID0gZnVuY3Rpb24oc3RhdGUsIHhSYXRpbywgeVJhdGlvLCB0ZXh0SlNPTiwgZ3JhcGhpY3MsIHJlbmRlcmFibGVzKSB7XHJcbiAgIHRoaXMuYmdCb3JkZXJTaXplID0gNjtcdFx0XHQvL2RlZmF1bHQgc2l6ZSBvZiBiYWNrZ3JvdW5kIGJvcmRlclxyXG5cdHRoaXMuYmdCb3JkZXJDb2xvciA9IDB4ZmZmZmZmO1x0Ly9kZWZhdWx0IGNvbG9yIG9mIGJhY2tncm91bmQgYm9yZGVyXHJcblx0dGhpcy5iZ0NvbG9yID0gMHg0YTRhNGE7XHRcdC8vZGVmYXVsdCBjb2xvciBvZiBiYWNrZ3JvdW5kXHJcbiAgIHRoaXMuc2hhZG93T2Zmc2V0WCA9IDM7XHJcbiAgIHRoaXMuc2hhZG93T2Zmc2V0WSA9IDM7XHJcbiAgIHRoaXMuc2hhZG93Q29sb3IgPSAncmdiYSgwLDAsMCwwLjkpJztcclxuICAgdGhpcy5zaGFkb3dCbHVyID0gNTtcclxuICAgdGhpcy5ub3JtYWxUZXh0ID0gJyNmZmZmZmYnO1xyXG4gICB0aGlzLmhpZ2hsaWdodFRleHQgPSAnIzAwZmYwMCc7XHJcbiAgIHRoaXMudGV4dFdyYXBQYWRkaW5nID0gMTA7XHJcbiAgIHRoaXMub2ZmU2NyZWVuUGFkZGluZyA9IC0yMDA7XHJcbiAgIHRoaXMudGV4dEpTT04gPSB0ZXh0SlNPTjtcclxuICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICB0aGlzLmdhbWUgPSBzdGF0ZS5nYW1lO1xyXG4gICB0aGlzLmNhbSA9IHRoaXMuZ2FtZS5jYW1lcmE7XHJcbiAgIHRoaXMuc20gPSB0aGlzLnN0YXRlLnNvdW5kTWFuYWdlcjtcclxuICAgdGhpcy54UmF0aW8gPSB4UmF0aW87XHJcbiAgIHRoaXMueVJhdGlvID0geVJhdGlvO1xyXG4gICB0aGlzLmdyYXBoaWNzID0gZ3JhcGhpY3M7XHJcbiAgIHRoaXMucmVuZGVyYWJsZXMgPSByZW5kZXJhYmxlcztcclxuICAgdGhpcy53aWR0aCA9IDQwMDtcclxuICAgdGhpcy5oZWlnaHQgPSAyMDA7XHJcbiAgIHRoaXMuaW5kZXggPSAwO1xyXG4gICB0aGlzLnggPSAwO1xyXG4gICB0aGlzLmhpZGVCdWZmZXIgPSAtNTA7XHJcbiAgIHRoaXMuaGlkZUhlaWdodCA9IC10aGlzLmhlaWdodCAtIHRoaXMuaGlkZUJ1ZmZlcjtcclxuICAgdGhpcy55ID0gdGhpcy5jYW0ueSAtIHRoaXMuY2FtLmhlaWdodCAvIDIgLSB0aGlzLmhpZGVIZWlnaHQ7XHJcbiAgIHRoaXMuc2xpZGVZID0gdGhpcy5oaWRlSGVpZ2h0O1xyXG4gICB0aGlzLmdvYWxZID0gdGhpcy55O1xyXG4gICB0aGlzLnNsaWRlUmF0ZSA9IDAuMjtcclxuICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgIC8vIGFkZCBidXR0b25zXHJcbiAgIHRoaXMucmlnaHRCdXR0b24gPSB0aGlzLmdhbWUuYWRkLmJ1dHRvbigwLCAwLCAnYXJyb3dCdXR0b24nLCB0aGlzLm5leHRJbmRleCwgdGhpcywgMSwgMCwgMik7XHJcblx0dGhpcy5yaWdodEJ1dHRvbi5vbklucHV0T3Zlci5hZGQodGhpcy5zbS5wbGF5SG92ZXJDbGljaywgdGhpcy5zbSk7XHJcblx0dGhpcy5yaWdodEJ1dHRvbi5vbklucHV0RG93bi5hZGQodGhpcy5zbS5wbGF5RG93bkNsaWNrLCB0aGlzLnNtKTtcclxuICAgdGhpcy5sZWZ0QnV0dG9uID0gdGhpcy5nYW1lLmFkZC5idXR0b24oMCwgMCwgJ2Fycm93QnV0dG9uJywgdGhpcy5wcmV2SW5kZXgsIHRoaXMsIDEsIDAsIDIpO1xyXG5cdHRoaXMubGVmdEJ1dHRvbi5vbklucHV0T3Zlci5hZGQodGhpcy5zbS5wbGF5SG92ZXJDbGljaywgdGhpcy5zbSk7XHJcblx0dGhpcy5sZWZ0QnV0dG9uLm9uSW5wdXREb3duLmFkZCh0aGlzLnNtLnBsYXlEb3duQ2xpY2ssIHRoaXMuc20pO1xyXG4gICB0aGlzLmxlZnRCdXR0b24uc2NhbGUueCA9IC0xO1xyXG4gICB0aGlzLmdyb3VwID0gbmV3IFBoYXNlci5Hcm91cCh0aGlzLmdhbWUpO1xyXG4gICB0aGlzLmdyb3VwLmFkZCh0aGlzLmdyYXBoaWNzKTtcclxuICAgdGhpcy5ncm91cC5hZGQodGhpcy5yaWdodEJ1dHRvbik7XHJcbiAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMubGVmdEJ1dHRvbik7XHJcbiAgIHRoaXMuYWRkVGV4dHMoKTtcclxuICAgdGhpcy5nYW1lLndvcmxkLmJyaW5nVG9Ub3AodGhpcy5ncm91cCk7XHJcbiAgIHRoaXMuZGVidWcgPSBmYWxzZTtcclxufTtcclxuXHJcbkJhbm5lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCYW5uZXI7XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHR0aGlzLmdyYXBoaWNzLmNsZWFyKCk7XHJcblx0dGhpcy5yZW5kZXJhYmxlcy51bnN1YnNjcmliZSh0aGlzKTtcclxufTtcclxuXHJcbkJhbm5lci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIC8vIFRPRE86IGFkZCBsYXllciBncm91cHMgdG8gb3RoZXIgdGhpbmdzXHJcbiAgIHRoaXMuZ2FtZS53b3JsZC5icmluZ1RvVG9wKHRoaXMuZ3JvdXApO1xyXG4gICAvLyBteSBwb3NcclxuICAgdGhpcy54ID0gdGhpcy5jYW0ueCArIHRoaXMuY2FtLndpZHRoICogdGhpcy54UmF0aW87XHJcbiAgIGlmICh0aGlzLnZpc2libGUpIHtcclxuICAgICAgdGhpcy5nb2FsWSA9IHRoaXMuY2FtLmhlaWdodCAvIDI7XHJcbiAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZ29hbFkgPSB0aGlzLmhpZGVIZWlnaHQ7XHJcbiAgIH1cclxuICAgdGhpcy5zbGlkZVkgPSBVdGlscy5sZXJwKHRoaXMuc2xpZGVZLCB0aGlzLmdvYWxZLCB0aGlzLnNsaWRlUmF0ZSk7XHJcbiAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCd0aGlzLmNhbS55OicsIHRoaXMuY2FtLnksICd0aGlzLnNsaWRlWTonLCB0aGlzLnNsaWRlWSwgJ3RoaXMueTonLCB0aGlzLnkpOyB9XHJcbiAgIHRoaXMueSA9IHRoaXMuY2FtLnkgKyB0aGlzLnNsaWRlWTtcclxuICAgLy8gdGV4dCBwb3NcclxuICAgdmFyIGN1clRleHQgPSB0aGlzLnRleHRPYmpzW3RoaXMuaW5kZXhdO1xyXG4gICBjdXJUZXh0LnggPSB0aGlzLng7XHJcbiAgIGN1clRleHQueSA9IHRoaXMueTtcclxuICAgLy8gYnV0dG9uIHBvc1xyXG4gICB0aGlzLnJpZ2h0QnV0dG9uLnggPSB0aGlzLnggKyB0aGlzLndpZHRoIC8gMiArIHRoaXMucmlnaHRCdXR0b24ud2lkdGggLyAyO1xyXG4gICB0aGlzLnJpZ2h0QnV0dG9uLnkgPSB0aGlzLnkgLSB0aGlzLnJpZ2h0QnV0dG9uLmhlaWdodCAvIDI7XHJcbiAgIHRoaXMubGVmdEJ1dHRvbi54ID0gdGhpcy54IC0gdGhpcy53aWR0aCAvIDIgKyB0aGlzLmxlZnRCdXR0b24ud2lkdGggLyAyO1xyXG4gICB0aGlzLmxlZnRCdXR0b24ueSA9IHRoaXMueSAtIHRoaXMubGVmdEJ1dHRvbi5oZWlnaHQgLyAyO1xyXG59O1xyXG5cclxuQmFubmVyLnByb3RvdHlwZS5hZGRUZXh0cyA9IGZ1bmN0aW9uKCkge1xyXG4gICBpZiAoIXRoaXMudGV4dE9icykge1xyXG4gICAgICB0aGlzLnRleHRPYmpzID0gW107XHJcbiAgIH1cclxuICAgdmFyIHRleHREZWZzID0gSlNPTi5wYXJzZSh0aGlzLmdhbWUuY2FjaGUuZ2V0VGV4dCh0aGlzLnRleHRKU09OKSk7XHJcbiAgIHZhciB0ZXh0QXJyYXkgPSB0ZXh0RGVmc1sndGV4dCddO1xyXG4gICB2YXIgdGV4dENvbG9ycyA9IHRleHREZWZzWydjb2xvcnMnXTtcclxuICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0QXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIHRleHQgPSB0ZXh0QXJyYXlbaV07XHJcbiAgICAgIHZhciBuZXdUZXh0ID0gdGhpcy5nYW1lLmFkZC50ZXh0KHRoaXMub2ZmU2NyZWVuUGFkZGluZywgdGhpcy5vZmZTY3JlZW5QYWRkaW5nLCB0ZXh0KTtcclxuICAgICAgbmV3VGV4dC5mb250ID0gJ1JvYm90byc7XHJcbiAgICAgIG5ld1RleHQuZm9udFNpemUgPSAyNDtcclxuICAgICAgbmV3VGV4dC5hbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgICBuZXdUZXh0LmZpbGwgPSB0aGlzLm5vcm1hbFRleHQ7XHJcbiAgICAgIG5ld1RleHQud29yZFdyYXAgPSB0cnVlO1xyXG4gICAgICBuZXdUZXh0LndvcmRXcmFwV2lkdGggPSB0aGlzLndpZHRoIC0gdGhpcy50ZXh0V3JhcFBhZGRpbmc7XHJcbiAgICAgIG5ld1RleHQuYW5jaG9yLnNldCgwLjUpO1xyXG4gICAgICBuZXdUZXh0LnNldFNoYWRvdyh0aGlzLnNoYWRvd09mZnNldFgsIHRoaXMuc2hhZG93T2Zmc2V0WSwgdGhpcy5zaGFkb3dDb2xvciwgdGhpcy5zaGFkb3dCbHVyKTtcclxuICAgICAgdmFyIG5ld0NvbG9ycyA9IHRleHRDb2xvcnNbaV07XHJcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmV3Q29sb3JzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgIG5ld1RleHQuYWRkQ29sb3IodGhpcy5oaWdobGlnaHRUZXh0LCBuZXdDb2xvcnNbal0pO1xyXG4gICAgICAgICBqKys7XHJcbiAgICAgICAgIG5ld1RleHQuYWRkQ29sb3IodGhpcy5ub3JtYWxUZXh0LCBuZXdDb2xvcnNbal0pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudGV4dE9ianMucHVzaChuZXdUZXh0KTtcclxuICAgICAgdGhpcy5ncm91cC5hZGQobmV3VGV4dCk7XHJcbiAgIH1cclxufTtcclxuXHJcbkJhbm5lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XHJcblx0dGhpcy51cGRhdGUoKTtcclxuXHR0aGlzLmdyYXBoaWNzLmNsZWFyKCk7XHJcblx0Ly9EcmF3IGJhY2tncm91bmRcclxuXHR0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSh0aGlzLmJnQm9yZGVyU2l6ZSwgdGhpcy5iZ0JvcmRlckNvbG9yLCAxKTsgLy9zZXRzIGJvcmRlciBjb2xvciBhbmQgc2l6ZVxyXG5cdHRoaXMuZ3JhcGhpY3MuYmVnaW5GaWxsKHRoaXMuYmdDb2xvcik7IC8vc2V0cyBjb2xvciBvZiBiYWNrZ3JvdW5kIGZpbGxcclxuXHR0aGlzLmdyYXBoaWNzLmRyYXdSZWN0KHRoaXMueC10aGlzLndpZHRoLzIsIHRoaXMueS10aGlzLmhlaWdodC8yLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcblx0dGhpcy5ncmFwaGljcy5lbmRGaWxsKCk7XHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbigpIHtcclxuICAgLy8gdGhpcy5nb2FsWSA9IHRoaXMuY2FtLnkgKyB0aGlzLmNhbS5oZWlnaHQgKiB0aGlzLnlSYXRpbztcclxuICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcclxufTtcclxuXHJcbkJhbm5lci5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAvLyB0aGlzLmdvYWxZID0gdGhpcy5oaWRlSGVpZ2h0O1xyXG4gICB0aGlzLnZpc2libGUgPSBmYWxzZTtcclxufTtcclxuXHJcbkJhbm5lci5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKHRoaXMudmlzaWJsZSkge1xyXG4gICAgIHRoaXMuaGlkZSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAgdGhpcy5zaG93KCk7XHJcbiAgfSAgXHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLmhpZGVDdXJUZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy50ZXh0T2Jqc1t0aGlzLmluZGV4XS54ID0gdGhpcy50ZXh0T2Jqc1t0aGlzLmluZGV4XS55ID0gMDsgXHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLm5leHRJbmRleCA9IGZ1bmN0aW9uKCkge1xyXG4gICB0aGlzLmhpZGVDdXJUZXh0KCk7XHJcbiAgIHRoaXMuaW5kZXgrKztcclxuICAgaWYgKHRoaXMuaW5kZXggPj0gdGhpcy50ZXh0T2Jqcy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5pbmRleCA9IDA7XHJcbiAgIH1cclxufTtcclxuXHJcbkJhbm5lci5wcm90b3R5cGUucHJldkluZGV4ID0gZnVuY3Rpb24oKSB7XHJcbiAgIHRoaXMuaGlkZUN1clRleHQoKTtcclxuICAgdGhpcy5pbmRleC0tO1xyXG4gICBpZiAodGhpcy5pbmRleCA8IDApIHtcclxuICAgICAgdGhpcy5pbmRleCA9IHRoaXMudGV4dE9ianMubGVuZ3RoIC0gMTtcclxuICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCYW5uZXI7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwidmFyIFNob3AgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAvLyBpbml0aWFsIHZhcmlhYmxlc1xyXG5cdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgdGhpcy5nYW1lID0gdGhpcy5zdGF0ZS5nYW1lO1xyXG4gICB0aGlzLmNhbSA9IHRoaXMuZ2FtZS5jYW1lcmE7XHJcbiAgIHRoaXMuc20gPSB0aGlzLnN0YXRlLnNvdW5kTWFuYWdlcjtcclxuICAgdGhpcy5tb3VzZSA9IHRoaXMuc3RhdGUubW91c2U7XHJcbiAgIHRoaXMubW9uZXkgPSA1MDA7XHJcbiAgIHRoaXMuc2hvcFNwZWVkID0gMTtcclxuICAgdGhpcy5kaWZmID0gMDtcclxuICAgdGhpcy5uZXdNb2R1bGVTcGVlZCA9IDE1MDA7XHJcbiAgIC8vIGNyZWF0ZSBidXR0b25cclxuICAgdGhpcy5zaG9wQnV0dG9uID0gdGhpcy5nYW1lLmFkZC5idXR0b24odGhpcy5nYW1lLmNhbWVyYS54ICsgdGhpcy5nYW1lLmNhbWVyYS53aWR0aCAtIDQ4LCAxNiwgJ3Nob3BCdXR0b24nLCB0aGlzLnVzZVNob3BCdXR0b24sIHRoaXMsIDEsIDAsIDIpO1xyXG5cdHRoaXMuc2hvcEJ1dHRvbi5vbklucHV0T3Zlci5hZGQodGhpcy5zbS5wbGF5SG92ZXJDbGljaywgdGhpcy5zbSk7XHJcblx0dGhpcy5zaG9wQnV0dG9uLm9uSW5wdXREb3duLmFkZCh0aGlzLnNtLnBsYXlEb3duQ2xpY2ssIHRoaXMuc20pO1xyXG5cdHRoaXMuc2hvcEtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlIpO1xyXG5cdHRoaXMuc2hvcEtleS5vbkRvd24uYWRkKHRoaXMudXNlU2hvcEJ1dHRvbiwgdGhpcyk7XHJcbiAgIC8vIGNyZWF0ZSB0ZXh0XHJcbiAgIHRoaXMubW9uZXlUZXh0ID0gdGhpcy5nYW1lLmFkZC50ZXh0KHRoaXMuc2hvcEJ1dHRvbi54IC0gOCwgdGhpcy5zaG9wQnV0dG9uLnkgKyA0OCwgdGhpcy5tb25leSk7XHJcbiAgIHRoaXMubW9uZXlUZXh0LmZvbnQgPSAnVlQzMjMnO1xyXG4gICB0aGlzLm1vbmV5VGV4dC5mb250U2l6ZSA9IDI0O1xyXG4gICB0aGlzLm1vbmV5VGV4dC5maWxsID0gJyNmZmZmZmYnO1xyXG4gICB0aGlzLm1vbmV5VGV4dC50ZXh0ID0gdGhpcy5tb25leTtcclxuXHR0aGlzLmJlID0gdGhpcy5nYW1lLmFkZC5pbWFnZSh0aGlzLm1vbmV5VGV4dC54ICsgdGhpcy5tb25leVRleHQud2lkdGggKyA4LCB0aGlzLm1vbmV5VGV4dC55LCAnYmUnKTtcclxuICAgLy8gY3JlYXRlIHNvdW5kc1xyXG4gICB0aGlzLmNhc2hSZWdpc3RlciA9IHRoaXMuZ2FtZS5hZGQuYXVkaW8oJ2Nhc2hSZWdpc3RlcicpO1xyXG4gICB0aGlzLmNhc2hSZWdpc3Rlci5hbGxvd011bHRpcGxlID0gdHJ1ZTtcclxuICAgdGhpcy5lcnJvciA9IHRoaXMuZ2FtZS5hZGQuYXVkaW8oJ2Vycm9yJyk7XHJcbiAgIC8vIGFkZCBjb250cm9sc1xyXG4gICB0aGlzLmFkZE1vbmV5S2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuSyk7XHJcblx0dGhpcy5hZGRNb25leUtleS5vbkRvd24uYWRkKHRoaXMuZGVidWdBZGRNb25leSwgdGhpcyk7XHJcbiAgIC8vIGNyZWF0ZSBidXR0b25zXHJcblx0dGhpcy5zaG9wUGFuZWwgPSB0aGlzLmdhbWUuYWRkLmltYWdlKHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCArIDI1NiArIDE2LCB0aGlzLmNhbS55ICsgMTYsICdzaG9wUGFuZWwnKTtcclxuXHR0aGlzLnNob3BQYW5lbC5raWxsKCk7XHJcblx0dGhpcy5zaGllbGRCdXR0b24gPSB0aGlzLmdhbWUuYWRkLmJ1dHRvbih0aGlzLmNhbS54ICsgdGhpcy5jYW0ud2lkdGggLSB0aGlzLmRpZmYsIHRoaXMuY2FtLnkgKyA1MiArICg4OCAqIDEpLCAnc2hpZWxkQnV0dG9uJywgdGhpcy5wdXJjaGFzZU1vZHVsZSwge3N0YXRlOiB0aGlzLCBrZXk6ICdzaGllbGQnfSwgMSwgMCwgMik7XHJcblx0dGhpcy5mb3JtYXRCdXR0b24odGhpcy5zaGllbGRCdXR0b24pO1xyXG5cdHRoaXMuc29sYXJQYW5lbEJ1dHRvbiA9IHRoaXMuZ2FtZS5hZGQuYnV0dG9uKHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCAtIHRoaXMuZGlmZiwgdGhpcy5jYW0ueSArIDUyICsgKDg4ICogMiksICdzb2xhclBhbmVsQnV0dG9uJywgdGhpcy5wdXJjaGFzZU1vZHVsZSwge3N0YXRlOiB0aGlzLCBrZXk6ICdzb2xhclBhbmVsJ30sIDEsIDAsIDIpO1xyXG5cdHRoaXMuZm9ybWF0QnV0dG9uKHRoaXMuc29sYXJQYW5lbEJ1dHRvbik7XHJcblx0dGhpcy50aHJ1c3RlckJ1dHRvbiA9IHRoaXMuZ2FtZS5hZGQuYnV0dG9uKHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCAtIHRoaXMuZGlmZiwgdGhpcy5jYW0ueSArIDUyICsgKDg4ICogMyksICd0aHJ1c3RlckJ1dHRvbicsIHRoaXMucHVyY2hhc2VNb2R1bGUsIHtzdGF0ZTogdGhpcywga2V5OiAndGhydXN0ZXInfSwgMSwgMCwgMik7XHJcblx0dGhpcy5mb3JtYXRCdXR0b24odGhpcy50aHJ1c3RlckJ1dHRvbik7XHJcblx0dGhpcy5ndW5CdXR0b24gPSB0aGlzLmdhbWUuYWRkLmJ1dHRvbih0aGlzLmNhbS54ICsgdGhpcy5jYW0ud2lkdGggLSB0aGlzLmRpZmYsIHRoaXMuY2FtLnkgKyA1MiArICg4OCAqIDQpLCAnZ3VuQnV0dG9uJywgdGhpcy5wdXJjaGFzZU1vZHVsZSwge3N0YXRlOiB0aGlzLCBrZXk6ICdndW4nfSwgMSwgMCwgMik7XHJcblx0dGhpcy5mb3JtYXRCdXR0b24odGhpcy5ndW5CdXR0b24pO1xyXG5cdHRoaXMuaGFja0J1dHRvbiA9IHRoaXMuZ2FtZS5hZGQuYnV0dG9uKHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCAtIHRoaXMuZGlmZiwgdGhpcy5jYW0ueSArIDUyICsgKDg4ICogNSksICdoYWNrQnV0dG9uJywgdGhpcy5wdXJjaGFzZU1vZHVsZSwge3N0YXRlOiB0aGlzLCBrZXk6ICdoYWNrZXInfSwgMSwgMCwgMik7XHJcblx0dGhpcy5mb3JtYXRCdXR0b24odGhpcy5oYWNrQnV0dG9uKTtcclxuICAgLypcclxuXHR0aGlzLnNob3BCdXR0b24gPSB0aGlzLmdhbWUuYWRkLmJ1dHRvbih0aGlzLmNhbS54ICsgdGhpcy5jYW0ud2lkdGggLSA0OCwgMTYsICdzaG9wQnV0dG9uJywgdGhpcy51c2VTaG9wQnV0dG9uLCB0aGlzLCAxLCAwLCAyKTtcclxuXHR0aGlzLnNob3BCdXR0b24ub25JbnB1dE92ZXIuYWRkKHRoaXMuc20ucGxheUhvdmVyQ2xpY2ssIHRoaXMuc20pO1xyXG5cdHRoaXMuc2hvcEJ1dHRvbi5vbklucHV0RG93bi5hZGQodGhpcy5zbS5wbGF5RG93bkNsaWNrLCB0aGlzLnNtKTtcclxuICAgKi9cclxufTtcclxuXHJcblNob3AucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hvcDtcclxuXHJcblNob3AucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAvLyBmaW5kIGRpZmZcclxuXHRpZih0aGlzLnNob3BNZW51T3BlbmluZyA9PT0gdHJ1ZSkge1x0XHJcbiAgICAgIHRoaXMuZGlmZiArPSB0aGlzLnNob3BTcGVlZCAqIHRoaXMuZ2FtZS50aW1lLmVsYXBzZWQ7XHJcblx0XHRpZih0aGlzLmRpZmYgPj0gMjc2KSB7XHJcblx0XHRcdHRoaXMuc2hvcE1lbnVPcGVuaW5nID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuYWRkU2hvcEJ1dHRvbnMoKTtcclxuXHRcdH1cclxuXHR9XHJcblx0ZWxzZSBpZih0aGlzLnNob3BNZW51Q2xvc2luZyA9PT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLmRpZmYgLT0gdGhpcy5zaG9wU3BlZWQgKiB0aGlzLmdhbWUudGltZS5lbGFwc2VkO1xyXG5cdFx0aWYodGhpcy5kaWZmIDw9IDApIHtcclxuXHRcdFx0dGhpcy5zaG9wUGFuZWwua2lsbCgpO1xyXG5cdFx0XHR0aGlzLnNob3BNZW51Q2xvc2luZyA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxuICAgLy8gdXBkYXRlIG9wZW5pbmcgYnV0dG9uIHBvc2l0aW9uXHJcbiAgIHRoaXMuc2hvcEJ1dHRvbi54ID0gdGhpcy5jYW0ueCArIHRoaXMuY2FtLndpZHRoIC0gNDggLSB0aGlzLmRpZmY7XHJcblx0dGhpcy5zaG9wQnV0dG9uLnkgPSB0aGlzLmNhbS55ICsgMTY7XHJcbiAgIC8vIHVwZGF0ZSB0ZXh0IHBvc2l0aW9uXHJcbiAgIHRoaXMubW9uZXlUZXh0LnggPSB0aGlzLnNob3BCdXR0b24ueCAtIDE2O1xyXG5cdHRoaXMubW9uZXlUZXh0LnkgPSB0aGlzLnNob3BCdXR0b24ueSArIDQ4O1xyXG5cdHRoaXMuYmUueCA9IHRoaXMubW9uZXlUZXh0LnggKyB0aGlzLm1vbmV5VGV4dC53aWR0aCArIDg7XHJcblx0dGhpcy5iZS55ID0gdGhpcy5tb25leVRleHQueTtcclxuICAgLy8gdXBkYXRlIHB1cmNoYXNpbmcgYnV0dG9uIHBvc2l0aW9uXHJcbiAgIHRoaXMuc2hvcFBhbmVsLnggPSB0aGlzLmNhbS54ICsgdGhpcy5jYW0ud2lkdGggKyAxNiAtIHRoaXMuZGlmZjtcclxuXHR0aGlzLnNob3BQYW5lbC55ID0gdGhpcy5jYW0ueSArIDE2O1xyXG5cdHRoaXMuc2hpZWxkQnV0dG9uLnggPSB0aGlzLmNhbS54ICsgdGhpcy5jYW0ud2lkdGggKyAxNiAtIHRoaXMuZGlmZjtcclxuXHR0aGlzLnNoaWVsZEJ1dHRvbi55ID0gdGhpcy5jYW0ueSArIDcwICsgKDg2ICogMCk7XHJcblx0dGhpcy5zb2xhclBhbmVsQnV0dG9uLnggPSB0aGlzLmNhbS54ICsgdGhpcy5jYW0ud2lkdGggKyAxNiAtIHRoaXMuZGlmZjtcclxuXHR0aGlzLnNvbGFyUGFuZWxCdXR0b24ueSA9IHRoaXMuY2FtLnkgKyA3MCArICg4NiAqIDEpO1xyXG5cdHRoaXMudGhydXN0ZXJCdXR0b24ueCA9IHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCArIDE2IC0gdGhpcy5kaWZmO1xyXG5cdHRoaXMudGhydXN0ZXJCdXR0b24ueSA9IHRoaXMuY2FtLnkgKyA3MCArICg4NiAqIDIpO1xyXG5cdHRoaXMuZ3VuQnV0dG9uLnggPSB0aGlzLmNhbS54ICsgdGhpcy5jYW0ud2lkdGggKyAxNiAtIHRoaXMuZGlmZjtcclxuXHR0aGlzLmd1bkJ1dHRvbi55ID0gdGhpcy5jYW0ueSArIDcwICsgKDg2ICogMyk7XHJcblx0dGhpcy5oYWNrQnV0dG9uLnggPSB0aGlzLmNhbS54ICsgdGhpcy5jYW0ud2lkdGggKyAxNiAtIHRoaXMuZGlmZjtcclxuXHR0aGlzLmhhY2tCdXR0b24ueSA9IHRoaXMuY2FtLnkgKyA3MCArICg4NiAqIDQpO1xyXG59O1xyXG5cclxuU2hvcC5wcm90b3R5cGUucHVyY2hhc2VNb2R1bGUgPSBmdW5jdGlvbigpIHtcclxuICAgdmFyIHJhbmRZID0gdGhpcy5zdGF0ZS5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgxMDAsIHRoaXMuc3RhdGUuY2FtLmhlaWdodCAtIDEwMCk7XHJcbiAgIGlmKHRoaXMua2V5ID09PSAnc2hpZWxkJyAmJiB0aGlzLnN0YXRlLm1vdXNlLnggPiB0aGlzLnN0YXRlLnNoaWVsZEJ1dHRvbi54ICYmIHRoaXMuc3RhdGUubW91c2UueCA8IHRoaXMuc3RhdGUuc2hpZWxkQnV0dG9uLnggKyAyNTYgJiYgdGhpcy5zdGF0ZS5tb3VzZS55ID4gdGhpcy5zdGF0ZS5zaGllbGRCdXR0b24ueSAmJiB0aGlzLnN0YXRlLm1vdXNlLnkgPCB0aGlzLnN0YXRlLnNoaWVsZEJ1dHRvbi55ICsgODIpIHtcclxuICAgICAgaWYodGhpcy5zdGF0ZS5tb25leSA+PSA0NSkge1xyXG4gICAgICAgICB0aGlzLnN0YXRlLmFkZE1vZHVsZSh0aGlzLnN0YXRlLmNhbS54ICsgdGhpcy5zdGF0ZS5jYW0ud2lkdGggKyA4MCwgdGhpcy5zdGF0ZS5jYW0ueSArIHJhbmRZLCB0aGlzLmtleSk7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUubW9uZXkgLT0gNDU7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuY2FzaFJlZ2lzdGVyLnBsYXkoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5lcnJvci5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICBlbHNlIGlmKHRoaXMua2V5ID09PSAnc29sYXJQYW5lbCcgJiYgdGhpcy5zdGF0ZS5tb3VzZS54ID4gdGhpcy5zdGF0ZS5zb2xhclBhbmVsQnV0dG9uLnggJiYgdGhpcy5zdGF0ZS5tb3VzZS54IDwgdGhpcy5zdGF0ZS5zb2xhclBhbmVsQnV0dG9uLnggKyAyNTYgJiYgdGhpcy5zdGF0ZS5tb3VzZS55ID4gdGhpcy5zdGF0ZS5zb2xhclBhbmVsQnV0dG9uLnkgJiYgdGhpcy5zdGF0ZS5tb3VzZS55IDwgdGhpcy5zdGF0ZS5zb2xhclBhbmVsQnV0dG9uLnkgKyA4Mikge1xyXG4gICAgICBpZih0aGlzLnN0YXRlLm1vbmV5ID49IDEwNSkge1xyXG4gICAgICAgICB0aGlzLnN0YXRlLmFkZE1vZHVsZSh0aGlzLnN0YXRlLmNhbS54ICsgdGhpcy5zdGF0ZS5jYW0ud2lkdGggKyA4MCwgdGhpcy5zdGF0ZS5jYW0ueSArIHJhbmRZLCB0aGlzLmtleSk7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUubW9uZXkgLT0gMTA1O1xyXG4gICAgICAgICB0aGlzLnN0YXRlLmNhc2hSZWdpc3Rlci5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuZXJyb3IucGxheSgpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuICAgZWxzZSBpZih0aGlzLmtleSA9PT0gJ3RocnVzdGVyJyAmJiB0aGlzLnN0YXRlLm1vdXNlLnggPiB0aGlzLnN0YXRlLnRocnVzdGVyQnV0dG9uLnggJiYgdGhpcy5zdGF0ZS5tb3VzZS54IDwgdGhpcy5zdGF0ZS50aHJ1c3RlckJ1dHRvbi54ICsgMjU2ICYmIHRoaXMuc3RhdGUubW91c2UueSA+IHRoaXMuc3RhdGUudGhydXN0ZXJCdXR0b24ueSAmJiB0aGlzLnN0YXRlLm1vdXNlLnkgPCB0aGlzLnN0YXRlLnRocnVzdGVyQnV0dG9uLnkgKyA4Mikge1xyXG4gICAgICBpZih0aGlzLnN0YXRlLm1vbmV5ID49IDkwKSB7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuYWRkTW9kdWxlKHRoaXMuc3RhdGUuY2FtLnggKyB0aGlzLnN0YXRlLmNhbS53aWR0aCArIDgwLCB0aGlzLnN0YXRlLmNhbS55ICsgcmFuZFksIHRoaXMua2V5KTtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5tb25leSAtPSA5MDtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5jYXNoUmVnaXN0ZXIucGxheSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICB0aGlzLnN0YXRlLmVycm9yLnBsYXkoKTtcclxuICAgICAgfVxyXG4gICB9XHJcbiAgIGVsc2UgaWYodGhpcy5rZXkgPT09ICdndW4nICYmIHRoaXMuc3RhdGUubW91c2UueCA+IHRoaXMuc3RhdGUuZ3VuQnV0dG9uLnggJiYgdGhpcy5zdGF0ZS5tb3VzZS54IDwgdGhpcy5zdGF0ZS5ndW5CdXR0b24ueCArIDI1NiAmJiB0aGlzLnN0YXRlLm1vdXNlLnkgPiB0aGlzLnN0YXRlLmd1bkJ1dHRvbi55ICYmIHRoaXMuc3RhdGUubW91c2UueSA8IHRoaXMuc3RhdGUuZ3VuQnV0dG9uLnkgKyA4Mikge1xyXG4gICAgICBpZih0aGlzLnN0YXRlLm1vbmV5ID49IDEyMCkge1xyXG4gICAgICAgICB0aGlzLnN0YXRlLmFkZE1vZHVsZSh0aGlzLnN0YXRlLmNhbS54ICsgdGhpcy5zdGF0ZS5jYW0ud2lkdGggKyA4MCwgdGhpcy5zdGF0ZS5jYW0ueSArIHJhbmRZLCB0aGlzLmtleSk7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUubW9uZXkgLT0gMTIwO1xyXG4gICAgICAgICB0aGlzLnN0YXRlLmNhc2hSZWdpc3Rlci5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuZXJyb3IucGxheSgpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuICAgZWxzZSBpZih0aGlzLmtleSA9PT0gJ2hhY2tlcicgJiYgdGhpcy5zdGF0ZS5tb3VzZS54ID4gdGhpcy5zdGF0ZS5oYWNrQnV0dG9uLnggJiYgdGhpcy5zdGF0ZS5tb3VzZS54IDwgdGhpcy5zdGF0ZS5oYWNrQnV0dG9uLnggKyAyNTYgJiYgdGhpcy5zdGF0ZS5tb3VzZS55ID4gdGhpcy5zdGF0ZS5oYWNrQnV0dG9uLnkgJiYgdGhpcy5zdGF0ZS5tb3VzZS55IDwgdGhpcy5zdGF0ZS5oYWNrQnV0dG9uLnkgKyA4Mikge1xyXG4gICAgICBpZih0aGlzLnN0YXRlLm1vbmV5ID49IDIwMCkge1xyXG4gICAgICAgICB0aGlzLnN0YXRlLmFkZE1vZHVsZSh0aGlzLnN0YXRlLmNhbS54ICsgdGhpcy5zdGF0ZS5jYW0ud2lkdGggKyA4MCwgdGhpcy5zdGF0ZS5jYW0ueSArIHJhbmRZLCB0aGlzLmtleSk7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUubW9uZXkgLT0gMjAwO1xyXG4gICAgICAgICB0aGlzLnN0YXRlLmNhc2hSZWdpc3Rlci5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuZXJyb3IucGxheSgpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuICAgdGhpcy5zdGF0ZS5tb25leVRleHQudGV4dCA9IHRoaXMuc3RhdGUubW9uZXk7IFxyXG59O1xyXG5cclxuU2hvcC5wcm90b3R5cGUuYWRkTW9kdWxlID0gZnVuY3Rpb24gKHgsIHksIGtleSkge1xyXG4gICB2YXIgbmV3TW9kdWxlID0gdGhpcy5zdGF0ZS5tb2R1bGVCdWlsZGVyLmJ1aWxkKGtleSwgeCwgeSwgdHJ1ZSk7XHJcbiAgIG5ld01vZHVsZS5jdWJlLmJvZHkubW92ZUxlZnQodGhpcy5uZXdNb2R1bGVTcGVlZCk7XHJcbn07XHJcblxyXG5TaG9wLnByb3RvdHlwZS5hZGRTaG9wQnV0dG9ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICB0aGlzLnNoaWVsZEJ1dHRvbi5yZXZpdmUoKTtcclxuICAgdGhpcy5zb2xhclBhbmVsQnV0dG9uLnJldml2ZSgpO1xyXG4gICB0aGlzLnRocnVzdGVyQnV0dG9uLnJldml2ZSgpO1xyXG4gICB0aGlzLmd1bkJ1dHRvbi5yZXZpdmUoKTtcclxuICAgdGhpcy5oYWNrQnV0dG9uLnJldml2ZSgpOyBcclxufTtcclxuXHJcblNob3AucHJvdG90eXBlLmZvcm1hdEJ1dHRvbiA9IGZ1bmN0aW9uKGJ1dHRvbikge1xyXG4gICBidXR0b24ub25JbnB1dE92ZXIuYWRkKHRoaXMuc20ucGxheUhvdmVyQ2xpY2ssIHRoaXMuc20pO1xyXG4gICBidXR0b24ub25JbnB1dERvd24uYWRkKHRoaXMuc20ucGxheURvd25DbGljaywgdGhpcy5zbSk7XHJcbiAgIGJ1dHRvbi5raWxsKCk7XHJcbn07XHJcblxyXG5TaG9wLnByb3RvdHlwZS5hZGRNb25leSA9IGZ1bmN0aW9uKGFtdCkge1xyXG4gICB0aGlzLm1vbmV5ICs9IGFtdDtcclxuICAgdGhpcy5tb25leVRleHQudGV4dCA9IHRoaXMubW9uZXk7XHJcbiAgIHRoaXMuY2FzaFJlZ2lzdGVyLnBsYXkoKTtcclxufTtcclxuXHJcblNob3AucHJvdG90eXBlLmRlYnVnQWRkTW9uZXkgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmFkZE1vbmV5KDEwMDApOyBcclxufTtcclxuXHJcblNob3AucHJvdG90eXBlLnVzZVNob3BCdXR0b24gPSBmdW5jdGlvbigpIHtcclxuXHR0aGlzLnNtLnBsYXlEb3duQ2xpY2soKTtcclxuICAgaWYoIXRoaXMuc2hvcFBhbmVsLmFsaXZlICYmICF0aGlzLnNob3BNZW51T3BlbmluZyAmJiAhdGhpcy5zaG9wTWVudUNsb3NpbmcpIHtcclxuICAgICAgdGhpcy5zaG9wUGFuZWwucmV2aXZlKCk7XHJcbiAgICAgIHRoaXMuZGlmZiA9IDA7XHJcbiAgICAgIHRoaXMuc2hvcE1lbnVPcGVuaW5nID0gdHJ1ZTtcclxuICAgfVxyXG4gICBlbHNlIGlmKHRoaXMuc2hvcFBhbmVsLmFsaXZlJiYgIXRoaXMuc2hvcE1lbnVDbG9zaW5nICYmICF0aGlzLnNob3BNZW51T3BlbmluZykge1xyXG4gICAgICB0aGlzLnNob3BNZW51Q2xvc2luZyA9IHRydWU7XHJcbiAgIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU2hvcDtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwiLypcclxuQ29sbGVjdGlvbiBvZiB1dGlsaXR5IGZ1bmN0aW9ucy5cclxuKi9cclxuXHJcbnZhciBVdGlscyA9IHtcclxuICAgIGNvbnRhaW5zT2JqZWN0OiBmdW5jdGlvbihvYmosIGxpc3QpIHtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGRpc3RhbmNlOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Mikge1xyXG4gICAgICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyh4MSAtIHgyLCAyKSArIE1hdGgucG93KHkxIC0geTIsIDIpKTtcclxuICAgIH0sXHJcbiAgICBsZXJwOiBmdW5jdGlvbihhLCBiLCB0KSB7XHJcbiAgICAgICBpZiAodCA8IDAgfHwgdCA+IDEpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdiYWQgcmFuZ2UgZm9yIFV0aWxzLmxlcnAoKSwgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEnKTtcclxuICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgfVxyXG4gICAgICAgcmV0dXJuIGEgKyB0ICogKGIgLSBhKTtcclxuICAgIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVXRpbHM7Il19
