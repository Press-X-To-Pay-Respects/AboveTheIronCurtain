(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 800, Phaser.AUTO, 'atic-game');

window.playerState = {
    currentLevel: 'Game'
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');
<<<<<<< HEAD
<<<<<<< HEAD
=======
},{"./states/boot":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\boot.js","./states/game":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\game.js","./states/menu":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\menu.js","./states/preloader":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\preloader.js","./states/splash":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\splash.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube.js":[function(require,module,exports){
=======
>>>>>>> origin/mzdev
},{"./states/boot":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\boot.js","./states/game":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\game.js","./states/menu":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\menu.js","./states/preloader":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\preloader.js","./states/splash":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\splash.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\Module.js":[function(require,module,exports){
//Don't use this function to create modules, instead use moduleBuilder()
var Module = function(setCube) {
	this.cube = setCube;
};

Module.prototype.constructor = Module;

module.exports = Module;
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js":[function(require,module,exports){
var Cube = require('./cube');
var Module = require('./Module');

//Use this to create a moduleBuilder- only need to create one instance of it
var ModuleBuilder = function(setGameState) {
	//Ensure that cannot create multiple instances of this class
	if(ModuleBuilder.prototype.exists) {
		return ModuleBuilder.prototype.existingReference;
	}
		
	this.gameState = setGameState;
	this.coreExists = false;	//records if core has been created
	this.core = null;			//stores core when it is created
	ModuleBuilder.prototype.exists = true;
	ModuleBuilder.prototype.existingReference = this;
};

ModuleBuilder.prototype.constructor = ModuleBuilder;

//These var's help create the singleton functionality
ModuleBuilder.prototype.exists = false;
ModuleBuilder.prototype.existingReference = null;

//call this function from ModuleBuilder to construct modules
//TYPES: 'core' 'shield' 'thruster' 'solarPannel'
ModuleBuilder.prototype.build = function(type, x, y) {
	//Check if core has been created
	if(type == 'core' && this.coreExists) {
		//if so, return existing core b/c is singleton
		//b/c of this, can call ModuleBuilder.build('core') to access reference to existing core
		return this.core;
	}
	
	//Create cube object to be stored within module
	//Sprite names for modules are directly mapped to module names, so just pass 'type' as sprite name
	var newCube = new Cube(this.gameState.game, x, y, type);
    var scale = 0.5;
    newCube.name = this.gameState.debugNum++;
    newCube.scale.x = scale;
    newCube.scale.y = scale;
    newCube.anchor.setTo(0.5, 0.5);
    this.gameState.game.physics.p2.enable(newCube);
    newCube.body.onBeginContact.add(newCube.cubeCollide, newCube);
    newCube.body.damping = 0.9;
    newCube.body.angularDamping = 0.9;
    if (!this.gameState.rootSpawned) {
       newCube.root = true;
       this.gameState.rootSpawned = true;
    }
	
	//Create module to wrap around cube class
	var newModule = new Module(newCube);
		
	//TODO: edit special module atributes based on 'type'
	
	//Store module if it is core
	if(type == 'core')
	{
		this.core = newModule;
		this.coreExists = true;
	}
	
	//Return the module object
	return newModule;
};


module.exports = ModuleBuilder;
},{"./Module":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\Module.js","./cube":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\cube.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\cube.js":[function(require,module,exports){
<<<<<<< HEAD
=======
},{"./states/boot":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\boot.js","./states/game":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\game.js","./states/menu":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\menu.js","./states/preloader":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\preloader.js","./states/splash":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\splash.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube.js":[function(require,module,exports){
>>>>>>> origin/mzdev
=======
>>>>>>> origin/gh-pages
>>>>>>> origin/mzdev
/*
Defines a cube module for a cubesat.
*/

var Cube = function (game, x, y, sprite) {
    Phaser.Sprite.call(this, game, x, y, sprite);
    game.add.existing(this);
    /*
    this.north = undefined;
    this.east = undefined;
    this.south = undefined;
    this.west = undefined;
    this.root = false;
    this.DIR = {NORTH: 0, EAST: 1, SOUTH: 2, WEST: 3};
    */
    this.group = undefined;
};

Cube.prototype = Object.create(Phaser.Sprite.prototype);
Cube.prototype.constructor = Cube;

/**
 * Automatically called by World.update
 */
Cube.prototype.update = function() {
};
/*
Cube.prototype.addConnection = function(other) {
  var offset = 2;
  var thisSide = this.relativeSide(this.body, other);
  var otherSide = this.relativeSide(other, this.body);
  if (this.getSide(thisSide)) {
     return;
  }
  if (other.sprite.getSide(otherSide)) {
     return;
  }
  switch (thisSide) {
     case this.DIR.NORTH:
     this.game.physics.p2.createLockConstraint(this.body, other, [0, this.width + offset]);
     this.north = other.sprite;
     break;
     case this.DIR.EAST:
     this.game.physics.p2.createLockConstraint(this.body, other, [-this.width - offset, 0]);
     this.east = other.sprite;
     break;
     case this.DIR.SOUTH:
     this.game.physics.p2.createLockConstraint(this.body, other, [0, -this.width - offset]);
     this.south = other.sprite;
     break;
     case this.DIR.WEST:
     this.game.physics.p2.createLockConstraint(this.body, other, [this.width + offset, 0]);
     this.west = other.sprite;
     break;
  }
  switch (otherSide) {
     case this.DIR.NORTH:
     other.sprite.north = this;
     break;
     case this.DIR.EAST:
     other.sprite.east = this;
     break;
     case this.DIR.SOUTH:
     other.sprite.south = this;
     break;
     case this.DIR.WEST:
     other.sprite.west = this;
     break;
  }
};
*/
Cube.prototype.relativeSide = function(thisBody, otherBody) {
  var thisPoint = new Phaser.Point(thisBody.x, thisBody.y);
  var otherPoint = new Phaser.Point(otherBody.x, otherBody.y);
  var angleToOther = Phaser.Point.angle(thisPoint, otherPoint);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
  var diffAngle = angleToOther - thisBody.rotation;
   if (diffAngle < 1 / 4 * Math.PI || diffAngle > 7 / 4 * Math.PI) { // north
     return this.DIR.NORTH;
  } else if (diffAngle >= 1 / 4 * Math.PI && diffAngle < 3 / 4 * Math.PI) { // east
     return this.DIR.EAST;
  } else if (diffAngle >= 3 / 4 * Math.PI && diffAngle < 5 / 4 * Math.PI) { // south
     return this.DIR.SOUTH;
  } else if (diffAngle >= 5 / 4 * Math.PI && diffAngle < 7 / 4 * Math.PI) { // west
     return this.DIR.WEST;
  }
};

Cube.prototype.cubeCollide = function(other) {
   /*
   if (other === null || this.prototype !== other.prototype) {
      return;
   }
   if (this.myRoot) {
      if (other.sprite.myRoot && this.myRoot === other.sprite.myRoot) {
         return;
      }
   } else {
      if (this.root) {
         this.myRoot = this.name;
      }
   }
   if (this.hasRoot() && !other.sprite.hasRoot()) {
      this.addConnection(other);
   }
   */
   if (this.group === undefined) {
      return;
   }
   this.group.handleCollision(this, other.sprite);
};
/*
Cube.prototype.hasRoot = function() {
  if (this.root) {
     return true;
  }
  var visited = [];
  visited.push(this);
  if (this.north && this.hasRootR(visited, this.north)) {
    return true;  
  }
  if (this.east && this.hasRootR(visited, this.east)) {
    return true;  
  }
  if (this.south && this.hasRootR(visited, this.south)) {
    return true;  
  }
  if (this.west && this.hasRootR(visited, this.west)) {
    return true;
  }
};

Cube.prototype.hasRootR = function(visited, cur) {
   if (cur.root) {
      if (!this.myRoot) {
         this.myRoot = cur.name;
      }
      return true;
   }
   visited.push(cur);
   if (cur.north && !this.contains(visited, cur.north) && this.hasRootR(visited, cur.north)) {
    return true;  
  }
  if (cur.east && !this.contains(visited, cur.east) && this.hasRootR(visited, cur.east)) {
    return true;  
  }
  if (cur.south && !this.contains(visited, cur.south) && this.hasRootR(visited, cur.south)) {
    return true;  
  }
  if (cur.west && !this.contains(visited, cur.west) && this.hasRootR(visited, cur.west)) {
    return true;  
  }
};

Cube.prototype.contains = function (array, obj) {
  for (var i = 0; i < array.length; i++) {
      if (array[i] === obj) {
         return true;
      }
  }  
   return false;
};

Cube.prototype.getSide = function(side) {
   switch (side) {
     case this.DIR.NORTH:
     return this.north;
     case this.DIR.EAST:
     return this.east;
     case this.DIR.SOUTH:
     return this.south;
     case this.DIR.WEST:
     return this.west;
  }
  return undefined;
};
*/

Cube.prototype.toString = function() {
   var string = '';
   string += this.concat('name', this.name);
   /*
   string += this.concat('isRoot', this.root);
   string += this.concat('myRoot', this.myRoot);
   string += this.concat('north', this.north !== undefined);
   string += this.concat('east', this.east !== undefined);
   string += this.concat('south', this.south !== undefined);
   string += this.concat('west', this.west !== undefined);
   */
   return string;
};

Cube.prototype.concat = function(string, val) {
   return string + ': ' + val + '\n';
};

module.exports = Cube;















<<<<<<< HEAD
<<<<<<< HEAD
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\boot.js":[function(require,module,exports){
=======
=======
>>>>>>> origin/mzdev
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js":[function(require,module,exports){
/*
Defines a cube group.
*/

var CubeGroup = function (game, root) {
   this.game = game;
   this.root = root;
   this.cubes = [];
   var col = [];
   col.push(this.root);
   this.cubes.push(col);
   this.root.group = this;
   this.DIR = {NORTH: 0, EAST: 1, SOUTH: 2, WEST: 3};
   this.offset = 2;
};

CubeGroup.prototype.constructor = CubeGroup;

/**
 * Automatically called by World.update
 */
CubeGroup.prototype.update = function() {
};

CubeGroup.prototype.add = function(cube) {
  cube.group = this; 
};

CubeGroup.prototype.handleCollision = function(origin, other) {
   // stop if other does not exist, either is not a cube, both are in same gruop
   if (other === null || origin.prototype !== other.prototype || origin.group === other.group) {
      return;
   }
   var relSide = this.relativeSide(origin.body, other.body);
   var originLoc = this.find(origin);
   var otherLoc = this.adjust(originLoc, relSide);
   // console.log('hm', originLoc.x, originLoc.y);
   if (this.getCube(otherLoc)) {
      return;
   }
   switch (relSide) {
      case this.DIR.NORTH:
      if (originLoc.y === this.cubesHeight() - 1) {
         this.addTopRow();
      }
      this.game.physics.p2.createLockConstraint(origin.body, other.body, [0, origin.width + this.offset]);
      break;
      case this.DIR.EAST:
      if (originLoc.x === this.cubesWidth() - 1) {
         this.addRightCol();
      }
      this.game.physics.p2.createLockConstraint(origin.body, other.body, [-origin.width - this.offset, 0]);
      break;
      case this.DIR.SOUTH:
      if (originLoc.y === 0) {
         this.addBotRow();
      }
      this.game.physics.p2.createLockConstraint(other.body, origin.body, [0, origin.width + this.offset]);
      break;
      case this.DIR.WEST:
      if (originLoc.x === 0) {
         this.addLeftCol();
      }
      this.game.physics.p2.createLockConstraint(other.body, origin.body, [-origin.width - this.offset, 0]);
      break;
   }
   // console.log('end');
   originLoc = this.find(origin);
   otherLoc = this.adjust(originLoc, relSide);
   if (!otherLoc) {
      console.log('hande collision failed to find second other loc');
      return;
   }
   this.set(otherLoc, other);
   // console.log('add: ' + other.name + ' at ' + otherLoc.x + ', ' + otherLoc.y);
   // this.displayCubes();
   other.group = this;
};

CubeGroup.prototype.relativeSide = function(thisBody, otherBody) {
  var thisPoint = new Phaser.Point(thisBody.x, thisBody.y);
  var otherPoint = new Phaser.Point(otherBody.x, otherBody.y);
  var angleToOther = Phaser.Point.angle(thisPoint, otherPoint);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
  var diffAngle = angleToOther - thisBody.rotation;
   if (diffAngle < 1 / 4 * Math.PI || diffAngle > 7 / 4 * Math.PI) { // north
     return this.DIR.NORTH;
  } else if (diffAngle >= 1 / 4 * Math.PI && diffAngle < 3 / 4 * Math.PI) { // east
     return this.DIR.EAST;
  } else if (diffAngle >= 3 / 4 * Math.PI && diffAngle < 5 / 4 * Math.PI) { // south
     return this.DIR.SOUTH;
  } else if (diffAngle >= 5 / 4 * Math.PI && diffAngle < 7 / 4 * Math.PI) { // west
     return this.DIR.WEST;
  }
};

CubeGroup.prototype.find = function(cube) {
   // console.log('find', cube.name);
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col] === cube) {
            // console.log('found at', row, col);
            return new Phaser.Point(row, col);
         }
      }
   }
   console.log('could not find cube', cube.name);
   this.displayCubes();
   return undefined;
};

CubeGroup.prototype.cubesWidth = function() {
   return this.cubes.length;
};

CubeGroup.prototype.cubesHeight = function() {
   return this.cubes[0].length;
};

/*
[0,height] ...  [width, height]
.                 
.               .
.               .
[0,1] [1,1] ... .
[0,0] [1,0] ... [width,0]
*/
CubeGroup.prototype.addTopRow = function() {
   // console.log('add top');
   // this.displayCubes();
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].push(undefined);
   }
   // console.log('end add top');
   // this.displayCubes();
};

CubeGroup.prototype.addRightCol = function() {
   // console.log('add right');
   var newCol = new Array(this.cubesHeight);
   this.cubes.push(newCol);
};

CubeGroup.prototype.addBotRow = function() {
   // console.log('add bot');
   // this.displayCubes();
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].unshift(undefined);
   }
   // console.log('end add bot');
   // this.displayCubes();
};

CubeGroup.prototype.addLeftCol = function() {
   // console.log('add left');
   // this.displayCubes();
   // console.log('height is ' + this.cubesHeight());
   var newCol = new Array(this.cubesHeight());
   this.cubes.unshift(newCol);
   // console.log('end add left');
   // this.displayCubes();
};

CubeGroup.prototype.getCube = function(point) {
   if (this.outOfBounds(point)) {
      return undefined;
   }
   return this.cubes[point.x][point.y];
};

CubeGroup.prototype.adjust = function(point, dir) {
  if (!point) {
     console.log('adjust given undefined point');
     return;
  }
  var newPoint = new Phaser.Point(point.x, point.y);
  switch (dir) {
      case this.DIR.NORTH:
      newPoint.y++;
      break;
      case this.DIR.EAST:
      newPoint.x++;
      break;
      case this.DIR.SOUTH:
      newPoint.y--;
      break;
      case this.DIR.WEST:
      newPoint.x--;
      break;
   }
   return newPoint;
};

CubeGroup.prototype.set = function(point, cube) {
   if (!point) {
      console.log('set given undefined point');
      return;
   }
   if (this.outOfBounds(point)) {
      return;
   }
   this.cubes[point.x][point.y] = cube;
};

CubeGroup.prototype.outOfBounds = function(point) {
   if (!point) {
      console.log('out of bounds given undefined point');
      return;
   }
   if (point.x < 0 || point.x >= this.cubesWidth() || point.y < 0 || point.y >= this.cubesHeight()) {
      return true;
   }
   return false;
};

CubeGroup.prototype.displayCubes = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      var string = '';
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube) {
            string += this.cubes[row][col].name + ' ';
         } else {
            string += 'empty' + ' ';
         }
      }
      console.log('row ' + row + ': ' + string + '| ' + this.cubes[row].length);
   }
};

module.exports = CubeGroup;

















},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\boot.js":[function(require,module,exports){
<<<<<<< HEAD
>>>>>>> origin/mzdev
=======
=======
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\boot.js":[function(require,module,exports){
>>>>>>> origin/gh-pages
>>>>>>> origin/mzdev
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

<<<<<<< HEAD
<<<<<<< HEAD
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\game.js":[function(require,module,exports){
=======
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\game.js":[function(require,module,exports){
>>>>>>> origin/mzdev
=======
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\game.js":[function(require,module,exports){
=======
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\game.js":[function(require,module,exports){
>>>>>>> origin/gh-pages
>>>>>>> origin/mzdev
/*
Main testing environment.
*/

<<<<<<< HEAD
<<<<<<< HEAD
var ModuleBuilder = require('../entities/ModuleBuilder');
=======
var Cube = require('../entities/cube');
>>>>>>> origin/mzdev
=======
var Cube = require('../entities/cube');
=======
var ModuleBuilder = require('../entities/ModuleBuilder');
>>>>>>> origin/gh-pages
>>>>>>> origin/mzdev
var Utils = require('../utils');
var CubeGroup = require('../entities/cube_group');

var mouseBody; // physics body for mouse

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {
	
  create: function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.setImpactEvents(true);
    mouseBody = new p2.Body(); // jshint ignore:line
    this.game.physics.p2.world.addBody(mouseBody);
    
	//create ModuleBuilder and store it in this game state object
	this.moduleBuilder = new ModuleBuilder(this);
	//create and store the core module
	this.coreModule = this.moduleBuilder.build('core', 200, 200);
	
	//DEBUGGING LISTENERS- allow you to create modules by pressing keys
	//core
	this.placeCoreKey = this.game.input.keyboard.addKey(Phaser.Keyboard.P);
    this.placeCoreKey.onDown.add(this.addCore, this);
	//shield
	this.placeShieldKey = this.game.input.keyboard.addKey(Phaser.Keyboard.O);
    this.placeShieldKey.onDown.add(this.addShield, this);
	//thruster
	this.placeThrusterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.I);
    this.placeThrusterKey.onDown.add(this.addThruster, this);
	//solarPannel
	this.placeSPKey = this.game.input.keyboard.addKey(Phaser.Keyboard.U);
    this.placeSPKey.onDown.add(this.addSP, this);
	//END
    
    this.mouseX = 0;
    this.mouseY = 0;
    
    this.input.onDown.add(this.click, this);
    this.input.onUp.add(this.release, this);
    this.input.addMoveCallback(this.move, this);
    this.grabbed = undefined;
    this.line = new Phaser.Line(0, 0, 0, 0);
    
    this.rootSpawned = false;
    
    this.debugNum = 0;
    this.myRoot = undefined;
    
    this.playerCommand = this.placeCubeSpec(300, 300);
    this.player = new CubeGroup(this, this.playerCommand);
    
     // var polygonTest = this.game.add.sprite(60, 60, 'testsprite');
     // this.game.physics.p2.enableBody(polygonTest, true);
     // polygonTest.body.clearShapes();
     // polygonTest.body.loadPolygon('module_physics', 'test2');
  },

  update: function () {
    if (this.grabbed) {
      var angle = Math.atan2(this.grabbed.sprite.y - this.input.position.y, this.grabbed.sprite.x - this.input.position.x) + Math.PI;
      var dist = Utils.distance(this.grabbed.sprite.x, this.grabbed.sprite.y, this.input.position.x, this.input.position.y);
      var weight = 10;
      this.grabbed.force.x = Math.cos(angle) * dist * weight;
      this.grabbed.force.y = Math.sin(angle) * dist * weight;
      this.line.setTo(this.grabbed.sprite.x, this.grabbed.sprite.y, this.input.position.x, this.input.position.y);
    } else {
       this.line.setTo(0, 0, 0, 0);
    }
  },
  
  render: function () {
    this.game.debug.geom(this.line);
  },

  click: function (pointer) {
    var bodies = this.game.physics.p2.hitTest(pointer.position);
    if (bodies.length)
    {
        this.grabbed = bodies[0].parent;
        // console.log(this.grabbed.sprite.toString());
    }
  },
  
  release: function () {
     if (this.grabbed) {
        this.grabbed = undefined;
     }
  },
  
  move: function (pointer) {
    // p2 uses different coordinate system, so convert the pointer position to p2's coordinate system
    mouseBody.position[0] = this.game.physics.p2.pxmi(pointer.position.x);
    mouseBody.position[1] = this.game.physics.p2.pxmi(pointer.position.y);
    this.mouseX = pointer.position.x;
    this.mouseY = pointer.position.y;
  },
  
<<<<<<< HEAD
<<<<<<< HEAD
  //DEBUG FUNCTIONS- event functions called from listeners that allow you to create modules with key presses
  addCore: function () {
	//Attempts to create more core modules here will only return the existing core
	this.moduleBuilder.build('core', this.mouseX, this.mouseY);
  },
  addShield: function () {
	this.moduleBuilder.build('shield', this.mouseX, this.mouseY);
  },
  addThruster: function () {
	this.moduleBuilder.build('thruster', this.mouseX, this.mouseY);
  },
  addSP: function () {
	this.moduleBuilder.build('solarPannel', this.mouseX, this.mouseY);
=======
=======
>>>>>>> origin/mzdev
  placeCube: function () {
    var entity = new Cube(this.game, this.mouseX, this.mouseY);
    var scale = 0.5;
    entity.name = this.debugNum++;
    entity.scale.x = scale;
    entity.scale.y = scale;
    entity.anchor.setTo(0.5, 0.5);
    this.game.physics.p2.enable(entity);
    entity.body.onBeginContact.add(entity.cubeCollide, entity);
    entity.body.damping = 0.9;
    entity.body.angularDamping = 0.9;
    if (!this.rootSpawned) {
       entity.root = true;
       this.rootSpawned = true;
    }
  },
  
  placeCubeSpec: function (x, y) {
    var entity = new Cube(this.game, x, y);
    var scale = 0.5;
    entity.name = this.debugNum++;
    entity.scale.x = scale;
    entity.scale.y = scale;
    entity.anchor.setTo(0.5, 0.5);
    this.game.physics.p2.enable(entity);
    entity.body.onBeginContact.add(entity.cubeCollide, entity);
    entity.body.damping = 0.9;
    entity.body.angularDamping = 0.9;
    if (!this.rootSpawned) {
       entity.root = true;
       this.rootSpawned = true;
    }
    return entity;
<<<<<<< HEAD
>>>>>>> origin/mzdev
=======
=======
  //DEBUG FUNCTIONS- event functions called from listeners that allow you to create modules with key presses
  addCore: function () {
	//Attempts to create more core modules here will only return the existing core
	this.moduleBuilder.build('core', this.mouseX, this.mouseY);
  },
  addShield: function () {
	this.moduleBuilder.build('shield', this.mouseX, this.mouseY);
  },
  addThruster: function () {
	this.moduleBuilder.build('thruster', this.mouseX, this.mouseY);
  },
  addSP: function () {
	this.moduleBuilder.build('solarPannel', this.mouseX, this.mouseY);
>>>>>>> origin/gh-pages
>>>>>>> origin/mzdev
  }
  //END
  
};




























<<<<<<< HEAD
<<<<<<< HEAD
},{"../entities/ModuleBuilder":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js","../utils":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\menu.js":[function(require,module,exports){
=======
},{"../entities/cube":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube.js","../entities/cube_group":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js","../utils":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\menu.js":[function(require,module,exports){
>>>>>>> origin/mzdev
=======
},{"../entities/cube":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube.js","../entities/cube_group":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js","../utils":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\menu.js":[function(require,module,exports){
=======
},{"../entities/ModuleBuilder":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js","../utils":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\menu.js":[function(require,module,exports){
>>>>>>> origin/gh-pages
>>>>>>> origin/mzdev
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: '65px Arial', fill: '#ffffff', align: 'center' };

    this.text = this.add.text(x - 300, y - 200, 'Press to Start', style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel); // jshint ignore:line
  }
};

<<<<<<< HEAD
<<<<<<< HEAD
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\preloader.js":[function(require,module,exports){
=======
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\preloader.js":[function(require,module,exports){
>>>>>>> origin/mzdev
=======
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\preloader.js":[function(require,module,exports){
=======
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\preloader.js":[function(require,module,exports){
>>>>>>> origin/gh-pages
>>>>>>> origin/mzdev
var Preloader = function (game) {
  game = null;
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test2.png');
	this.load.image('core', 'assets/core.png');
	this.load.image('thruster', 'assets/thruster.png');
	this.load.image('shield', 'assets/shield.png');
	this.load.image('solarPannel', 'assets/solarPannel.png');
	
    this.load.physics('module_physics', 'assets/module_physics.json');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      // this.game.state.start('Menu');
      this.game.state.start(playerState.currentLevel); // jshint ignore:line
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

<<<<<<< HEAD
<<<<<<< HEAD
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\splash.js":[function(require,module,exports){
=======
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\splash.js":[function(require,module,exports){
>>>>>>> origin/mzdev
=======
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\splash.js":[function(require,module,exports){
=======
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\splash.js":[function(require,module,exports){
>>>>>>> origin/gh-pages
>>>>>>> origin/mzdev
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
<<<<<<< HEAD
<<<<<<< HEAD
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\utils.js":[function(require,module,exports){
=======
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js":[function(require,module,exports){
>>>>>>> origin/mzdev
=======
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js":[function(require,module,exports){
=======
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\utils.js":[function(require,module,exports){
>>>>>>> origin/gh-pages
>>>>>>> origin/mzdev
/*
Collection of utility functions.
*/

var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
    distance: function(x1, y1, x2, y2) {
       return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
<<<<<<< HEAD
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;base64,
=======
//# sourceMappingURL=data:application/json;base64,
>>>>>>> origin/mzdev
=======
//# sourceMappingURL=data:application/json;base64,
=======
//# sourceMappingURL=data:application/json;base64,
>>>>>>> origin/gh-pages
>>>>>>> origin/mzdev
