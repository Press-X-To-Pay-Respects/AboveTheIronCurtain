(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
var game = new Phaser.Game(window.innerWidth, window.innerHeigh, Phaser.AUTO, 'atic-game');

window.playerState = {
    currentLevel: 'Game'
};

//  The Google WebFont Loader will look for this object, so create it before loading the script.
WebFontConfig = { // jshint ignore:line
    //  The Google Fonts we want to load (specify as many as you like in the array)
    google: {
      families: ['Roboto::latin', 'VT323::latin']
    }
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');
},{"./states/boot":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\boot.js","./states/game":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\game.js","./states/menu":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\menu.js","./states/preloader":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\preloader.js","./states/splash":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\splash.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\effects\\BinaryParticle.js":[function(require,module,exports){
var BinaryParticle = function(game, targetObj, x, y, tarOffsetX, tarOffsetY) {
	var style = {font: '20px VT323', fill: '#FFFFFF', align: 'center'};
	var byteSymbol = Math.random() >= 0.5 ? '1' : '0';
	Phaser.Text.call(this, game, x, y, byteSymbol, style);
	game.add.existing(this);
	this.targetObj = targetObj;
	this.speed = 3.6;
	this.tarOffsetX = tarOffsetX;
	this.tarOffsetY = tarOffsetY;
};

BinaryParticle.prototype = Object.create(Phaser.Text.prototype);
BinaryParticle.prototype.constructor = BinaryParticle;

BinaryParticle.prototype.update = function() {
	//Get delta vector to target object
	var delta = [this.targetObj.x + this.tarOffsetX - this.x, this.targetObj.y + this.tarOffsetY - this.y];
	//Get distance and check if we've reached target distance
	var dist = Math.sqrt(Math.pow(delta[0], 2) + Math.pow(delta[1], 2));
	if(dist <= this.speed) {
		this.destroy();
		return;
	}
	//Normalize delta vector
	delta = [delta[0]/dist, delta[1]/dist];
	//Update position
	this.x = this.x + this.speed*delta[0];
	this.y = this.y + this.speed*delta[1];
};

module.exports = BinaryParticle;
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\effects\\Emitter.js":[function(require,module,exports){
var BinaryParticle = require('./BinaryParticle');

var Emitter = function(gameState) {
	this.gameState = gameState;
};

Emitter.prototype.constructor = Emitter;

Emitter.prototype.emitBinary = function (targetObj, x, y, spacing) {
	var offsetX = (Math.random()-0.5)*spacing;
	var offsetY = (Math.random()-0.5)*spacing;
	var newParticle = new BinaryParticle(this.gameState.game, targetObj, x, y, offsetX, offsetY);
};

module.exports = Emitter;
},{"./BinaryParticle":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\effects\\BinaryParticle.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\Bullet.js":[function(require,module,exports){
//Bullets are tagged as 'playerBullet' or 'enemyBullet'
var Bullet = function(gameState, x, y, direction, inhertitSpeed, tag) {
    Phaser.Sprite.call(this, gameState.game, x, y, 'bullet');
	this.direction = direction; //Unit vector representing direction bullet is travelling;
	this.speed = 500 + inhertitSpeed;				//Speed bullet is travelling;
	this.tag = tag;
	this.game = gameState.game;
	this.game.add.existing(this);
	this.lifeTime = 300;
	var scale = 0.5;
	this.scale.x = scale;
	this.scale.y = scale;
	this.anchor.setTo(0.5, 0.5);
	this.destroyBuffer = 100;
	
	//set physics
	gameState.game.physics.p2.enable(this);
	this.body.setCollisionGroup(gameState.collisionGroup);
	this.body.collides(gameState.collisionGroup);
	//Set proper collision function by determining type from 'tag'
	if(this.tag === 'enemyBullet') {
		this.collision = function(other) {
			if(other) {
				if(other.sprite){
					if(other.sprite.tag) {
						if(other.sprite.tag === 'module') {
							other.sprite.takeDamage(1);
						}
						this.destroy();
					}
				}
			}
		};
	}
	else if(this.tag === 'playerBullet') {
		this.collision = function(other) {
			if(other) {
				if(other.sprite){
					if(other.sprite.tag) {
						if(other.sprite.tag === 'enemy_module') {
							other.sprite.takeDamage(1);
						}
					}
				}
			}
			this.destroy();
		};
	}
	this.body.onBeginContact.add(this.collision, this);
	this.body.setZeroDamping();
	this.body.mass = 0.1;
	this.body.velocity.x = direction[0]*this.speed;
	this.body.velocity.y = direction[1]*this.speed;
};

Bullet.prototype = Object.create(Phaser.Sprite.prototype);
Bullet.prototype.constructor = Bullet;

Bullet.prototype.update = function() {
	if(this.body.x > this.game.camera.x + this.game.camera.width + this.destroyBuffer || this.body.x  < this.game.camera.x - this.destroyBuffer || 
	this.body.y > this.game.camera.y + this.game.camera.height + this.destroyBuffer || this.body.y < this.game.camera.y - this.destroyBuffer) {
		this.destroy(true);
	}
};

module.exports = Bullet;
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\Module.js":[function(require,module,exports){
//Don't use this function to create modules, instead use moduleBuilder()
var Module = function(setType, setCube, setGameState) {
	this.isActive = false;
	this.type = setType;
	this.cube = setCube;
	setCube.module = this;
	this.gameState = setGameState;
};

Module.prototype.constructor = Module;

module.exports = Module;
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js":[function(require,module,exports){
var Cube = require('./cube');
var Module = require('./Module');
var Bullet = require('./Bullet');

var thrustAmt = 5000;

//Use this to create a moduleBuilder- only need to create one instance of it
var ModuleBuilder = function(setGameState, setColGroup) {
	//Ensure that cannot create multiple instances of this class
	if(ModuleBuilder.prototype.exists) {
		return ModuleBuilder.prototype.existingReference;
	}
		
	this.gameState = setGameState;
   this.colGroup = setColGroup;
	// this.coreExists = false;	//records if core has been created
	this.core = null;			//stores core when it is created
	//var space = this.gameState.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
	ModuleBuilder.prototype.exists = true;
	ModuleBuilder.prototype.existingReference = this;
};

ModuleBuilder.prototype.constructor = ModuleBuilder;

//These var's help create the singleton functionality
ModuleBuilder.prototype.exists = false;
ModuleBuilder.prototype.existingReference = null;

/** Module functions **/
function solarPanelGiveTarget(target) {
   if (this === target || !this.cube.group || !target.cube.group || this.cube.group !== target.cube.group) {
      return;
   }
   this.cube.loseConnection();
   var ourGroup = this.cube.group;
   var newConnection = {start: this.cube, end: target.cube};
   this.cube.myConnection = newConnection;
   target.cube.myConnection = newConnection;
   ourGroup.displayConnection(this.cube.myConnection);
	if(!target.isActive) {
		//Activate the module
		target.isActive = true;
		this.modulePower.play();
		if(target.type === 'hacker') {
			ourGroup.activeHackerModules.push(target);
		}
		//If this is one of the powerable types, switch the frame from 'greyed' to 'active'
		if(target.type === 'gun' || target.type === 'hacker' || target.type === 'thruster') {
			target.cube.frame = 1;
		}
	}
}

function solarPanelMouseOver() {
   if (!this.cube.myConnection || !this.cube.group) {
      return;
   }
   this.cube.group.displayConnection(this.cube.myConnection);
}

function genericOnRemove() {
   this.cube.loseConnection();
}

function hackerOnLoseConnection() {
   var hackIndex = this.gameState.player.activeHackerModules.indexOf(this);
   this.gameState.player.activeHackerModules.splice(hackIndex, 1);
   this.isActive = false;
}

function beginAct() {
   this.timer = 0;
   this.act = true;
}

function endAct() {
   this.act = false;
   this.cube.frame = 1;
}

function thrusterUpdate() {
   if (this.haltTime && this.haltTime > 0) {
      this.haltTime -= this.cube.game.time.elapsed;
      this.cube.frame = 1;
   } else if (this.act && this.cube.myConnection) {
	  if(this.isThrust === true) {
		this.isThrustPrev = true;
	  }
	  this.isThrust = true;
      this.cube.body.force.x = thrustAmt * Math.cos(this.cube.rotation - Math.PI / 2);
      this.cube.body.force.y = thrustAmt * Math.sin(this.cube.rotation - Math.PI / 2);
	  if(this.cube.frame === 1) {
		this.cube.frame = 3;
	  }
	  else {
		this.cube.frame = 2;
	  }
	  if(this.isThrust === true && this.isThrustPrev === false) {
		this.thrusterLoop.play();
	  }
   }
   else if(!this.act) {
	  if(this.isThrust === false) {
		this.isThrustPrev = false;
	  }
	  this.isThrust = false;
	  if(this.isThrust === false && this.isThrustPrev === true) {
		this.thrusterLoop.stop();
	  }
   }
}

function thrusterHalt() {
   this.haltTime = 1500;
}

function gunUpdate() {
   if (!this.cube.myConnection || !this.act) {
      this.cube.animations.stop();
	  return;
   }
   if (this.timer <= 0) {
      var angle = this.cube.body.rotation % (2*Math.PI);
      var direction = [Math.sin(angle), -Math.cos(angle)];
      var deltaDist = Math.sqrt(Math.pow(this.cube.deltaX, 2) + Math.pow(this.cube.deltaY, 2));
      var speed = deltaDist * 50;
      new Bullet(this.gameState, this.cube.x + 30*direction[0], this.cube.y + 30*direction[1], 
               direction, speed, this.tag + 'Bullet');
	  this.gun.play();
      this.timer = 400;
   } else {
      this.timer -= this.gameState.game.time.elapsed;
   }
}

function hackableUpdate() {
   this.hackBar.setLocation(this.cube.x, this.cube.y - 25);
   if (this.barFadeDelay <= 0 && this.hackBar.graphics.alpha > 0) {
      this.hackBar.graphics.alpha -= this.gameState.time.elapsed * this.barFade;
   } else if (this.barFadeDelay > 0) {
      this.barFadeDelay -= this.gameState.time.elapsed;
   }
	//check if getting hacked
	if(!this.isHacked) {
		this.cube.animations.play('hackable');
		if(this.gameState.player.activeHackerModules.length > 0) {
			var dist;
			var hacker;
			//Loop through all hacker modules on the player's cubsat
			for(var i = 0; i < this.gameState.player.activeHackerModules.length; i++) {
				hacker = this.gameState.player.activeHackerModules[i];
				dist = Math.sqrt( Math.pow(this.cube.x - hacker.cube.x, 2) + Math.pow(this.cube.y - hacker.cube.y, 2) );
				if(dist < this.hackDistance) {
					//If hacker is in range, increase hack value and try to emit binary particle
               if (this.beingHacked) {
                  this.beingHackedPrev = true;
               }
               this.beingHacked = true;
					this.hackBar.addValue(0.1);
					hacker.count++;
					if(hacker.count >= hacker.cycle) {
                  this.hackBar.graphics.alpha = 1;
                  this.barFadeDelay = this.barFadeMaxDelay;
						hacker.count = 0;
						this.gameState.BinaryEmitter.emitBinary(this.cube, hacker.cube.x, hacker.cube.y, 60);
						if(hacker.cube.frame === 5) {
							hacker.cube.frame = 0;
						}
						hacker.cube.frame++;
						
					}
				}
				else {
					hacker.cube.animations.stop();
               if(!this.beingHacked) {
						this.beingHackedPrev = false;
					}
					this.beingHacked = false;
				}
			}
		}
	} else if (this.delay < 0) {
      this.hacking.stop();
      this.hackBar.destroy();
      this.cube.dieQuick();
   } else {
      this.hacking.stop();
      this.delay -= this.gameState.time.elapsed;
   }
   if(this.beingHacked === true && this.beingHackedPrev === false) {
		if(this.hacking.paused === true) {
			this.hacking.resume();
		}
		else {
			this.hacking.play();
		}
	}
	else if(this.beingHacked === false && this.beingHackedPrev === true){
		this.hacking.pause();
	}
}
/** End module functions **/

//call this function from ModuleBuilder to construct modules
//TYPES: 'core' 'shield' 'thruster' 'solarPannel' 'hacker'
ModuleBuilder.prototype.build = function(type, x, y, forPlayer) {	
	//Create cube object to be stored within module
	//Sprite names for modules are directly mapped to module names, so just pass 'type' as sprite name
	var newCube = new Cube(this.gameState, x, y, type);
    var scale = 0.5;
    newCube.name = this.gameState.debugNum++;
    newCube.scale.setTo(scale, scale);
    newCube.anchor.setTo(0.5, 0.5);
	
	//Create physics for new cube
    this.gameState.game.physics.p2.enable(newCube);
	newCube.body.setCollisionGroup(this.gameState.collisionGroup);
	newCube.body.collides(this.gameState.collisionGroup);
	newCube.body.onBeginContact.add(newCube.cubeCollide, newCube);
   newCube.body.damping = 0.9;
   newCube.body.angularDamping = 0.9;
 
   var cIndicator = this.gameState.add.sprite(0, 0, 'connections', 'connection_line.png');
   cIndicator.anchor.setTo(0.5, 0.5);
   cIndicator.animations.add('end', ['connection_end.png'], 60, true);
   cIndicator.animations.add('line', ['connection_line.png'], 60, true);
   cIndicator.animations.add('right', ['connection_right.png'], 60, true);
   newCube.addChild(cIndicator);
   newCube.cIndicator = cIndicator;
   cIndicator.alpha = 0;
	
	//Create module to wrap around cube class
	var newModule = new Module(type, newCube, this.gameState);
		
	//TODO: edit special module attributes based on 'type'
	if(type === 'hacker') {
		newModule.cycle = 6;
		newModule.count = 0;
		newModule.cube.animations.add('hacker', [0,1,2,3,4], 10, true);
      newModule.onRemove = genericOnRemove;
      newModule.onLoseConnection = hackerOnLoseConnection;
      newModule.powerable = true;
	}
	
	//Store module if it is core
	if(type === 'core')
	{
		newModule.cube.animations.add('core', [0,1,2], 20, true);
		newModule.cube.animations.play('core');
		this.core = newModule;
		this.coreExists = true;
      newModule.onRemove = genericOnRemove;
	}
   
   // solar panel testing
   if (type === 'solarPanel') {
	  newModule.modulePower = this.gameState.add.audio('modulePower', 0.5);
      newModule.giveTarget = solarPanelGiveTarget;
      newModule.mouseOver = solarPanelMouseOver;
      newModule.onRemove = genericOnRemove;
   }
   
   //Thruster module events
	if(type === 'thruster') {
	  newModule.isThrust = false;
	  newModule.isThrustPrev = false;
	  newModule.thrusterLoop = this.gameState.add.audio('thrusterLoop', 1, true);
	  newModule.thrusterLoop.allowMultiple = true;
      if (forPlayer) {
         var thrusterKey = this.gameState.input.keyboard.addKey(Phaser.Keyboard.W); 
         this.gameState.input.keyboard.addKeyCapture([thrusterKey]);
         thrusterKey.onDown.add(beginAct, newModule);
         thrusterKey.onUp.add(endAct, newModule);
      } else {
         // newModule.thrust = false;
         newModule.beginAct = beginAct;
         newModule.endAct = endAct;
      }
      newModule.update = thrusterUpdate;
      newModule.thrusterHalt = thrusterHalt;
      newModule.onRemove = genericOnRemove;
      newModule.powerable = true;
	}

	//Gun module events
	if(type === 'gun') {
	  newModule.cube.animations.add('gun', [0,1,2,3,4,5], 16, true);
	  newModule.gun = this.gameState.add.audio('gun');
	  newModule.gun.allowMultiple = true;
      if (forPlayer) {
	     newModule.tag = 'player';
         var actKey = this.gameState.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
         this.gameState.input.keyboard.addKeyCapture([actKey]);
         actKey.onDown.add(beginAct, newModule);
         actKey.onUp.add(endAct, newModule);
      } else {
		 newModule.tag = 'enemy';
         newModule.beginAct = beginAct;
         newModule.endAct = endAct;
      }
	  newModule.update = gunUpdate;
     newModule.onRemove = genericOnRemove;
     newModule.powerable = true;
	}
   
   if (type === 'hackable') {
      // set values
      newModule.isHacked = false;
      newModule.hackDistance = 400;
      newModule.cube.animations.add('hackable', [0,1,2,3,4], 10, true);
      newModule.cube.animations.add('hacked', [5,6,7,8,9], 10, true);
      newModule.barFade = 0.001;
      newModule.barFadeMaxDelay = 200;
      newModule.barFadeDelay = 0;
      newModule.delay = 1600;
      newModule.beingHacked = false;
      newModule.beingHackedPrev = false;
      newModule.hacking = this.gameState.add.audio('hacking', 1, true);
      // give progress bar
      newModule.hackBar = this.gameState.uiBuilder.buildProgressBar('growing', 1500, 1200, 100, 10,  200);
      newModule.hackBar.setStyle(0, 0xFFFFFF, 0x363636, 0, 0, 0, 0xFFFFFF, 0x2020CC);
      newModule.hackBar.hackable = newModule.cube;
      newModule.hackBar.onEvent = function() {
         this.hackable.animations.stop();
         this.hackable.animations.play('hacked');
         this.hackable.module.isHacked = true;
      };
      // add functions
      newModule.update = hackableUpdate;
      newModule.onRemove = genericOnRemove;
   }
	//Return the module object
	return newModule;
};

module.exports = ModuleBuilder;
















},{"./Bullet":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\Bullet.js","./Module":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\Module.js","./cube":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\asteroids.js":[function(require,module,exports){
var Asteroids = function(state, simplify) {
   // initialise
	this.state = state;
   this.simplify = simplify;
   this.game = this.state.game;
   this.cam = this.game.camera;
   this.numRoids = 0;
   this.maxRoids = 100;
   this.asteroids = this.game.add.group();
	this.asteroids.enableBody = true;
	this.asteroids.physicsBodyType = Phaser.Physics.P2JS;
	this.asteroidList = new Phaser.ArraySet();
	if (!this.simplify) { this.generateAsteroids(); }
};

Asteroids.prototype.constructor = Asteroids;

Asteroids.prototype.update = function() {
   
};

Asteroids.prototype.generateAsteroids = function() {
  for(; this.numRoids < this.maxRoids; this.numRoids++) {
      var randX = this.game.rnd.integerInRange(0, this.game.world.width);
      var randY = this.game.rnd.integerInRange(0, this.game.world.height);
      /* TODO: prevent collision spawning
      while(randX < this.coreModule.cube.x - (this.player.cubesWidth() / 2 + 100) && randX > this.coreModule.cube.x + (this.player.cubesWidth() / 2 + 100) &&
      randY < this.coreModule.cube.y - (this.player.cubesHeight() / 2 + 100) && randY > this.coreModule.cube.y + (this.player.cubesHeight() / 2 + 100)) {
         randX = this.game.rnd.integerInRange(0, this.game.world.width);
         randY = this.game.rnd.integerInRange(0, this.game.world.height);
      }
      */
      var asteroid = this.asteroids.create(randX, randY, 'asteroid');
      asteroid.body.clearShapes(); 
      asteroid.body.loadPolygon('asteroidPolygon', 'asteroid'); //Change the collision detection from an AABB to a polygon
      asteroid.body.damping = this.game.rnd.realInRange(0, 0.3) * this.game.rnd.integerInRange(0, 1) * this.game.rnd.integerInRange(0, 1);
      asteroid.body.rotation = this.game.rnd.realInRange(0, 2 * Math.PI);
      asteroid.body.force.x = this.game.rnd.integerInRange(-10, 10) * 750;
      asteroid.body.force.y = this.game.rnd.integerInRange(-10, 10) * 750;
      asteroid.body.setCollisionGroup(this.state.collisionGroup);
      asteroid.body.collides(this.state.collisionGroup);
      asteroid.body.collideWorldBounds = false;
      asteroid.autoCull = true;
      asteroid.checkWorldBounds = true;
      asteroid.events.onOutOfBounds.add(this.resetAsteroid, {caller: this, asteroid: asteroid});
      this.asteroidList.add(asteroid);
   }
};

Asteroids.prototype.resetAsteroid = function() {
   var randX = this.caller.game.rnd.integerInRange(0, this.caller.game.world.width);
   var randY = this.caller.game.rnd.integerInRange(0, this.caller.game.world.height);
   // TODO: prevent overlap on reset
   this.asteroid.x = randX;
   this.asteroid.y = randY;
   this.asteroid.body.rotation = this.caller.game.rnd.realInRange(0, 2 * Math.PI);
   this.asteroid.body.force.x = this.caller.game.rnd.integerInRange(-10, 10) * 750;
   this.asteroid.body.force.y = this.caller.game.rnd.integerInRange(-10, 10) * 750;
};

module.exports = Asteroids;















},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cheating.js":[function(require,module,exports){
var Cheating = function(state) {
   // initialisation
	this.state = state;
   this.game = state.game;
   this.cam = this.game.camera;
   this.mouse = this.state.mouse;
   // buttons
   //core
	this.placeCoreKey = this.game.input.keyboard.addKey(Phaser.Keyboard.P);
	this.placeCoreKey.onDown.add(this.debugAddModule, {caller: this, key: 'core'});
	//shield
	this.placeShieldKey = this.game.input.keyboard.addKey(Phaser.Keyboard.O);
    this.placeShieldKey.onDown.add(this.debugAddModule, {caller: this, key: 'shield'});
	//thruster
	this.placeThrusterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.I);
    this.placeThrusterKey.onDown.add(this.debugAddModule, {caller: this, key: 'thruster'});
	//solarPanel
	this.placeSPKey = this.game.input.keyboard.addKey(Phaser.Keyboard.U);
    this.placeSPKey.onDown.add(this.debugAddModule, {caller: this, key: 'solarPanel'});
	//hacker
	this.placeHackKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Y);
	this.placeHackKey.onDown.add(this.debugAddModule, {caller: this, key: 'hacker'});
	//gun
	this.placeGunKey = this.game.input.keyboard.addKey(Phaser.Keyboard.T);
    this.placeGunKey.onDown.add(this.debugAddModule, {caller: this, key: 'gun'});
	//hackable
	this.placeHackableKey = this.game.input.keyboard.addKey(Phaser.Keyboard.L);
   this.placeHackableKey.onDown.add(this.debugAddModule, {caller: this, key: 'hackable'});
   // reseting
   this.resetKey = this.game.input.keyboard.addKey(Phaser.Keyboard.M);
   this.resetKey.onDown.add(this.reset, this);
};

Cheating.prototype.constructor = Cheating;

Cheating.prototype.debugAddModule = function() {
   this.caller.state.moduleBuilder.build(this.key, this.caller.mouse.x, this.caller.mouse.y, true);
};

Cheating.prototype.reset = function() {
  this.state.levelSetup.restartLevel(); 
};

module.exports = Cheating;














},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube.js":[function(require,module,exports){
/*
Defines a cube.
*/

var Cube = function (state, x, y, sprite) {
    Phaser.Sprite.call(this, state.game, x, y, sprite);
	 this.tag = 'module';	//tag is used to detect object type during collision checking
	 this.state = state;
    this.game = this.state.game;
    this.game.add.existing(this);
    this.group = undefined;
    this.module = undefined;
    this.indicatorFade = 0.02;
    this.healthBar = this.state.uiBuilder.buildProgressBar('shrinking', 0, 0, 20, 4, 3);
	this.healthBar.setStyle(0, 0xFFFFFF, 0x363636, 0, 0, 0, 0xFFFFFF, 0x20CC20);
	this.healthBar.cube = this;
	this.healthBarFade = 0.0008;
	this.impact = this.game.add.audio('moduleImpact');
	this.impact.volume = 0.25;
	this.impact.allowMultiple = true;
	//set update function of health bar
	this.healthBar.update = function() {
		this.setLocation(this.cube.x, this.cube.y+10);
	};
	//onEvent called when cube runs out of health
	this.healthBar.onEvent = function() {
		this.cube.dying = true;
		this.cube.life = 50;
		// this.group.countCubes();
		// this.destroy();
	};
	this.constraints = [];
};

Cube.prototype = Object.create(Phaser.Sprite.prototype);
Cube.prototype.constructor = Cube;

/**
 * Automatically called by World.update
 */
Cube.prototype.update = function() {
   if (this.cIndicator && this.cIndicator.alpha > 0) {
      this.cIndicator.alpha -= this.indicatorFade;
   }
   if (this.module.update) {
      this.module.update();
   }
   if (this.healthBar.graphics.alpha > 0) {
      this.healthBar.graphics.alpha -= this.healthBarFade * this.game.time.elapsed;
   }
   if (this.dying) {
      this.life -= this.game.time.elapsed;
      if (this.life < 0) {
         this.dying = false;
         this.healthBar.destroy();
         if (this.group) {
            if(this.tag === 'enemy_module') {
               if(this.key === 'thruster') {
                  this.state.shop.addMoney(35);
               }
               else if(this.key === 'shield') {
                  this.state.shop.addMoney(10);
               }
               else if(this.key === 'gun') {
                  this.state.shop.addMoney(50);
               }
               else if(this.key === 'solarPanel') {
                  this.state.shop.addMoney(25);
               }
            }
            this.group.destroyCube(this);
         } else {
            if(this.key === 'core' && this.tag === 'module') {
               this.kill();
               this.state.restartLevel();
            }
            this.destroy();
         }
      }
   }
};

Cube.prototype.loseConnection = function() {
  if (!this.myConnection) {
    return;
  }  
  if (this.myConnection.start === this) {
      var endModule = this.myConnection.end.module;
      if (endModule.hasOwnProperty('onLoseConnection')) {
         endModule.onLoseConnection();
      }
      this.myConnection.end.myConnection = undefined;
      this.myConnection = undefined;
   } else if (this.myConnection.end === this) {
      var startModule = this.myConnection.end.module;
      if (startModule.hasOwnProperty('onLoseConnection')) {
         startModule.onLoseConnection();
      }
      this.myConnection.start.myConnection = undefined;
      this.myConnection = undefined;
   }
};

Cube.prototype.cubeCollide = function(other) {
   // bad collision, collision with non-sprite, collision with non-cube
   if (!other || !other.sprite || other.prototype !== this.prototype) {
      return;
   }
   if (!this.group && other.sprite.group && other.sprite.group.isPlayer) { // floating hitting player
      other.sprite.group.handleAttatch(other.sprite, this);
   } else if (other.group && this.group === other.group) {// if cubes in same group
      // magic conch, what should we do here?
   } else if (this.group) {
      if (this.group.isPlayer) { // player
         if (other.sprite.tag === 'enemy_module') { // collision with enemy, ramming
            this.group.handleRamming(this, other.sprite);
         }
      } else {// enemy
         this.group.handleRamming(this, other.sprite); // enemies only ram on collision
      }
      this.group.countCubes();
   }
};

Cube.prototype.toString = function() {
   var string = '';
   string += this.concat('name', this.name);
   return string;
};

Cube.prototype.concat = function(string, val) {
   return string + ': ' + val + '\n';
};

Cube.prototype.displayIndicator = function() {
  this.cIndicator.alpha = 1; 
};

Cube.prototype.hideIndicator = function() {
  this.cIndicator.alpha = 0; 
};

Cube.prototype.takeDamage = function(amt) {
   this.impact.play();
   this.healthBar.addValue(-amt);
   this.healthBar.graphics.alpha = 1;
};

Cube.prototype.dieQuick = function() {
  this.dying = true;
  this.life = 0;
};

Cube.prototype.remove = function() {
   if (!this.group) {
      return;
   }
   this.group.remove(this);
};

module.exports = Cube;















},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js":[function(require,module,exports){
var Astar = require('../libs/javascript-astar/astar');
var EnemyAI = require('./enemy_ai');

/*
Defines a cube group.
*/

var CubeGroup = function (state, root) {
   this.state = state;
   this.game = this.state.game;
   this.root = root;
   this.cubes = [];
   var col = [];
   col.push(this.root);
   this.cubes.push(col);
   if (this.root) {
      this.root.group = this;
   }
   this.DIR = {NORTH: 0, EAST: 1, SOUTH: 2, WEST: 3};
   this.offset = 2;
	this.activeHackerModules = [];	//list of hacker modules in this group
	this.moduleConnect = this.game.add.audio('moduleConnect');
	this.moduleConnect.allowMultiple = true;
   this.numCubes = 1;
   this.bounceBackForce = 30;
   this.minRamVel = 300;
   this.debug = false;
   this.debugHandleAttatch = false;
   this.debugCreateConstraints = false;
};

CubeGroup.prototype.constructor = CubeGroup;

/**
 * Automatically called by World.update
 */
CubeGroup.prototype.update = function() {
   if (this.AI) {
      this.AI.update();
   }
};

CubeGroup.prototype.call = function(fun) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.hasOwnProperty(fun)) {
            // if cubes need functions called
         } else if (cube && cube.module && cube.module.hasOwnProperty(fun)) {
            var fn = cube.module[fun];
            if (typeof fn === 'function') {
               fn.call(cube.module);
            }
         }
      }
   }
};

CubeGroup.prototype.callOnType = function(fun, type) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.hasOwnProperty(fun)) {
            // if cubes need functions called
         } else if (cube && cube.module && cube.module.type === type && cube.module.hasOwnProperty(fun)) {
            var fn = cube.module[fun];
            if (typeof fn === 'function') {
               fn.call(cube.module);
            }
         }
      }
   }
};

CubeGroup.prototype.getModules = function(type) {
   var modules = [];
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.module.type === type) {
            modules.push(cube.module);
         }
      }
   }
   return modules;
};

CubeGroup.prototype.giveAI = function(type, player) {
   this.AI = new EnemyAI(this.game, this, type, player);
};

CubeGroup.prototype.add = function(cube, point) {
  if (!this.root && cube.module.type === 'core') {
     this.root = cube;
  }
  cube.group = this;
  this.set(cube, point);
  this.createConstraintsSpecial(cube);
};

CubeGroup.prototype.handleAttatch = function(origin, other) {
   if (this.debugHandleAttatch) { console.log('handleCollision() start:', origin.module.type, other.module.type); }
   if (this.debugHandleAttatch) { this.displayCubes(); }
   if (this.get(other)) {
      console.log('handleAttatch() was given a member');
      return;
   }
   var relSide = this.relativeSide(origin.body, other.body);
   var originLoc = this.find(origin);
   var otherLoc = this.calcPos(origin, relSide);
   this.moduleConnect.play();
   if (this.debugHandleAttatch) console.log('handleCollision() pre-find:', 'relSide:', relSide, 'originLoc:', Math.floor(originLoc.x), Math.floor(originLoc.y), 'otherLoc:', Math.floor(otherLoc.x), Math.floor(otherLoc.y)); // jshint ignore:line
   this.set(other, otherLoc);
   otherLoc = this.find(other); // update position since set can shift grid
   if (!otherLoc) {
      if (this.debugHandleAttatch) {
         console.log('handleCollision(): otherLoc DNE', '---------------------');
         this.displayCubes();
      }
      return;
   }
   var relativeNorth = this.relativeNorth(other); // other's north points this dir relative to the root
   if (this.debugHandleAttatch) { console.log('handleCollision() post-find:', 'otherLoc:', Math.floor(otherLoc.x), Math.floor(otherLoc.y), 'relativeNorth:', relativeNorth); }
   this.createConstraints(other, otherLoc, relativeNorth);
   if (other.module.type === 'solarPanel') {
      this.createConnectionFrom(other);
   } else if (other.module.powerable) {
      var spareSolarPanel = this.spareSolarPanel();
      if (spareSolarPanel) {
         spareSolarPanel.giveTarget(other.module);
      }
   }
   if (this.debugHandleAttatch) { this.displayCubes(); }
   if (this.debugHandleAttatch) { console.log('handleCollision() end:', '------------------------------'); }
};

CubeGroup.prototype.relativeNorth = function(cube) {
   var diffAngle = cube.body.rotation - this.root.body.rotation;
   var relative = this.angleToDir(diffAngle);
   return relative;
};

CubeGroup.prototype.createConnectionFrom = function(panel) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube !== panel && !cube.myConnection && cube.module.powerable) {
            panel.module.giveTarget(cube.module);
            return;
         }
      }
   }
};

CubeGroup.prototype.spareSolarPanel = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && !cube.myConnection && cube.module.type === 'solarPanel') {
            return cube.module;
         }
      }
   }
};

CubeGroup.prototype.handleRamming = function(origin, other) {
   if (!other.group || other.group === this) {
      return;
   }
   var sumVel = Math.abs(origin.body.velocity.x) + Math.abs(origin.body.velocity.y);
   if (this.debug) { console.log('handleRamming():', 'sumVel:', sumVel.toPrecision(4)); }
   if (sumVel >= this.minRamVel) {
      if (this.game.juicy) {
         this.game.juicy.shake();
      }
      other.takeDamage(3);
      this.call('thrusterHalt');
   }
};

CubeGroup.prototype.calcPos = function(origin, relSide) {
   var diffAngle = origin.body.rotation - this.root.body.rotation;
   var relative = this.angleToDir(diffAngle);
   var output = this.find(origin);
   if (!output) {
      return;
   }
   if (relative === 0) { // north relative to the root
      if (relSide === 0) {
         output.y++;
      } else if (relSide === 1) {
         output.x++;
      } else if (relSide === 2) {
         output.y--;
      } else if (relSide === 3) {
         output.x--;
      }
   } else if (relative === 1) { // east relative to root
      if (relSide === 0) {
         output.x++;
      } else if (relSide === 1) {
         output.y--;
      } else if (relSide === 2) {
         output.x--;
      } else if (relSide === 3) {
         output.y++;
      }
   } else if (relative === 2) { // south relative to root
      if (relSide === 0) {
         output.y--;
      } else if (relSide === 1) {
         output.x--;
      } else if (relSide === 2) {
         output.y++;
      } else if (relSide === 3) {
         output.x++;
      }
   } else if (relative === 3) { // west relative to root
      if (relSide === 0) {
         output.x--;
      } else if (relSide === 1) {
         output.y++;
      } else if (relSide === 2) {
         output.x++;
      } else if (relSide === 3) {
         output.y--;
      }
   }
   return output;
};

CubeGroup.prototype.angleToDir = function(angle) {
   if (angle >= 0) {
     angle %= 2 * Math.PI;
  } else {
     angle *= -1;
     angle %= 2 * Math.PI;
     angle *= -1;
  }
  if (this.debug) { console.log('angleToDir():', 'angle:', angle.toPrecision(4)); }
  if ((angle >= -1 / 4 * Math.PI && angle < 1 / 4 * Math.PI) || angle > 7 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case one NORTH'); }
     return this.DIR.NORTH;
  } else if (angle >= 1 / 4 * Math.PI && angle < 3 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case two EAST'); }
     return this.DIR.EAST;
  } else if (angle >= 3 / 4 * Math.PI && angle < 5 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case three SOUTH'); }
     return this.DIR.SOUTH;
  } else if (angle >= 5 / 4 * Math.PI && angle < 7 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case four WEST'); }
     return this.DIR.WEST;
  } else if (angle >= -3 / 4 * Math.PI && angle < -1 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case five WEST'); }
     return this.DIR.WEST;
  } else if (angle >= -5 / 4 * Math.PI && angle < -3 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case six SOUTH'); }
     return this.DIR.SOUTH;
  } else if (angle >= -7 / 4 * Math.PI && angle < -5 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case seven EAST'); }
     return this.DIR.EAST;
  } else if (angle < -7 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case eight NORTH'); }
     return this.DIR.NORTH;
  }
};

CubeGroup.prototype.dirToNeighbourRelative = function(pointA, pointB) {
  if (pointA.x > pointB.x) { // neighbour is to the left
      return this.DIR.WEST;
  } else if (pointA.x < pointB.x) { // neighbour is to the right
      return this.DIR.EAST;
  } else if (pointA.y > pointB.y) { // neighbour is to below
     return this.DIR.SOUTH;
  } else { // neighbour is above
     return this.DIR.NORTH;
  }
};

CubeGroup.prototype.decideSideRelative = function(pointA, pointB, relativeNorth) {
  if (pointA.x > pointB.x) { // neighbour is to the left
   if (relativeNorth === this.DIR.NORTH) {
      return this.DIR.WEST;
   } else if (relativeNorth === this.DIR.EAST) {
      return this.DIR.SOUTH;
   } else if (relativeNorth === this.DIR.SOUTH) {
      return this.DIR.EAST;
   } else if (relativeNorth === this.DIR.WEST) {
      return this.DIR.NORTH;
   }
  } else if (pointA.x < pointB.x) { // neighbour is to the right
      if (relativeNorth === this.DIR.NORTH) {
         return this.DIR.EAST;
      } else if (relativeNorth === this.DIR.EAST) {
         return this.DIR.NORTH;
      } else if (relativeNorth === this.DIR.SOUTH) {
         return this.DIR.WEST;
      } else if (relativeNorth === this.DIR.WEST) {
         return this.DIR.SOUTH;
      }
  } else if (pointA.y > pointB.y) { // neighbour is to below
     if (relativeNorth === this.DIR.NORTH) {
         return this.DIR.SOUTH;
      } else if (relativeNorth === this.DIR.EAST) {
         return this.DIR.EAST;
      } else if (relativeNorth === this.DIR.SOUTH) {
         return this.DIR.NORTH;
      } else if (relativeNorth === this.DIR.WEST) {
         return this.DIR.WEST;
      }
  } else { // neighbour is above
     if (relativeNorth === this.DIR.NORTH) {
         return this.DIR.NORTH;
      } else if (relativeNorth === this.DIR.EAST) {
         return this.DIR.WEST;
      } else if (relativeNorth === this.DIR.SOUTH) {
         return this.DIR.SOUTH;
      } else if (relativeNorth === this.DIR.WEST) {
         return this.DIR.EAST;
      }
  }
};

CubeGroup.prototype.createConstraints = function(me, myPoint, relativeNorth) {
   var neighbours = this.getNeighbours(me);
   for (var i = 0; i < neighbours.length; i++) {
      var neighbour = neighbours[i];
      var neighbourPoint = this.find(neighbour);
      var neighbourRelativeNorth = this.relativeNorth(neighbour);
      var mySide = this.decideSideRelative(myPoint, neighbourPoint, relativeNorth);
      var neighbourSide = this.decideSideRelative(neighbourPoint, myPoint, neighbourRelativeNorth);
      if (this.debugCreateConstraints) { console.log('createConstraints():', 'mySide:', mySide, 'neighbourSide:', neighbourSide); }
      var constraint;
      var offset = me.width + this.offset;
      if (mySide === 0) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 1 / 2 * Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 0);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 3 / 2 * Math.PI);
        }
     } else if (mySide === 1) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], -1 / 2 * Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], 1 / 2 * Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], 0);
        }
     } else if (mySide === 2) {
         if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 0);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 3 / 2 * Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 1 / 2 * Math.PI);
        }
     } else if (mySide === 3) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], 1 / 2 * Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], 0);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], -1 / 2 * Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], Math.PI);
        }
     }
     me.constraints.push(constraint);
     neighbour.constraints.push(constraint);
   }
};

CubeGroup.prototype.createConstraintsSpecial = function(me) {
   var neighbours = this.getNeighbours(me);
   for (var i = 0; i < neighbours.length; i++) {
      var neighbour = neighbours[i];
      var mySide = this.relativeSide(me.body, neighbour.body);
      var neighbourSide = this.relativeSide(neighbour.body, me.body);
      if (this.debugCreateConstraints) { console.log('createConstraintsSpecial():', 'mySide:', mySide, 'neighbourSide:', neighbourSide); }
      var constraint;
      var offset = me.width + this.offset;
      if (mySide === 0) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 1 / 2 * Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 0);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, offset], 3 / 2 * Math.PI);
        }
     } else if (mySide === 1) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], -1 / 2 * Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], 1 / 2 * Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [-offset, 0], 0);
        }
     } else if (mySide === 2) {
         if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 0);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 3 / 2 * Math.PI);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [0, -offset], 1 / 2 * Math.PI);
        }
     } else if (mySide === 3) {
        if (neighbourSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], 1 / 2 * Math.PI);
        } else if (neighbourSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], 0);
        } else if (neighbourSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], -1 / 2 * Math.PI);
        } else if (neighbourSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbour.body, [offset, 0], Math.PI);
        }
     }
     me.constraints.push(constraint);
     neighbour.constraints.push(constraint);
   }
};

CubeGroup.prototype.relativeSide = function(thisBody, otherBody) {
  var thisPoint = new Phaser.Point(thisBody.x, thisBody.y);
  var otherPoint = new Phaser.Point(otherBody.x, otherBody.y);
  var angleToOther = this.angleBetweenPoints(thisPoint, otherPoint);
  var diffAngle = angleToOther - thisBody.rotation;
  var returnDir = this.angleToDir(diffAngle);
  if (this.debug) { console.log('relativeSide():', 'angleToOther:', angleToOther.toPrecision(4), 'thisBody.rotation:', thisBody.rotation.toPrecision(4), 'diffAngle:', diffAngle.toPrecision(4), 'returnDir:', returnDir); }
  return returnDir;
};

CubeGroup.prototype.angleBetweenPoints = function(thisPoint, otherPoint) {
  var angleToOther = Phaser.Point.angle(thisPoint, otherPoint);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
   return angleToOther;
};

CubeGroup.prototype.find = function(cube) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col] === cube) {
            return new Phaser.Point(row, col);
         }
      }
   }
   return undefined;
};

CubeGroup.prototype.get = function(point) {
  if (!point || this.outOfBounds(point)) {
      return;
  }
  return this.cubes[point.x][point.y];
};

CubeGroup.prototype.cubesWidth = function() {
   return this.cubes.length;
};

CubeGroup.prototype.cubesHeight = function() {
   return this.cubes[0].length;
};

CubeGroup.prototype.addTopRow = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].push(undefined);
   }
};

CubeGroup.prototype.addRightCol = function() {
   var newCol = [];
   for (var i = 0; i < this.cubesHeight(); i++) {
      newCol.push(undefined);
   }
   this.cubes.push(newCol);
};

CubeGroup.prototype.addBotRow = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].unshift(undefined);
   }
};

CubeGroup.prototype.addLeftCol = function() {
   var newCol = new Array(this.cubesHeight());
   this.cubes.unshift(newCol);
};

CubeGroup.prototype.getCube = function(point) {
   if (!point || this.outOfBounds(point)) {
      return undefined;
   }
   return this.cubes[point.x][point.y];
};

CubeGroup.prototype.adjust = function(point, dir) {
  if (!point) {
     return;
  }
  var newPoint = new Phaser.Point(point.x, point.y);
  switch (dir) {
      case this.DIR.NORTH:
      newPoint.y++;
      break;
      case this.DIR.EAST:
      newPoint.x++;
      break;
      case this.DIR.SOUTH:
      newPoint.y--;
      break;
      case this.DIR.WEST:
      newPoint.x--;
      break;
   }
   return newPoint;
};

CubeGroup.prototype.set = function(cube, point) {
   if (!point) {
      console.log('set given undefined point');
      return;
   }
   if (point.x < 0) {
      if (this.debug) { console.log('add left col'); }
      this.addLeftCol();
      point.x = 0;
   } else if (point.x >= this.cubesWidth()) {
      if (this.debug) { console.log('add right col'); }
      this.addRightCol();
      point.x = this.cubesWidth() - 1;
   } else if (point.y < 0) {
      if (this.debug) { console.log('add bot row'); }
      this.addBotRow();
      point.y = 0;
   } else if (point.y >= this.cubesHeight()) {
      if (this.debug) { console.log('add top row'); }
      this.addTopRow();
      point.y = this.cubesHeight() - 1;
   }
   if (this.get(point)) {
      return;
   }
   this.cubes[point.x][point.y] = cube;
   cube.group = this;
};

CubeGroup.prototype.outOfBounds = function(point) {
   if (!point) {
      console.log('out of bounds given undefined point');
      return;
   }
   if (point.x < 0 || point.x >= this.cubesWidth() || point.y < 0 || point.y >= this.cubesHeight()) {
      return true;
   }
   return false;
};

CubeGroup.prototype.displayCubes = function() {
   var output = 'displayCubes():\n';
   var row = 0;
   var col = this.cubesHeight() - 1;
   while (col >= 0) {
      while (row < this.cubesWidth()) {
         var cube = this.cubes[row][col];
         if (cube) {
            switch (cube.module.type) {
               case 'shield':
               output += 'S ';
               break;
               case 'core':
               output += 'C ';
               break;
               case 'thruster':
               output += 'T ';
               break;
               case 'solarPanel':
               output += 'P ';
               break;
               case 'hacker':
               output += 'H ';
               break;
               case 'gun':
               output += 'G ';
               break;
            }
         } else {
            output += '_ ';
         }
         row++;
      }
      row = 0;
      col--;
      output += '\n';
   }
   console.log(output);
};

CubeGroup.prototype.displayConnection = function(connection) {
   this.hideOtherConnections(connection);
   var graph = new Astar.Graph(this.cubesToGraph());
   var startPoint = this.find(connection.start);
   var endPoint = this.find(connection.end);
   if (!startPoint || !endPoint) {
      console.log('displayConnection failed to get points');
      return;
   }
   var start = graph.grid[startPoint.x][startPoint.y];
   var end = graph.grid[endPoint.x][endPoint.y];
   var result = Astar.astar.search(graph, start, end);
   result.unshift(start);
   var previous;
   for(var i = 0; i < result.length; i++) {
      var curPoint = new Phaser.Point(result[i].x, result[i].y);
      var curCube = this.get(curPoint);
      var indicator = curCube.cIndicator;
      var prevPoint;
      var nextPoint;
      var side;
      var prevCube;
      var nextCube;
      if (!previous) {
         indicator.animations.play('end');
         nextPoint = new Phaser.Point(result[i+1].x, result[i+1].y);
         nextCube = this.get(nextPoint);
         side = this.relativeSide(curCube.body, nextCube.body);
         indicator.rotation = this.dirToAngle(side);
      } else if (i === result.length - 1) {
         indicator.animations.play('end');
         prevPoint = new Phaser.Point(previous.x, previous.y);
         prevCube = this.get(prevPoint);
         side = this.relativeSide(curCube.body, prevCube.body);
         indicator.rotation = this.dirToAngle(side);
      } else {
         indicator.animations.play('line');
         prevPoint = new Phaser.Point(previous.x, previous.y);
         nextPoint = new Phaser.Point(result[i+1].x, result[i+1].y);
         prevCube = this.get(prevPoint);
         nextCube = this.get(nextPoint);
         var prevSide = this.relativeSide(curCube.body, prevCube.body);
         var nextSide = this.relativeSide(curCube.body, nextCube.body);
         this.manageIndicator(indicator, prevSide, nextSide);
      }
      previous = result[i];
      curCube.displayIndicator();
    }
};

CubeGroup.prototype.manageIndicator = function(indicator, prevDir, nextDir) {
  indicator.scale.setTo(Math.abs(indicator.scale.x), indicator.scale.y);
  if (prevDir === this.DIR.NORTH && nextDir === this.DIR.SOUTH) { // 2
      if (this.debug) { console.log('case 2'); }
      indicator.rotation = Math.PI;
   } else if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.NORTH) { // 1
      if (this.debug) { console.log('case 1'); }
      indicator.rotation = 0;
   } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.WEST) { // 4
      if (this.debug) { console.log('case 4'); }
      indicator.rotation = 1 / 2 * Math.PI;
   } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.EAST) { // 3
      if (this.debug) { console.log('case 3'); }
      indicator.rotation = 3 / 2  * Math.PI;
   } else {
      indicator.animations.play('right');
      if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.EAST) { // 5
         if (this.debug) { console.log('case 5'); }
         indicator.rotation = 0;
      } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.SOUTH) { // 6
         if (this.debug) { console.log('case 6'); }
         indicator.rotation = 1 / 2 * Math.PI;
      } else if (prevDir === this.DIR.NORTH && nextDir === this.DIR.WEST) { // 7
         if (this.debug) { console.log('case 7'); }
         indicator.rotation = Math.PI;
      } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.NORTH) { // 8
         if (this.debug) { console.log('case 8'); }
         indicator.rotation = 3 / 2 * Math.PI;
      } else {
         indicator.scale.setTo(-Math.abs(indicator.scale.x), indicator.scale.y);
         if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.WEST) { // 9
            if (this.debug) { console.log('case 9'); }
            indicator.rotation = 0;
         } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.NORTH) { // 10
            if (this.debug) { console.log('case 10'); }
            indicator.rotation = 1 / 2 * Math.PI;
         } else if (prevDir === this.DIR.NORTH && nextDir === this.DIR.EAST) { // 11
            if (this.debug) { console.log('case 11'); }
            indicator.rotation = Math.PI;
         } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.SOUTH) { // 12
            if (this.debug) { console.log('case 12'); }
            indicator.rotation = 3 / 2 * Math.PI;
         }
      }
   } 
};

CubeGroup.prototype.hideOtherConnections = function(exception) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.myConnection && cube.myConnection !== exception) {
            cube.hideIndicator();
         }
      }
   }
};

CubeGroup.prototype.cubesToGraph = function() {
  var graph = [];
  for (var row = 0; row < this.cubesWidth(); row++) {
     var newCol = [];
      for (var col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col]) {
            newCol.push(1);
         } else {
            newCol.push(0);
         }
      }
      graph.push(newCol);
   }
   return graph;
};

CubeGroup.prototype.dirBetween = function(a, b) {
   var deltaX = a.x - b.x;
   var deltaY = a.y - b.y;
   if (deltaX > 0) {
      return this.DIR.WEST;
   }
   if (deltaX < 0) {
      return this.DIR.EAST;
   }
   if (deltaY > 0) {
      return this.DIR.SOUTH;
   }
   if (deltaY < 0) {
      return this.DIR.NORTH;
   }
   return this.DIR.NORTH;
};

CubeGroup.prototype.dirToAngle = function(dir) {
  switch (dir) {
   case this.DIR.NORTH:
   return Math.PI;
   case this.DIR.EAST:
   return 3 / 2 * Math.PI;
   case this.DIR.SOUTH:
   return 0;
   case this.DIR.WEST:
   return 1 / 2 * Math.PI;
  }  
};

CubeGroup.prototype.destroyCube = function(cube) {
  var loc = this.find(cube);
  if (!loc) {
     console.log('attempt to destroy cube not in group');
     return;
  }
  // remove cube from group
  this.remove(cube);
  // destroy cube
  if(cube.key === 'core' && cube.tag === 'module') {
	cube.kill();
	// this.state.levelSetup.restartLevel();
  }
  cube.destroy(true);
};

CubeGroup.prototype.remove = function(cube) {
   if (this.debug) { console.log('remove()'); }
   if (this.root === cube) {
      return;
   }
   // remove cube from array
   var row, col;
   for (row = 0; row < this.cubesWidth(); row++) {
      for (col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col] === cube) {
            cube.group = undefined;
            cube.tag = 'module';
            this.cubes[row][col] = undefined;
            break;
         }
      }
   }
   //If this is an active module, splice it from the active list
   if(cube.module.isActive){
	   if(cube.module.type === 'hacker') {
			var hackIndex = this.activeHackerModules.indexOf(cube.module);
			this.activeHackerModules.splice(hackIndex, 1);
	   }
	   cube.module.isActive = false;
   }
   //set sprite of cube to greyed if necisarry
   if(cube.module.type === 'thruster' || cube.module.type === 'gun' || cube.module.type === 'hacker') {
		cube.frame = 0;
   }
   // remove constraints from cube
   this.removeConstraints(cube);
   cube.group = undefined;
   if (cube.module && cube.module.hasOwnProperty('onRemove')) {
      cube.module.onRemove();
   }
   // test for exiles
   for (row = 0; row < this.cubesWidth(); row++) {
      for (col = 0; col < this.cubesHeight(); col++) {
         var exile = this.cubes[row][col];
         if (exile && this.isExile(exile)) {
            this.remove(exile);
         }
      }
   }
   if (this.debug) { this.displayCubes(); }
};

CubeGroup.prototype.removeneighboursConstraint = function(constraint, cube) {
   // console.log('removeneighboursConstraint');
   var neighbours = this.getNeighbours(cube);
   for (var i = 0; i < neighbours.length; i++) {
      var neighbour = neighbours[i];
      for (var j = 0; j < neighbour.constraints.length; j++) {
         if (neighbour.constraints[j] === constraint) {
            neighbour.constraints.splice(j, 1);
         }
      }
   }
};

CubeGroup.prototype.getNeighbours = function(cube) {
   var loc = this.find(cube);
   var north = this.get(this.adjust(loc, this.DIR.NORTH));
   var east = this.get(this.adjust(loc, this.DIR.EAST));
   var south = this.get(this.adjust(loc, this.DIR.SOUTH));
   var west = this.get(this.adjust(loc, this.DIR.WEST));
   var neighbours = [];
   if (north) {
      neighbours.push(north);
   }
   if (east) {
      neighbours.push(east);
   }
   if (south) {
      neighbours.push(south);
   }
   if (west) {
      neighbours.push(west);
   }
   return neighbours;
};

CubeGroup.prototype.removeConstraints = function(cube) {
   // console.log('removeConstraints');
   while (cube.constraints.length > 0) {
      this.removeneighboursConstraint(cube.constraints[0], cube);
      this.game.physics.p2.removeConstraint(cube.constraints[0]);
      cube.constraints.splice(0, 1);
   }
};

// only used to test Astar
CubeGroup.prototype.testPath = function() {
  var graph = new Astar.Graph([
        [1,1,1,1],
        [0,1,1,0],
        [0,0,0,1]
    ]);
   var start = graph.grid[0][0];
   var end = graph.grid[2][3];
   var result = Astar.astar.search(graph, start, end);
   result.unshift(start);
   for(var i = 0; i < result.length; i++) {
      console.log(result[i].x, result[i].y);
    } 
};

CubeGroup.prototype.isExile = function(cube) {
   if (cube === this.root) {
      return;
   }
   var graph = new Astar.Graph(this.cubesToGraph());
   var startPoint = this.find(this.root);
   var endPoint = this.find(cube);
   var start = graph.grid[startPoint.x][startPoint.y];
   var end = graph.grid[endPoint.x][endPoint.y];
   var result = Astar.astar.search(graph, start, end);
   // if no path is found, the cube is an exile
   if (result.length === 0) {
      return true;
   }
   return false;
};

CubeGroup.prototype.countCubes = function() {
	var row, col;
	var num  = 0;
	for (row = 0; row < this.cubesWidth(); row++) {
		for (col = 0; col < this.cubesHeight(); col++) {
			if (this.cubes[row][col] !== undefined) {
				num++;
			}
		}
	}
	//console.log(num);
	this.numCubes = num;
};

module.exports = CubeGroup;

















},{"../libs/javascript-astar/astar":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\libs\\javascript-astar\\astar.js","./enemy_ai":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\enemy_ai.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\enemy_ai.js":[function(require,module,exports){
var Utils = require('../utils.js');

var EnemyAI = function(game, group, type, playerGroup) {
   this.game = game;
   this.group = group;
   this.type = type;
   this.playerGroup = playerGroup;
   this.player = this.playerGroup.root;
   this.ramDist = 500;
   this.shootDist = 500;
   this.rotationForce = 50;
   this.facingAllowance = Math.PI / 15;
   this.acting = false;
   switch (this.type) {
      case 'ram':
      this.allocateTo('thruster');
      break;
      case 'shoot':
      this.allocateTo('gun');
   }
};

EnemyAI.prototype.constructor = EnemyAI;

EnemyAI.prototype.update = function() {
   switch (this.type) {
      case 'ram':
      this.customUpdate('thruster', this.ramDist);
      break;
      case 'shoot':
      this.customUpdate('gun', this.shootDist);
   }
};

EnemyAI.prototype.customUpdate = function(type, threshold) {
   if (!this.group.root) {
      return;
   }
   else if(!this.group.root.body) {
		return;
   }
   var root = this.group.root;
   var myPos = new Phaser.Point(root.x, root.y);
   var playerPos = new Phaser.Point(this.player.x, this.player.y);
   var dist = Utils.distance(myPos.x, myPos.y, playerPos.x, playerPos.y);
   if (dist <= threshold) {
      var angleTo = this.angleTo(myPos, playerPos);
      var diffAngle = angleTo - root.body.rotation;
      if (diffAngle > 0) {
         root.body.angularForce = this.rotationForce;
      } else {
         root.body.angularForce = -this.rotationForce;
      }
      if (Math.abs(diffAngle) <= this.facingAllowance && !this.acting) {
         // this.group.call('beginAct');
         this.group.callOnType('beginAct', type);
         this.acting = true;
         // this.allocateTo(type);
      } else if (Math.abs(diffAngle) > this.facingAllowance && this.acting){
         // this.group.call('endAct');
         this.group.callOnType('endAct', type);
         this.acting = false;
      }
   }
};

EnemyAI.prototype.allocateTo = function(type) {
   var panels = [];
   var types = [];
   for (var row = 0; row < this.group.cubesWidth(); row++) {
      for (var col = 0; col < this.group.cubesHeight(); col++) {
         var cube = this.group.cubes[row][col];
         if (cube && cube.module) {
            if (cube.module.type === 'solarPanel' && !cube.myConnection) {
               panels.push(cube.module);
            } else if (cube.module.type === type && !cube.myConnection) {
               types.push(cube.module);
            }
         }
      }
   }
   var i = 0;
   while (i < types.length && i < panels.length) {
      var tarPanel = panels[i];
      var tarType = types[i];
      var newConnection = {start: tarPanel.cube, end: tarType.cube};
      tarPanel.cube.myConnection = newConnection;
      tarType.cube.myConnection = newConnection;
      this.group.displayConnection(tarPanel.cube.myConnection);
      i++;
   }
};

EnemyAI.prototype.angleTo = function(from, to) {
  var angleToOther = Phaser.Point.angle(from, to);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
  return angleToOther;
};

module.exports = EnemyAI;











},{"../utils.js":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\helper.js":[function(require,module,exports){
var Helper = function(state) {
	this.state = state;
   this.game = this.state.game;
   this.cam = this.game.camera;
   this.sm = this.state.soundManager;
   this.helpBanner = this.state.uiBuilder.buildBanner(0.5, 0.5, 'tutorial_text');
	this.helpButton = this.game.add.button(this.cam.x - 100, this.cam.y - 100, 'helpButton', this.helpBanner.toggle, this.helpBanner, 1, 0, 2);
	this.helpButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.helpButton.onInputDown.add(this.sm.playDownClick, this.sm);
};

Helper.prototype.constructor = Helper;

Helper.prototype.update = function() {
   this.helpButton.x = this.cam.x + 16;
   this.helpButton.y = this.cam.y + 16;
};

module.exports = Helper;
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\level_setup.js":[function(require,module,exports){
var Renderables = require('../functionAccess/Renderables');
var UIBuilder = require('../ui/UIBuilder');
var ModuleBuilder = require('../entities/ModuleBuilder');
var CubeGroup = require('../entities/cube_group');
var Emitter = require('../effects/Emitter');
var Mouse = require('../entities/mouse');
var SoundManager = require('../entities/sound_manager');
var Shop = require('../ui/shop');
var Helper = require('../entities/helper');
var Cheating = require('../entities/cheating');
var Asteroids = require('../entities/asteroids');
var Warning = require('../entities/warning');

var LevelSetup = function(state, level) {
	// initialise
	this.state = state;
   this.game = this.state.game;
   this.level = level;
   // simplify
   this.simplify = false;
   // setup
   this.game.world.setBounds(0, 0, 8000, 4000);
   this.bg = this.game.add.sprite(0, 0, 'earthNight');
	this.bg2 = this.game.add.sprite(-8000, 0, 'earthNight');
   this.game.physics.startSystem(Phaser.Physics.P2JS);
	this.game.physics.p2.setImpactEvents(true);
   this.state.collisionGroup = this.game.physics.p2.createCollisionGroup();
   this.updateDependents = [];
   this.renderables = new Renderables();
   this.state.uiBuilder = new UIBuilder(this.state, this.renderables);
   this.state.moduleBuilder = new ModuleBuilder(this.state);
   this.state.coreModule = this.state.moduleBuilder.build('core', 1200, 1200, true);
	this.cubeWidth = this.state.coreModule.cube.width;
	this.cubeBuffer = 2;
	var playerGroup = new CubeGroup(this.state, this.state.coreModule.cube);
	this.updateDependents.push(playerGroup);
	this.state.player = playerGroup;
	this.state.player.isPlayer = true;
   this.state.BinaryEmitter = new Emitter(this.state);
   this.leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.A);
	this.rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.D);
   this.levelData = JSON.parse(this.game.cache.getText(this.level));
   if (!this.simplify) { this.loadLevel(); }
   this.game.juicy = this.game.plugins.add(new Phaser.Plugin.Juicy(this.state));
   this.game.camera.follow(this.state.coreModule.cube);
   this.mainSong = this.game.add.audio('mainSong', 1, true);
	if (!this.simplify) { this.mainSong.play('', 0,1, true, true); }
   this.state.mouse = new Mouse(this.game, this.state.input, this.state.player);
   this.updateDependents.push(this.state.mouse);
   this.state.soundManager = new SoundManager(this.state);
   this.state.shop = new Shop(this.state);
   this.updateDependents.push(this.state.shop);
   this.helper = new Helper(this.state);
   this.updateDependents.push(this.helper);
   this.cheating = new Cheating(this.state);
   this.asteroids = new Asteroids(this.state, this.simplify);
   this.updateDependents.push(this.asteroids);
   this.warning = new Warning(this.state);
   this.updateDependents.push(this.warning);
};

LevelSetup.prototype.constructor = LevelSetup;

LevelSetup.prototype.update = function() {
   if(this.leftKey.isDown) {
		if(this.state.coreModule.cube.body.angularVelocity > -9) { 
			this.state.coreModule.cube.body.angularForce += -7.5 * Math.pow(this.state.player.numCubes, 1.65);
		}
	}
	if(this.rightKey.isDown) {
		if(this.state.coreModule.cube.body.angularVelocity < 9) {
			this.state.coreModule.cube.body.angularForce += 7.5 * Math.pow(this.state.player.numCubes, 1.65);
		}
	}
   this.bg.x += 0.125;
   if (this.bg.x >= 8000) {
      this.bg.x = 0;
   }
   this.bg2.x += 0.125;
   if (this.bg2.x >= 8000) {
      this.bg2.x = 0;
   }
   for (var i = 0; i < this.updateDependents.length; i++) {
		if (this.updateDependents[i].update) {
			this.updateDependents[i].update();
		}
	}
};

LevelSetup.prototype.loadLevel = function() {
   var myLevel = this.levelData[this.level];
   for (var key in myLevel) {
      if (myLevel.hasOwnProperty(key)) {
         var element = myLevel[key];
         if (element.hasOwnProperty('blueprint')) { // enemy type
            var enemyX = element['x_pos'];
            var enemyY = element['y_pos'];
            var enemyGroup = new CubeGroup(this.state, undefined);
            this.updateDependents.push(enemyGroup);
            var blueprint = element['blueprint'];
            for (var row = 0; row < blueprint.length; row++) {
               for (var col = 0; col < blueprint[row].length; col++) {
                  var type = blueprint[row][col];
                  if (type !== 'none') {
                     var newModule = this.state.moduleBuilder.build(type, enemyX + row * (this.cubeWidth + this.cubeBuffer),
                     enemyY - col * (this.cubeWidth + this.cubeBuffer), false);
                     newModule.cube.tag = 'enemy_module';
                     var point = new Phaser.Point(row, col);
                     enemyGroup.add(newModule.cube, point);
                  }
               }
            }
            var aiType = element['type'];
            enemyGroup.giveAI(aiType, this.state.player);
         }
      }
   } 
};

LevelSetup.prototype.render = function() {
   this.state.mouse.render();
   this.renderables.renderAll(); 
};

LevelSetup.prototype.restartLevel = function() {
   // this.mainSong.stop();
   // this.game.state.start(playerState.currentLevel); // jshint ignore:line
};

module.exports = LevelSetup;


















},{"../effects/Emitter":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\effects\\Emitter.js","../entities/ModuleBuilder":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js","../entities/asteroids":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\asteroids.js","../entities/cheating":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cheating.js","../entities/cube_group":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js","../entities/helper":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\helper.js","../entities/mouse":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\mouse.js","../entities/sound_manager":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\sound_manager.js","../entities/warning":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\warning.js","../functionAccess/Renderables":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\functionAccess\\Renderables.js","../ui/UIBuilder":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\ui\\UIBuilder.js","../ui/shop":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\ui\\shop.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\mouse.js":[function(require,module,exports){
var Utils = require('../utils.js');

var Mouse = function(game, input, playerGroup) {
   this.game = game;
   this.input = input;
	this.body = new p2.Body(); // jshint ignore:line
   this.game.physics.p2.world.addBody(this.body);
   this.input.onDown.add(this.click, this);
   this.input.onUp.add(this.release, this);
   this.input.addMoveCallback(this.move, this);
   this.x = 0;
   this.y = 0;
   this.grabbed = undefined;
   this.lastClicked = undefined;
   this.line = new Phaser.Line(0, 0, 0, 0);
   this.removeThreshold = 50; // distance you must pull to remove module
   this.removeDist = 0; // distance you are pulling
   this.playerGroup = playerGroup;
   // keys
   this.ccwKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Q);
	this.cwKey = this.game.input.keyboard.addKey(Phaser.Keyboard.E);
};

Mouse.prototype.constructor = Mouse;

Mouse.prototype.update = function() {
   if (this.grabbed) {
      var angle = Math.atan2(this.grabbed.sprite.y - (this.input.position.y + this.game.camera.y), this.grabbed.sprite.x - (this.input.position.x+ this.game.camera.x)) + Math.PI;
      var dist = Utils.distance(this.grabbed.sprite.x, this.grabbed.sprite.y, (this.input.position.x+ this.game.camera.x), (this.input.position.y + this.game.camera.y));
      var weight;
	  if(this.grabbed.sprite.key === 'asteroid') {
		weight = 1;
	  }
	  else {
		weight = 10;
	  }
	  if (!this.grabbed.sprite.group) {
         this.grabbed.force.x = Math.cos(angle) * dist * weight;
         this.grabbed.force.y = Math.sin(angle) * dist * weight;
      }
      this.line.setTo(this.grabbed.sprite.x, this.grabbed.sprite.y, (this.input.position.x+ this.game.camera.x), (this.input.position.y + this.game.camera.y));
      var deltaX = this.grabbed.sprite.x - this.x;
	  var deltaY = this.grabbed.sprite.y - this.y;
	  this.removeDist = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
      if(this.grabbed.sprite.tag === 'module') {
		  if (this.removeDist >= this.removeThreshold && this.grabbed.sprite.key !== 'asteroid') {
			 this.grabbed.sprite.remove();
		  }
	  }
    } else {
       this.line.setTo(0, 0, 0, 0);
    }
    var point = new Phaser.Point(this.x, this.y);
    var bodies = this.game.physics.p2.hitTest(point);
    if (bodies.length)
    {
        var hover = bodies[0].parent;
        if (hover.sprite.module && hover.sprite.module.mouseOver) {
           hover.sprite.module.mouseOver();
        }
    }
    // rotate
   if(this.ccwKey.isDown) {
		if(this.grabbed !== undefined && this.grabbed.sprite.group === undefined) {
			this.grabbed.angularForce += -5;
		}
	}
	if(this.cwKey.isDown) {
		if(this.grabbed !== undefined && this.grabbed.sprite.group === undefined) {
			this.grabbed.angularForce += 5;
		}
	}
};

Mouse.prototype.click = function(pointer) {
   var point = new Phaser.Point(pointer.x + this.game.camera.x, pointer.y + this.game.camera.y);
   var bodies = this.game.physics.p2.hitTest(point);
   if (bodies.length)
   {
     var temp = bodies[0].parent;
     this.grabbed = temp;
     if (this.grabbed.sprite.module && this.grabbed.sprite.module.hasOwnProperty('mouseDown')) {
       this.grabbed.sprite.module.mouseDown();
     }
     if (this.lastClicked && this.lastClicked.sprite && this.lastClicked.sprite.module &&
     this.lastClicked.sprite.module.giveTarget) {
        this.lastClicked.sprite.module.giveTarget(this.grabbed.sprite.module);
     }
     if (temp.sprite && temp.sprite.module && temp.sprite.module.type === 'core') {
        this.grabbed = undefined;
     }
     if (temp.sprite && temp.sprite.group && temp.sprite.group !== this.playerGroup) {
        this.grabbed = undefined;
     }
     this.lastClicked = temp;
   }
   
   //create sprite overlay to show selection
   if(this.grabbed) {
		this.selected = this.game.add.sprite(0, 0, 'selected');
		this.grabbed.sprite.addChild(this.selected);
		this.selected.x = 0 - this.grabbed.sprite.width;
		this.selected.y = 0 - this.grabbed.sprite.height;
		this.selected.bringToTop();
   }
};
  
 Mouse.prototype.release = function() {
   if (this.grabbed) {
		//destroy selected sprite
		this.grabbed.sprite.removeChild(this.selected);
		this.selected.destroy();
		this.grabbed = undefined;
   }
};

Mouse.prototype.move = function(pointer) {
   // p2 uses different coordinate system, so convert the pointer position to p2's coordinate system
   this.body.position[0] = this.game.physics.p2.pxmi(pointer.position.x);
   this.body.position[1] = this.game.physics.p2.pxmi(pointer.position.y);
   this.x = pointer.position.x + this.game.camera.x;
   this.y = pointer.position.y + this.game.camera.y;
};

Mouse.prototype.render = function() {
   //this.game.debug.geom(this.line);
};

module.exports = Mouse;















},{"../utils.js":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\sound_manager.js":[function(require,module,exports){
/*
Plays sounds needed across multiple scripts.
*/
var SoundManager = function(state) {
   // initial variables
	this.state = state;
   this.game = this.state.game;
   this.cam = this.game.camera;
   // sounds
   this.hoverClick = this.game.add.audio('hoverClick');
   this.downClick = this.game.add.audio('downClick');
};

SoundManager.prototype.constructor = SoundManager;

SoundManager.prototype.playHoverClick = function() {
   this.hoverClick.play();
};

SoundManager.prototype.playDownClick = function() {
   this.downClick.play();
};

module.exports = SoundManager;













},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\warning.js":[function(require,module,exports){
var Warning = function(state) {
   // initialise
	this.state = state;
   this.game = this.state.game;
   this.cam = this.game.camera;
   this.timer = this.game.time.create(false);
	this.warning = this.game.add.image(this.game.camera.x, this.game.camera.y, 'warning');
	this.warning.kill();
};

Warning.prototype.constructor = Warning;

Warning.prototype.update = function() {
   // warning graphic
	if(this.state.coreModule.cube.x + (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) > 8000 ||
	this.state.coreModule.cube.x - (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) < 0 ||
	this.state.coreModule.cube.y + (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) > 4000 ||
	this.state.coreModule.cube.y - (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) < 0) {
		if(this.timer.length === 0) {
			this.warning.revive();
			this.timer.loop(Phaser.Timer.SECOND * 5, this.resetPlayer, this);
			this.timer.start();
		}
	}
	else {
		if(this.warning.alive === true) {
			this.warning.kill();
		}
		if(this.timer.length > 0) {
			this.timer.stop(true);
		}
	}
	this.warning.x = this.game.camera.x;
	this.warning.y = this.game.camera.y;
};

Warning.prototype.resetPlayer = function() {
   if(this.state.coreModule.cube.x + (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) > 8000) {
      this.state.coreModule.cube.body.moveLeft(this.state.player.numCubes * 750);
   }
   if(this.state.coreModule.cube.x - (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) < 0) {
      this.state.coreModule.cube.body.moveRight(this.state.player.numCubes * 750);
   }
   if(this.state.coreModule.cube.y + (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) > 4000) {
      this.state.coreModule.cube.body.moveUp(this.state.player.numCubes * 750);
   }
   else if(this.state.coreModule.cube.y - (Math.max(this.state.player.cubesWidth(), this.state.player.cubesHeight()) / 2 * 64) < 0) {
      this.state.coreModule.cube.body.moveDown(this.state.player.numCubes * 750);
   }
};

module.exports = Warning;
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\functionAccess\\Renderables.js":[function(require,module,exports){
var Renderables = function() {
	if(Renderables.prototype.exists) {
		return Renderables.prototype.existingReference;
	}
	
	this.list = [];
	Renderables.prototype.exists = true;
	Renderables.prototype.existingReference = this;
};

Renderables.prototype.constructor = Renderables;
//These var's help create the singleton functionality
Renderables.prototype.exists = false;
Renderables.prototype.existingReference = null;

Renderables.prototype.subscribe = function(subscriber) {
	this.list.push(subscriber);
};

Renderables.prototype.unsubscribe = function(unsubscriber) {
	for(var i = 0; i < this.list.length; i++) {
		if(this.list[i] === unsubscriber) {
			this.list[i] = false;
		}
	}
};

Renderables.prototype.renderAll = function() {
	for(var i = 0; i < this.list.length; i++) {
		if(this.list[i] === false) {
			continue;
		}
		this.list[i].render();
	}
};

module.exports = Renderables;
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\libs\\javascript-astar\\astar.js":[function(require,module,exports){
// javascript-astar 0.4.0
// http://github.com/bgrins/javascript-astar
// Freely distributable under the MIT License.
// Implements the astar search algorithm in javascript using a Binary Heap.
// Includes Binary Heap (with modifications) from Marijn Haverbeke.
// http://eloquentjavascript.net/appendix2.html

(function(definition) {
    /* global module, define */
    if(typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = definition();
    } else if(typeof define === 'function' && define.amd) {
        define([], definition);
    } else {
        var exports = definition();
        window.astar = exports.astar;
        window.Graph = exports.Graph;
    }
})(function() {

function pathTo(node){
    var curr = node,
        path = [];
    while(curr.parent) {
        path.push(curr);
        curr = curr.parent;
    }
    return path.reverse();
}

function getHeap() {
    return new BinaryHeap(function(node) {
        return node.f;
    });
}

var astar = {
    /**
    * Perform an A* Search on a graph given a start and end node.
    * @param {Graph} graph
    * @param {GridNode} start
    * @param {GridNode} end
    * @param {Object} [options]
    * @param {bool} [options.closest] Specifies whether to return the
               path to the closest node if the target is unreachable.
    * @param {Function} [options.heuristic] Heuristic function (see
    *          astar.heuristics).
    */
    search: function(graph, start, end, options) {
        graph.cleanDirty();
        options = options || {};
        var heuristic = options.heuristic || astar.heuristics.manhattan,
            closest = options.closest || false;

        var openHeap = getHeap(),
            closestNode = start; // set the start node to be the closest if required

        start.h = heuristic(start, end);

        openHeap.push(start);

        while(openHeap.size() > 0) {

            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.
            var currentNode = openHeap.pop();

            // End case -- result has been found, return the traced path.
            if(currentNode === end) {
                return pathTo(currentNode);
            }

            // Normal case -- move currentNode from open to closed, process each of its neighbors.
            currentNode.closed = true;

            // Find all neighbors for the current node.
            var neighbors = graph.neighbors(currentNode);

            for (var i = 0, il = neighbors.length; i < il; ++i) {
                var neighbor = neighbors[i];

                if (neighbor.closed || neighbor.isWall()) {
                    // Not a valid node to process, skip to next neighbor.
                    continue;
                }

                // The g score is the shortest distance from start to current node.
                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.
                var gScore = currentNode.g + neighbor.getCost(currentNode),
                    beenVisited = neighbor.visited;

                if (!beenVisited || gScore < neighbor.g) {

                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.
                    neighbor.visited = true;
                    neighbor.parent = currentNode;
                    neighbor.h = neighbor.h || heuristic(neighbor, end);
                    neighbor.g = gScore;
                    neighbor.f = neighbor.g + neighbor.h;
                    graph.markDirty(neighbor);
                    if (closest) {
                        // If the neighbour is closer than the current closestNode or if it's equally close but has
                        // a cheaper path than the current closest node then it becomes the closest node
                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {
                            closestNode = neighbor;
                        }
                    }

                    if (!beenVisited) {
                        // Pushing to heap will put it in proper place based on the 'f' value.
                        openHeap.push(neighbor);
                    }
                    else {
                        // Already seen the node, but since it has been rescored we need to reorder it in the heap
                        openHeap.rescoreElement(neighbor);
                    }
                }
            }
        }

        if (closest) {
            return pathTo(closestNode);
        }

        // No result was found - empty array signifies failure to find path.
        return [];
    },
    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html
    heuristics: {
        manhattan: function(pos0, pos1) {
            var d1 = Math.abs(pos1.x - pos0.x);
            var d2 = Math.abs(pos1.y - pos0.y);
            return d1 + d2;
        },
        diagonal: function(pos0, pos1) {
            var D = 1;
            var D2 = Math.sqrt(2);
            var d1 = Math.abs(pos1.x - pos0.x);
            var d2 = Math.abs(pos1.y - pos0.y);
            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));
        }
    },
    cleanNode:function(node){
        node.f = 0;
        node.g = 0;
        node.h = 0;
        node.visited = false;
        node.closed = false;
        node.parent = null;
    }
};

/**
* A graph memory structure
* @param {Array} gridIn 2D array of input weights
* @param {Object} [options]
* @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed
*/
function Graph(gridIn, options) {
    options = options || {};
    this.nodes = [];
    this.diagonal = !!options.diagonal;
    this.grid = [];
    for (var x = 0; x < gridIn.length; x++) {
        this.grid[x] = [];

        for (var y = 0, row = gridIn[x]; y < row.length; y++) {
            var node = new GridNode(x, y, row[y]);
            this.grid[x][y] = node;
            this.nodes.push(node);
        }
    }
    this.init();
}

Graph.prototype.init = function() {
    this.dirtyNodes = [];
    for (var i = 0; i < this.nodes.length; i++) {
        astar.cleanNode(this.nodes[i]);
    }
};

Graph.prototype.cleanDirty = function() {
    for (var i = 0; i < this.dirtyNodes.length; i++) {
        astar.cleanNode(this.dirtyNodes[i]);
    }
    this.dirtyNodes = [];
};

Graph.prototype.markDirty = function(node) {
    this.dirtyNodes.push(node);
};

Graph.prototype.neighbors = function(node) {
    var ret = [],
        x = node.x,
        y = node.y,
        grid = this.grid;

    // West
    if(grid[x-1] && grid[x-1][y]) {
        ret.push(grid[x-1][y]);
    }

    // East
    if(grid[x+1] && grid[x+1][y]) {
        ret.push(grid[x+1][y]);
    }

    // South
    if(grid[x] && grid[x][y-1]) {
        ret.push(grid[x][y-1]);
    }

    // North
    if(grid[x] && grid[x][y+1]) {
        ret.push(grid[x][y+1]);
    }

    if (this.diagonal) {
        // Southwest
        if(grid[x-1] && grid[x-1][y-1]) {
            ret.push(grid[x-1][y-1]);
        }

        // Southeast
        if(grid[x+1] && grid[x+1][y-1]) {
            ret.push(grid[x+1][y-1]);
        }

        // Northwest
        if(grid[x-1] && grid[x-1][y+1]) {
            ret.push(grid[x-1][y+1]);
        }

        // Northeast
        if(grid[x+1] && grid[x+1][y+1]) {
            ret.push(grid[x+1][y+1]);
        }
    }

    return ret;
};

Graph.prototype.toString = function() {
    var graphString = [],
        nodes = this.grid, // when using grid
        rowDebug, row, y, l;
    for (var x = 0, len = nodes.length; x < len; x++) {
        rowDebug = [];
        row = nodes[x];
        for (y = 0, l = row.length; y < l; y++) {
            rowDebug.push(row[y].weight);
        }
        graphString.push(rowDebug.join(' '));
    }
    return graphString.join('\n');
};

function GridNode(x, y, weight) {
    this.x = x;
    this.y = y;
    this.weight = weight;
}

GridNode.prototype.toString = function() {
    return '[' + this.x + ' ' + this.y + ']';
};

GridNode.prototype.getCost = function(fromNeighbor) {
    // Take diagonal weight into consideration.
    if (fromNeighbor && fromNeighbor.x !== this.x && fromNeighbor.y !== this.y) {
        return this.weight * 1.41421;
    }
    return this.weight;
};

GridNode.prototype.isWall = function() {
    return this.weight === 0;
};

function BinaryHeap(scoreFunction){
    this.content = [];
    this.scoreFunction = scoreFunction;
}

BinaryHeap.prototype = {
    push: function(element) {
        // Add the new element to the end of the array.
        this.content.push(element);

        // Allow it to sink down.
        this.sinkDown(this.content.length - 1);
    },
    pop: function() {
        // Store the first element so we can return it later.
        var result = this.content[0];
        // Get the element at the end of the array.
        var end = this.content.pop();
        // If there are any elements left, put the end element at the
        // start, and let it bubble up.
        if (this.content.length > 0) {
            this.content[0] = end;
            this.bubbleUp(0);
        }
        return result;
    },
    remove: function(node) {
        var i = this.content.indexOf(node);

        // When it is found, the process seen in 'pop' is repeated
        // to fill up the hole.
        var end = this.content.pop();

        if (i !== this.content.length - 1) {
            this.content[i] = end;

            if (this.scoreFunction(end) < this.scoreFunction(node)) {
                this.sinkDown(i);
            }
            else {
                this.bubbleUp(i);
            }
        }
    },
    size: function() {
        return this.content.length;
    },
    rescoreElement: function(node) {
        this.sinkDown(this.content.indexOf(node));
    },
    sinkDown: function(n) {
        // Fetch the element that has to be sunk.
        var element = this.content[n];

        // When at 0, an element can not sink any further.
        while (n > 0) {

            // Compute the parent element's index, and fetch it.
            var parentN = ((n + 1) >> 1) - 1, parent = this.content[parentN]; // jshint ignore:line
            // Swap the elements if the parent is greater.
            if (this.scoreFunction(element) < this.scoreFunction(parent)) {
                this.content[parentN] = element;
                this.content[n] = parent;
                // Update 'n' to continue at the new position.
                n = parentN;
            }
            // Found a parent that is less, no need to sink any further.
            else {
                break;
            }
        }
    },
    bubbleUp: function(n) {
        // Look up the target element and its score.
        var length = this.content.length,
            element = this.content[n],
            elemScore = this.scoreFunction(element);

        while(true) {
            // Compute the indices of the child elements.
            var child2N = (n + 1) << 1, child1N = child2N - 1; // jshint ignore:line
            // This is used to store the new position of the element, if any.
            var swap = null,
                child1Score;
            // If the first child exists (is inside the array)...
            if (child1N < length) {
                // Look it up and compute its score.
                var child1 = this.content[child1N];
                child1Score = this.scoreFunction(child1);

                // If the score is less than our element's, we need to swap.
                if (child1Score < elemScore){
                    swap = child1N;
                }
            }

            // Do the same checks for the other child.
            if (child2N < length) {
                var child2 = this.content[child2N],
                    child2Score = this.scoreFunction(child2);
                if (child2Score < (swap === null ? elemScore : child1Score)) {
                    swap = child2N;
                }
            }

            // If the element needs to be moved, swap it, and continue.
            if (swap !== null) {
                this.content[n] = this.content[swap];
                this.content[swap] = element;
                n = swap;
            }
            // Otherwise, we are done.
            else {
                break;
            }
        }
    }
};

return {
    astar: astar,
    Graph: Graph
};

});

},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/images/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      //this.game.stage.scale.pageAlignHorizontally = true;
      this.game.scale.scaleMode = Phaser.ScaleManager.RESIZE;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\game.js":[function(require,module,exports){
/*
Main testing environment.
*/
var LevelSetup = require('../entities/level_setup');

var Game = function () { };

module.exports = Game;

Game.prototype = {
	
  init: function(params){
  	this.levelSong = this.game.add.audio(params[0]);
	this.levelSong.play('',params[1],params[2],true,true);
  },
	
  create: function () {
   this.levelSetup = new LevelSetup(this, 'level_one');
  },
  
  update: function () {
   this.levelSetup.update();
  },
  
  render: function () {
   this.levelSetup.render();
  }
};




























},{"../entities/level_setup":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\level_setup.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  init: function(params){
  	
	this.menuSong = this.game.add.audio(params[0]);
	this.menuSong.play('',params[1],params[2],true,true);
  },
  
  pos: [-25, 25, 75],
  create: function () {
	   
    this.title = this.add.image(this.world.centerX, this.world.centerY - 95, 'menu_title');
    this.title.anchor.setTo(0.5, 0.5);
    
    this.select = this.addButton(1, 'menu_select', this.changeToGame);
  	this.select.anchor.setTo(0.5, 0.5);
  	
  	this.manual = this.addButton(2, 'menu_manual', this.changeToMenu);
  	this.manual.anchor.setTo(0.5, 0.5);
  	
  	this.credits = this.addButton(3, 'menu_credits', this.changeToMenu);
  	this.credits.anchor.setTo(0.5, 0.5);
  	
  	
  },

  addButton: function(button, img, func){
    return this.add.button(this.world.centerX, this.world.centerY + this.pos[button - 1], img, func, this);
  },
  
  draw: function(){
  },
  
  changeToGame: function(){
	this.menuSong.stop();
	var params = ['mainSong', 0, this.menuSong.volume];
  	this.game.state.start('Game', true, false, params);
  },  
  
  changeToMenu: function(){
  	var params = ['menuSong', this.menuSong.position, this.menuSong.volume];
  	this.game.state.start('Menu', true, false, params);
  },  
  /*
  changeState: function(state){
  	switch(state){
  		case 'game':
  			this.game.state.start('Game');
  			break;
  		case 'menu':
  			this.game.state.start('Menu');
  			break;
  		default:
  			break;
  	}
  },
  */
  update: function () {
  },

};

},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  game = null;
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(640, 360, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
	
	//Load Spritesheets
	this.load.spritesheet('core', 'assets/images/coreSheet.png', 64, 64); 
	this.load.spritesheet('thruster', 'assets/images/thrusterSheet.png', 64, 64);
	this.load.spritesheet('gun', 'assets/images/gunSheet.png', 64, 64);
	this.load.spritesheet('hacker', 'assets/images/hackSheet.png', 64, 64);
	this.load.spritesheet('shieldButton', 'assets/images/shieldButtonSheet.png', 256, 82);
	this.load.spritesheet('solarPanelButton', 'assets/images/solarPanelButtonSheet.png', 256, 82);
	this.load.spritesheet('thrusterButton', 'assets/images/thrusterButtonSheet.png', 256, 82);
	this.load.spritesheet('gunButton', 'assets/images/gunButtonSheet.png', 256, 82);
	this.load.spritesheet('hackButton', 'assets/images/hackButtonSheet.png', 256, 82);
	this.load.spritesheet('hackable', 'assets/images/hackableSheet.png', 64, 64);
	this.load.spritesheet('shopButton', 'assets/images/shopButtonSheet.png', 32, 32);
	
	//Load Images
	this.load.image('earthNight', 'assets/images/bg_earthNightSmall.jpg');
	this.load.image('bullet', 'assets/images/bullet.png');
	this.load.image('shield', 'assets/images/shield.png');
	this.load.image('solarPanel', 'assets/images/solarPanel.png');
	this.load.image('asteroid', 'assets/images/asteroid.png');
	this.load.image('shopPanel', 'assets/images/shopBackPanel.png');
	this.load.image('warning', 'assets/images/warning.png');
	this.load.image('be', 'assets/images/be.png');
	this.load.image('selected', 'assets/images/selected.png');
    
	//Load Fonts
	this.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');
	
	//Load JSON Files
	this.load.atlasJSONHash('connections', 'assets/images/connections.png', 'assets/json/connections.json');
	this.load.atlasJSONHash('connections', 'assets/images/connections.png', 'assets/json/connections.json');
	this.load.atlasJSONHash('helpButton', 'assets/images/helpButtonSheet.png', 'assets/json/help_button.json');
	this.load.atlasJSONHash('arrowButton', 'assets/images/arrowButtonSheet.png', 'assets/json/arrow_button.json');
	this.load.physics('module_physics', 'assets/json/module_physics.json');
	this.load.physics('asteroidPolygon', 'assets/json/asteroidPolygon.json');
	this.load.text('level_one', 'assets/json/level_one.json');
	this.load.text('tutorial_text', 'assets/json/tutorial_text.json');
	
	//Load Sound Effects
	this.load.audio('downClick', 'assets/sound/downClick.ogg');
	this.load.audio('hoverClick', 'assets/sound/hoverClick.ogg');
	this.load.audio('error', 'assets/sound/error.ogg');
	this.load.audio('cashRegister', 'assets/sound/cashRegister.ogg');
	this.load.audio('gun', 'assets/sound/gun.ogg');
	this.load.audio('hacking', 'assets/sound/hacking.ogg');
	this.load.audio('moduleImpact', 'assets/sound/moduleImpact.ogg');
	this.load.audio('moduleConnect', 'assets/sound/moduleConnect.ogg');
	this.load.audio('modulePower', 'assets/sound/modulePower.ogg');
	this.load.audio('thrusterLoop', 'assets/sound/thrusterLoop.ogg');
	
	this.load.text('tutorial_text', 'assets/json/tutorial_text.json');
	// this.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');
	this.load.atlasJSONHash('helpButton', 'assets/images/helpButtonSheet.png', 'assets/json/help_button.json');
	this.load.atlasJSONHash('arrowButton', 'assets/images/arrowButtonSheet.png', 'assets/json/arrow_button.json');
	//menu buttons
	this.load.image('menu_title', 'assets/images/atic_menu_titleT.png');
	this.load.image('menu_select', 'assets/images/atic_menu_selectT.png');
	this.load.image('menu_manual', 'assets/images/atic_menu_manualT.png');
	this.load.image('menu_credits', 'assets/images/atic_menu_creditsT.png');

	
	
	//Load Music
	this.load.audio('menuSong', 'assets/sound/Yet Another.ogg');
	this.load.audio('mainSong', 'assets/sound/Top (down) Night.ogg');

  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      var params = ['menuSong', 0, 1];
      this.game.state.start('Menu', true, false, params);
      //this.game.state.start(playerState.currentLevel); // jshint ignore:line
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\ui\\ProgressBar.js":[function(require,module,exports){
//NOTE: DON'T USE this code to create a ProgressBar. Instead, use the UIBuilder object and call buildProgressBar

var ProgressBar = function(setType, setMaxValue, setGraphics, setRenderables) {
	this.type = setType; //Two types, "growing" (starts at 0, triggers event when full) 
						 //and "shrinking" (starts full, triggers at 0)
	this.bgBorderSize = 2;			//default size of background border
	this.bgBorderColor = 0xAAAAAA;	//default color of background border
	this.bgColor = 0x888888;		//default color of background
	this.paddingHoriz = 5;			//default sum of padding on left and right side inner value bar
	this.paddingVert = 5;			//default sum (i.e. half on each side) of vertical padding of inner value bar
	this.valueBorderSize = 1;		//default size of value border
	this.valueBorderColor = 0x8888FF; //default color of value border
	this.valueColor = 0x000099;		//default color of inner value bar
	this.x = null;
	this.y = null;
	this.width = null;
	this.height = null;
	this.maxValue = setMaxValue;
	this.graphics = setGraphics; //store graphics class (used to draw bar)
	this.renderables = setRenderables;
	
	this.onEvent = function() {}; //overwrite this function to make whatever you want happen when progressBar reaches limit
	
	//switch(this.type) {
	//case 'growing' : 
	if(setType === 'growing') {
		this.value = 0;
		//tryTrigger is called automatically when you add/subtract value, and will trigger the onEvent() function
		this.tryTrigger = function() {
			if(this.value >= this.maxValue) {
				this.onEvent();
			}
		};
		//break;
	}
	else if(setType === 'shrinking') {
	//case 'shrinking' :
		this.value = this.maxValue;
		this.tryTrigger = function() {
			if(this.value <= 0) {
				this.onEvent();
			}
		};
	}
};

ProgressBar.prototype.constructor = ProgressBar;

ProgressBar.prototype.destroy = function() {
	this.graphics.clear();
	this.renderables.unsubscribe(this);
};

//To subtract value, just use negative numbers as argument i.e. foo.addValue(-5);
ProgressBar.prototype.addValue = function (addThis) {
	this.value += addThis;
	if(this.value > this.maxValue) {
		this.value = this.maxValue;
	}
	if(this.value < 0) {
		this.value = 0;
	}
	this.tryTrigger();
};

//Sets the location where progress bar is rendered
ProgressBar.prototype.setLocation = function(setX, setY) {
	this.x = setX;
	this.y = setY;
};

//Sets the size of the progress bar
ProgressBar.prototype.setSize = function(setWidth, setHeight) {
	this.width = setWidth;
	this.height = setHeight;
};

ProgressBar.prototype.setStyle = function(bgBorderSize, bgBorderColor, bgColor, paddingHoriz, paddingVert, valueBorderSize, valueBorderColor, valueColor) {
	this.bgBorderSize = bgBorderSize;
	this.bgBorderColor = bgBorderColor;
	this.bgColor = bgColor;
	this.paddingHoriz = paddingHoriz;
	this.paddingVert = paddingVert;
	this.valueBorderSize = valueBorderSize;
	this.valueBorderColor = valueBorderColor;
	this.valueColor = valueColor;
};

//update for progress bar, called just before drawing progress bar
//Overwrite this function if desired
ProgressBar.prototype.update = function() {};

//Renders progressBar
ProgressBar.prototype.render = function() {
	this.update();
	this.graphics.clear();
	//Draw background of bar
	this.graphics.lineStyle(this.bgBorderSize, this.bgBorderColor, 1); //sets border color and size
	this.graphics.beginFill(this.bgColor); //sets color of background fill
	this.graphics.drawRect(this.x-this.width/2, this.y-this.height/2, this.width, this.height);
	this.graphics.endFill();
	//Draw value of bar
	var percentage = this.value / this.maxValue;
	var barWidth = this.width - this.paddingHoriz;
	var barHeight = this.height - this.paddingVert;
	this.graphics.lineStyle(this.valueBorderSize, this.valueBorderColor, 1);
	this.graphics.beginFill(this.valueColor);
	this.graphics.drawRect(this.x-(barWidth/2), this.y-(barHeight/2), barWidth*percentage, barHeight);
	this.graphics.endFill();
};

module.exports = ProgressBar;
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\ui\\UIBuilder.js":[function(require,module,exports){
var ProgressBar = require('./ProgressBar');
var Banner = require('./banner');

var UIBuilder = function(setGameState, setRenderables) {
	//Ensure that cannot create multiple instances of this class
	if(UIBuilder.prototype.exists) {
		return UIBuilder.prototype.existingReference;
	}
	
	this.gameState = setGameState;
	this.renderables = setRenderables;
	//Create and store a graphics object (used for stuff like drawing rectangles)
	UIBuilder.prototype.exists = true;
	UIBuilder.prototype.existingReference = this;
};

UIBuilder.prototype.constructor = UIBuilder;
//These var's help create the singleton functionality
UIBuilder.prototype.exists = false;
UIBuilder.prototype.existingReference = null;

//Use this function to create a progress bar
//Usage: type: can be "growing" or "shrinking", this will effect if bar starts at 0 and goes up or vis versa
//		 maxValue: sets the max value of the progress bar, i.e. using 100 creates a bar from 0 to 100
//		 x,y: sets location
//		 DON'T FORGET to overwrite the onEvent() function for the progress bar after creating it
//			-onEvent() is automatically called when bar fills/shrinks past limit (depending on bar type)
UIBuilder.prototype.buildProgressBar = function(type, x, y, width, height, maxValue) {
	//create and format new prog bar
	var graphics = this.gameState.game.add.graphics(0,0);
	var newProgBar = new ProgressBar(type, maxValue, graphics, this.renderables);
	newProgBar.setLocation(x,y);
	newProgBar.setSize(width, height);
	//subscribe to 'renderables' so that render() is called automatically
	this.renderables.subscribe(newProgBar);
	return newProgBar;
};

UIBuilder.prototype.buildBanner = function(xRatio, yRatio, texts) {
   var graphics = this.gameState.game.add.graphics(0, 0);
   var newBanner = new Banner(this.gameState, xRatio, yRatio, texts, graphics, this.renderables);
   this.renderables.subscribe(newBanner);
   return newBanner;
};

module.exports = UIBuilder;
},{"./ProgressBar":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\ui\\ProgressBar.js","./banner":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\ui\\banner.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\ui\\banner.js":[function(require,module,exports){
var Utils = require('../utils');

//NOTE: DON'T USE this code to create a Banner. Instead, use the UIBuilder object and call buildBanner
var Banner = function(state, xRatio, yRatio, textJSON, graphics, renderables) {
   this.bgBorderSize = 6;			//default size of background border
	this.bgBorderColor = 0xffffff;	//default color of background border
	this.bgColor = 0x4a4a4a;		//default color of background
   this.shadowOffsetX = 3;
   this.shadowOffsetY = 3;
   this.shadowColor = 'rgba(0,0,0,0.9)';
   this.shadowBlur = 5;
   this.normalText = '#ffffff';
   this.highlightText = '#00ff00';
   this.textWrapPadding = 10;
   this.offScreenPadding = -200;
   this.textJSON = textJSON;
   this.state = state;
   this.game = state.game;
   this.cam = this.game.camera;
   this.sm = this.state.soundManager;
   this.xRatio = xRatio;
   this.yRatio = yRatio;
   this.graphics = graphics;
   this.renderables = renderables;
   this.width = 400;
   this.height = 200;
   this.index = 0;
   this.x = 0;
   this.hideBuffer = -50;
   this.hideHeight = -this.height - this.hideBuffer;
   this.y = this.cam.y - this.cam.height / 2 - this.hideHeight;
   this.slideY = this.hideHeight;
   this.goalY = this.y;
   this.slideRate = 0.2;
   this.visible = false;
   // add buttons
   this.rightButton = this.game.add.button(0, 0, 'arrowButton', this.nextIndex, this, 1, 0, 2);
	this.rightButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.rightButton.onInputDown.add(this.sm.playDownClick, this.sm);
   this.leftButton = this.game.add.button(0, 0, 'arrowButton', this.prevIndex, this, 1, 0, 2);
	this.leftButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.leftButton.onInputDown.add(this.sm.playDownClick, this.sm);
   this.leftButton.scale.x = -1;
   this.group = new Phaser.Group(this.game);
   this.group.add(this.graphics);
   this.group.add(this.rightButton);
   this.group.add(this.leftButton);
   this.addTexts();
   this.game.world.bringToTop(this.group);
   this.debug = false;
};

Banner.prototype.constructor = Banner;

Banner.prototype.destroy = function() {
	this.graphics.clear();
	this.renderables.unsubscribe(this);
};

Banner.prototype.update = function() {
   // TODO: add layer groups to other things
   this.game.world.bringToTop(this.group);
   // my pos
   this.x = this.cam.x + this.cam.width * this.xRatio;
   if (this.visible) {
      this.goalY = this.cam.height / 2;
   } else {
      this.goalY = this.hideHeight;
   }
   this.slideY = Utils.lerp(this.slideY, this.goalY, this.slideRate);
   if (this.debug) { console.log('this.cam.y:', this.cam.y, 'this.slideY:', this.slideY, 'this.y:', this.y); }
   this.y = this.cam.y + this.slideY;
   // text pos
   var curText = this.textObjs[this.index];
   curText.x = this.x;
   curText.y = this.y;
   // button pos
   this.rightButton.x = this.x + this.width / 2 + this.rightButton.width / 2;
   this.rightButton.y = this.y - this.rightButton.height / 2;
   this.leftButton.x = this.x - this.width / 2 + this.leftButton.width / 2;
   this.leftButton.y = this.y - this.leftButton.height / 2;
};

Banner.prototype.addTexts = function() {
   if (!this.textObs) {
      this.textObjs = [];
   }
   var textDefs = JSON.parse(this.game.cache.getText(this.textJSON));
   var textArray = textDefs['text'];
   var textColors = textDefs['colors'];
   for (var i = 0; i < textArray.length; i++) {
      var text = textArray[i];
      var newText = this.game.add.text(this.offScreenPadding, this.offScreenPadding, text);
      newText.font = 'Roboto';
      newText.fontSize = 24;
      newText.align = 'center';
      newText.fill = this.normalText;
      newText.wordWrap = true;
      newText.wordWrapWidth = this.width - this.textWrapPadding;
      newText.anchor.set(0.5);
      newText.setShadow(this.shadowOffsetX, this.shadowOffsetY, this.shadowColor, this.shadowBlur);
      var newColors = textColors[i];
      for (var j = 0; j < newColors.length; j++) {
         newText.addColor(this.highlightText, newColors[j]);
         j++;
         newText.addColor(this.normalText, newColors[j]);
      }
      this.textObjs.push(newText);
      this.group.add(newText);
   }
};

Banner.prototype.render = function() {
	this.update();
	this.graphics.clear();
	//Draw background
	this.graphics.lineStyle(this.bgBorderSize, this.bgBorderColor, 1); //sets border color and size
	this.graphics.beginFill(this.bgColor); //sets color of background fill
	this.graphics.drawRect(this.x-this.width/2, this.y-this.height/2, this.width, this.height);
	this.graphics.endFill();
};

Banner.prototype.show = function() {
   // this.goalY = this.cam.y + this.cam.height * this.yRatio;
   this.visible = true;
};

Banner.prototype.hide = function() {
   // this.goalY = this.hideHeight;
   this.visible = false;
};

Banner.prototype.toggle = function() {
  if (this.visible) {
     this.hide();
  } else {
     this.show();
  }  
};

Banner.prototype.hideCurText = function() {
  this.textObjs[this.index].x = this.textObjs[this.index].y = 0; 
};

Banner.prototype.nextIndex = function() {
   this.hideCurText();
   this.index++;
   if (this.index >= this.textObjs.length) {
      this.index = 0;
   }
};

Banner.prototype.prevIndex = function() {
   this.hideCurText();
   this.index--;
   if (this.index < 0) {
      this.index = this.textObjs.length - 1;
   }
};

module.exports = Banner;









},{"../utils":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\ui\\shop.js":[function(require,module,exports){
var Shop = function(state) {
   // initial variables
	this.state = state;
   this.game = this.state.game;
   this.cam = this.game.camera;
   this.sm = this.state.soundManager;
   this.mouse = this.state.mouse;
   this.money = 500;
   this.shopSpeed = 1;
   this.diff = 0;
   this.newModuleSpeed = 1500;
   // create button
   this.shopButton = this.game.add.button(this.game.camera.x + this.game.camera.width - 48, 16, 'shopButton', this.useShopButton, this, 1, 0, 2);
	this.shopButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.shopButton.onInputDown.add(this.sm.playDownClick, this.sm);
   // create text
   this.moneyText = this.game.add.text(this.shopButton.x - 8, this.shopButton.y + 48, this.money);
   this.moneyText.font = 'VT323';
   this.moneyText.fontSize = 24;
   this.moneyText.fill = '#ffffff';
   this.moneyText.text = this.money;
	this.be = this.game.add.image(this.moneyText.x + this.moneyText.width + 8, this.moneyText.y, 'be');
   // create sounds
   this.cashRegister = this.game.add.audio('cashRegister');
   this.cashRegister.allowMultiple = true;
   this.error = this.game.add.audio('error');
   // add controls
   this.addMoneyKey = this.game.input.keyboard.addKey(Phaser.Keyboard.K);
	this.addMoneyKey.onDown.add(this.debugAddMoney, this);
   // create buttons
	this.shopPanel = this.game.add.image(this.cam.x + this.cam.width + 256 + 16, this.cam.y + 16, 'shopPanel');
	this.shopPanel.kill();
	this.shieldButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 1), 'shieldButton', this.purchaseModule, {state: this, key: 'shield'}, 1, 0, 2);
	this.formatButton(this.shieldButton);
	this.solarPanelButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 2), 'solarPanelButton', this.purchaseModule, {state: this, key: 'solarPanel'}, 1, 0, 2);
	this.formatButton(this.solarPanelButton);
	this.thrusterButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 3), 'thrusterButton', this.purchaseModule, {state: this, key: 'thruster'}, 1, 0, 2);
	this.formatButton(this.thrusterButton);
	this.gunButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 4), 'gunButton', this.purchaseModule, {state: this, key: 'gun'}, 1, 0, 2);
	this.formatButton(this.gunButton);
	this.hackButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 5), 'hackButton', this.purchaseModule, {state: this, key: 'hacker'}, 1, 0, 2);
	this.formatButton(this.hackButton);
   /*
	this.shopButton = this.game.add.button(this.cam.x + this.cam.width - 48, 16, 'shopButton', this.useShopButton, this, 1, 0, 2);
	this.shopButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.shopButton.onInputDown.add(this.sm.playDownClick, this.sm);
   */
};

Shop.prototype.constructor = Shop;

Shop.prototype.update = function() {
   // find diff
	if(this.shopMenuOpening === true) {	
      this.diff += this.shopSpeed * this.game.time.elapsed;
		if(this.diff >= 276) {
			this.shopMenuOpening = false;
			this.addShopButtons();
		}
	}
	else if(this.shopMenuClosing === true) {
      this.diff -= this.shopSpeed * this.game.time.elapsed;
		if(this.diff <= 0) {
			this.shopPanel.kill();
			this.shopMenuClosing = false;
		}
	}
   // update opening button position
   this.shopButton.x = this.cam.x + this.cam.width - 48 - this.diff;
	this.shopButton.y = this.cam.y + 16;
   // update text position
   this.moneyText.x = this.shopButton.x - 16;
	this.moneyText.y = this.shopButton.y + 48;
	this.be.x = this.moneyText.x + this.moneyText.width + 8;
	this.be.y = this.moneyText.y;
   // update purchasing button position
   this.shopPanel.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.shopPanel.y = this.cam.y + 16;
	this.shieldButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.shieldButton.y = this.cam.y + 70 + (86 * 0);
	this.solarPanelButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.solarPanelButton.y = this.cam.y + 70 + (86 * 1);
	this.thrusterButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.thrusterButton.y = this.cam.y + 70 + (86 * 2);
	this.gunButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.gunButton.y = this.cam.y + 70 + (86 * 3);
	this.hackButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.hackButton.y = this.cam.y + 70 + (86 * 4);
};

Shop.prototype.purchaseModule = function() {
   var randY = this.state.game.rnd.integerInRange(100, this.state.cam.height - 100);
   if(this.key === 'shield' && this.state.mouse.x > this.state.shieldButton.x && this.state.mouse.x < this.state.shieldButton.x + 256 && this.state.mouse.y > this.state.shieldButton.y && this.state.mouse.y < this.state.shieldButton.y + 82) {
      if(this.state.money >= 45) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 45;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'solarPanel' && this.state.mouse.x > this.state.solarPanelButton.x && this.state.mouse.x < this.state.solarPanelButton.x + 256 && this.state.mouse.y > this.state.solarPanelButton.y && this.state.mouse.y < this.state.solarPanelButton.y + 82) {
      if(this.state.money >= 105) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 105;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'thruster' && this.state.mouse.x > this.state.thrusterButton.x && this.state.mouse.x < this.state.thrusterButton.x + 256 && this.state.mouse.y > this.state.thrusterButton.y && this.state.mouse.y < this.state.thrusterButton.y + 82) {
      if(this.state.money >= 90) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 90;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'gun' && this.state.mouse.x > this.state.gunButton.x && this.state.mouse.x < this.state.gunButton.x + 256 && this.state.mouse.y > this.state.gunButton.y && this.state.mouse.y < this.state.gunButton.y + 82) {
      if(this.state.money >= 120) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 120;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'hacker' && this.state.mouse.x > this.state.hackButton.x && this.state.mouse.x < this.state.hackButton.x + 256 && this.state.mouse.y > this.state.hackButton.y && this.state.mouse.y < this.state.hackButton.y + 82) {
      if(this.state.money >= 200) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 200;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   this.state.moneyText.text = this.state.money; 
};

Shop.prototype.addModule = function (x, y, key) {
   var newModule = this.state.moduleBuilder.build(key, x, y, true);
   newModule.cube.body.moveLeft(this.newModuleSpeed);
};

Shop.prototype.addShopButtons = function() {
   this.shieldButton.revive();
   this.solarPanelButton.revive();
   this.thrusterButton.revive();
   this.gunButton.revive();
   this.hackButton.revive(); 
};

Shop.prototype.formatButton = function(button) {
   button.onInputOver.add(this.sm.playHoverClick, this.sm);
   button.onInputDown.add(this.sm.playDownClick, this.sm);
   button.kill();
};

Shop.prototype.addMoney = function(amt) {
   this.money += amt;
   this.moneyText.text = this.money;
   this.cashRegister.play();
};

Shop.prototype.debugAddMoney = function() {
  this.addMoney(1000); 
};

Shop.prototype.useShopButton = function() {
   if(!this.shopPanel.alive && !this.shopMenuOpening && !this.shopMenuClosing) {
      this.shopPanel.revive();
      this.diff = 0;
      this.shopMenuOpening = true;
   }
   else if(this.shopPanel.alive&& !this.shopMenuClosing && !this.shopMenuOpening) {
      this.shopMenuClosing = true;
   }
};

module.exports = Shop;







},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js":[function(require,module,exports){
/*
Collection of utility functions.
*/

var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
    distance: function(x1, y1, x2, y2) {
       return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    },
    lerp: function(a, b, t) {
       if (t < 0 || t > 1) {
          console.log('bad range for Utils.lerp(), must be between 0 and 1');
          return 0;
       }
       return a + t * (b - a);
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlc1xcYnJvd3NlcmlmeVxcbm9kZV9tb2R1bGVzXFxicm93c2VyLXBhY2tcXF9wcmVsdWRlLmpzIiwic3JjL2pzL21haW4uanMiLCJzcmMvanMvZWZmZWN0cy9CaW5hcnlQYXJ0aWNsZS5qcyIsInNyYy9qcy9lZmZlY3RzL0VtaXR0ZXIuanMiLCJzcmMvanMvZW50aXRpZXMvQnVsbGV0LmpzIiwic3JjL2pzL2VudGl0aWVzL01vZHVsZS5qcyIsInNyYy9qcy9lbnRpdGllcy9Nb2R1bGVCdWlsZGVyLmpzIiwic3JjL2pzL2VudGl0aWVzL2FzdGVyb2lkcy5qcyIsInNyYy9qcy9lbnRpdGllcy9jaGVhdGluZy5qcyIsInNyYy9qcy9lbnRpdGllcy9jdWJlLmpzIiwic3JjL2pzL2VudGl0aWVzL2N1YmVfZ3JvdXAuanMiLCJzcmMvanMvZW50aXRpZXMvZW5lbXlfYWkuanMiLCJzcmMvanMvZW50aXRpZXMvaGVscGVyLmpzIiwic3JjL2pzL2VudGl0aWVzL2xldmVsX3NldHVwLmpzIiwic3JjL2pzL2VudGl0aWVzL21vdXNlLmpzIiwic3JjL2pzL2VudGl0aWVzL3NvdW5kX21hbmFnZXIuanMiLCJzcmMvanMvZW50aXRpZXMvd2FybmluZy5qcyIsInNyYy9qcy9mdW5jdGlvbkFjY2Vzcy9SZW5kZXJhYmxlcy5qcyIsInNyYy9qcy9saWJzL2phdmFzY3JpcHQtYXN0YXIvYXN0YXIuanMiLCJzcmMvanMvc3RhdGVzL2Jvb3QuanMiLCJzcmMvanMvc3RhdGVzL2dhbWUuanMiLCJzcmMvanMvc3RhdGVzL21lbnUuanMiLCJzcmMvanMvc3RhdGVzL3ByZWxvYWRlci5qcyIsInNyYy9qcy9zdGF0ZXMvc3BsYXNoLmpzIiwic3JjL2pzL3VpL1Byb2dyZXNzQmFyLmpzIiwic3JjL2pzL3VpL1VJQnVpbGRlci5qcyIsInNyYy9qcy91aS9iYW5uZXIuanMiLCJzcmMvanMvdWkvc2hvcC5qcyIsInNyYy9qcy91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9LQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzU2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDclpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIGdhbWUgPSBuZXcgUGhhc2VyLkdhbWUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdoLCBQaGFzZXIuQVVUTywgJ2F0aWMtZ2FtZScpO1xyXG5cclxud2luZG93LnBsYXllclN0YXRlID0ge1xyXG4gICAgY3VycmVudExldmVsOiAnR2FtZSdcclxufTtcclxuXHJcbi8vICBUaGUgR29vZ2xlIFdlYkZvbnQgTG9hZGVyIHdpbGwgbG9vayBmb3IgdGhpcyBvYmplY3QsIHNvIGNyZWF0ZSBpdCBiZWZvcmUgbG9hZGluZyB0aGUgc2NyaXB0LlxyXG5XZWJGb250Q29uZmlnID0geyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuICAgIC8vICBUaGUgR29vZ2xlIEZvbnRzIHdlIHdhbnQgdG8gbG9hZCAoc3BlY2lmeSBhcyBtYW55IGFzIHlvdSBsaWtlIGluIHRoZSBhcnJheSlcclxuICAgIGdvb2dsZToge1xyXG4gICAgICBmYW1pbGllczogWydSb2JvdG86OmxhdGluJywgJ1ZUMzIzOjpsYXRpbiddXHJcbiAgICB9XHJcbn07XHJcblxyXG5nYW1lLnN0YXRlLmFkZCgnQm9vdCcsIHJlcXVpcmUoJy4vc3RhdGVzL2Jvb3QnKSk7XHJcbmdhbWUuc3RhdGUuYWRkKCdTcGxhc2gnLCByZXF1aXJlKCcuL3N0YXRlcy9zcGxhc2gnKSk7XHJcbmdhbWUuc3RhdGUuYWRkKCdQcmVsb2FkZXInLCByZXF1aXJlKCcuL3N0YXRlcy9wcmVsb2FkZXInKSk7XHJcbmdhbWUuc3RhdGUuYWRkKCdNZW51JywgcmVxdWlyZSgnLi9zdGF0ZXMvbWVudScpKTtcclxuZ2FtZS5zdGF0ZS5hZGQoJ0dhbWUnLCByZXF1aXJlKCcuL3N0YXRlcy9nYW1lJykpO1xyXG5cclxuZ2FtZS5zdGF0ZS5zdGFydCgnQm9vdCcpOyIsInZhciBCaW5hcnlQYXJ0aWNsZSA9IGZ1bmN0aW9uKGdhbWUsIHRhcmdldE9iaiwgeCwgeSwgdGFyT2Zmc2V0WCwgdGFyT2Zmc2V0WSkge1xyXG5cdHZhciBzdHlsZSA9IHtmb250OiAnMjBweCBWVDMyMycsIGZpbGw6ICcjRkZGRkZGJywgYWxpZ246ICdjZW50ZXInfTtcclxuXHR2YXIgYnl0ZVN5bWJvbCA9IE1hdGgucmFuZG9tKCkgPj0gMC41ID8gJzEnIDogJzAnO1xyXG5cdFBoYXNlci5UZXh0LmNhbGwodGhpcywgZ2FtZSwgeCwgeSwgYnl0ZVN5bWJvbCwgc3R5bGUpO1xyXG5cdGdhbWUuYWRkLmV4aXN0aW5nKHRoaXMpO1xyXG5cdHRoaXMudGFyZ2V0T2JqID0gdGFyZ2V0T2JqO1xyXG5cdHRoaXMuc3BlZWQgPSAzLjY7XHJcblx0dGhpcy50YXJPZmZzZXRYID0gdGFyT2Zmc2V0WDtcclxuXHR0aGlzLnRhck9mZnNldFkgPSB0YXJPZmZzZXRZO1xyXG59O1xyXG5cclxuQmluYXJ5UGFydGljbGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQaGFzZXIuVGV4dC5wcm90b3R5cGUpO1xyXG5CaW5hcnlQYXJ0aWNsZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCaW5hcnlQYXJ0aWNsZTtcclxuXHJcbkJpbmFyeVBhcnRpY2xlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuXHQvL0dldCBkZWx0YSB2ZWN0b3IgdG8gdGFyZ2V0IG9iamVjdFxyXG5cdHZhciBkZWx0YSA9IFt0aGlzLnRhcmdldE9iai54ICsgdGhpcy50YXJPZmZzZXRYIC0gdGhpcy54LCB0aGlzLnRhcmdldE9iai55ICsgdGhpcy50YXJPZmZzZXRZIC0gdGhpcy55XTtcclxuXHQvL0dldCBkaXN0YW5jZSBhbmQgY2hlY2sgaWYgd2UndmUgcmVhY2hlZCB0YXJnZXQgZGlzdGFuY2VcclxuXHR2YXIgZGlzdCA9IE1hdGguc3FydChNYXRoLnBvdyhkZWx0YVswXSwgMikgKyBNYXRoLnBvdyhkZWx0YVsxXSwgMikpO1xyXG5cdGlmKGRpc3QgPD0gdGhpcy5zcGVlZCkge1xyXG5cdFx0dGhpcy5kZXN0cm95KCk7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdC8vTm9ybWFsaXplIGRlbHRhIHZlY3RvclxyXG5cdGRlbHRhID0gW2RlbHRhWzBdL2Rpc3QsIGRlbHRhWzFdL2Rpc3RdO1xyXG5cdC8vVXBkYXRlIHBvc2l0aW9uXHJcblx0dGhpcy54ID0gdGhpcy54ICsgdGhpcy5zcGVlZCpkZWx0YVswXTtcclxuXHR0aGlzLnkgPSB0aGlzLnkgKyB0aGlzLnNwZWVkKmRlbHRhWzFdO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCaW5hcnlQYXJ0aWNsZTsiLCJ2YXIgQmluYXJ5UGFydGljbGUgPSByZXF1aXJlKCcuL0JpbmFyeVBhcnRpY2xlJyk7XHJcblxyXG52YXIgRW1pdHRlciA9IGZ1bmN0aW9uKGdhbWVTdGF0ZSkge1xyXG5cdHRoaXMuZ2FtZVN0YXRlID0gZ2FtZVN0YXRlO1xyXG59O1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFbWl0dGVyO1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdEJpbmFyeSA9IGZ1bmN0aW9uICh0YXJnZXRPYmosIHgsIHksIHNwYWNpbmcpIHtcclxuXHR2YXIgb2Zmc2V0WCA9IChNYXRoLnJhbmRvbSgpLTAuNSkqc3BhY2luZztcclxuXHR2YXIgb2Zmc2V0WSA9IChNYXRoLnJhbmRvbSgpLTAuNSkqc3BhY2luZztcclxuXHR2YXIgbmV3UGFydGljbGUgPSBuZXcgQmluYXJ5UGFydGljbGUodGhpcy5nYW1lU3RhdGUuZ2FtZSwgdGFyZ2V0T2JqLCB4LCB5LCBvZmZzZXRYLCBvZmZzZXRZKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjsiLCIvL0J1bGxldHMgYXJlIHRhZ2dlZCBhcyAncGxheWVyQnVsbGV0JyBvciAnZW5lbXlCdWxsZXQnXHJcbnZhciBCdWxsZXQgPSBmdW5jdGlvbihnYW1lU3RhdGUsIHgsIHksIGRpcmVjdGlvbiwgaW5oZXJ0aXRTcGVlZCwgdGFnKSB7XHJcbiAgICBQaGFzZXIuU3ByaXRlLmNhbGwodGhpcywgZ2FtZVN0YXRlLmdhbWUsIHgsIHksICdidWxsZXQnKTtcclxuXHR0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjsgLy9Vbml0IHZlY3RvciByZXByZXNlbnRpbmcgZGlyZWN0aW9uIGJ1bGxldCBpcyB0cmF2ZWxsaW5nO1xyXG5cdHRoaXMuc3BlZWQgPSA1MDAgKyBpbmhlcnRpdFNwZWVkO1x0XHRcdFx0Ly9TcGVlZCBidWxsZXQgaXMgdHJhdmVsbGluZztcclxuXHR0aGlzLnRhZyA9IHRhZztcclxuXHR0aGlzLmdhbWUgPSBnYW1lU3RhdGUuZ2FtZTtcclxuXHR0aGlzLmdhbWUuYWRkLmV4aXN0aW5nKHRoaXMpO1xyXG5cdHRoaXMubGlmZVRpbWUgPSAzMDA7XHJcblx0dmFyIHNjYWxlID0gMC41O1xyXG5cdHRoaXMuc2NhbGUueCA9IHNjYWxlO1xyXG5cdHRoaXMuc2NhbGUueSA9IHNjYWxlO1xyXG5cdHRoaXMuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuXHR0aGlzLmRlc3Ryb3lCdWZmZXIgPSAxMDA7XHJcblx0XHJcblx0Ly9zZXQgcGh5c2ljc1xyXG5cdGdhbWVTdGF0ZS5nYW1lLnBoeXNpY3MucDIuZW5hYmxlKHRoaXMpO1xyXG5cdHRoaXMuYm9keS5zZXRDb2xsaXNpb25Hcm91cChnYW1lU3RhdGUuY29sbGlzaW9uR3JvdXApO1xyXG5cdHRoaXMuYm9keS5jb2xsaWRlcyhnYW1lU3RhdGUuY29sbGlzaW9uR3JvdXApO1xyXG5cdC8vU2V0IHByb3BlciBjb2xsaXNpb24gZnVuY3Rpb24gYnkgZGV0ZXJtaW5pbmcgdHlwZSBmcm9tICd0YWcnXHJcblx0aWYodGhpcy50YWcgPT09ICdlbmVteUJ1bGxldCcpIHtcclxuXHRcdHRoaXMuY29sbGlzaW9uID0gZnVuY3Rpb24ob3RoZXIpIHtcclxuXHRcdFx0aWYob3RoZXIpIHtcclxuXHRcdFx0XHRpZihvdGhlci5zcHJpdGUpe1xyXG5cdFx0XHRcdFx0aWYob3RoZXIuc3ByaXRlLnRhZykge1xyXG5cdFx0XHRcdFx0XHRpZihvdGhlci5zcHJpdGUudGFnID09PSAnbW9kdWxlJykge1xyXG5cdFx0XHRcdFx0XHRcdG90aGVyLnNwcml0ZS50YWtlRGFtYWdlKDEpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHRoaXMuZGVzdHJveSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblx0ZWxzZSBpZih0aGlzLnRhZyA9PT0gJ3BsYXllckJ1bGxldCcpIHtcclxuXHRcdHRoaXMuY29sbGlzaW9uID0gZnVuY3Rpb24ob3RoZXIpIHtcclxuXHRcdFx0aWYob3RoZXIpIHtcclxuXHRcdFx0XHRpZihvdGhlci5zcHJpdGUpe1xyXG5cdFx0XHRcdFx0aWYob3RoZXIuc3ByaXRlLnRhZykge1xyXG5cdFx0XHRcdFx0XHRpZihvdGhlci5zcHJpdGUudGFnID09PSAnZW5lbXlfbW9kdWxlJykge1xyXG5cdFx0XHRcdFx0XHRcdG90aGVyLnNwcml0ZS50YWtlRGFtYWdlKDEpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuZGVzdHJveSgpO1xyXG5cdFx0fTtcclxuXHR9XHJcblx0dGhpcy5ib2R5Lm9uQmVnaW5Db250YWN0LmFkZCh0aGlzLmNvbGxpc2lvbiwgdGhpcyk7XHJcblx0dGhpcy5ib2R5LnNldFplcm9EYW1waW5nKCk7XHJcblx0dGhpcy5ib2R5Lm1hc3MgPSAwLjE7XHJcblx0dGhpcy5ib2R5LnZlbG9jaXR5LnggPSBkaXJlY3Rpb25bMF0qdGhpcy5zcGVlZDtcclxuXHR0aGlzLmJvZHkudmVsb2NpdHkueSA9IGRpcmVjdGlvblsxXSp0aGlzLnNwZWVkO1xyXG59O1xyXG5cclxuQnVsbGV0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUGhhc2VyLlNwcml0ZS5wcm90b3R5cGUpO1xyXG5CdWxsZXQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQnVsbGV0O1xyXG5cclxuQnVsbGV0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuXHRpZih0aGlzLmJvZHkueCA+IHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMuZ2FtZS5jYW1lcmEud2lkdGggKyB0aGlzLmRlc3Ryb3lCdWZmZXIgfHwgdGhpcy5ib2R5LnggIDwgdGhpcy5nYW1lLmNhbWVyYS54IC0gdGhpcy5kZXN0cm95QnVmZmVyIHx8IFxyXG5cdHRoaXMuYm9keS55ID4gdGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy5nYW1lLmNhbWVyYS5oZWlnaHQgKyB0aGlzLmRlc3Ryb3lCdWZmZXIgfHwgdGhpcy5ib2R5LnkgPCB0aGlzLmdhbWUuY2FtZXJhLnkgLSB0aGlzLmRlc3Ryb3lCdWZmZXIpIHtcclxuXHRcdHRoaXMuZGVzdHJveSh0cnVlKTtcclxuXHR9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJ1bGxldDsiLCIvL0Rvbid0IHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGNyZWF0ZSBtb2R1bGVzLCBpbnN0ZWFkIHVzZSBtb2R1bGVCdWlsZGVyKClcclxudmFyIE1vZHVsZSA9IGZ1bmN0aW9uKHNldFR5cGUsIHNldEN1YmUsIHNldEdhbWVTdGF0ZSkge1xyXG5cdHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxuXHR0aGlzLnR5cGUgPSBzZXRUeXBlO1xyXG5cdHRoaXMuY3ViZSA9IHNldEN1YmU7XHJcblx0c2V0Q3ViZS5tb2R1bGUgPSB0aGlzO1xyXG5cdHRoaXMuZ2FtZVN0YXRlID0gc2V0R2FtZVN0YXRlO1xyXG59O1xyXG5cclxuTW9kdWxlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1vZHVsZTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTW9kdWxlOyIsInZhciBDdWJlID0gcmVxdWlyZSgnLi9jdWJlJyk7XHJcbnZhciBNb2R1bGUgPSByZXF1aXJlKCcuL01vZHVsZScpO1xyXG52YXIgQnVsbGV0ID0gcmVxdWlyZSgnLi9CdWxsZXQnKTtcclxuXHJcbnZhciB0aHJ1c3RBbXQgPSA1MDAwO1xyXG5cclxuLy9Vc2UgdGhpcyB0byBjcmVhdGUgYSBtb2R1bGVCdWlsZGVyLSBvbmx5IG5lZWQgdG8gY3JlYXRlIG9uZSBpbnN0YW5jZSBvZiBpdFxyXG52YXIgTW9kdWxlQnVpbGRlciA9IGZ1bmN0aW9uKHNldEdhbWVTdGF0ZSwgc2V0Q29sR3JvdXApIHtcclxuXHQvL0Vuc3VyZSB0aGF0IGNhbm5vdCBjcmVhdGUgbXVsdGlwbGUgaW5zdGFuY2VzIG9mIHRoaXMgY2xhc3NcclxuXHRpZihNb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5leGlzdHMpIHtcclxuXHRcdHJldHVybiBNb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5leGlzdGluZ1JlZmVyZW5jZTtcclxuXHR9XHJcblx0XHRcclxuXHR0aGlzLmdhbWVTdGF0ZSA9IHNldEdhbWVTdGF0ZTtcclxuICAgdGhpcy5jb2xHcm91cCA9IHNldENvbEdyb3VwO1xyXG5cdC8vIHRoaXMuY29yZUV4aXN0cyA9IGZhbHNlO1x0Ly9yZWNvcmRzIGlmIGNvcmUgaGFzIGJlZW4gY3JlYXRlZFxyXG5cdHRoaXMuY29yZSA9IG51bGw7XHRcdFx0Ly9zdG9yZXMgY29yZSB3aGVuIGl0IGlzIGNyZWF0ZWRcclxuXHQvL3ZhciBzcGFjZSA9IHRoaXMuZ2FtZVN0YXRlLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuU1BBQ0VCQVIpO1xyXG5cdE1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0cyA9IHRydWU7XHJcblx0TW9kdWxlQnVpbGRlci5wcm90b3R5cGUuZXhpc3RpbmdSZWZlcmVuY2UgPSB0aGlzO1xyXG59O1xyXG5cclxuTW9kdWxlQnVpbGRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNb2R1bGVCdWlsZGVyO1xyXG5cclxuLy9UaGVzZSB2YXIncyBoZWxwIGNyZWF0ZSB0aGUgc2luZ2xldG9uIGZ1bmN0aW9uYWxpdHlcclxuTW9kdWxlQnVpbGRlci5wcm90b3R5cGUuZXhpc3RzID0gZmFsc2U7XHJcbk1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlID0gbnVsbDtcclxuXHJcbi8qKiBNb2R1bGUgZnVuY3Rpb25zICoqL1xyXG5mdW5jdGlvbiBzb2xhclBhbmVsR2l2ZVRhcmdldCh0YXJnZXQpIHtcclxuICAgaWYgKHRoaXMgPT09IHRhcmdldCB8fCAhdGhpcy5jdWJlLmdyb3VwIHx8ICF0YXJnZXQuY3ViZS5ncm91cCB8fCB0aGlzLmN1YmUuZ3JvdXAgIT09IHRhcmdldC5jdWJlLmdyb3VwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICB0aGlzLmN1YmUubG9zZUNvbm5lY3Rpb24oKTtcclxuICAgdmFyIG91ckdyb3VwID0gdGhpcy5jdWJlLmdyb3VwO1xyXG4gICB2YXIgbmV3Q29ubmVjdGlvbiA9IHtzdGFydDogdGhpcy5jdWJlLCBlbmQ6IHRhcmdldC5jdWJlfTtcclxuICAgdGhpcy5jdWJlLm15Q29ubmVjdGlvbiA9IG5ld0Nvbm5lY3Rpb247XHJcbiAgIHRhcmdldC5jdWJlLm15Q29ubmVjdGlvbiA9IG5ld0Nvbm5lY3Rpb247XHJcbiAgIG91ckdyb3VwLmRpc3BsYXlDb25uZWN0aW9uKHRoaXMuY3ViZS5teUNvbm5lY3Rpb24pO1xyXG5cdGlmKCF0YXJnZXQuaXNBY3RpdmUpIHtcclxuXHRcdC8vQWN0aXZhdGUgdGhlIG1vZHVsZVxyXG5cdFx0dGFyZ2V0LmlzQWN0aXZlID0gdHJ1ZTtcclxuXHRcdHRoaXMubW9kdWxlUG93ZXIucGxheSgpO1xyXG5cdFx0aWYodGFyZ2V0LnR5cGUgPT09ICdoYWNrZXInKSB7XHJcblx0XHRcdG91ckdyb3VwLmFjdGl2ZUhhY2tlck1vZHVsZXMucHVzaCh0YXJnZXQpO1xyXG5cdFx0fVxyXG5cdFx0Ly9JZiB0aGlzIGlzIG9uZSBvZiB0aGUgcG93ZXJhYmxlIHR5cGVzLCBzd2l0Y2ggdGhlIGZyYW1lIGZyb20gJ2dyZXllZCcgdG8gJ2FjdGl2ZSdcclxuXHRcdGlmKHRhcmdldC50eXBlID09PSAnZ3VuJyB8fCB0YXJnZXQudHlwZSA9PT0gJ2hhY2tlcicgfHwgdGFyZ2V0LnR5cGUgPT09ICd0aHJ1c3RlcicpIHtcclxuXHRcdFx0dGFyZ2V0LmN1YmUuZnJhbWUgPSAxO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gc29sYXJQYW5lbE1vdXNlT3ZlcigpIHtcclxuICAgaWYgKCF0aGlzLmN1YmUubXlDb25uZWN0aW9uIHx8ICF0aGlzLmN1YmUuZ3JvdXApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIHRoaXMuY3ViZS5ncm91cC5kaXNwbGF5Q29ubmVjdGlvbih0aGlzLmN1YmUubXlDb25uZWN0aW9uKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuZXJpY09uUmVtb3ZlKCkge1xyXG4gICB0aGlzLmN1YmUubG9zZUNvbm5lY3Rpb24oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFja2VyT25Mb3NlQ29ubmVjdGlvbigpIHtcclxuICAgdmFyIGhhY2tJbmRleCA9IHRoaXMuZ2FtZVN0YXRlLnBsYXllci5hY3RpdmVIYWNrZXJNb2R1bGVzLmluZGV4T2YodGhpcyk7XHJcbiAgIHRoaXMuZ2FtZVN0YXRlLnBsYXllci5hY3RpdmVIYWNrZXJNb2R1bGVzLnNwbGljZShoYWNrSW5kZXgsIDEpO1xyXG4gICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJlZ2luQWN0KCkge1xyXG4gICB0aGlzLnRpbWVyID0gMDtcclxuICAgdGhpcy5hY3QgPSB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbmRBY3QoKSB7XHJcbiAgIHRoaXMuYWN0ID0gZmFsc2U7XHJcbiAgIHRoaXMuY3ViZS5mcmFtZSA9IDE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRocnVzdGVyVXBkYXRlKCkge1xyXG4gICBpZiAodGhpcy5oYWx0VGltZSAmJiB0aGlzLmhhbHRUaW1lID4gMCkge1xyXG4gICAgICB0aGlzLmhhbHRUaW1lIC09IHRoaXMuY3ViZS5nYW1lLnRpbWUuZWxhcHNlZDtcclxuICAgICAgdGhpcy5jdWJlLmZyYW1lID0gMTtcclxuICAgfSBlbHNlIGlmICh0aGlzLmFjdCAmJiB0aGlzLmN1YmUubXlDb25uZWN0aW9uKSB7XHJcblx0ICBpZih0aGlzLmlzVGhydXN0ID09PSB0cnVlKSB7XHJcblx0XHR0aGlzLmlzVGhydXN0UHJldiA9IHRydWU7XHJcblx0ICB9XHJcblx0ICB0aGlzLmlzVGhydXN0ID0gdHJ1ZTtcclxuICAgICAgdGhpcy5jdWJlLmJvZHkuZm9yY2UueCA9IHRocnVzdEFtdCAqIE1hdGguY29zKHRoaXMuY3ViZS5yb3RhdGlvbiAtIE1hdGguUEkgLyAyKTtcclxuICAgICAgdGhpcy5jdWJlLmJvZHkuZm9yY2UueSA9IHRocnVzdEFtdCAqIE1hdGguc2luKHRoaXMuY3ViZS5yb3RhdGlvbiAtIE1hdGguUEkgLyAyKTtcclxuXHQgIGlmKHRoaXMuY3ViZS5mcmFtZSA9PT0gMSkge1xyXG5cdFx0dGhpcy5jdWJlLmZyYW1lID0gMztcclxuXHQgIH1cclxuXHQgIGVsc2Uge1xyXG5cdFx0dGhpcy5jdWJlLmZyYW1lID0gMjtcclxuXHQgIH1cclxuXHQgIGlmKHRoaXMuaXNUaHJ1c3QgPT09IHRydWUgJiYgdGhpcy5pc1RocnVzdFByZXYgPT09IGZhbHNlKSB7XHJcblx0XHR0aGlzLnRocnVzdGVyTG9vcC5wbGF5KCk7XHJcblx0ICB9XHJcbiAgIH1cclxuICAgZWxzZSBpZighdGhpcy5hY3QpIHtcclxuXHQgIGlmKHRoaXMuaXNUaHJ1c3QgPT09IGZhbHNlKSB7XHJcblx0XHR0aGlzLmlzVGhydXN0UHJldiA9IGZhbHNlO1xyXG5cdCAgfVxyXG5cdCAgdGhpcy5pc1RocnVzdCA9IGZhbHNlO1xyXG5cdCAgaWYodGhpcy5pc1RocnVzdCA9PT0gZmFsc2UgJiYgdGhpcy5pc1RocnVzdFByZXYgPT09IHRydWUpIHtcclxuXHRcdHRoaXMudGhydXN0ZXJMb29wLnN0b3AoKTtcclxuXHQgIH1cclxuICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB0aHJ1c3RlckhhbHQoKSB7XHJcbiAgIHRoaXMuaGFsdFRpbWUgPSAxNTAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBndW5VcGRhdGUoKSB7XHJcbiAgIGlmICghdGhpcy5jdWJlLm15Q29ubmVjdGlvbiB8fCAhdGhpcy5hY3QpIHtcclxuICAgICAgdGhpcy5jdWJlLmFuaW1hdGlvbnMuc3RvcCgpO1xyXG5cdCAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIGlmICh0aGlzLnRpbWVyIDw9IDApIHtcclxuICAgICAgdmFyIGFuZ2xlID0gdGhpcy5jdWJlLmJvZHkucm90YXRpb24gJSAoMipNYXRoLlBJKTtcclxuICAgICAgdmFyIGRpcmVjdGlvbiA9IFtNYXRoLnNpbihhbmdsZSksIC1NYXRoLmNvcyhhbmdsZSldO1xyXG4gICAgICB2YXIgZGVsdGFEaXN0ID0gTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMuY3ViZS5kZWx0YVgsIDIpICsgTWF0aC5wb3codGhpcy5jdWJlLmRlbHRhWSwgMikpO1xyXG4gICAgICB2YXIgc3BlZWQgPSBkZWx0YURpc3QgKiA1MDtcclxuICAgICAgbmV3IEJ1bGxldCh0aGlzLmdhbWVTdGF0ZSwgdGhpcy5jdWJlLnggKyAzMCpkaXJlY3Rpb25bMF0sIHRoaXMuY3ViZS55ICsgMzAqZGlyZWN0aW9uWzFdLCBcclxuICAgICAgICAgICAgICAgZGlyZWN0aW9uLCBzcGVlZCwgdGhpcy50YWcgKyAnQnVsbGV0Jyk7XHJcblx0ICB0aGlzLmd1bi5wbGF5KCk7XHJcbiAgICAgIHRoaXMudGltZXIgPSA0MDA7XHJcbiAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudGltZXIgLT0gdGhpcy5nYW1lU3RhdGUuZ2FtZS50aW1lLmVsYXBzZWQ7XHJcbiAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFja2FibGVVcGRhdGUoKSB7XHJcbiAgIHRoaXMuaGFja0Jhci5zZXRMb2NhdGlvbih0aGlzLmN1YmUueCwgdGhpcy5jdWJlLnkgLSAyNSk7XHJcbiAgIGlmICh0aGlzLmJhckZhZGVEZWxheSA8PSAwICYmIHRoaXMuaGFja0Jhci5ncmFwaGljcy5hbHBoYSA+IDApIHtcclxuICAgICAgdGhpcy5oYWNrQmFyLmdyYXBoaWNzLmFscGhhIC09IHRoaXMuZ2FtZVN0YXRlLnRpbWUuZWxhcHNlZCAqIHRoaXMuYmFyRmFkZTtcclxuICAgfSBlbHNlIGlmICh0aGlzLmJhckZhZGVEZWxheSA+IDApIHtcclxuICAgICAgdGhpcy5iYXJGYWRlRGVsYXkgLT0gdGhpcy5nYW1lU3RhdGUudGltZS5lbGFwc2VkO1xyXG4gICB9XHJcblx0Ly9jaGVjayBpZiBnZXR0aW5nIGhhY2tlZFxyXG5cdGlmKCF0aGlzLmlzSGFja2VkKSB7XHJcblx0XHR0aGlzLmN1YmUuYW5pbWF0aW9ucy5wbGF5KCdoYWNrYWJsZScpO1xyXG5cdFx0aWYodGhpcy5nYW1lU3RhdGUucGxheWVyLmFjdGl2ZUhhY2tlck1vZHVsZXMubGVuZ3RoID4gMCkge1xyXG5cdFx0XHR2YXIgZGlzdDtcclxuXHRcdFx0dmFyIGhhY2tlcjtcclxuXHRcdFx0Ly9Mb29wIHRocm91Z2ggYWxsIGhhY2tlciBtb2R1bGVzIG9uIHRoZSBwbGF5ZXIncyBjdWJzYXRcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMuZ2FtZVN0YXRlLnBsYXllci5hY3RpdmVIYWNrZXJNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0aGFja2VyID0gdGhpcy5nYW1lU3RhdGUucGxheWVyLmFjdGl2ZUhhY2tlck1vZHVsZXNbaV07XHJcblx0XHRcdFx0ZGlzdCA9IE1hdGguc3FydCggTWF0aC5wb3codGhpcy5jdWJlLnggLSBoYWNrZXIuY3ViZS54LCAyKSArIE1hdGgucG93KHRoaXMuY3ViZS55IC0gaGFja2VyLmN1YmUueSwgMikgKTtcclxuXHRcdFx0XHRpZihkaXN0IDwgdGhpcy5oYWNrRGlzdGFuY2UpIHtcclxuXHRcdFx0XHRcdC8vSWYgaGFja2VyIGlzIGluIHJhbmdlLCBpbmNyZWFzZSBoYWNrIHZhbHVlIGFuZCB0cnkgdG8gZW1pdCBiaW5hcnkgcGFydGljbGVcclxuICAgICAgICAgICAgICAgaWYgKHRoaXMuYmVpbmdIYWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5iZWluZ0hhY2tlZFByZXYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIHRoaXMuYmVpbmdIYWNrZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0dGhpcy5oYWNrQmFyLmFkZFZhbHVlKDAuMSk7XHJcblx0XHRcdFx0XHRoYWNrZXIuY291bnQrKztcclxuXHRcdFx0XHRcdGlmKGhhY2tlci5jb3VudCA+PSBoYWNrZXIuY3ljbGUpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5oYWNrQmFyLmdyYXBoaWNzLmFscGhhID0gMTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5iYXJGYWRlRGVsYXkgPSB0aGlzLmJhckZhZGVNYXhEZWxheTtcclxuXHRcdFx0XHRcdFx0aGFja2VyLmNvdW50ID0gMDtcclxuXHRcdFx0XHRcdFx0dGhpcy5nYW1lU3RhdGUuQmluYXJ5RW1pdHRlci5lbWl0QmluYXJ5KHRoaXMuY3ViZSwgaGFja2VyLmN1YmUueCwgaGFja2VyLmN1YmUueSwgNjApO1xyXG5cdFx0XHRcdFx0XHRpZihoYWNrZXIuY3ViZS5mcmFtZSA9PT0gNSkge1xyXG5cdFx0XHRcdFx0XHRcdGhhY2tlci5jdWJlLmZyYW1lID0gMDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRoYWNrZXIuY3ViZS5mcmFtZSsrO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRoYWNrZXIuY3ViZS5hbmltYXRpb25zLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgaWYoIXRoaXMuYmVpbmdIYWNrZWQpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5iZWluZ0hhY2tlZFByZXYgPSBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMuYmVpbmdIYWNrZWQgPSBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9IGVsc2UgaWYgKHRoaXMuZGVsYXkgPCAwKSB7XHJcbiAgICAgIHRoaXMuaGFja2luZy5zdG9wKCk7XHJcbiAgICAgIHRoaXMuaGFja0Jhci5kZXN0cm95KCk7XHJcbiAgICAgIHRoaXMuY3ViZS5kaWVRdWljaygpO1xyXG4gICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmhhY2tpbmcuc3RvcCgpO1xyXG4gICAgICB0aGlzLmRlbGF5IC09IHRoaXMuZ2FtZVN0YXRlLnRpbWUuZWxhcHNlZDtcclxuICAgfVxyXG4gICBpZih0aGlzLmJlaW5nSGFja2VkID09PSB0cnVlICYmIHRoaXMuYmVpbmdIYWNrZWRQcmV2ID09PSBmYWxzZSkge1xyXG5cdFx0aWYodGhpcy5oYWNraW5nLnBhdXNlZCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHR0aGlzLmhhY2tpbmcucmVzdW1lKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0dGhpcy5oYWNraW5nLnBsYXkoKTtcclxuXHRcdH1cclxuXHR9XHJcblx0ZWxzZSBpZih0aGlzLmJlaW5nSGFja2VkID09PSBmYWxzZSAmJiB0aGlzLmJlaW5nSGFja2VkUHJldiA9PT0gdHJ1ZSl7XHJcblx0XHR0aGlzLmhhY2tpbmcucGF1c2UoKTtcclxuXHR9XHJcbn1cclxuLyoqIEVuZCBtb2R1bGUgZnVuY3Rpb25zICoqL1xyXG5cclxuLy9jYWxsIHRoaXMgZnVuY3Rpb24gZnJvbSBNb2R1bGVCdWlsZGVyIHRvIGNvbnN0cnVjdCBtb2R1bGVzXHJcbi8vVFlQRVM6ICdjb3JlJyAnc2hpZWxkJyAndGhydXN0ZXInICdzb2xhclBhbm5lbCcgJ2hhY2tlcidcclxuTW9kdWxlQnVpbGRlci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbih0eXBlLCB4LCB5LCBmb3JQbGF5ZXIpIHtcdFxyXG5cdC8vQ3JlYXRlIGN1YmUgb2JqZWN0IHRvIGJlIHN0b3JlZCB3aXRoaW4gbW9kdWxlXHJcblx0Ly9TcHJpdGUgbmFtZXMgZm9yIG1vZHVsZXMgYXJlIGRpcmVjdGx5IG1hcHBlZCB0byBtb2R1bGUgbmFtZXMsIHNvIGp1c3QgcGFzcyAndHlwZScgYXMgc3ByaXRlIG5hbWVcclxuXHR2YXIgbmV3Q3ViZSA9IG5ldyBDdWJlKHRoaXMuZ2FtZVN0YXRlLCB4LCB5LCB0eXBlKTtcclxuICAgIHZhciBzY2FsZSA9IDAuNTtcclxuICAgIG5ld0N1YmUubmFtZSA9IHRoaXMuZ2FtZVN0YXRlLmRlYnVnTnVtKys7XHJcbiAgICBuZXdDdWJlLnNjYWxlLnNldFRvKHNjYWxlLCBzY2FsZSk7XHJcbiAgICBuZXdDdWJlLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcblx0XHJcblx0Ly9DcmVhdGUgcGh5c2ljcyBmb3IgbmV3IGN1YmVcclxuICAgIHRoaXMuZ2FtZVN0YXRlLmdhbWUucGh5c2ljcy5wMi5lbmFibGUobmV3Q3ViZSk7XHJcblx0bmV3Q3ViZS5ib2R5LnNldENvbGxpc2lvbkdyb3VwKHRoaXMuZ2FtZVN0YXRlLmNvbGxpc2lvbkdyb3VwKTtcclxuXHRuZXdDdWJlLmJvZHkuY29sbGlkZXModGhpcy5nYW1lU3RhdGUuY29sbGlzaW9uR3JvdXApO1xyXG5cdG5ld0N1YmUuYm9keS5vbkJlZ2luQ29udGFjdC5hZGQobmV3Q3ViZS5jdWJlQ29sbGlkZSwgbmV3Q3ViZSk7XHJcbiAgIG5ld0N1YmUuYm9keS5kYW1waW5nID0gMC45O1xyXG4gICBuZXdDdWJlLmJvZHkuYW5ndWxhckRhbXBpbmcgPSAwLjk7XHJcbiBcclxuICAgdmFyIGNJbmRpY2F0b3IgPSB0aGlzLmdhbWVTdGF0ZS5hZGQuc3ByaXRlKDAsIDAsICdjb25uZWN0aW9ucycsICdjb25uZWN0aW9uX2xpbmUucG5nJyk7XHJcbiAgIGNJbmRpY2F0b3IuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuICAgY0luZGljYXRvci5hbmltYXRpb25zLmFkZCgnZW5kJywgWydjb25uZWN0aW9uX2VuZC5wbmcnXSwgNjAsIHRydWUpO1xyXG4gICBjSW5kaWNhdG9yLmFuaW1hdGlvbnMuYWRkKCdsaW5lJywgWydjb25uZWN0aW9uX2xpbmUucG5nJ10sIDYwLCB0cnVlKTtcclxuICAgY0luZGljYXRvci5hbmltYXRpb25zLmFkZCgncmlnaHQnLCBbJ2Nvbm5lY3Rpb25fcmlnaHQucG5nJ10sIDYwLCB0cnVlKTtcclxuICAgbmV3Q3ViZS5hZGRDaGlsZChjSW5kaWNhdG9yKTtcclxuICAgbmV3Q3ViZS5jSW5kaWNhdG9yID0gY0luZGljYXRvcjtcclxuICAgY0luZGljYXRvci5hbHBoYSA9IDA7XHJcblx0XHJcblx0Ly9DcmVhdGUgbW9kdWxlIHRvIHdyYXAgYXJvdW5kIGN1YmUgY2xhc3NcclxuXHR2YXIgbmV3TW9kdWxlID0gbmV3IE1vZHVsZSh0eXBlLCBuZXdDdWJlLCB0aGlzLmdhbWVTdGF0ZSk7XHJcblx0XHRcclxuXHQvL1RPRE86IGVkaXQgc3BlY2lhbCBtb2R1bGUgYXR0cmlidXRlcyBiYXNlZCBvbiAndHlwZSdcclxuXHRpZih0eXBlID09PSAnaGFja2VyJykge1xyXG5cdFx0bmV3TW9kdWxlLmN5Y2xlID0gNjtcclxuXHRcdG5ld01vZHVsZS5jb3VudCA9IDA7XHJcblx0XHRuZXdNb2R1bGUuY3ViZS5hbmltYXRpb25zLmFkZCgnaGFja2VyJywgWzAsMSwyLDMsNF0sIDEwLCB0cnVlKTtcclxuICAgICAgbmV3TW9kdWxlLm9uUmVtb3ZlID0gZ2VuZXJpY09uUmVtb3ZlO1xyXG4gICAgICBuZXdNb2R1bGUub25Mb3NlQ29ubmVjdGlvbiA9IGhhY2tlck9uTG9zZUNvbm5lY3Rpb247XHJcbiAgICAgIG5ld01vZHVsZS5wb3dlcmFibGUgPSB0cnVlO1xyXG5cdH1cclxuXHRcclxuXHQvL1N0b3JlIG1vZHVsZSBpZiBpdCBpcyBjb3JlXHJcblx0aWYodHlwZSA9PT0gJ2NvcmUnKVxyXG5cdHtcclxuXHRcdG5ld01vZHVsZS5jdWJlLmFuaW1hdGlvbnMuYWRkKCdjb3JlJywgWzAsMSwyXSwgMjAsIHRydWUpO1xyXG5cdFx0bmV3TW9kdWxlLmN1YmUuYW5pbWF0aW9ucy5wbGF5KCdjb3JlJyk7XHJcblx0XHR0aGlzLmNvcmUgPSBuZXdNb2R1bGU7XHJcblx0XHR0aGlzLmNvcmVFeGlzdHMgPSB0cnVlO1xyXG4gICAgICBuZXdNb2R1bGUub25SZW1vdmUgPSBnZW5lcmljT25SZW1vdmU7XHJcblx0fVxyXG4gICBcclxuICAgLy8gc29sYXIgcGFuZWwgdGVzdGluZ1xyXG4gICBpZiAodHlwZSA9PT0gJ3NvbGFyUGFuZWwnKSB7XHJcblx0ICBuZXdNb2R1bGUubW9kdWxlUG93ZXIgPSB0aGlzLmdhbWVTdGF0ZS5hZGQuYXVkaW8oJ21vZHVsZVBvd2VyJywgMC41KTtcclxuICAgICAgbmV3TW9kdWxlLmdpdmVUYXJnZXQgPSBzb2xhclBhbmVsR2l2ZVRhcmdldDtcclxuICAgICAgbmV3TW9kdWxlLm1vdXNlT3ZlciA9IHNvbGFyUGFuZWxNb3VzZU92ZXI7XHJcbiAgICAgIG5ld01vZHVsZS5vblJlbW92ZSA9IGdlbmVyaWNPblJlbW92ZTtcclxuICAgfVxyXG4gICBcclxuICAgLy9UaHJ1c3RlciBtb2R1bGUgZXZlbnRzXHJcblx0aWYodHlwZSA9PT0gJ3RocnVzdGVyJykge1xyXG5cdCAgbmV3TW9kdWxlLmlzVGhydXN0ID0gZmFsc2U7XHJcblx0ICBuZXdNb2R1bGUuaXNUaHJ1c3RQcmV2ID0gZmFsc2U7XHJcblx0ICBuZXdNb2R1bGUudGhydXN0ZXJMb29wID0gdGhpcy5nYW1lU3RhdGUuYWRkLmF1ZGlvKCd0aHJ1c3Rlckxvb3AnLCAxLCB0cnVlKTtcclxuXHQgIG5ld01vZHVsZS50aHJ1c3Rlckxvb3AuYWxsb3dNdWx0aXBsZSA9IHRydWU7XHJcbiAgICAgIGlmIChmb3JQbGF5ZXIpIHtcclxuICAgICAgICAgdmFyIHRocnVzdGVyS2V5ID0gdGhpcy5nYW1lU3RhdGUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5XKTsgXHJcbiAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmlucHV0LmtleWJvYXJkLmFkZEtleUNhcHR1cmUoW3RocnVzdGVyS2V5XSk7XHJcbiAgICAgICAgIHRocnVzdGVyS2V5Lm9uRG93bi5hZGQoYmVnaW5BY3QsIG5ld01vZHVsZSk7XHJcbiAgICAgICAgIHRocnVzdGVyS2V5Lm9uVXAuYWRkKGVuZEFjdCwgbmV3TW9kdWxlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgLy8gbmV3TW9kdWxlLnRocnVzdCA9IGZhbHNlO1xyXG4gICAgICAgICBuZXdNb2R1bGUuYmVnaW5BY3QgPSBiZWdpbkFjdDtcclxuICAgICAgICAgbmV3TW9kdWxlLmVuZEFjdCA9IGVuZEFjdDtcclxuICAgICAgfVxyXG4gICAgICBuZXdNb2R1bGUudXBkYXRlID0gdGhydXN0ZXJVcGRhdGU7XHJcbiAgICAgIG5ld01vZHVsZS50aHJ1c3RlckhhbHQgPSB0aHJ1c3RlckhhbHQ7XHJcbiAgICAgIG5ld01vZHVsZS5vblJlbW92ZSA9IGdlbmVyaWNPblJlbW92ZTtcclxuICAgICAgbmV3TW9kdWxlLnBvd2VyYWJsZSA9IHRydWU7XHJcblx0fVxyXG5cclxuXHQvL0d1biBtb2R1bGUgZXZlbnRzXHJcblx0aWYodHlwZSA9PT0gJ2d1bicpIHtcclxuXHQgIG5ld01vZHVsZS5jdWJlLmFuaW1hdGlvbnMuYWRkKCdndW4nLCBbMCwxLDIsMyw0LDVdLCAxNiwgdHJ1ZSk7XHJcblx0ICBuZXdNb2R1bGUuZ3VuID0gdGhpcy5nYW1lU3RhdGUuYWRkLmF1ZGlvKCdndW4nKTtcclxuXHQgIG5ld01vZHVsZS5ndW4uYWxsb3dNdWx0aXBsZSA9IHRydWU7XHJcbiAgICAgIGlmIChmb3JQbGF5ZXIpIHtcclxuXHQgICAgIG5ld01vZHVsZS50YWcgPSAncGxheWVyJztcclxuICAgICAgICAgdmFyIGFjdEtleSA9IHRoaXMuZ2FtZVN0YXRlLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuU1BBQ0VCQVIpO1xyXG4gICAgICAgICB0aGlzLmdhbWVTdGF0ZS5pbnB1dC5rZXlib2FyZC5hZGRLZXlDYXB0dXJlKFthY3RLZXldKTtcclxuICAgICAgICAgYWN0S2V5Lm9uRG93bi5hZGQoYmVnaW5BY3QsIG5ld01vZHVsZSk7XHJcbiAgICAgICAgIGFjdEtleS5vblVwLmFkZChlbmRBY3QsIG5ld01vZHVsZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcblx0XHQgbmV3TW9kdWxlLnRhZyA9ICdlbmVteSc7XHJcbiAgICAgICAgIG5ld01vZHVsZS5iZWdpbkFjdCA9IGJlZ2luQWN0O1xyXG4gICAgICAgICBuZXdNb2R1bGUuZW5kQWN0ID0gZW5kQWN0O1xyXG4gICAgICB9XHJcblx0ICBuZXdNb2R1bGUudXBkYXRlID0gZ3VuVXBkYXRlO1xyXG4gICAgIG5ld01vZHVsZS5vblJlbW92ZSA9IGdlbmVyaWNPblJlbW92ZTtcclxuICAgICBuZXdNb2R1bGUucG93ZXJhYmxlID0gdHJ1ZTtcclxuXHR9XHJcbiAgIFxyXG4gICBpZiAodHlwZSA9PT0gJ2hhY2thYmxlJykge1xyXG4gICAgICAvLyBzZXQgdmFsdWVzXHJcbiAgICAgIG5ld01vZHVsZS5pc0hhY2tlZCA9IGZhbHNlO1xyXG4gICAgICBuZXdNb2R1bGUuaGFja0Rpc3RhbmNlID0gNDAwO1xyXG4gICAgICBuZXdNb2R1bGUuY3ViZS5hbmltYXRpb25zLmFkZCgnaGFja2FibGUnLCBbMCwxLDIsMyw0XSwgMTAsIHRydWUpO1xyXG4gICAgICBuZXdNb2R1bGUuY3ViZS5hbmltYXRpb25zLmFkZCgnaGFja2VkJywgWzUsNiw3LDgsOV0sIDEwLCB0cnVlKTtcclxuICAgICAgbmV3TW9kdWxlLmJhckZhZGUgPSAwLjAwMTtcclxuICAgICAgbmV3TW9kdWxlLmJhckZhZGVNYXhEZWxheSA9IDIwMDtcclxuICAgICAgbmV3TW9kdWxlLmJhckZhZGVEZWxheSA9IDA7XHJcbiAgICAgIG5ld01vZHVsZS5kZWxheSA9IDE2MDA7XHJcbiAgICAgIG5ld01vZHVsZS5iZWluZ0hhY2tlZCA9IGZhbHNlO1xyXG4gICAgICBuZXdNb2R1bGUuYmVpbmdIYWNrZWRQcmV2ID0gZmFsc2U7XHJcbiAgICAgIG5ld01vZHVsZS5oYWNraW5nID0gdGhpcy5nYW1lU3RhdGUuYWRkLmF1ZGlvKCdoYWNraW5nJywgMSwgdHJ1ZSk7XHJcbiAgICAgIC8vIGdpdmUgcHJvZ3Jlc3MgYmFyXHJcbiAgICAgIG5ld01vZHVsZS5oYWNrQmFyID0gdGhpcy5nYW1lU3RhdGUudWlCdWlsZGVyLmJ1aWxkUHJvZ3Jlc3NCYXIoJ2dyb3dpbmcnLCAxNTAwLCAxMjAwLCAxMDAsIDEwLCAgMjAwKTtcclxuICAgICAgbmV3TW9kdWxlLmhhY2tCYXIuc2V0U3R5bGUoMCwgMHhGRkZGRkYsIDB4MzYzNjM2LCAwLCAwLCAwLCAweEZGRkZGRiwgMHgyMDIwQ0MpO1xyXG4gICAgICBuZXdNb2R1bGUuaGFja0Jhci5oYWNrYWJsZSA9IG5ld01vZHVsZS5jdWJlO1xyXG4gICAgICBuZXdNb2R1bGUuaGFja0Jhci5vbkV2ZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIHRoaXMuaGFja2FibGUuYW5pbWF0aW9ucy5zdG9wKCk7XHJcbiAgICAgICAgIHRoaXMuaGFja2FibGUuYW5pbWF0aW9ucy5wbGF5KCdoYWNrZWQnKTtcclxuICAgICAgICAgdGhpcy5oYWNrYWJsZS5tb2R1bGUuaXNIYWNrZWQgPSB0cnVlO1xyXG4gICAgICB9O1xyXG4gICAgICAvLyBhZGQgZnVuY3Rpb25zXHJcbiAgICAgIG5ld01vZHVsZS51cGRhdGUgPSBoYWNrYWJsZVVwZGF0ZTtcclxuICAgICAgbmV3TW9kdWxlLm9uUmVtb3ZlID0gZ2VuZXJpY09uUmVtb3ZlO1xyXG4gICB9XHJcblx0Ly9SZXR1cm4gdGhlIG1vZHVsZSBvYmplY3RcclxuXHRyZXR1cm4gbmV3TW9kdWxlO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNb2R1bGVCdWlsZGVyO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgQXN0ZXJvaWRzID0gZnVuY3Rpb24oc3RhdGUsIHNpbXBsaWZ5KSB7XHJcbiAgIC8vIGluaXRpYWxpc2VcclxuXHR0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgIHRoaXMuc2ltcGxpZnkgPSBzaW1wbGlmeTtcclxuICAgdGhpcy5nYW1lID0gdGhpcy5zdGF0ZS5nYW1lO1xyXG4gICB0aGlzLmNhbSA9IHRoaXMuZ2FtZS5jYW1lcmE7XHJcbiAgIHRoaXMubnVtUm9pZHMgPSAwO1xyXG4gICB0aGlzLm1heFJvaWRzID0gMTAwO1xyXG4gICB0aGlzLmFzdGVyb2lkcyA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuXHR0aGlzLmFzdGVyb2lkcy5lbmFibGVCb2R5ID0gdHJ1ZTtcclxuXHR0aGlzLmFzdGVyb2lkcy5waHlzaWNzQm9keVR5cGUgPSBQaGFzZXIuUGh5c2ljcy5QMkpTO1xyXG5cdHRoaXMuYXN0ZXJvaWRMaXN0ID0gbmV3IFBoYXNlci5BcnJheVNldCgpO1xyXG5cdGlmICghdGhpcy5zaW1wbGlmeSkgeyB0aGlzLmdlbmVyYXRlQXN0ZXJvaWRzKCk7IH1cclxufTtcclxuXHJcbkFzdGVyb2lkcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBc3Rlcm9pZHM7XHJcblxyXG5Bc3Rlcm9pZHMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICBcclxufTtcclxuXHJcbkFzdGVyb2lkcy5wcm90b3R5cGUuZ2VuZXJhdGVBc3Rlcm9pZHMgPSBmdW5jdGlvbigpIHtcclxuICBmb3IoOyB0aGlzLm51bVJvaWRzIDwgdGhpcy5tYXhSb2lkczsgdGhpcy5udW1Sb2lkcysrKSB7XHJcbiAgICAgIHZhciByYW5kWCA9IHRoaXMuZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoMCwgdGhpcy5nYW1lLndvcmxkLndpZHRoKTtcclxuICAgICAgdmFyIHJhbmRZID0gdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgwLCB0aGlzLmdhbWUud29ybGQuaGVpZ2h0KTtcclxuICAgICAgLyogVE9ETzogcHJldmVudCBjb2xsaXNpb24gc3Bhd25pbmdcclxuICAgICAgd2hpbGUocmFuZFggPCB0aGlzLmNvcmVNb2R1bGUuY3ViZS54IC0gKHRoaXMucGxheWVyLmN1YmVzV2lkdGgoKSAvIDIgKyAxMDApICYmIHJhbmRYID4gdGhpcy5jb3JlTW9kdWxlLmN1YmUueCArICh0aGlzLnBsYXllci5jdWJlc1dpZHRoKCkgLyAyICsgMTAwKSAmJlxyXG4gICAgICByYW5kWSA8IHRoaXMuY29yZU1vZHVsZS5jdWJlLnkgLSAodGhpcy5wbGF5ZXIuY3ViZXNIZWlnaHQoKSAvIDIgKyAxMDApICYmIHJhbmRZID4gdGhpcy5jb3JlTW9kdWxlLmN1YmUueSArICh0aGlzLnBsYXllci5jdWJlc0hlaWdodCgpIC8gMiArIDEwMCkpIHtcclxuICAgICAgICAgcmFuZFggPSB0aGlzLmdhbWUucm5kLmludGVnZXJJblJhbmdlKDAsIHRoaXMuZ2FtZS53b3JsZC53aWR0aCk7XHJcbiAgICAgICAgIHJhbmRZID0gdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgwLCB0aGlzLmdhbWUud29ybGQuaGVpZ2h0KTtcclxuICAgICAgfVxyXG4gICAgICAqL1xyXG4gICAgICB2YXIgYXN0ZXJvaWQgPSB0aGlzLmFzdGVyb2lkcy5jcmVhdGUocmFuZFgsIHJhbmRZLCAnYXN0ZXJvaWQnKTtcclxuICAgICAgYXN0ZXJvaWQuYm9keS5jbGVhclNoYXBlcygpOyBcclxuICAgICAgYXN0ZXJvaWQuYm9keS5sb2FkUG9seWdvbignYXN0ZXJvaWRQb2x5Z29uJywgJ2FzdGVyb2lkJyk7IC8vQ2hhbmdlIHRoZSBjb2xsaXNpb24gZGV0ZWN0aW9uIGZyb20gYW4gQUFCQiB0byBhIHBvbHlnb25cclxuICAgICAgYXN0ZXJvaWQuYm9keS5kYW1waW5nID0gdGhpcy5nYW1lLnJuZC5yZWFsSW5SYW5nZSgwLCAwLjMpICogdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgwLCAxKSAqIHRoaXMuZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoMCwgMSk7XHJcbiAgICAgIGFzdGVyb2lkLmJvZHkucm90YXRpb24gPSB0aGlzLmdhbWUucm5kLnJlYWxJblJhbmdlKDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgYXN0ZXJvaWQuYm9keS5mb3JjZS54ID0gdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgtMTAsIDEwKSAqIDc1MDtcclxuICAgICAgYXN0ZXJvaWQuYm9keS5mb3JjZS55ID0gdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgtMTAsIDEwKSAqIDc1MDtcclxuICAgICAgYXN0ZXJvaWQuYm9keS5zZXRDb2xsaXNpb25Hcm91cCh0aGlzLnN0YXRlLmNvbGxpc2lvbkdyb3VwKTtcclxuICAgICAgYXN0ZXJvaWQuYm9keS5jb2xsaWRlcyh0aGlzLnN0YXRlLmNvbGxpc2lvbkdyb3VwKTtcclxuICAgICAgYXN0ZXJvaWQuYm9keS5jb2xsaWRlV29ybGRCb3VuZHMgPSBmYWxzZTtcclxuICAgICAgYXN0ZXJvaWQuYXV0b0N1bGwgPSB0cnVlO1xyXG4gICAgICBhc3Rlcm9pZC5jaGVja1dvcmxkQm91bmRzID0gdHJ1ZTtcclxuICAgICAgYXN0ZXJvaWQuZXZlbnRzLm9uT3V0T2ZCb3VuZHMuYWRkKHRoaXMucmVzZXRBc3Rlcm9pZCwge2NhbGxlcjogdGhpcywgYXN0ZXJvaWQ6IGFzdGVyb2lkfSk7XHJcbiAgICAgIHRoaXMuYXN0ZXJvaWRMaXN0LmFkZChhc3Rlcm9pZCk7XHJcbiAgIH1cclxufTtcclxuXHJcbkFzdGVyb2lkcy5wcm90b3R5cGUucmVzZXRBc3Rlcm9pZCA9IGZ1bmN0aW9uKCkge1xyXG4gICB2YXIgcmFuZFggPSB0aGlzLmNhbGxlci5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgwLCB0aGlzLmNhbGxlci5nYW1lLndvcmxkLndpZHRoKTtcclxuICAgdmFyIHJhbmRZID0gdGhpcy5jYWxsZXIuZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoMCwgdGhpcy5jYWxsZXIuZ2FtZS53b3JsZC5oZWlnaHQpO1xyXG4gICAvLyBUT0RPOiBwcmV2ZW50IG92ZXJsYXAgb24gcmVzZXRcclxuICAgdGhpcy5hc3Rlcm9pZC54ID0gcmFuZFg7XHJcbiAgIHRoaXMuYXN0ZXJvaWQueSA9IHJhbmRZO1xyXG4gICB0aGlzLmFzdGVyb2lkLmJvZHkucm90YXRpb24gPSB0aGlzLmNhbGxlci5nYW1lLnJuZC5yZWFsSW5SYW5nZSgwLCAyICogTWF0aC5QSSk7XHJcbiAgIHRoaXMuYXN0ZXJvaWQuYm9keS5mb3JjZS54ID0gdGhpcy5jYWxsZXIuZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoLTEwLCAxMCkgKiA3NTA7XHJcbiAgIHRoaXMuYXN0ZXJvaWQuYm9keS5mb3JjZS55ID0gdGhpcy5jYWxsZXIuZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoLTEwLCAxMCkgKiA3NTA7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEFzdGVyb2lkcztcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgQ2hlYXRpbmcgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAvLyBpbml0aWFsaXNhdGlvblxyXG5cdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgdGhpcy5nYW1lID0gc3RhdGUuZ2FtZTtcclxuICAgdGhpcy5jYW0gPSB0aGlzLmdhbWUuY2FtZXJhO1xyXG4gICB0aGlzLm1vdXNlID0gdGhpcy5zdGF0ZS5tb3VzZTtcclxuICAgLy8gYnV0dG9uc1xyXG4gICAvL2NvcmVcclxuXHR0aGlzLnBsYWNlQ29yZUtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlApO1xyXG5cdHRoaXMucGxhY2VDb3JlS2V5Lm9uRG93bi5hZGQodGhpcy5kZWJ1Z0FkZE1vZHVsZSwge2NhbGxlcjogdGhpcywga2V5OiAnY29yZSd9KTtcclxuXHQvL3NoaWVsZFxyXG5cdHRoaXMucGxhY2VTaGllbGRLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5PKTtcclxuICAgIHRoaXMucGxhY2VTaGllbGRLZXkub25Eb3duLmFkZCh0aGlzLmRlYnVnQWRkTW9kdWxlLCB7Y2FsbGVyOiB0aGlzLCBrZXk6ICdzaGllbGQnfSk7XHJcblx0Ly90aHJ1c3RlclxyXG5cdHRoaXMucGxhY2VUaHJ1c3RlcktleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkkpO1xyXG4gICAgdGhpcy5wbGFjZVRocnVzdGVyS2V5Lm9uRG93bi5hZGQodGhpcy5kZWJ1Z0FkZE1vZHVsZSwge2NhbGxlcjogdGhpcywga2V5OiAndGhydXN0ZXInfSk7XHJcblx0Ly9zb2xhclBhbmVsXHJcblx0dGhpcy5wbGFjZVNQS2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuVSk7XHJcbiAgICB0aGlzLnBsYWNlU1BLZXkub25Eb3duLmFkZCh0aGlzLmRlYnVnQWRkTW9kdWxlLCB7Y2FsbGVyOiB0aGlzLCBrZXk6ICdzb2xhclBhbmVsJ30pO1xyXG5cdC8vaGFja2VyXHJcblx0dGhpcy5wbGFjZUhhY2tLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5ZKTtcclxuXHR0aGlzLnBsYWNlSGFja0tleS5vbkRvd24uYWRkKHRoaXMuZGVidWdBZGRNb2R1bGUsIHtjYWxsZXI6IHRoaXMsIGtleTogJ2hhY2tlcid9KTtcclxuXHQvL2d1blxyXG5cdHRoaXMucGxhY2VHdW5LZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5UKTtcclxuICAgIHRoaXMucGxhY2VHdW5LZXkub25Eb3duLmFkZCh0aGlzLmRlYnVnQWRkTW9kdWxlLCB7Y2FsbGVyOiB0aGlzLCBrZXk6ICdndW4nfSk7XHJcblx0Ly9oYWNrYWJsZVxyXG5cdHRoaXMucGxhY2VIYWNrYWJsZUtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkwpO1xyXG4gICB0aGlzLnBsYWNlSGFja2FibGVLZXkub25Eb3duLmFkZCh0aGlzLmRlYnVnQWRkTW9kdWxlLCB7Y2FsbGVyOiB0aGlzLCBrZXk6ICdoYWNrYWJsZSd9KTtcclxuICAgLy8gcmVzZXRpbmdcclxuICAgdGhpcy5yZXNldEtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLk0pO1xyXG4gICB0aGlzLnJlc2V0S2V5Lm9uRG93bi5hZGQodGhpcy5yZXNldCwgdGhpcyk7XHJcbn07XHJcblxyXG5DaGVhdGluZy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaGVhdGluZztcclxuXHJcbkNoZWF0aW5nLnByb3RvdHlwZS5kZWJ1Z0FkZE1vZHVsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICB0aGlzLmNhbGxlci5zdGF0ZS5tb2R1bGVCdWlsZGVyLmJ1aWxkKHRoaXMua2V5LCB0aGlzLmNhbGxlci5tb3VzZS54LCB0aGlzLmNhbGxlci5tb3VzZS55LCB0cnVlKTtcclxufTtcclxuXHJcbkNoZWF0aW5nLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuc3RhdGUubGV2ZWxTZXR1cC5yZXN0YXJ0TGV2ZWwoKTsgXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IENoZWF0aW5nO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwiLypcclxuRGVmaW5lcyBhIGN1YmUuXHJcbiovXHJcblxyXG52YXIgQ3ViZSA9IGZ1bmN0aW9uIChzdGF0ZSwgeCwgeSwgc3ByaXRlKSB7XHJcbiAgICBQaGFzZXIuU3ByaXRlLmNhbGwodGhpcywgc3RhdGUuZ2FtZSwgeCwgeSwgc3ByaXRlKTtcclxuXHQgdGhpcy50YWcgPSAnbW9kdWxlJztcdC8vdGFnIGlzIHVzZWQgdG8gZGV0ZWN0IG9iamVjdCB0eXBlIGR1cmluZyBjb2xsaXNpb24gY2hlY2tpbmdcclxuXHQgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgdGhpcy5nYW1lID0gdGhpcy5zdGF0ZS5nYW1lO1xyXG4gICAgdGhpcy5nYW1lLmFkZC5leGlzdGluZyh0aGlzKTtcclxuICAgIHRoaXMuZ3JvdXAgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLm1vZHVsZSA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMuaW5kaWNhdG9yRmFkZSA9IDAuMDI7XHJcbiAgICB0aGlzLmhlYWx0aEJhciA9IHRoaXMuc3RhdGUudWlCdWlsZGVyLmJ1aWxkUHJvZ3Jlc3NCYXIoJ3Nocmlua2luZycsIDAsIDAsIDIwLCA0LCAzKTtcclxuXHR0aGlzLmhlYWx0aEJhci5zZXRTdHlsZSgwLCAweEZGRkZGRiwgMHgzNjM2MzYsIDAsIDAsIDAsIDB4RkZGRkZGLCAweDIwQ0MyMCk7XHJcblx0dGhpcy5oZWFsdGhCYXIuY3ViZSA9IHRoaXM7XHJcblx0dGhpcy5oZWFsdGhCYXJGYWRlID0gMC4wMDA4O1xyXG5cdHRoaXMuaW1wYWN0ID0gdGhpcy5nYW1lLmFkZC5hdWRpbygnbW9kdWxlSW1wYWN0Jyk7XHJcblx0dGhpcy5pbXBhY3Qudm9sdW1lID0gMC4yNTtcclxuXHR0aGlzLmltcGFjdC5hbGxvd011bHRpcGxlID0gdHJ1ZTtcclxuXHQvL3NldCB1cGRhdGUgZnVuY3Rpb24gb2YgaGVhbHRoIGJhclxyXG5cdHRoaXMuaGVhbHRoQmFyLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy5zZXRMb2NhdGlvbih0aGlzLmN1YmUueCwgdGhpcy5jdWJlLnkrMTApO1xyXG5cdH07XHJcblx0Ly9vbkV2ZW50IGNhbGxlZCB3aGVuIGN1YmUgcnVucyBvdXQgb2YgaGVhbHRoXHJcblx0dGhpcy5oZWFsdGhCYXIub25FdmVudCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy5jdWJlLmR5aW5nID0gdHJ1ZTtcclxuXHRcdHRoaXMuY3ViZS5saWZlID0gNTA7XHJcblx0XHQvLyB0aGlzLmdyb3VwLmNvdW50Q3ViZXMoKTtcclxuXHRcdC8vIHRoaXMuZGVzdHJveSgpO1xyXG5cdH07XHJcblx0dGhpcy5jb25zdHJhaW50cyA9IFtdO1xyXG59O1xyXG5cclxuQ3ViZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBoYXNlci5TcHJpdGUucHJvdG90eXBlKTtcclxuQ3ViZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJlO1xyXG5cclxuLyoqXHJcbiAqIEF1dG9tYXRpY2FsbHkgY2FsbGVkIGJ5IFdvcmxkLnVwZGF0ZVxyXG4gKi9cclxuQ3ViZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIGlmICh0aGlzLmNJbmRpY2F0b3IgJiYgdGhpcy5jSW5kaWNhdG9yLmFscGhhID4gMCkge1xyXG4gICAgICB0aGlzLmNJbmRpY2F0b3IuYWxwaGEgLT0gdGhpcy5pbmRpY2F0b3JGYWRlO1xyXG4gICB9XHJcbiAgIGlmICh0aGlzLm1vZHVsZS51cGRhdGUpIHtcclxuICAgICAgdGhpcy5tb2R1bGUudXBkYXRlKCk7XHJcbiAgIH1cclxuICAgaWYgKHRoaXMuaGVhbHRoQmFyLmdyYXBoaWNzLmFscGhhID4gMCkge1xyXG4gICAgICB0aGlzLmhlYWx0aEJhci5ncmFwaGljcy5hbHBoYSAtPSB0aGlzLmhlYWx0aEJhckZhZGUgKiB0aGlzLmdhbWUudGltZS5lbGFwc2VkO1xyXG4gICB9XHJcbiAgIGlmICh0aGlzLmR5aW5nKSB7XHJcbiAgICAgIHRoaXMubGlmZSAtPSB0aGlzLmdhbWUudGltZS5lbGFwc2VkO1xyXG4gICAgICBpZiAodGhpcy5saWZlIDwgMCkge1xyXG4gICAgICAgICB0aGlzLmR5aW5nID0gZmFsc2U7XHJcbiAgICAgICAgIHRoaXMuaGVhbHRoQmFyLmRlc3Ryb3koKTtcclxuICAgICAgICAgaWYgKHRoaXMuZ3JvdXApIHtcclxuICAgICAgICAgICAgaWYodGhpcy50YWcgPT09ICdlbmVteV9tb2R1bGUnKSB7XHJcbiAgICAgICAgICAgICAgIGlmKHRoaXMua2V5ID09PSAndGhydXN0ZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvcC5hZGRNb25leSgzNSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgZWxzZSBpZih0aGlzLmtleSA9PT0gJ3NoaWVsZCcpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zaG9wLmFkZE1vbmV5KDEwKTtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMua2V5ID09PSAnZ3VuJykge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNob3AuYWRkTW9uZXkoNTApO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIGVsc2UgaWYodGhpcy5rZXkgPT09ICdzb2xhclBhbmVsJykge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNob3AuYWRkTW9uZXkoMjUpO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5ncm91cC5kZXN0cm95Q3ViZSh0aGlzKTtcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYodGhpcy5rZXkgPT09ICdjb3JlJyAmJiB0aGlzLnRhZyA9PT0gJ21vZHVsZScpIHtcclxuICAgICAgICAgICAgICAgdGhpcy5raWxsKCk7XHJcbiAgICAgICAgICAgICAgIHRoaXMuc3RhdGUucmVzdGFydExldmVsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlLnByb3RvdHlwZS5sb3NlQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICghdGhpcy5teUNvbm5lY3Rpb24pIHtcclxuICAgIHJldHVybjtcclxuICB9ICBcclxuICBpZiAodGhpcy5teUNvbm5lY3Rpb24uc3RhcnQgPT09IHRoaXMpIHtcclxuICAgICAgdmFyIGVuZE1vZHVsZSA9IHRoaXMubXlDb25uZWN0aW9uLmVuZC5tb2R1bGU7XHJcbiAgICAgIGlmIChlbmRNb2R1bGUuaGFzT3duUHJvcGVydHkoJ29uTG9zZUNvbm5lY3Rpb24nKSkge1xyXG4gICAgICAgICBlbmRNb2R1bGUub25Mb3NlQ29ubmVjdGlvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMubXlDb25uZWN0aW9uLmVuZC5teUNvbm5lY3Rpb24gPSB1bmRlZmluZWQ7XHJcbiAgICAgIHRoaXMubXlDb25uZWN0aW9uID0gdW5kZWZpbmVkO1xyXG4gICB9IGVsc2UgaWYgKHRoaXMubXlDb25uZWN0aW9uLmVuZCA9PT0gdGhpcykge1xyXG4gICAgICB2YXIgc3RhcnRNb2R1bGUgPSB0aGlzLm15Q29ubmVjdGlvbi5lbmQubW9kdWxlO1xyXG4gICAgICBpZiAoc3RhcnRNb2R1bGUuaGFzT3duUHJvcGVydHkoJ29uTG9zZUNvbm5lY3Rpb24nKSkge1xyXG4gICAgICAgICBzdGFydE1vZHVsZS5vbkxvc2VDb25uZWN0aW9uKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5teUNvbm5lY3Rpb24uc3RhcnQubXlDb25uZWN0aW9uID0gdW5kZWZpbmVkO1xyXG4gICAgICB0aGlzLm15Q29ubmVjdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZS5wcm90b3R5cGUuY3ViZUNvbGxpZGUgPSBmdW5jdGlvbihvdGhlcikge1xyXG4gICAvLyBiYWQgY29sbGlzaW9uLCBjb2xsaXNpb24gd2l0aCBub24tc3ByaXRlLCBjb2xsaXNpb24gd2l0aCBub24tY3ViZVxyXG4gICBpZiAoIW90aGVyIHx8ICFvdGhlci5zcHJpdGUgfHwgb3RoZXIucHJvdG90eXBlICE9PSB0aGlzLnByb3RvdHlwZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgaWYgKCF0aGlzLmdyb3VwICYmIG90aGVyLnNwcml0ZS5ncm91cCAmJiBvdGhlci5zcHJpdGUuZ3JvdXAuaXNQbGF5ZXIpIHsgLy8gZmxvYXRpbmcgaGl0dGluZyBwbGF5ZXJcclxuICAgICAgb3RoZXIuc3ByaXRlLmdyb3VwLmhhbmRsZUF0dGF0Y2gob3RoZXIuc3ByaXRlLCB0aGlzKTtcclxuICAgfSBlbHNlIGlmIChvdGhlci5ncm91cCAmJiB0aGlzLmdyb3VwID09PSBvdGhlci5ncm91cCkgey8vIGlmIGN1YmVzIGluIHNhbWUgZ3JvdXBcclxuICAgICAgLy8gbWFnaWMgY29uY2gsIHdoYXQgc2hvdWxkIHdlIGRvIGhlcmU/XHJcbiAgIH0gZWxzZSBpZiAodGhpcy5ncm91cCkge1xyXG4gICAgICBpZiAodGhpcy5ncm91cC5pc1BsYXllcikgeyAvLyBwbGF5ZXJcclxuICAgICAgICAgaWYgKG90aGVyLnNwcml0ZS50YWcgPT09ICdlbmVteV9tb2R1bGUnKSB7IC8vIGNvbGxpc2lvbiB3aXRoIGVuZW15LCByYW1taW5nXHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuaGFuZGxlUmFtbWluZyh0aGlzLCBvdGhlci5zcHJpdGUpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7Ly8gZW5lbXlcclxuICAgICAgICAgdGhpcy5ncm91cC5oYW5kbGVSYW1taW5nKHRoaXMsIG90aGVyLnNwcml0ZSk7IC8vIGVuZW1pZXMgb25seSByYW0gb24gY29sbGlzaW9uXHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5ncm91cC5jb3VudEN1YmVzKCk7XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgIHZhciBzdHJpbmcgPSAnJztcclxuICAgc3RyaW5nICs9IHRoaXMuY29uY2F0KCduYW1lJywgdGhpcy5uYW1lKTtcclxuICAgcmV0dXJuIHN0cmluZztcclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uKHN0cmluZywgdmFsKSB7XHJcbiAgIHJldHVybiBzdHJpbmcgKyAnOiAnICsgdmFsICsgJ1xcbic7XHJcbn07XHJcblxyXG5DdWJlLnByb3RvdHlwZS5kaXNwbGF5SW5kaWNhdG9yID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5jSW5kaWNhdG9yLmFscGhhID0gMTsgXHJcbn07XHJcblxyXG5DdWJlLnByb3RvdHlwZS5oaWRlSW5kaWNhdG9yID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5jSW5kaWNhdG9yLmFscGhhID0gMDsgXHJcbn07XHJcblxyXG5DdWJlLnByb3RvdHlwZS50YWtlRGFtYWdlID0gZnVuY3Rpb24oYW10KSB7XHJcbiAgIHRoaXMuaW1wYWN0LnBsYXkoKTtcclxuICAgdGhpcy5oZWFsdGhCYXIuYWRkVmFsdWUoLWFtdCk7XHJcbiAgIHRoaXMuaGVhbHRoQmFyLmdyYXBoaWNzLmFscGhhID0gMTtcclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLmRpZVF1aWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5keWluZyA9IHRydWU7XHJcbiAgdGhpcy5saWZlID0gMDtcclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICBpZiAoIXRoaXMuZ3JvdXApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIHRoaXMuZ3JvdXAucmVtb3ZlKHRoaXMpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDdWJlO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsInZhciBBc3RhciA9IHJlcXVpcmUoJy4uL2xpYnMvamF2YXNjcmlwdC1hc3Rhci9hc3RhcicpO1xyXG52YXIgRW5lbXlBSSA9IHJlcXVpcmUoJy4vZW5lbXlfYWknKTtcclxuXHJcbi8qXHJcbkRlZmluZXMgYSBjdWJlIGdyb3VwLlxyXG4qL1xyXG5cclxudmFyIEN1YmVHcm91cCA9IGZ1bmN0aW9uIChzdGF0ZSwgcm9vdCkge1xyXG4gICB0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgIHRoaXMuZ2FtZSA9IHRoaXMuc3RhdGUuZ2FtZTtcclxuICAgdGhpcy5yb290ID0gcm9vdDtcclxuICAgdGhpcy5jdWJlcyA9IFtdO1xyXG4gICB2YXIgY29sID0gW107XHJcbiAgIGNvbC5wdXNoKHRoaXMucm9vdCk7XHJcbiAgIHRoaXMuY3ViZXMucHVzaChjb2wpO1xyXG4gICBpZiAodGhpcy5yb290KSB7XHJcbiAgICAgIHRoaXMucm9vdC5ncm91cCA9IHRoaXM7XHJcbiAgIH1cclxuICAgdGhpcy5ESVIgPSB7Tk9SVEg6IDAsIEVBU1Q6IDEsIFNPVVRIOiAyLCBXRVNUOiAzfTtcclxuICAgdGhpcy5vZmZzZXQgPSAyO1xyXG5cdHRoaXMuYWN0aXZlSGFja2VyTW9kdWxlcyA9IFtdO1x0Ly9saXN0IG9mIGhhY2tlciBtb2R1bGVzIGluIHRoaXMgZ3JvdXBcclxuXHR0aGlzLm1vZHVsZUNvbm5lY3QgPSB0aGlzLmdhbWUuYWRkLmF1ZGlvKCdtb2R1bGVDb25uZWN0Jyk7XHJcblx0dGhpcy5tb2R1bGVDb25uZWN0LmFsbG93TXVsdGlwbGUgPSB0cnVlO1xyXG4gICB0aGlzLm51bUN1YmVzID0gMTtcclxuICAgdGhpcy5ib3VuY2VCYWNrRm9yY2UgPSAzMDtcclxuICAgdGhpcy5taW5SYW1WZWwgPSAzMDA7XHJcbiAgIHRoaXMuZGVidWcgPSBmYWxzZTtcclxuICAgdGhpcy5kZWJ1Z0hhbmRsZUF0dGF0Y2ggPSBmYWxzZTtcclxuICAgdGhpcy5kZWJ1Z0NyZWF0ZUNvbnN0cmFpbnRzID0gZmFsc2U7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3ViZUdyb3VwO1xyXG5cclxuLyoqXHJcbiAqIEF1dG9tYXRpY2FsbHkgY2FsbGVkIGJ5IFdvcmxkLnVwZGF0ZVxyXG4gKi9cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgaWYgKHRoaXMuQUkpIHtcclxuICAgICAgdGhpcy5BSS51cGRhdGUoKTtcclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24oZnVuKSB7XHJcbiAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmN1YmVzSGVpZ2h0KCk7IGNvbCsrKSB7XHJcbiAgICAgICAgIHZhciBjdWJlID0gdGhpcy5jdWJlc1tyb3ddW2NvbF07XHJcbiAgICAgICAgIGlmIChjdWJlICYmIGN1YmUuaGFzT3duUHJvcGVydHkoZnVuKSkge1xyXG4gICAgICAgICAgICAvLyBpZiBjdWJlcyBuZWVkIGZ1bmN0aW9ucyBjYWxsZWRcclxuICAgICAgICAgfSBlbHNlIGlmIChjdWJlICYmIGN1YmUubW9kdWxlICYmIGN1YmUubW9kdWxlLmhhc093blByb3BlcnR5KGZ1bikpIHtcclxuICAgICAgICAgICAgdmFyIGZuID0gY3ViZS5tb2R1bGVbZnVuXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICBmbi5jYWxsKGN1YmUubW9kdWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jYWxsT25UeXBlID0gZnVuY3Rpb24oZnVuLCB0eXBlKSB7XHJcbiAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmN1YmVzSGVpZ2h0KCk7IGNvbCsrKSB7XHJcbiAgICAgICAgIHZhciBjdWJlID0gdGhpcy5jdWJlc1tyb3ddW2NvbF07XHJcbiAgICAgICAgIGlmIChjdWJlICYmIGN1YmUuaGFzT3duUHJvcGVydHkoZnVuKSkge1xyXG4gICAgICAgICAgICAvLyBpZiBjdWJlcyBuZWVkIGZ1bmN0aW9ucyBjYWxsZWRcclxuICAgICAgICAgfSBlbHNlIGlmIChjdWJlICYmIGN1YmUubW9kdWxlICYmIGN1YmUubW9kdWxlLnR5cGUgPT09IHR5cGUgJiYgY3ViZS5tb2R1bGUuaGFzT3duUHJvcGVydHkoZnVuKSkge1xyXG4gICAgICAgICAgICB2YXIgZm4gPSBjdWJlLm1vZHVsZVtmdW5dO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgIGZuLmNhbGwoY3ViZS5tb2R1bGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmdldE1vZHVsZXMgPSBmdW5jdGlvbih0eXBlKSB7XHJcbiAgIHZhciBtb2R1bGVzID0gW107XHJcbiAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmN1YmVzSGVpZ2h0KCk7IGNvbCsrKSB7XHJcbiAgICAgICAgIHZhciBjdWJlID0gdGhpcy5jdWJlc1tyb3ddW2NvbF07XHJcbiAgICAgICAgIGlmIChjdWJlICYmIGN1YmUubW9kdWxlLnR5cGUgPT09IHR5cGUpIHtcclxuICAgICAgICAgICAgbW9kdWxlcy5wdXNoKGN1YmUubW9kdWxlKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxuICAgcmV0dXJuIG1vZHVsZXM7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmdpdmVBSSA9IGZ1bmN0aW9uKHR5cGUsIHBsYXllcikge1xyXG4gICB0aGlzLkFJID0gbmV3IEVuZW15QUkodGhpcy5nYW1lLCB0aGlzLCB0eXBlLCBwbGF5ZXIpO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihjdWJlLCBwb2ludCkge1xyXG4gIGlmICghdGhpcy5yb290ICYmIGN1YmUubW9kdWxlLnR5cGUgPT09ICdjb3JlJykge1xyXG4gICAgIHRoaXMucm9vdCA9IGN1YmU7XHJcbiAgfVxyXG4gIGN1YmUuZ3JvdXAgPSB0aGlzO1xyXG4gIHRoaXMuc2V0KGN1YmUsIHBvaW50KTtcclxuICB0aGlzLmNyZWF0ZUNvbnN0cmFpbnRzU3BlY2lhbChjdWJlKTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuaGFuZGxlQXR0YXRjaCA9IGZ1bmN0aW9uKG9yaWdpbiwgb3RoZXIpIHtcclxuICAgaWYgKHRoaXMuZGVidWdIYW5kbGVBdHRhdGNoKSB7IGNvbnNvbGUubG9nKCdoYW5kbGVDb2xsaXNpb24oKSBzdGFydDonLCBvcmlnaW4ubW9kdWxlLnR5cGUsIG90aGVyLm1vZHVsZS50eXBlKTsgfVxyXG4gICBpZiAodGhpcy5kZWJ1Z0hhbmRsZUF0dGF0Y2gpIHsgdGhpcy5kaXNwbGF5Q3ViZXMoKTsgfVxyXG4gICBpZiAodGhpcy5nZXQob3RoZXIpKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdoYW5kbGVBdHRhdGNoKCkgd2FzIGdpdmVuIGEgbWVtYmVyJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICB2YXIgcmVsU2lkZSA9IHRoaXMucmVsYXRpdmVTaWRlKG9yaWdpbi5ib2R5LCBvdGhlci5ib2R5KTtcclxuICAgdmFyIG9yaWdpbkxvYyA9IHRoaXMuZmluZChvcmlnaW4pO1xyXG4gICB2YXIgb3RoZXJMb2MgPSB0aGlzLmNhbGNQb3Mob3JpZ2luLCByZWxTaWRlKTtcclxuICAgdGhpcy5tb2R1bGVDb25uZWN0LnBsYXkoKTtcclxuICAgaWYgKHRoaXMuZGVidWdIYW5kbGVBdHRhdGNoKSBjb25zb2xlLmxvZygnaGFuZGxlQ29sbGlzaW9uKCkgcHJlLWZpbmQ6JywgJ3JlbFNpZGU6JywgcmVsU2lkZSwgJ29yaWdpbkxvYzonLCBNYXRoLmZsb29yKG9yaWdpbkxvYy54KSwgTWF0aC5mbG9vcihvcmlnaW5Mb2MueSksICdvdGhlckxvYzonLCBNYXRoLmZsb29yKG90aGVyTG9jLngpLCBNYXRoLmZsb29yKG90aGVyTG9jLnkpKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgIHRoaXMuc2V0KG90aGVyLCBvdGhlckxvYyk7XHJcbiAgIG90aGVyTG9jID0gdGhpcy5maW5kKG90aGVyKTsgLy8gdXBkYXRlIHBvc2l0aW9uIHNpbmNlIHNldCBjYW4gc2hpZnQgZ3JpZFxyXG4gICBpZiAoIW90aGVyTG9jKSB7XHJcbiAgICAgIGlmICh0aGlzLmRlYnVnSGFuZGxlQXR0YXRjaCkge1xyXG4gICAgICAgICBjb25zb2xlLmxvZygnaGFuZGxlQ29sbGlzaW9uKCk6IG90aGVyTG9jIERORScsICctLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcclxuICAgICAgICAgdGhpcy5kaXNwbGF5Q3ViZXMoKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgdmFyIHJlbGF0aXZlTm9ydGggPSB0aGlzLnJlbGF0aXZlTm9ydGgob3RoZXIpOyAvLyBvdGhlcidzIG5vcnRoIHBvaW50cyB0aGlzIGRpciByZWxhdGl2ZSB0byB0aGUgcm9vdFxyXG4gICBpZiAodGhpcy5kZWJ1Z0hhbmRsZUF0dGF0Y2gpIHsgY29uc29sZS5sb2coJ2hhbmRsZUNvbGxpc2lvbigpIHBvc3QtZmluZDonLCAnb3RoZXJMb2M6JywgTWF0aC5mbG9vcihvdGhlckxvYy54KSwgTWF0aC5mbG9vcihvdGhlckxvYy55KSwgJ3JlbGF0aXZlTm9ydGg6JywgcmVsYXRpdmVOb3J0aCk7IH1cclxuICAgdGhpcy5jcmVhdGVDb25zdHJhaW50cyhvdGhlciwgb3RoZXJMb2MsIHJlbGF0aXZlTm9ydGgpO1xyXG4gICBpZiAob3RoZXIubW9kdWxlLnR5cGUgPT09ICdzb2xhclBhbmVsJykge1xyXG4gICAgICB0aGlzLmNyZWF0ZUNvbm5lY3Rpb25Gcm9tKG90aGVyKTtcclxuICAgfSBlbHNlIGlmIChvdGhlci5tb2R1bGUucG93ZXJhYmxlKSB7XHJcbiAgICAgIHZhciBzcGFyZVNvbGFyUGFuZWwgPSB0aGlzLnNwYXJlU29sYXJQYW5lbCgpO1xyXG4gICAgICBpZiAoc3BhcmVTb2xhclBhbmVsKSB7XHJcbiAgICAgICAgIHNwYXJlU29sYXJQYW5lbC5naXZlVGFyZ2V0KG90aGVyLm1vZHVsZSk7XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICBpZiAodGhpcy5kZWJ1Z0hhbmRsZUF0dGF0Y2gpIHsgdGhpcy5kaXNwbGF5Q3ViZXMoKTsgfVxyXG4gICBpZiAodGhpcy5kZWJ1Z0hhbmRsZUF0dGF0Y2gpIHsgY29uc29sZS5sb2coJ2hhbmRsZUNvbGxpc2lvbigpIGVuZDonLCAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7IH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUucmVsYXRpdmVOb3J0aCA9IGZ1bmN0aW9uKGN1YmUpIHtcclxuICAgdmFyIGRpZmZBbmdsZSA9IGN1YmUuYm9keS5yb3RhdGlvbiAtIHRoaXMucm9vdC5ib2R5LnJvdGF0aW9uO1xyXG4gICB2YXIgcmVsYXRpdmUgPSB0aGlzLmFuZ2xlVG9EaXIoZGlmZkFuZ2xlKTtcclxuICAgcmV0dXJuIHJlbGF0aXZlO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jcmVhdGVDb25uZWN0aW9uRnJvbSA9IGZ1bmN0aW9uKHBhbmVsKSB7XHJcbiAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmN1YmVzSGVpZ2h0KCk7IGNvbCsrKSB7XHJcbiAgICAgICAgIHZhciBjdWJlID0gdGhpcy5jdWJlc1tyb3ddW2NvbF07XHJcbiAgICAgICAgIGlmIChjdWJlICYmIGN1YmUgIT09IHBhbmVsICYmICFjdWJlLm15Q29ubmVjdGlvbiAmJiBjdWJlLm1vZHVsZS5wb3dlcmFibGUpIHtcclxuICAgICAgICAgICAgcGFuZWwubW9kdWxlLmdpdmVUYXJnZXQoY3ViZS5tb2R1bGUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLnNwYXJlU29sYXJQYW5lbCA9IGZ1bmN0aW9uKCkge1xyXG4gICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCB0aGlzLmN1YmVzV2lkdGgoKTsgcm93KyspIHtcclxuICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICB2YXIgY3ViZSA9IHRoaXMuY3ViZXNbcm93XVtjb2xdO1xyXG4gICAgICAgICBpZiAoY3ViZSAmJiAhY3ViZS5teUNvbm5lY3Rpb24gJiYgY3ViZS5tb2R1bGUudHlwZSA9PT0gJ3NvbGFyUGFuZWwnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjdWJlLm1vZHVsZTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuaGFuZGxlUmFtbWluZyA9IGZ1bmN0aW9uKG9yaWdpbiwgb3RoZXIpIHtcclxuICAgaWYgKCFvdGhlci5ncm91cCB8fCBvdGhlci5ncm91cCA9PT0gdGhpcykge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgdmFyIHN1bVZlbCA9IE1hdGguYWJzKG9yaWdpbi5ib2R5LnZlbG9jaXR5LngpICsgTWF0aC5hYnMob3JpZ2luLmJvZHkudmVsb2NpdHkueSk7XHJcbiAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdoYW5kbGVSYW1taW5nKCk6JywgJ3N1bVZlbDonLCBzdW1WZWwudG9QcmVjaXNpb24oNCkpOyB9XHJcbiAgIGlmIChzdW1WZWwgPj0gdGhpcy5taW5SYW1WZWwpIHtcclxuICAgICAgaWYgKHRoaXMuZ2FtZS5qdWljeSkge1xyXG4gICAgICAgICB0aGlzLmdhbWUuanVpY3kuc2hha2UoKTtcclxuICAgICAgfVxyXG4gICAgICBvdGhlci50YWtlRGFtYWdlKDMpO1xyXG4gICAgICB0aGlzLmNhbGwoJ3RocnVzdGVySGFsdCcpO1xyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmNhbGNQb3MgPSBmdW5jdGlvbihvcmlnaW4sIHJlbFNpZGUpIHtcclxuICAgdmFyIGRpZmZBbmdsZSA9IG9yaWdpbi5ib2R5LnJvdGF0aW9uIC0gdGhpcy5yb290LmJvZHkucm90YXRpb247XHJcbiAgIHZhciByZWxhdGl2ZSA9IHRoaXMuYW5nbGVUb0RpcihkaWZmQW5nbGUpO1xyXG4gICB2YXIgb3V0cHV0ID0gdGhpcy5maW5kKG9yaWdpbik7XHJcbiAgIGlmICghb3V0cHV0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICBpZiAocmVsYXRpdmUgPT09IDApIHsgLy8gbm9ydGggcmVsYXRpdmUgdG8gdGhlIHJvb3RcclxuICAgICAgaWYgKHJlbFNpZGUgPT09IDApIHtcclxuICAgICAgICAgb3V0cHV0LnkrKztcclxuICAgICAgfSBlbHNlIGlmIChyZWxTaWRlID09PSAxKSB7XHJcbiAgICAgICAgIG91dHB1dC54Kys7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsU2lkZSA9PT0gMikge1xyXG4gICAgICAgICBvdXRwdXQueS0tO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbFNpZGUgPT09IDMpIHtcclxuICAgICAgICAgb3V0cHV0LngtLTtcclxuICAgICAgfVxyXG4gICB9IGVsc2UgaWYgKHJlbGF0aXZlID09PSAxKSB7IC8vIGVhc3QgcmVsYXRpdmUgdG8gcm9vdFxyXG4gICAgICBpZiAocmVsU2lkZSA9PT0gMCkge1xyXG4gICAgICAgICBvdXRwdXQueCsrO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbFNpZGUgPT09IDEpIHtcclxuICAgICAgICAgb3V0cHV0LnktLTtcclxuICAgICAgfSBlbHNlIGlmIChyZWxTaWRlID09PSAyKSB7XHJcbiAgICAgICAgIG91dHB1dC54LS07XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsU2lkZSA9PT0gMykge1xyXG4gICAgICAgICBvdXRwdXQueSsrO1xyXG4gICAgICB9XHJcbiAgIH0gZWxzZSBpZiAocmVsYXRpdmUgPT09IDIpIHsgLy8gc291dGggcmVsYXRpdmUgdG8gcm9vdFxyXG4gICAgICBpZiAocmVsU2lkZSA9PT0gMCkge1xyXG4gICAgICAgICBvdXRwdXQueS0tO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbFNpZGUgPT09IDEpIHtcclxuICAgICAgICAgb3V0cHV0LngtLTtcclxuICAgICAgfSBlbHNlIGlmIChyZWxTaWRlID09PSAyKSB7XHJcbiAgICAgICAgIG91dHB1dC55Kys7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsU2lkZSA9PT0gMykge1xyXG4gICAgICAgICBvdXRwdXQueCsrO1xyXG4gICAgICB9XHJcbiAgIH0gZWxzZSBpZiAocmVsYXRpdmUgPT09IDMpIHsgLy8gd2VzdCByZWxhdGl2ZSB0byByb290XHJcbiAgICAgIGlmIChyZWxTaWRlID09PSAwKSB7XHJcbiAgICAgICAgIG91dHB1dC54LS07XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsU2lkZSA9PT0gMSkge1xyXG4gICAgICAgICBvdXRwdXQueSsrO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbFNpZGUgPT09IDIpIHtcclxuICAgICAgICAgb3V0cHV0LngrKztcclxuICAgICAgfSBlbHNlIGlmIChyZWxTaWRlID09PSAzKSB7XHJcbiAgICAgICAgIG91dHB1dC55LS07XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICByZXR1cm4gb3V0cHV0O1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5hbmdsZVRvRGlyID0gZnVuY3Rpb24oYW5nbGUpIHtcclxuICAgaWYgKGFuZ2xlID49IDApIHtcclxuICAgICBhbmdsZSAlPSAyICogTWF0aC5QSTtcclxuICB9IGVsc2Uge1xyXG4gICAgIGFuZ2xlICo9IC0xO1xyXG4gICAgIGFuZ2xlICU9IDIgKiBNYXRoLlBJO1xyXG4gICAgIGFuZ2xlICo9IC0xO1xyXG4gIH1cclxuICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnYW5nbGVUb0RpcigpOicsICdhbmdsZTonLCBhbmdsZS50b1ByZWNpc2lvbig0KSk7IH1cclxuICBpZiAoKGFuZ2xlID49IC0xIC8gNCAqIE1hdGguUEkgJiYgYW5nbGUgPCAxIC8gNCAqIE1hdGguUEkpIHx8IGFuZ2xlID4gNyAvIDQgKiBNYXRoLlBJKSB7XHJcbiAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2FuZ2xlVG9EaXIoKSBjYXNlIG9uZSBOT1JUSCcpOyB9XHJcbiAgICAgcmV0dXJuIHRoaXMuRElSLk5PUlRIO1xyXG4gIH0gZWxzZSBpZiAoYW5nbGUgPj0gMSAvIDQgKiBNYXRoLlBJICYmIGFuZ2xlIDwgMyAvIDQgKiBNYXRoLlBJKSB7XHJcbiAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2FuZ2xlVG9EaXIoKSBjYXNlIHR3byBFQVNUJyk7IH1cclxuICAgICByZXR1cm4gdGhpcy5ESVIuRUFTVDtcclxuICB9IGVsc2UgaWYgKGFuZ2xlID49IDMgLyA0ICogTWF0aC5QSSAmJiBhbmdsZSA8IDUgLyA0ICogTWF0aC5QSSkge1xyXG4gICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdhbmdsZVRvRGlyKCkgY2FzZSB0aHJlZSBTT1VUSCcpOyB9XHJcbiAgICAgcmV0dXJuIHRoaXMuRElSLlNPVVRIO1xyXG4gIH0gZWxzZSBpZiAoYW5nbGUgPj0gNSAvIDQgKiBNYXRoLlBJICYmIGFuZ2xlIDwgNyAvIDQgKiBNYXRoLlBJKSB7XHJcbiAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2FuZ2xlVG9EaXIoKSBjYXNlIGZvdXIgV0VTVCcpOyB9XHJcbiAgICAgcmV0dXJuIHRoaXMuRElSLldFU1Q7XHJcbiAgfSBlbHNlIGlmIChhbmdsZSA+PSAtMyAvIDQgKiBNYXRoLlBJICYmIGFuZ2xlIDwgLTEgLyA0ICogTWF0aC5QSSkge1xyXG4gICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdhbmdsZVRvRGlyKCkgY2FzZSBmaXZlIFdFU1QnKTsgfVxyXG4gICAgIHJldHVybiB0aGlzLkRJUi5XRVNUO1xyXG4gIH0gZWxzZSBpZiAoYW5nbGUgPj0gLTUgLyA0ICogTWF0aC5QSSAmJiBhbmdsZSA8IC0zIC8gNCAqIE1hdGguUEkpIHtcclxuICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnYW5nbGVUb0RpcigpIGNhc2Ugc2l4IFNPVVRIJyk7IH1cclxuICAgICByZXR1cm4gdGhpcy5ESVIuU09VVEg7XHJcbiAgfSBlbHNlIGlmIChhbmdsZSA+PSAtNyAvIDQgKiBNYXRoLlBJICYmIGFuZ2xlIDwgLTUgLyA0ICogTWF0aC5QSSkge1xyXG4gICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdhbmdsZVRvRGlyKCkgY2FzZSBzZXZlbiBFQVNUJyk7IH1cclxuICAgICByZXR1cm4gdGhpcy5ESVIuRUFTVDtcclxuICB9IGVsc2UgaWYgKGFuZ2xlIDwgLTcgLyA0ICogTWF0aC5QSSkge1xyXG4gICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdhbmdsZVRvRGlyKCkgY2FzZSBlaWdodCBOT1JUSCcpOyB9XHJcbiAgICAgcmV0dXJuIHRoaXMuRElSLk5PUlRIO1xyXG4gIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZGlyVG9OZWlnaGJvdXJSZWxhdGl2ZSA9IGZ1bmN0aW9uKHBvaW50QSwgcG9pbnRCKSB7XHJcbiAgaWYgKHBvaW50QS54ID4gcG9pbnRCLngpIHsgLy8gbmVpZ2hib3VyIGlzIHRvIHRoZSBsZWZ0XHJcbiAgICAgIHJldHVybiB0aGlzLkRJUi5XRVNUO1xyXG4gIH0gZWxzZSBpZiAocG9pbnRBLnggPCBwb2ludEIueCkgeyAvLyBuZWlnaGJvdXIgaXMgdG8gdGhlIHJpZ2h0XHJcbiAgICAgIHJldHVybiB0aGlzLkRJUi5FQVNUO1xyXG4gIH0gZWxzZSBpZiAocG9pbnRBLnkgPiBwb2ludEIueSkgeyAvLyBuZWlnaGJvdXIgaXMgdG8gYmVsb3dcclxuICAgICByZXR1cm4gdGhpcy5ESVIuU09VVEg7XHJcbiAgfSBlbHNlIHsgLy8gbmVpZ2hib3VyIGlzIGFib3ZlXHJcbiAgICAgcmV0dXJuIHRoaXMuRElSLk5PUlRIO1xyXG4gIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZGVjaWRlU2lkZVJlbGF0aXZlID0gZnVuY3Rpb24ocG9pbnRBLCBwb2ludEIsIHJlbGF0aXZlTm9ydGgpIHtcclxuICBpZiAocG9pbnRBLnggPiBwb2ludEIueCkgeyAvLyBuZWlnaGJvdXIgaXMgdG8gdGhlIGxlZnRcclxuICAgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLk5PUlRIKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLkRJUi5XRVNUO1xyXG4gICB9IGVsc2UgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLkVBU1QpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLlNPVVRIO1xyXG4gICB9IGVsc2UgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLlNPVVRIKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLkRJUi5FQVNUO1xyXG4gICB9IGVsc2UgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLldFU1QpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLk5PUlRIO1xyXG4gICB9XHJcbiAgfSBlbHNlIGlmIChwb2ludEEueCA8IHBvaW50Qi54KSB7IC8vIG5laWdoYm91ciBpcyB0byB0aGUgcmlnaHRcclxuICAgICAgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLk5PUlRIKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLkRJUi5FQVNUO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLkVBU1QpIHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuRElSLk5PUlRIO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLlNPVVRIKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLkRJUi5XRVNUO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlbGF0aXZlTm9ydGggPT09IHRoaXMuRElSLldFU1QpIHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuRElSLlNPVVRIO1xyXG4gICAgICB9XHJcbiAgfSBlbHNlIGlmIChwb2ludEEueSA+IHBvaW50Qi55KSB7IC8vIG5laWdoYm91ciBpcyB0byBiZWxvd1xyXG4gICAgIGlmIChyZWxhdGl2ZU5vcnRoID09PSB0aGlzLkRJUi5OT1JUSCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5ESVIuU09VVEg7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuRUFTVCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5ESVIuRUFTVDtcclxuICAgICAgfSBlbHNlIGlmIChyZWxhdGl2ZU5vcnRoID09PSB0aGlzLkRJUi5TT1VUSCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5ESVIuTk9SVEg7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuV0VTVCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5ESVIuV0VTVDtcclxuICAgICAgfVxyXG4gIH0gZWxzZSB7IC8vIG5laWdoYm91ciBpcyBhYm92ZVxyXG4gICAgIGlmIChyZWxhdGl2ZU5vcnRoID09PSB0aGlzLkRJUi5OT1JUSCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5ESVIuTk9SVEg7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuRUFTVCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5ESVIuV0VTVDtcclxuICAgICAgfSBlbHNlIGlmIChyZWxhdGl2ZU5vcnRoID09PSB0aGlzLkRJUi5TT1VUSCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5ESVIuU09VVEg7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVsYXRpdmVOb3J0aCA9PT0gdGhpcy5ESVIuV0VTVCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5ESVIuRUFTVDtcclxuICAgICAgfVxyXG4gIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuY3JlYXRlQ29uc3RyYWludHMgPSBmdW5jdGlvbihtZSwgbXlQb2ludCwgcmVsYXRpdmVOb3J0aCkge1xyXG4gICB2YXIgbmVpZ2hib3VycyA9IHRoaXMuZ2V0TmVpZ2hib3VycyhtZSk7XHJcbiAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmVpZ2hib3Vycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgbmVpZ2hib3VyID0gbmVpZ2hib3Vyc1tpXTtcclxuICAgICAgdmFyIG5laWdoYm91clBvaW50ID0gdGhpcy5maW5kKG5laWdoYm91cik7XHJcbiAgICAgIHZhciBuZWlnaGJvdXJSZWxhdGl2ZU5vcnRoID0gdGhpcy5yZWxhdGl2ZU5vcnRoKG5laWdoYm91cik7XHJcbiAgICAgIHZhciBteVNpZGUgPSB0aGlzLmRlY2lkZVNpZGVSZWxhdGl2ZShteVBvaW50LCBuZWlnaGJvdXJQb2ludCwgcmVsYXRpdmVOb3J0aCk7XHJcbiAgICAgIHZhciBuZWlnaGJvdXJTaWRlID0gdGhpcy5kZWNpZGVTaWRlUmVsYXRpdmUobmVpZ2hib3VyUG9pbnQsIG15UG9pbnQsIG5laWdoYm91clJlbGF0aXZlTm9ydGgpO1xyXG4gICAgICBpZiAodGhpcy5kZWJ1Z0NyZWF0ZUNvbnN0cmFpbnRzKSB7IGNvbnNvbGUubG9nKCdjcmVhdGVDb25zdHJhaW50cygpOicsICdteVNpZGU6JywgbXlTaWRlLCAnbmVpZ2hib3VyU2lkZTonLCBuZWlnaGJvdXJTaWRlKTsgfVxyXG4gICAgICB2YXIgY29uc3RyYWludDtcclxuICAgICAgdmFyIG9mZnNldCA9IG1lLndpZHRoICsgdGhpcy5vZmZzZXQ7XHJcbiAgICAgIGlmIChteVNpZGUgPT09IDApIHtcclxuICAgICAgICBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMCkge1xyXG4gICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWzAsIG9mZnNldF0sIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFswLCBvZmZzZXRdLCAxIC8gMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMikge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFswLCBvZmZzZXRdLCAwKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDMpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgb2Zmc2V0XSwgMyAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9XHJcbiAgICAgfSBlbHNlIGlmIChteVNpZGUgPT09IDEpIHtcclxuICAgICAgICBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMCkge1xyXG4gICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWy1vZmZzZXQsIDBdLCAtMSAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDEpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbLW9mZnNldCwgMF0sIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMikge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFstb2Zmc2V0LCAwXSwgMSAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDMpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbLW9mZnNldCwgMF0sIDApO1xyXG4gICAgICAgIH1cclxuICAgICB9IGVsc2UgaWYgKG15U2lkZSA9PT0gMikge1xyXG4gICAgICAgICBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMCkge1xyXG4gICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWzAsIC1vZmZzZXRdLCAwKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDEpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgLW9mZnNldF0sIDMgLyAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWzAsIC1vZmZzZXRdLCBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDMpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgLW9mZnNldF0sIDEgLyAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfVxyXG4gICAgIH0gZWxzZSBpZiAobXlTaWRlID09PSAzKSB7XHJcbiAgICAgICAgaWYgKG5laWdoYm91clNpZGUgPT09IDApIHtcclxuICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFtvZmZzZXQsIDBdLCAxIC8gMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFtvZmZzZXQsIDBdLCAwKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDIpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbb2Zmc2V0LCAwXSwgLTEgLyAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgW29mZnNldCwgMF0sIE1hdGguUEkpO1xyXG4gICAgICAgIH1cclxuICAgICB9XHJcbiAgICAgbWUuY29uc3RyYWludHMucHVzaChjb25zdHJhaW50KTtcclxuICAgICBuZWlnaGJvdXIuY29uc3RyYWludHMucHVzaChjb25zdHJhaW50KTtcclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jcmVhdGVDb25zdHJhaW50c1NwZWNpYWwgPSBmdW5jdGlvbihtZSkge1xyXG4gICB2YXIgbmVpZ2hib3VycyA9IHRoaXMuZ2V0TmVpZ2hib3VycyhtZSk7XHJcbiAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmVpZ2hib3Vycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgbmVpZ2hib3VyID0gbmVpZ2hib3Vyc1tpXTtcclxuICAgICAgdmFyIG15U2lkZSA9IHRoaXMucmVsYXRpdmVTaWRlKG1lLmJvZHksIG5laWdoYm91ci5ib2R5KTtcclxuICAgICAgdmFyIG5laWdoYm91clNpZGUgPSB0aGlzLnJlbGF0aXZlU2lkZShuZWlnaGJvdXIuYm9keSwgbWUuYm9keSk7XHJcbiAgICAgIGlmICh0aGlzLmRlYnVnQ3JlYXRlQ29uc3RyYWludHMpIHsgY29uc29sZS5sb2coJ2NyZWF0ZUNvbnN0cmFpbnRzU3BlY2lhbCgpOicsICdteVNpZGU6JywgbXlTaWRlLCAnbmVpZ2hib3VyU2lkZTonLCBuZWlnaGJvdXJTaWRlKTsgfVxyXG4gICAgICB2YXIgY29uc3RyYWludDtcclxuICAgICAgdmFyIG9mZnNldCA9IG1lLndpZHRoICsgdGhpcy5vZmZzZXQ7XHJcbiAgICAgIGlmIChteVNpZGUgPT09IDApIHtcclxuICAgICAgICBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMCkge1xyXG4gICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWzAsIG9mZnNldF0sIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFswLCBvZmZzZXRdLCAxIC8gMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMikge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFswLCBvZmZzZXRdLCAwKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDMpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgb2Zmc2V0XSwgMyAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9XHJcbiAgICAgfSBlbHNlIGlmIChteVNpZGUgPT09IDEpIHtcclxuICAgICAgICBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMCkge1xyXG4gICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWy1vZmZzZXQsIDBdLCAtMSAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDEpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbLW9mZnNldCwgMF0sIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMikge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFstb2Zmc2V0LCAwXSwgMSAvIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDMpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbLW9mZnNldCwgMF0sIDApO1xyXG4gICAgICAgIH1cclxuICAgICB9IGVsc2UgaWYgKG15U2lkZSA9PT0gMikge1xyXG4gICAgICAgICBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMCkge1xyXG4gICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWzAsIC1vZmZzZXRdLCAwKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDEpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgLW9mZnNldF0sIDMgLyAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgWzAsIC1vZmZzZXRdLCBNYXRoLlBJKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDMpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbMCwgLW9mZnNldF0sIDEgLyAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfVxyXG4gICAgIH0gZWxzZSBpZiAobXlTaWRlID09PSAzKSB7XHJcbiAgICAgICAgaWYgKG5laWdoYm91clNpZGUgPT09IDApIHtcclxuICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFtvZmZzZXQsIDBdLCAxIC8gMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmVpZ2hib3VyU2lkZSA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbmVpZ2hib3VyLmJvZHksIFtvZmZzZXQsIDBdLCAwKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5laWdoYm91clNpZGUgPT09IDIpIHtcclxuICAgICAgICAgICAgY29uc3RyYWludCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG1lLmJvZHksIG5laWdoYm91ci5ib2R5LCBbb2Zmc2V0LCAwXSwgLTEgLyAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZWlnaGJvdXJTaWRlID09PSAzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBuZWlnaGJvdXIuYm9keSwgW29mZnNldCwgMF0sIE1hdGguUEkpO1xyXG4gICAgICAgIH1cclxuICAgICB9XHJcbiAgICAgbWUuY29uc3RyYWludHMucHVzaChjb25zdHJhaW50KTtcclxuICAgICBuZWlnaGJvdXIuY29uc3RyYWludHMucHVzaChjb25zdHJhaW50KTtcclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5yZWxhdGl2ZVNpZGUgPSBmdW5jdGlvbih0aGlzQm9keSwgb3RoZXJCb2R5KSB7XHJcbiAgdmFyIHRoaXNQb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQodGhpc0JvZHkueCwgdGhpc0JvZHkueSk7XHJcbiAgdmFyIG90aGVyUG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KG90aGVyQm9keS54LCBvdGhlckJvZHkueSk7XHJcbiAgdmFyIGFuZ2xlVG9PdGhlciA9IHRoaXMuYW5nbGVCZXR3ZWVuUG9pbnRzKHRoaXNQb2ludCwgb3RoZXJQb2ludCk7XHJcbiAgdmFyIGRpZmZBbmdsZSA9IGFuZ2xlVG9PdGhlciAtIHRoaXNCb2R5LnJvdGF0aW9uO1xyXG4gIHZhciByZXR1cm5EaXIgPSB0aGlzLmFuZ2xlVG9EaXIoZGlmZkFuZ2xlKTtcclxuICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygncmVsYXRpdmVTaWRlKCk6JywgJ2FuZ2xlVG9PdGhlcjonLCBhbmdsZVRvT3RoZXIudG9QcmVjaXNpb24oNCksICd0aGlzQm9keS5yb3RhdGlvbjonLCB0aGlzQm9keS5yb3RhdGlvbi50b1ByZWNpc2lvbig0KSwgJ2RpZmZBbmdsZTonLCBkaWZmQW5nbGUudG9QcmVjaXNpb24oNCksICdyZXR1cm5EaXI6JywgcmV0dXJuRGlyKTsgfVxyXG4gIHJldHVybiByZXR1cm5EaXI7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmFuZ2xlQmV0d2VlblBvaW50cyA9IGZ1bmN0aW9uKHRoaXNQb2ludCwgb3RoZXJQb2ludCkge1xyXG4gIHZhciBhbmdsZVRvT3RoZXIgPSBQaGFzZXIuUG9pbnQuYW5nbGUodGhpc1BvaW50LCBvdGhlclBvaW50KTtcclxuICBpZiAoYW5nbGVUb090aGVyIDwgMCkgeyAvLyBmaXggZHVtYiBwYXJ0IG9mIFBoYXNlci5Qb2ludC5hbmdsZSgpXHJcbiAgICAgYW5nbGVUb090aGVyID0gMiAqIE1hdGguUEkgKyBhbmdsZVRvT3RoZXI7XHJcbiAgfVxyXG4gIGFuZ2xlVG9PdGhlciA9IChhbmdsZVRvT3RoZXIgKyAzLzIgKiBNYXRoLlBJKSAlICgyICogTWF0aC5QSSk7IC8vIHJvdGF0ZSA5MCBkIGNsb2Nrd2lzZVxyXG4gICByZXR1cm4gYW5nbGVUb090aGVyO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24oY3ViZSkge1xyXG4gICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCB0aGlzLmN1YmVzV2lkdGgoKTsgcm93KyspIHtcclxuICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICBpZiAodGhpcy5jdWJlc1tyb3ddW2NvbF0gPT09IGN1YmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQaGFzZXIuUG9pbnQocm93LCBjb2wpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICByZXR1cm4gdW5kZWZpbmVkO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihwb2ludCkge1xyXG4gIGlmICghcG9pbnQgfHwgdGhpcy5vdXRPZkJvdW5kcyhwb2ludCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gIH1cclxuICByZXR1cm4gdGhpcy5jdWJlc1twb2ludC54XVtwb2ludC55XTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuY3ViZXNXaWR0aCA9IGZ1bmN0aW9uKCkge1xyXG4gICByZXR1cm4gdGhpcy5jdWJlcy5sZW5ndGg7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmN1YmVzSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgIHJldHVybiB0aGlzLmN1YmVzWzBdLmxlbmd0aDtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuYWRkVG9wUm93ID0gZnVuY3Rpb24oKSB7XHJcbiAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICB0aGlzLmN1YmVzW3Jvd10ucHVzaCh1bmRlZmluZWQpO1xyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmFkZFJpZ2h0Q29sID0gZnVuY3Rpb24oKSB7XHJcbiAgIHZhciBuZXdDb2wgPSBbXTtcclxuICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmN1YmVzSGVpZ2h0KCk7IGkrKykge1xyXG4gICAgICBuZXdDb2wucHVzaCh1bmRlZmluZWQpO1xyXG4gICB9XHJcbiAgIHRoaXMuY3ViZXMucHVzaChuZXdDb2wpO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5hZGRCb3RSb3cgPSBmdW5jdGlvbigpIHtcclxuICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIHRoaXMuY3ViZXNbcm93XS51bnNoaWZ0KHVuZGVmaW5lZCk7XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuYWRkTGVmdENvbCA9IGZ1bmN0aW9uKCkge1xyXG4gICB2YXIgbmV3Q29sID0gbmV3IEFycmF5KHRoaXMuY3ViZXNIZWlnaHQoKSk7XHJcbiAgIHRoaXMuY3ViZXMudW5zaGlmdChuZXdDb2wpO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5nZXRDdWJlID0gZnVuY3Rpb24ocG9pbnQpIHtcclxuICAgaWYgKCFwb2ludCB8fCB0aGlzLm91dE9mQm91bmRzKHBvaW50KSkge1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICB9XHJcbiAgIHJldHVybiB0aGlzLmN1YmVzW3BvaW50LnhdW3BvaW50LnldO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5hZGp1c3QgPSBmdW5jdGlvbihwb2ludCwgZGlyKSB7XHJcbiAgaWYgKCFwb2ludCkge1xyXG4gICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIG5ld1BvaW50ID0gbmV3IFBoYXNlci5Qb2ludChwb2ludC54LCBwb2ludC55KTtcclxuICBzd2l0Y2ggKGRpcikge1xyXG4gICAgICBjYXNlIHRoaXMuRElSLk5PUlRIOlxyXG4gICAgICBuZXdQb2ludC55Kys7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIHRoaXMuRElSLkVBU1Q6XHJcbiAgICAgIG5ld1BvaW50LngrKztcclxuICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgdGhpcy5ESVIuU09VVEg6XHJcbiAgICAgIG5ld1BvaW50LnktLTtcclxuICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgdGhpcy5ESVIuV0VTVDpcclxuICAgICAgbmV3UG9pbnQueC0tO1xyXG4gICAgICBicmVhaztcclxuICAgfVxyXG4gICByZXR1cm4gbmV3UG9pbnQ7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGN1YmUsIHBvaW50KSB7XHJcbiAgIGlmICghcG9pbnQpIHtcclxuICAgICAgY29uc29sZS5sb2coJ3NldCBnaXZlbiB1bmRlZmluZWQgcG9pbnQnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIGlmIChwb2ludC54IDwgMCkge1xyXG4gICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnYWRkIGxlZnQgY29sJyk7IH1cclxuICAgICAgdGhpcy5hZGRMZWZ0Q29sKCk7XHJcbiAgICAgIHBvaW50LnggPSAwO1xyXG4gICB9IGVsc2UgaWYgKHBvaW50LnggPj0gdGhpcy5jdWJlc1dpZHRoKCkpIHtcclxuICAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2FkZCByaWdodCBjb2wnKTsgfVxyXG4gICAgICB0aGlzLmFkZFJpZ2h0Q29sKCk7XHJcbiAgICAgIHBvaW50LnggPSB0aGlzLmN1YmVzV2lkdGgoKSAtIDE7XHJcbiAgIH0gZWxzZSBpZiAocG9pbnQueSA8IDApIHtcclxuICAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2FkZCBib3Qgcm93Jyk7IH1cclxuICAgICAgdGhpcy5hZGRCb3RSb3coKTtcclxuICAgICAgcG9pbnQueSA9IDA7XHJcbiAgIH0gZWxzZSBpZiAocG9pbnQueSA+PSB0aGlzLmN1YmVzSGVpZ2h0KCkpIHtcclxuICAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2FkZCB0b3Agcm93Jyk7IH1cclxuICAgICAgdGhpcy5hZGRUb3BSb3coKTtcclxuICAgICAgcG9pbnQueSA9IHRoaXMuY3ViZXNIZWlnaHQoKSAtIDE7XHJcbiAgIH1cclxuICAgaWYgKHRoaXMuZ2V0KHBvaW50KSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgdGhpcy5jdWJlc1twb2ludC54XVtwb2ludC55XSA9IGN1YmU7XHJcbiAgIGN1YmUuZ3JvdXAgPSB0aGlzO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5vdXRPZkJvdW5kcyA9IGZ1bmN0aW9uKHBvaW50KSB7XHJcbiAgIGlmICghcG9pbnQpIHtcclxuICAgICAgY29uc29sZS5sb2coJ291dCBvZiBib3VuZHMgZ2l2ZW4gdW5kZWZpbmVkIHBvaW50Jyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICBpZiAocG9pbnQueCA8IDAgfHwgcG9pbnQueCA+PSB0aGlzLmN1YmVzV2lkdGgoKSB8fCBwb2ludC55IDwgMCB8fCBwb2ludC55ID49IHRoaXMuY3ViZXNIZWlnaHQoKSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgfVxyXG4gICByZXR1cm4gZmFsc2U7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmRpc3BsYXlDdWJlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICB2YXIgb3V0cHV0ID0gJ2Rpc3BsYXlDdWJlcygpOlxcbic7XHJcbiAgIHZhciByb3cgPSAwO1xyXG4gICB2YXIgY29sID0gdGhpcy5jdWJlc0hlaWdodCgpIC0gMTtcclxuICAgd2hpbGUgKGNvbCA+PSAwKSB7XHJcbiAgICAgIHdoaWxlIChyb3cgPCB0aGlzLmN1YmVzV2lkdGgoKSkge1xyXG4gICAgICAgICB2YXIgY3ViZSA9IHRoaXMuY3ViZXNbcm93XVtjb2xdO1xyXG4gICAgICAgICBpZiAoY3ViZSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGN1YmUubW9kdWxlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgY2FzZSAnc2hpZWxkJzpcclxuICAgICAgICAgICAgICAgb3V0cHV0ICs9ICdTICc7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICBjYXNlICdjb3JlJzpcclxuICAgICAgICAgICAgICAgb3V0cHV0ICs9ICdDICc7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICBjYXNlICd0aHJ1c3Rlcic6XHJcbiAgICAgICAgICAgICAgIG91dHB1dCArPSAnVCAnO1xyXG4gICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgY2FzZSAnc29sYXJQYW5lbCc6XHJcbiAgICAgICAgICAgICAgIG91dHB1dCArPSAnUCAnO1xyXG4gICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgY2FzZSAnaGFja2VyJzpcclxuICAgICAgICAgICAgICAgb3V0cHV0ICs9ICdIICc7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICBjYXNlICdndW4nOlxyXG4gICAgICAgICAgICAgICBvdXRwdXQgKz0gJ0cgJztcclxuICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb3V0cHV0ICs9ICdfICc7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgcm93Kys7XHJcbiAgICAgIH1cclxuICAgICAgcm93ID0gMDtcclxuICAgICAgY29sLS07XHJcbiAgICAgIG91dHB1dCArPSAnXFxuJztcclxuICAgfVxyXG4gICBjb25zb2xlLmxvZyhvdXRwdXQpO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5kaXNwbGF5Q29ubmVjdGlvbiA9IGZ1bmN0aW9uKGNvbm5lY3Rpb24pIHtcclxuICAgdGhpcy5oaWRlT3RoZXJDb25uZWN0aW9ucyhjb25uZWN0aW9uKTtcclxuICAgdmFyIGdyYXBoID0gbmV3IEFzdGFyLkdyYXBoKHRoaXMuY3ViZXNUb0dyYXBoKCkpO1xyXG4gICB2YXIgc3RhcnRQb2ludCA9IHRoaXMuZmluZChjb25uZWN0aW9uLnN0YXJ0KTtcclxuICAgdmFyIGVuZFBvaW50ID0gdGhpcy5maW5kKGNvbm5lY3Rpb24uZW5kKTtcclxuICAgaWYgKCFzdGFydFBvaW50IHx8ICFlbmRQb2ludCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnZGlzcGxheUNvbm5lY3Rpb24gZmFpbGVkIHRvIGdldCBwb2ludHMnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIHZhciBzdGFydCA9IGdyYXBoLmdyaWRbc3RhcnRQb2ludC54XVtzdGFydFBvaW50LnldO1xyXG4gICB2YXIgZW5kID0gZ3JhcGguZ3JpZFtlbmRQb2ludC54XVtlbmRQb2ludC55XTtcclxuICAgdmFyIHJlc3VsdCA9IEFzdGFyLmFzdGFyLnNlYXJjaChncmFwaCwgc3RhcnQsIGVuZCk7XHJcbiAgIHJlc3VsdC51bnNoaWZ0KHN0YXJ0KTtcclxuICAgdmFyIHByZXZpb3VzO1xyXG4gICBmb3IodmFyIGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBjdXJQb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQocmVzdWx0W2ldLngsIHJlc3VsdFtpXS55KTtcclxuICAgICAgdmFyIGN1ckN1YmUgPSB0aGlzLmdldChjdXJQb2ludCk7XHJcbiAgICAgIHZhciBpbmRpY2F0b3IgPSBjdXJDdWJlLmNJbmRpY2F0b3I7XHJcbiAgICAgIHZhciBwcmV2UG9pbnQ7XHJcbiAgICAgIHZhciBuZXh0UG9pbnQ7XHJcbiAgICAgIHZhciBzaWRlO1xyXG4gICAgICB2YXIgcHJldkN1YmU7XHJcbiAgICAgIHZhciBuZXh0Q3ViZTtcclxuICAgICAgaWYgKCFwcmV2aW91cykge1xyXG4gICAgICAgICBpbmRpY2F0b3IuYW5pbWF0aW9ucy5wbGF5KCdlbmQnKTtcclxuICAgICAgICAgbmV4dFBvaW50ID0gbmV3IFBoYXNlci5Qb2ludChyZXN1bHRbaSsxXS54LCByZXN1bHRbaSsxXS55KTtcclxuICAgICAgICAgbmV4dEN1YmUgPSB0aGlzLmdldChuZXh0UG9pbnQpO1xyXG4gICAgICAgICBzaWRlID0gdGhpcy5yZWxhdGl2ZVNpZGUoY3VyQ3ViZS5ib2R5LCBuZXh0Q3ViZS5ib2R5KTtcclxuICAgICAgICAgaW5kaWNhdG9yLnJvdGF0aW9uID0gdGhpcy5kaXJUb0FuZ2xlKHNpZGUpO1xyXG4gICAgICB9IGVsc2UgaWYgKGkgPT09IHJlc3VsdC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgIGluZGljYXRvci5hbmltYXRpb25zLnBsYXkoJ2VuZCcpO1xyXG4gICAgICAgICBwcmV2UG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KHByZXZpb3VzLngsIHByZXZpb3VzLnkpO1xyXG4gICAgICAgICBwcmV2Q3ViZSA9IHRoaXMuZ2V0KHByZXZQb2ludCk7XHJcbiAgICAgICAgIHNpZGUgPSB0aGlzLnJlbGF0aXZlU2lkZShjdXJDdWJlLmJvZHksIHByZXZDdWJlLmJvZHkpO1xyXG4gICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSB0aGlzLmRpclRvQW5nbGUoc2lkZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGluZGljYXRvci5hbmltYXRpb25zLnBsYXkoJ2xpbmUnKTtcclxuICAgICAgICAgcHJldlBvaW50ID0gbmV3IFBoYXNlci5Qb2ludChwcmV2aW91cy54LCBwcmV2aW91cy55KTtcclxuICAgICAgICAgbmV4dFBvaW50ID0gbmV3IFBoYXNlci5Qb2ludChyZXN1bHRbaSsxXS54LCByZXN1bHRbaSsxXS55KTtcclxuICAgICAgICAgcHJldkN1YmUgPSB0aGlzLmdldChwcmV2UG9pbnQpO1xyXG4gICAgICAgICBuZXh0Q3ViZSA9IHRoaXMuZ2V0KG5leHRQb2ludCk7XHJcbiAgICAgICAgIHZhciBwcmV2U2lkZSA9IHRoaXMucmVsYXRpdmVTaWRlKGN1ckN1YmUuYm9keSwgcHJldkN1YmUuYm9keSk7XHJcbiAgICAgICAgIHZhciBuZXh0U2lkZSA9IHRoaXMucmVsYXRpdmVTaWRlKGN1ckN1YmUuYm9keSwgbmV4dEN1YmUuYm9keSk7XHJcbiAgICAgICAgIHRoaXMubWFuYWdlSW5kaWNhdG9yKGluZGljYXRvciwgcHJldlNpZGUsIG5leHRTaWRlKTtcclxuICAgICAgfVxyXG4gICAgICBwcmV2aW91cyA9IHJlc3VsdFtpXTtcclxuICAgICAgY3VyQ3ViZS5kaXNwbGF5SW5kaWNhdG9yKCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLm1hbmFnZUluZGljYXRvciA9IGZ1bmN0aW9uKGluZGljYXRvciwgcHJldkRpciwgbmV4dERpcikge1xyXG4gIGluZGljYXRvci5zY2FsZS5zZXRUbyhNYXRoLmFicyhpbmRpY2F0b3Iuc2NhbGUueCksIGluZGljYXRvci5zY2FsZS55KTtcclxuICBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuTk9SVEggJiYgbmV4dERpciA9PT0gdGhpcy5ESVIuU09VVEgpIHsgLy8gMlxyXG4gICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnY2FzZSAyJyk7IH1cclxuICAgICAgaW5kaWNhdG9yLnJvdGF0aW9uID0gTWF0aC5QSTtcclxuICAgfSBlbHNlIGlmIChwcmV2RGlyID09PSB0aGlzLkRJUi5TT1VUSCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5OT1JUSCkgeyAvLyAxXHJcbiAgICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdjYXNlIDEnKTsgfVxyXG4gICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSAwO1xyXG4gICB9IGVsc2UgaWYgKHByZXZEaXIgPT09IHRoaXMuRElSLkVBU1QgJiYgbmV4dERpciA9PT0gdGhpcy5ESVIuV0VTVCkgeyAvLyA0XHJcbiAgICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdjYXNlIDQnKTsgfVxyXG4gICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSAxIC8gMiAqIE1hdGguUEk7XHJcbiAgIH0gZWxzZSBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuV0VTVCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5FQVNUKSB7IC8vIDNcclxuICAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2Nhc2UgMycpOyB9XHJcbiAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IDMgLyAyICAqIE1hdGguUEk7XHJcbiAgIH0gZWxzZSB7XHJcbiAgICAgIGluZGljYXRvci5hbmltYXRpb25zLnBsYXkoJ3JpZ2h0Jyk7XHJcbiAgICAgIGlmIChwcmV2RGlyID09PSB0aGlzLkRJUi5TT1VUSCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5FQVNUKSB7IC8vIDVcclxuICAgICAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2Nhc2UgNScpOyB9XHJcbiAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IDA7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuV0VTVCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5TT1VUSCkgeyAvLyA2XHJcbiAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdjYXNlIDYnKTsgfVxyXG4gICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSAxIC8gMiAqIE1hdGguUEk7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuTk9SVEggJiYgbmV4dERpciA9PT0gdGhpcy5ESVIuV0VTVCkgeyAvLyA3XHJcbiAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdjYXNlIDcnKTsgfVxyXG4gICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSBNYXRoLlBJO1xyXG4gICAgICB9IGVsc2UgaWYgKHByZXZEaXIgPT09IHRoaXMuRElSLkVBU1QgJiYgbmV4dERpciA9PT0gdGhpcy5ESVIuTk9SVEgpIHsgLy8gOFxyXG4gICAgICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnY2FzZSA4Jyk7IH1cclxuICAgICAgICAgaW5kaWNhdG9yLnJvdGF0aW9uID0gMyAvIDIgKiBNYXRoLlBJO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBpbmRpY2F0b3Iuc2NhbGUuc2V0VG8oLU1hdGguYWJzKGluZGljYXRvci5zY2FsZS54KSwgaW5kaWNhdG9yLnNjYWxlLnkpO1xyXG4gICAgICAgICBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuU09VVEggJiYgbmV4dERpciA9PT0gdGhpcy5ESVIuV0VTVCkgeyAvLyA5XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7IGNvbnNvbGUubG9nKCdjYXNlIDknKTsgfVxyXG4gICAgICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSAwO1xyXG4gICAgICAgICB9IGVsc2UgaWYgKHByZXZEaXIgPT09IHRoaXMuRElSLldFU1QgJiYgbmV4dERpciA9PT0gdGhpcy5ESVIuTk9SVEgpIHsgLy8gMTBcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ2Nhc2UgMTAnKTsgfVxyXG4gICAgICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSAxIC8gMiAqIE1hdGguUEk7XHJcbiAgICAgICAgIH0gZWxzZSBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuTk9SVEggJiYgbmV4dERpciA9PT0gdGhpcy5ESVIuRUFTVCkgeyAvLyAxMVxyXG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnY2FzZSAxMScpOyB9XHJcbiAgICAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IE1hdGguUEk7XHJcbiAgICAgICAgIH0gZWxzZSBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuRUFTVCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5TT1VUSCkgeyAvLyAxMlxyXG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygnY2FzZSAxMicpOyB9XHJcbiAgICAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IDMgLyAyICogTWF0aC5QSTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH0gXHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmhpZGVPdGhlckNvbm5lY3Rpb25zID0gZnVuY3Rpb24oZXhjZXB0aW9uKSB7XHJcbiAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmN1YmVzSGVpZ2h0KCk7IGNvbCsrKSB7XHJcbiAgICAgICAgIHZhciBjdWJlID0gdGhpcy5jdWJlc1tyb3ddW2NvbF07XHJcbiAgICAgICAgIGlmIChjdWJlICYmIGN1YmUubXlDb25uZWN0aW9uICYmIGN1YmUubXlDb25uZWN0aW9uICE9PSBleGNlcHRpb24pIHtcclxuICAgICAgICAgICAgY3ViZS5oaWRlSW5kaWNhdG9yKCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmN1YmVzVG9HcmFwaCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBncmFwaCA9IFtdO1xyXG4gIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgIHZhciBuZXdDb2wgPSBbXTtcclxuICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICBpZiAodGhpcy5jdWJlc1tyb3ddW2NvbF0pIHtcclxuICAgICAgICAgICAgbmV3Q29sLnB1c2goMSk7XHJcbiAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld0NvbC5wdXNoKDApO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZ3JhcGgucHVzaChuZXdDb2wpO1xyXG4gICB9XHJcbiAgIHJldHVybiBncmFwaDtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZGlyQmV0d2VlbiA9IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgdmFyIGRlbHRhWCA9IGEueCAtIGIueDtcclxuICAgdmFyIGRlbHRhWSA9IGEueSAtIGIueTtcclxuICAgaWYgKGRlbHRhWCA+IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLldFU1Q7XHJcbiAgIH1cclxuICAgaWYgKGRlbHRhWCA8IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLkVBU1Q7XHJcbiAgIH1cclxuICAgaWYgKGRlbHRhWSA+IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLlNPVVRIO1xyXG4gICB9XHJcbiAgIGlmIChkZWx0YVkgPCAwKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLkRJUi5OT1JUSDtcclxuICAgfVxyXG4gICByZXR1cm4gdGhpcy5ESVIuTk9SVEg7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmRpclRvQW5nbGUgPSBmdW5jdGlvbihkaXIpIHtcclxuICBzd2l0Y2ggKGRpcikge1xyXG4gICBjYXNlIHRoaXMuRElSLk5PUlRIOlxyXG4gICByZXR1cm4gTWF0aC5QSTtcclxuICAgY2FzZSB0aGlzLkRJUi5FQVNUOlxyXG4gICByZXR1cm4gMyAvIDIgKiBNYXRoLlBJO1xyXG4gICBjYXNlIHRoaXMuRElSLlNPVVRIOlxyXG4gICByZXR1cm4gMDtcclxuICAgY2FzZSB0aGlzLkRJUi5XRVNUOlxyXG4gICByZXR1cm4gMSAvIDIgKiBNYXRoLlBJO1xyXG4gIH0gIFxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5kZXN0cm95Q3ViZSA9IGZ1bmN0aW9uKGN1YmUpIHtcclxuICB2YXIgbG9jID0gdGhpcy5maW5kKGN1YmUpO1xyXG4gIGlmICghbG9jKSB7XHJcbiAgICAgY29uc29sZS5sb2coJ2F0dGVtcHQgdG8gZGVzdHJveSBjdWJlIG5vdCBpbiBncm91cCcpO1xyXG4gICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gcmVtb3ZlIGN1YmUgZnJvbSBncm91cFxyXG4gIHRoaXMucmVtb3ZlKGN1YmUpO1xyXG4gIC8vIGRlc3Ryb3kgY3ViZVxyXG4gIGlmKGN1YmUua2V5ID09PSAnY29yZScgJiYgY3ViZS50YWcgPT09ICdtb2R1bGUnKSB7XHJcblx0Y3ViZS5raWxsKCk7XHJcblx0Ly8gdGhpcy5zdGF0ZS5sZXZlbFNldHVwLnJlc3RhcnRMZXZlbCgpO1xyXG4gIH1cclxuICBjdWJlLmRlc3Ryb3kodHJ1ZSk7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGN1YmUpIHtcclxuICAgaWYgKHRoaXMuZGVidWcpIHsgY29uc29sZS5sb2coJ3JlbW92ZSgpJyk7IH1cclxuICAgaWYgKHRoaXMucm9vdCA9PT0gY3ViZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgLy8gcmVtb3ZlIGN1YmUgZnJvbSBhcnJheVxyXG4gICB2YXIgcm93LCBjb2w7XHJcbiAgIGZvciAocm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIGZvciAoY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICBpZiAodGhpcy5jdWJlc1tyb3ddW2NvbF0gPT09IGN1YmUpIHtcclxuICAgICAgICAgICAgY3ViZS5ncm91cCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgY3ViZS50YWcgPSAnbW9kdWxlJztcclxuICAgICAgICAgICAgdGhpcy5jdWJlc1tyb3ddW2NvbF0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICAvL0lmIHRoaXMgaXMgYW4gYWN0aXZlIG1vZHVsZSwgc3BsaWNlIGl0IGZyb20gdGhlIGFjdGl2ZSBsaXN0XHJcbiAgIGlmKGN1YmUubW9kdWxlLmlzQWN0aXZlKXtcclxuXHQgICBpZihjdWJlLm1vZHVsZS50eXBlID09PSAnaGFja2VyJykge1xyXG5cdFx0XHR2YXIgaGFja0luZGV4ID0gdGhpcy5hY3RpdmVIYWNrZXJNb2R1bGVzLmluZGV4T2YoY3ViZS5tb2R1bGUpO1xyXG5cdFx0XHR0aGlzLmFjdGl2ZUhhY2tlck1vZHVsZXMuc3BsaWNlKGhhY2tJbmRleCwgMSk7XHJcblx0ICAgfVxyXG5cdCAgIGN1YmUubW9kdWxlLmlzQWN0aXZlID0gZmFsc2U7XHJcbiAgIH1cclxuICAgLy9zZXQgc3ByaXRlIG9mIGN1YmUgdG8gZ3JleWVkIGlmIG5lY2lzYXJyeVxyXG4gICBpZihjdWJlLm1vZHVsZS50eXBlID09PSAndGhydXN0ZXInIHx8IGN1YmUubW9kdWxlLnR5cGUgPT09ICdndW4nIHx8IGN1YmUubW9kdWxlLnR5cGUgPT09ICdoYWNrZXInKSB7XHJcblx0XHRjdWJlLmZyYW1lID0gMDtcclxuICAgfVxyXG4gICAvLyByZW1vdmUgY29uc3RyYWludHMgZnJvbSBjdWJlXHJcbiAgIHRoaXMucmVtb3ZlQ29uc3RyYWludHMoY3ViZSk7XHJcbiAgIGN1YmUuZ3JvdXAgPSB1bmRlZmluZWQ7XHJcbiAgIGlmIChjdWJlLm1vZHVsZSAmJiBjdWJlLm1vZHVsZS5oYXNPd25Qcm9wZXJ0eSgnb25SZW1vdmUnKSkge1xyXG4gICAgICBjdWJlLm1vZHVsZS5vblJlbW92ZSgpO1xyXG4gICB9XHJcbiAgIC8vIHRlc3QgZm9yIGV4aWxlc1xyXG4gICBmb3IgKHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IHRoaXMuY3ViZXNIZWlnaHQoKTsgY29sKyspIHtcclxuICAgICAgICAgdmFyIGV4aWxlID0gdGhpcy5jdWJlc1tyb3ddW2NvbF07XHJcbiAgICAgICAgIGlmIChleGlsZSAmJiB0aGlzLmlzRXhpbGUoZXhpbGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGV4aWxlKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxuICAgaWYgKHRoaXMuZGVidWcpIHsgdGhpcy5kaXNwbGF5Q3ViZXMoKTsgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5yZW1vdmVuZWlnaGJvdXJzQ29uc3RyYWludCA9IGZ1bmN0aW9uKGNvbnN0cmFpbnQsIGN1YmUpIHtcclxuICAgLy8gY29uc29sZS5sb2coJ3JlbW92ZW5laWdoYm91cnNDb25zdHJhaW50Jyk7XHJcbiAgIHZhciBuZWlnaGJvdXJzID0gdGhpcy5nZXROZWlnaGJvdXJzKGN1YmUpO1xyXG4gICBmb3IgKHZhciBpID0gMDsgaSA8IG5laWdoYm91cnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIG5laWdoYm91ciA9IG5laWdoYm91cnNbaV07XHJcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVpZ2hib3VyLmNvbnN0cmFpbnRzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgIGlmIChuZWlnaGJvdXIuY29uc3RyYWludHNbal0gPT09IGNvbnN0cmFpbnQpIHtcclxuICAgICAgICAgICAgbmVpZ2hib3VyLmNvbnN0cmFpbnRzLnNwbGljZShqLCAxKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZ2V0TmVpZ2hib3VycyA9IGZ1bmN0aW9uKGN1YmUpIHtcclxuICAgdmFyIGxvYyA9IHRoaXMuZmluZChjdWJlKTtcclxuICAgdmFyIG5vcnRoID0gdGhpcy5nZXQodGhpcy5hZGp1c3QobG9jLCB0aGlzLkRJUi5OT1JUSCkpO1xyXG4gICB2YXIgZWFzdCA9IHRoaXMuZ2V0KHRoaXMuYWRqdXN0KGxvYywgdGhpcy5ESVIuRUFTVCkpO1xyXG4gICB2YXIgc291dGggPSB0aGlzLmdldCh0aGlzLmFkanVzdChsb2MsIHRoaXMuRElSLlNPVVRIKSk7XHJcbiAgIHZhciB3ZXN0ID0gdGhpcy5nZXQodGhpcy5hZGp1c3QobG9jLCB0aGlzLkRJUi5XRVNUKSk7XHJcbiAgIHZhciBuZWlnaGJvdXJzID0gW107XHJcbiAgIGlmIChub3J0aCkge1xyXG4gICAgICBuZWlnaGJvdXJzLnB1c2gobm9ydGgpO1xyXG4gICB9XHJcbiAgIGlmIChlYXN0KSB7XHJcbiAgICAgIG5laWdoYm91cnMucHVzaChlYXN0KTtcclxuICAgfVxyXG4gICBpZiAoc291dGgpIHtcclxuICAgICAgbmVpZ2hib3Vycy5wdXNoKHNvdXRoKTtcclxuICAgfVxyXG4gICBpZiAod2VzdCkge1xyXG4gICAgICBuZWlnaGJvdXJzLnB1c2god2VzdCk7XHJcbiAgIH1cclxuICAgcmV0dXJuIG5laWdoYm91cnM7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLnJlbW92ZUNvbnN0cmFpbnRzID0gZnVuY3Rpb24oY3ViZSkge1xyXG4gICAvLyBjb25zb2xlLmxvZygncmVtb3ZlQ29uc3RyYWludHMnKTtcclxuICAgd2hpbGUgKGN1YmUuY29uc3RyYWludHMubGVuZ3RoID4gMCkge1xyXG4gICAgICB0aGlzLnJlbW92ZW5laWdoYm91cnNDb25zdHJhaW50KGN1YmUuY29uc3RyYWludHNbMF0sIGN1YmUpO1xyXG4gICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZW1vdmVDb25zdHJhaW50KGN1YmUuY29uc3RyYWludHNbMF0pO1xyXG4gICAgICBjdWJlLmNvbnN0cmFpbnRzLnNwbGljZSgwLCAxKTtcclxuICAgfVxyXG59O1xyXG5cclxuLy8gb25seSB1c2VkIHRvIHRlc3QgQXN0YXJcclxuQ3ViZUdyb3VwLnByb3RvdHlwZS50ZXN0UGF0aCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBncmFwaCA9IG5ldyBBc3Rhci5HcmFwaChbXHJcbiAgICAgICAgWzEsMSwxLDFdLFxyXG4gICAgICAgIFswLDEsMSwwXSxcclxuICAgICAgICBbMCwwLDAsMV1cclxuICAgIF0pO1xyXG4gICB2YXIgc3RhcnQgPSBncmFwaC5ncmlkWzBdWzBdO1xyXG4gICB2YXIgZW5kID0gZ3JhcGguZ3JpZFsyXVszXTtcclxuICAgdmFyIHJlc3VsdCA9IEFzdGFyLmFzdGFyLnNlYXJjaChncmFwaCwgc3RhcnQsIGVuZCk7XHJcbiAgIHJlc3VsdC51bnNoaWZ0KHN0YXJ0KTtcclxuICAgZm9yKHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXN1bHRbaV0ueCwgcmVzdWx0W2ldLnkpO1xyXG4gICAgfSBcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuaXNFeGlsZSA9IGZ1bmN0aW9uKGN1YmUpIHtcclxuICAgaWYgKGN1YmUgPT09IHRoaXMucm9vdCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgdmFyIGdyYXBoID0gbmV3IEFzdGFyLkdyYXBoKHRoaXMuY3ViZXNUb0dyYXBoKCkpO1xyXG4gICB2YXIgc3RhcnRQb2ludCA9IHRoaXMuZmluZCh0aGlzLnJvb3QpO1xyXG4gICB2YXIgZW5kUG9pbnQgPSB0aGlzLmZpbmQoY3ViZSk7XHJcbiAgIHZhciBzdGFydCA9IGdyYXBoLmdyaWRbc3RhcnRQb2ludC54XVtzdGFydFBvaW50LnldO1xyXG4gICB2YXIgZW5kID0gZ3JhcGguZ3JpZFtlbmRQb2ludC54XVtlbmRQb2ludC55XTtcclxuICAgdmFyIHJlc3VsdCA9IEFzdGFyLmFzdGFyLnNlYXJjaChncmFwaCwgc3RhcnQsIGVuZCk7XHJcbiAgIC8vIGlmIG5vIHBhdGggaXMgZm91bmQsIHRoZSBjdWJlIGlzIGFuIGV4aWxlXHJcbiAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICB9XHJcbiAgIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuY291bnRDdWJlcyA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciByb3csIGNvbDtcclxuXHR2YXIgbnVtICA9IDA7XHJcblx0Zm9yIChyb3cgPSAwOyByb3cgPCB0aGlzLmN1YmVzV2lkdGgoKTsgcm93KyspIHtcclxuXHRcdGZvciAoY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG5cdFx0XHRpZiAodGhpcy5jdWJlc1tyb3ddW2NvbF0gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdG51bSsrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vY29uc29sZS5sb2cobnVtKTtcclxuXHR0aGlzLm51bUN1YmVzID0gbnVtO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDdWJlR3JvdXA7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy5qcycpO1xyXG5cclxudmFyIEVuZW15QUkgPSBmdW5jdGlvbihnYW1lLCBncm91cCwgdHlwZSwgcGxheWVyR3JvdXApIHtcclxuICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgdGhpcy5ncm91cCA9IGdyb3VwO1xyXG4gICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICB0aGlzLnBsYXllckdyb3VwID0gcGxheWVyR3JvdXA7XHJcbiAgIHRoaXMucGxheWVyID0gdGhpcy5wbGF5ZXJHcm91cC5yb290O1xyXG4gICB0aGlzLnJhbURpc3QgPSA1MDA7XHJcbiAgIHRoaXMuc2hvb3REaXN0ID0gNTAwO1xyXG4gICB0aGlzLnJvdGF0aW9uRm9yY2UgPSA1MDtcclxuICAgdGhpcy5mYWNpbmdBbGxvd2FuY2UgPSBNYXRoLlBJIC8gMTU7XHJcbiAgIHRoaXMuYWN0aW5nID0gZmFsc2U7XHJcbiAgIHN3aXRjaCAodGhpcy50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ3JhbSc6XHJcbiAgICAgIHRoaXMuYWxsb2NhdGVUbygndGhydXN0ZXInKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3Nob290JzpcclxuICAgICAgdGhpcy5hbGxvY2F0ZVRvKCdndW4nKTtcclxuICAgfVxyXG59O1xyXG5cclxuRW5lbXlBSS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFbmVteUFJO1xyXG5cclxuRW5lbXlBSS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIHN3aXRjaCAodGhpcy50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ3JhbSc6XHJcbiAgICAgIHRoaXMuY3VzdG9tVXBkYXRlKCd0aHJ1c3RlcicsIHRoaXMucmFtRGlzdCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdzaG9vdCc6XHJcbiAgICAgIHRoaXMuY3VzdG9tVXBkYXRlKCdndW4nLCB0aGlzLnNob290RGlzdCk7XHJcbiAgIH1cclxufTtcclxuXHJcbkVuZW15QUkucHJvdG90eXBlLmN1c3RvbVVwZGF0ZSA9IGZ1bmN0aW9uKHR5cGUsIHRocmVzaG9sZCkge1xyXG4gICBpZiAoIXRoaXMuZ3JvdXAucm9vdCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgZWxzZSBpZighdGhpcy5ncm91cC5yb290LmJvZHkpIHtcclxuXHRcdHJldHVybjtcclxuICAgfVxyXG4gICB2YXIgcm9vdCA9IHRoaXMuZ3JvdXAucm9vdDtcclxuICAgdmFyIG15UG9zID0gbmV3IFBoYXNlci5Qb2ludChyb290LngsIHJvb3QueSk7XHJcbiAgIHZhciBwbGF5ZXJQb3MgPSBuZXcgUGhhc2VyLlBvaW50KHRoaXMucGxheWVyLngsIHRoaXMucGxheWVyLnkpO1xyXG4gICB2YXIgZGlzdCA9IFV0aWxzLmRpc3RhbmNlKG15UG9zLngsIG15UG9zLnksIHBsYXllclBvcy54LCBwbGF5ZXJQb3MueSk7XHJcbiAgIGlmIChkaXN0IDw9IHRocmVzaG9sZCkge1xyXG4gICAgICB2YXIgYW5nbGVUbyA9IHRoaXMuYW5nbGVUbyhteVBvcywgcGxheWVyUG9zKTtcclxuICAgICAgdmFyIGRpZmZBbmdsZSA9IGFuZ2xlVG8gLSByb290LmJvZHkucm90YXRpb247XHJcbiAgICAgIGlmIChkaWZmQW5nbGUgPiAwKSB7XHJcbiAgICAgICAgIHJvb3QuYm9keS5hbmd1bGFyRm9yY2UgPSB0aGlzLnJvdGF0aW9uRm9yY2U7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIHJvb3QuYm9keS5hbmd1bGFyRm9yY2UgPSAtdGhpcy5yb3RhdGlvbkZvcmNlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChNYXRoLmFicyhkaWZmQW5nbGUpIDw9IHRoaXMuZmFjaW5nQWxsb3dhbmNlICYmICF0aGlzLmFjdGluZykge1xyXG4gICAgICAgICAvLyB0aGlzLmdyb3VwLmNhbGwoJ2JlZ2luQWN0Jyk7XHJcbiAgICAgICAgIHRoaXMuZ3JvdXAuY2FsbE9uVHlwZSgnYmVnaW5BY3QnLCB0eXBlKTtcclxuICAgICAgICAgdGhpcy5hY3RpbmcgPSB0cnVlO1xyXG4gICAgICAgICAvLyB0aGlzLmFsbG9jYXRlVG8odHlwZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGlmZkFuZ2xlKSA+IHRoaXMuZmFjaW5nQWxsb3dhbmNlICYmIHRoaXMuYWN0aW5nKXtcclxuICAgICAgICAgLy8gdGhpcy5ncm91cC5jYWxsKCdlbmRBY3QnKTtcclxuICAgICAgICAgdGhpcy5ncm91cC5jYWxsT25UeXBlKCdlbmRBY3QnLCB0eXBlKTtcclxuICAgICAgICAgdGhpcy5hY3RpbmcgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICB9XHJcbn07XHJcblxyXG5FbmVteUFJLnByb3RvdHlwZS5hbGxvY2F0ZVRvID0gZnVuY3Rpb24odHlwZSkge1xyXG4gICB2YXIgcGFuZWxzID0gW107XHJcbiAgIHZhciB0eXBlcyA9IFtdO1xyXG4gICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCB0aGlzLmdyb3VwLmN1YmVzV2lkdGgoKTsgcm93KyspIHtcclxuICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5ncm91cC5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICB2YXIgY3ViZSA9IHRoaXMuZ3JvdXAuY3ViZXNbcm93XVtjb2xdO1xyXG4gICAgICAgICBpZiAoY3ViZSAmJiBjdWJlLm1vZHVsZSkge1xyXG4gICAgICAgICAgICBpZiAoY3ViZS5tb2R1bGUudHlwZSA9PT0gJ3NvbGFyUGFuZWwnICYmICFjdWJlLm15Q29ubmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICBwYW5lbHMucHVzaChjdWJlLm1vZHVsZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3ViZS5tb2R1bGUudHlwZSA9PT0gdHlwZSAmJiAhY3ViZS5teUNvbm5lY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgdHlwZXMucHVzaChjdWJlLm1vZHVsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxuICAgdmFyIGkgPSAwO1xyXG4gICB3aGlsZSAoaSA8IHR5cGVzLmxlbmd0aCAmJiBpIDwgcGFuZWxzLmxlbmd0aCkge1xyXG4gICAgICB2YXIgdGFyUGFuZWwgPSBwYW5lbHNbaV07XHJcbiAgICAgIHZhciB0YXJUeXBlID0gdHlwZXNbaV07XHJcbiAgICAgIHZhciBuZXdDb25uZWN0aW9uID0ge3N0YXJ0OiB0YXJQYW5lbC5jdWJlLCBlbmQ6IHRhclR5cGUuY3ViZX07XHJcbiAgICAgIHRhclBhbmVsLmN1YmUubXlDb25uZWN0aW9uID0gbmV3Q29ubmVjdGlvbjtcclxuICAgICAgdGFyVHlwZS5jdWJlLm15Q29ubmVjdGlvbiA9IG5ld0Nvbm5lY3Rpb247XHJcbiAgICAgIHRoaXMuZ3JvdXAuZGlzcGxheUNvbm5lY3Rpb24odGFyUGFuZWwuY3ViZS5teUNvbm5lY3Rpb24pO1xyXG4gICAgICBpKys7XHJcbiAgIH1cclxufTtcclxuXHJcbkVuZW15QUkucHJvdG90eXBlLmFuZ2xlVG8gPSBmdW5jdGlvbihmcm9tLCB0bykge1xyXG4gIHZhciBhbmdsZVRvT3RoZXIgPSBQaGFzZXIuUG9pbnQuYW5nbGUoZnJvbSwgdG8pO1xyXG4gIGlmIChhbmdsZVRvT3RoZXIgPCAwKSB7IC8vIGZpeCBkdW1iIHBhcnQgb2YgUGhhc2VyLlBvaW50LmFuZ2xlKClcclxuICAgICBhbmdsZVRvT3RoZXIgPSAyICogTWF0aC5QSSArIGFuZ2xlVG9PdGhlcjtcclxuICB9XHJcbiAgYW5nbGVUb090aGVyID0gKGFuZ2xlVG9PdGhlciArIDMvMiAqIE1hdGguUEkpICUgKDIgKiBNYXRoLlBJKTsgLy8gcm90YXRlIDkwIGQgY2xvY2t3aXNlXHJcbiAgcmV0dXJuIGFuZ2xlVG9PdGhlcjtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRW5lbXlBSTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsInZhciBIZWxwZXIgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG5cdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgdGhpcy5nYW1lID0gdGhpcy5zdGF0ZS5nYW1lO1xyXG4gICB0aGlzLmNhbSA9IHRoaXMuZ2FtZS5jYW1lcmE7XHJcbiAgIHRoaXMuc20gPSB0aGlzLnN0YXRlLnNvdW5kTWFuYWdlcjtcclxuICAgdGhpcy5oZWxwQmFubmVyID0gdGhpcy5zdGF0ZS51aUJ1aWxkZXIuYnVpbGRCYW5uZXIoMC41LCAwLjUsICd0dXRvcmlhbF90ZXh0Jyk7XHJcblx0dGhpcy5oZWxwQnV0dG9uID0gdGhpcy5nYW1lLmFkZC5idXR0b24odGhpcy5jYW0ueCAtIDEwMCwgdGhpcy5jYW0ueSAtIDEwMCwgJ2hlbHBCdXR0b24nLCB0aGlzLmhlbHBCYW5uZXIudG9nZ2xlLCB0aGlzLmhlbHBCYW5uZXIsIDEsIDAsIDIpO1xyXG5cdHRoaXMuaGVscEJ1dHRvbi5vbklucHV0T3Zlci5hZGQodGhpcy5zbS5wbGF5SG92ZXJDbGljaywgdGhpcy5zbSk7XHJcblx0dGhpcy5oZWxwQnV0dG9uLm9uSW5wdXREb3duLmFkZCh0aGlzLnNtLnBsYXlEb3duQ2xpY2ssIHRoaXMuc20pO1xyXG59O1xyXG5cclxuSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhlbHBlcjtcclxuXHJcbkhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIHRoaXMuaGVscEJ1dHRvbi54ID0gdGhpcy5jYW0ueCArIDE2O1xyXG4gICB0aGlzLmhlbHBCdXR0b24ueSA9IHRoaXMuY2FtLnkgKyAxNjtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gSGVscGVyOyIsInZhciBSZW5kZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9uQWNjZXNzL1JlbmRlcmFibGVzJyk7XHJcbnZhciBVSUJ1aWxkZXIgPSByZXF1aXJlKCcuLi91aS9VSUJ1aWxkZXInKTtcclxudmFyIE1vZHVsZUJ1aWxkZXIgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9Nb2R1bGVCdWlsZGVyJyk7XHJcbnZhciBDdWJlR3JvdXAgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9jdWJlX2dyb3VwJyk7XHJcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnLi4vZWZmZWN0cy9FbWl0dGVyJyk7XHJcbnZhciBNb3VzZSA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL21vdXNlJyk7XHJcbnZhciBTb3VuZE1hbmFnZXIgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9zb3VuZF9tYW5hZ2VyJyk7XHJcbnZhciBTaG9wID0gcmVxdWlyZSgnLi4vdWkvc2hvcCcpO1xyXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvaGVscGVyJyk7XHJcbnZhciBDaGVhdGluZyA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL2NoZWF0aW5nJyk7XHJcbnZhciBBc3Rlcm9pZHMgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9hc3Rlcm9pZHMnKTtcclxudmFyIFdhcm5pbmcgPSByZXF1aXJlKCcuLi9lbnRpdGllcy93YXJuaW5nJyk7XHJcblxyXG52YXIgTGV2ZWxTZXR1cCA9IGZ1bmN0aW9uKHN0YXRlLCBsZXZlbCkge1xyXG5cdC8vIGluaXRpYWxpc2VcclxuXHR0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgIHRoaXMuZ2FtZSA9IHRoaXMuc3RhdGUuZ2FtZTtcclxuICAgdGhpcy5sZXZlbCA9IGxldmVsO1xyXG4gICAvLyBzaW1wbGlmeVxyXG4gICB0aGlzLnNpbXBsaWZ5ID0gZmFsc2U7XHJcbiAgIC8vIHNldHVwXHJcbiAgIHRoaXMuZ2FtZS53b3JsZC5zZXRCb3VuZHMoMCwgMCwgODAwMCwgNDAwMCk7XHJcbiAgIHRoaXMuYmcgPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSgwLCAwLCAnZWFydGhOaWdodCcpO1xyXG5cdHRoaXMuYmcyID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUoLTgwMDAsIDAsICdlYXJ0aE5pZ2h0Jyk7XHJcbiAgIHRoaXMuZ2FtZS5waHlzaWNzLnN0YXJ0U3lzdGVtKFBoYXNlci5QaHlzaWNzLlAySlMpO1xyXG5cdHRoaXMuZ2FtZS5waHlzaWNzLnAyLnNldEltcGFjdEV2ZW50cyh0cnVlKTtcclxuICAgdGhpcy5zdGF0ZS5jb2xsaXNpb25Hcm91cCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUNvbGxpc2lvbkdyb3VwKCk7XHJcbiAgIHRoaXMudXBkYXRlRGVwZW5kZW50cyA9IFtdO1xyXG4gICB0aGlzLnJlbmRlcmFibGVzID0gbmV3IFJlbmRlcmFibGVzKCk7XHJcbiAgIHRoaXMuc3RhdGUudWlCdWlsZGVyID0gbmV3IFVJQnVpbGRlcih0aGlzLnN0YXRlLCB0aGlzLnJlbmRlcmFibGVzKTtcclxuICAgdGhpcy5zdGF0ZS5tb2R1bGVCdWlsZGVyID0gbmV3IE1vZHVsZUJ1aWxkZXIodGhpcy5zdGF0ZSk7XHJcbiAgIHRoaXMuc3RhdGUuY29yZU1vZHVsZSA9IHRoaXMuc3RhdGUubW9kdWxlQnVpbGRlci5idWlsZCgnY29yZScsIDEyMDAsIDEyMDAsIHRydWUpO1xyXG5cdHRoaXMuY3ViZVdpZHRoID0gdGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUud2lkdGg7XHJcblx0dGhpcy5jdWJlQnVmZmVyID0gMjtcclxuXHR2YXIgcGxheWVyR3JvdXAgPSBuZXcgQ3ViZUdyb3VwKHRoaXMuc3RhdGUsIHRoaXMuc3RhdGUuY29yZU1vZHVsZS5jdWJlKTtcclxuXHR0aGlzLnVwZGF0ZURlcGVuZGVudHMucHVzaChwbGF5ZXJHcm91cCk7XHJcblx0dGhpcy5zdGF0ZS5wbGF5ZXIgPSBwbGF5ZXJHcm91cDtcclxuXHR0aGlzLnN0YXRlLnBsYXllci5pc1BsYXllciA9IHRydWU7XHJcbiAgIHRoaXMuc3RhdGUuQmluYXJ5RW1pdHRlciA9IG5ldyBFbWl0dGVyKHRoaXMuc3RhdGUpO1xyXG4gICB0aGlzLmxlZnRLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5BKTtcclxuXHR0aGlzLnJpZ2h0S2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuRCk7XHJcbiAgIHRoaXMubGV2ZWxEYXRhID0gSlNPTi5wYXJzZSh0aGlzLmdhbWUuY2FjaGUuZ2V0VGV4dCh0aGlzLmxldmVsKSk7XHJcbiAgIGlmICghdGhpcy5zaW1wbGlmeSkgeyB0aGlzLmxvYWRMZXZlbCgpOyB9XHJcbiAgIHRoaXMuZ2FtZS5qdWljeSA9IHRoaXMuZ2FtZS5wbHVnaW5zLmFkZChuZXcgUGhhc2VyLlBsdWdpbi5KdWljeSh0aGlzLnN0YXRlKSk7XHJcbiAgIHRoaXMuZ2FtZS5jYW1lcmEuZm9sbG93KHRoaXMuc3RhdGUuY29yZU1vZHVsZS5jdWJlKTtcclxuICAgdGhpcy5tYWluU29uZyA9IHRoaXMuZ2FtZS5hZGQuYXVkaW8oJ21haW5Tb25nJywgMSwgdHJ1ZSk7XHJcblx0aWYgKCF0aGlzLnNpbXBsaWZ5KSB7IHRoaXMubWFpblNvbmcucGxheSgnJywgMCwxLCB0cnVlLCB0cnVlKTsgfVxyXG4gICB0aGlzLnN0YXRlLm1vdXNlID0gbmV3IE1vdXNlKHRoaXMuZ2FtZSwgdGhpcy5zdGF0ZS5pbnB1dCwgdGhpcy5zdGF0ZS5wbGF5ZXIpO1xyXG4gICB0aGlzLnVwZGF0ZURlcGVuZGVudHMucHVzaCh0aGlzLnN0YXRlLm1vdXNlKTtcclxuICAgdGhpcy5zdGF0ZS5zb3VuZE1hbmFnZXIgPSBuZXcgU291bmRNYW5hZ2VyKHRoaXMuc3RhdGUpO1xyXG4gICB0aGlzLnN0YXRlLnNob3AgPSBuZXcgU2hvcCh0aGlzLnN0YXRlKTtcclxuICAgdGhpcy51cGRhdGVEZXBlbmRlbnRzLnB1c2godGhpcy5zdGF0ZS5zaG9wKTtcclxuICAgdGhpcy5oZWxwZXIgPSBuZXcgSGVscGVyKHRoaXMuc3RhdGUpO1xyXG4gICB0aGlzLnVwZGF0ZURlcGVuZGVudHMucHVzaCh0aGlzLmhlbHBlcik7XHJcbiAgIHRoaXMuY2hlYXRpbmcgPSBuZXcgQ2hlYXRpbmcodGhpcy5zdGF0ZSk7XHJcbiAgIHRoaXMuYXN0ZXJvaWRzID0gbmV3IEFzdGVyb2lkcyh0aGlzLnN0YXRlLCB0aGlzLnNpbXBsaWZ5KTtcclxuICAgdGhpcy51cGRhdGVEZXBlbmRlbnRzLnB1c2godGhpcy5hc3Rlcm9pZHMpO1xyXG4gICB0aGlzLndhcm5pbmcgPSBuZXcgV2FybmluZyh0aGlzLnN0YXRlKTtcclxuICAgdGhpcy51cGRhdGVEZXBlbmRlbnRzLnB1c2godGhpcy53YXJuaW5nKTtcclxufTtcclxuXHJcbkxldmVsU2V0dXAucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGV2ZWxTZXR1cDtcclxuXHJcbkxldmVsU2V0dXAucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICBpZih0aGlzLmxlZnRLZXkuaXNEb3duKSB7XHJcblx0XHRpZih0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS5ib2R5LmFuZ3VsYXJWZWxvY2l0eSA+IC05KSB7IFxyXG5cdFx0XHR0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS5ib2R5LmFuZ3VsYXJGb3JjZSArPSAtNy41ICogTWF0aC5wb3codGhpcy5zdGF0ZS5wbGF5ZXIubnVtQ3ViZXMsIDEuNjUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZih0aGlzLnJpZ2h0S2V5LmlzRG93bikge1xyXG5cdFx0aWYodGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUuYm9keS5hbmd1bGFyVmVsb2NpdHkgPCA5KSB7XHJcblx0XHRcdHRoaXMuc3RhdGUuY29yZU1vZHVsZS5jdWJlLmJvZHkuYW5ndWxhckZvcmNlICs9IDcuNSAqIE1hdGgucG93KHRoaXMuc3RhdGUucGxheWVyLm51bUN1YmVzLCAxLjY1KTtcclxuXHRcdH1cclxuXHR9XHJcbiAgIHRoaXMuYmcueCArPSAwLjEyNTtcclxuICAgaWYgKHRoaXMuYmcueCA+PSA4MDAwKSB7XHJcbiAgICAgIHRoaXMuYmcueCA9IDA7XHJcbiAgIH1cclxuICAgdGhpcy5iZzIueCArPSAwLjEyNTtcclxuICAgaWYgKHRoaXMuYmcyLnggPj0gODAwMCkge1xyXG4gICAgICB0aGlzLmJnMi54ID0gMDtcclxuICAgfVxyXG4gICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudXBkYXRlRGVwZW5kZW50cy5sZW5ndGg7IGkrKykge1xyXG5cdFx0aWYgKHRoaXMudXBkYXRlRGVwZW5kZW50c1tpXS51cGRhdGUpIHtcclxuXHRcdFx0dGhpcy51cGRhdGVEZXBlbmRlbnRzW2ldLnVwZGF0ZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbkxldmVsU2V0dXAucHJvdG90eXBlLmxvYWRMZXZlbCA9IGZ1bmN0aW9uKCkge1xyXG4gICB2YXIgbXlMZXZlbCA9IHRoaXMubGV2ZWxEYXRhW3RoaXMubGV2ZWxdO1xyXG4gICBmb3IgKHZhciBrZXkgaW4gbXlMZXZlbCkge1xyXG4gICAgICBpZiAobXlMZXZlbC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgIHZhciBlbGVtZW50ID0gbXlMZXZlbFtrZXldO1xyXG4gICAgICAgICBpZiAoZWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnYmx1ZXByaW50JykpIHsgLy8gZW5lbXkgdHlwZVxyXG4gICAgICAgICAgICB2YXIgZW5lbXlYID0gZWxlbWVudFsneF9wb3MnXTtcclxuICAgICAgICAgICAgdmFyIGVuZW15WSA9IGVsZW1lbnRbJ3lfcG9zJ107XHJcbiAgICAgICAgICAgIHZhciBlbmVteUdyb3VwID0gbmV3IEN1YmVHcm91cCh0aGlzLnN0YXRlLCB1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURlcGVuZGVudHMucHVzaChlbmVteUdyb3VwKTtcclxuICAgICAgICAgICAgdmFyIGJsdWVwcmludCA9IGVsZW1lbnRbJ2JsdWVwcmludCddO1xyXG4gICAgICAgICAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBibHVlcHJpbnQubGVuZ3RoOyByb3crKykge1xyXG4gICAgICAgICAgICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBibHVlcHJpbnRbcm93XS5sZW5ndGg7IGNvbCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gYmx1ZXByaW50W3Jvd11bY29sXTtcclxuICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICB2YXIgbmV3TW9kdWxlID0gdGhpcy5zdGF0ZS5tb2R1bGVCdWlsZGVyLmJ1aWxkKHR5cGUsIGVuZW15WCArIHJvdyAqICh0aGlzLmN1YmVXaWR0aCArIHRoaXMuY3ViZUJ1ZmZlciksXHJcbiAgICAgICAgICAgICAgICAgICAgIGVuZW15WSAtIGNvbCAqICh0aGlzLmN1YmVXaWR0aCArIHRoaXMuY3ViZUJ1ZmZlciksIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgbmV3TW9kdWxlLmN1YmUudGFnID0gJ2VuZW15X21vZHVsZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQocm93LCBjb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgICBlbmVteUdyb3VwLmFkZChuZXdNb2R1bGUuY3ViZSwgcG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYWlUeXBlID0gZWxlbWVudFsndHlwZSddO1xyXG4gICAgICAgICAgICBlbmVteUdyb3VwLmdpdmVBSShhaVR5cGUsIHRoaXMuc3RhdGUucGxheWVyKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH0gXHJcbn07XHJcblxyXG5MZXZlbFNldHVwLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcclxuICAgdGhpcy5zdGF0ZS5tb3VzZS5yZW5kZXIoKTtcclxuICAgdGhpcy5yZW5kZXJhYmxlcy5yZW5kZXJBbGwoKTsgXHJcbn07XHJcblxyXG5MZXZlbFNldHVwLnByb3RvdHlwZS5yZXN0YXJ0TGV2ZWwgPSBmdW5jdGlvbigpIHtcclxuICAgLy8gdGhpcy5tYWluU29uZy5zdG9wKCk7XHJcbiAgIC8vIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydChwbGF5ZXJTdGF0ZS5jdXJyZW50TGV2ZWwpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGV2ZWxTZXR1cDtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy5qcycpO1xyXG5cclxudmFyIE1vdXNlID0gZnVuY3Rpb24oZ2FtZSwgaW5wdXQsIHBsYXllckdyb3VwKSB7XHJcbiAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuXHR0aGlzLmJvZHkgPSBuZXcgcDIuQm9keSgpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuICAgdGhpcy5nYW1lLnBoeXNpY3MucDIud29ybGQuYWRkQm9keSh0aGlzLmJvZHkpO1xyXG4gICB0aGlzLmlucHV0Lm9uRG93bi5hZGQodGhpcy5jbGljaywgdGhpcyk7XHJcbiAgIHRoaXMuaW5wdXQub25VcC5hZGQodGhpcy5yZWxlYXNlLCB0aGlzKTtcclxuICAgdGhpcy5pbnB1dC5hZGRNb3ZlQ2FsbGJhY2sodGhpcy5tb3ZlLCB0aGlzKTtcclxuICAgdGhpcy54ID0gMDtcclxuICAgdGhpcy55ID0gMDtcclxuICAgdGhpcy5ncmFiYmVkID0gdW5kZWZpbmVkO1xyXG4gICB0aGlzLmxhc3RDbGlja2VkID0gdW5kZWZpbmVkO1xyXG4gICB0aGlzLmxpbmUgPSBuZXcgUGhhc2VyLkxpbmUoMCwgMCwgMCwgMCk7XHJcbiAgIHRoaXMucmVtb3ZlVGhyZXNob2xkID0gNTA7IC8vIGRpc3RhbmNlIHlvdSBtdXN0IHB1bGwgdG8gcmVtb3ZlIG1vZHVsZVxyXG4gICB0aGlzLnJlbW92ZURpc3QgPSAwOyAvLyBkaXN0YW5jZSB5b3UgYXJlIHB1bGxpbmdcclxuICAgdGhpcy5wbGF5ZXJHcm91cCA9IHBsYXllckdyb3VwO1xyXG4gICAvLyBrZXlzXHJcbiAgIHRoaXMuY2N3S2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUSk7XHJcblx0dGhpcy5jd0tleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkUpO1xyXG59O1xyXG5cclxuTW91c2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTW91c2U7XHJcblxyXG5Nb3VzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIGlmICh0aGlzLmdyYWJiZWQpIHtcclxuICAgICAgdmFyIGFuZ2xlID0gTWF0aC5hdGFuMih0aGlzLmdyYWJiZWQuc3ByaXRlLnkgLSAodGhpcy5pbnB1dC5wb3NpdGlvbi55ICsgdGhpcy5nYW1lLmNhbWVyYS55KSwgdGhpcy5ncmFiYmVkLnNwcml0ZS54IC0gKHRoaXMuaW5wdXQucG9zaXRpb24ueCsgdGhpcy5nYW1lLmNhbWVyYS54KSkgKyBNYXRoLlBJO1xyXG4gICAgICB2YXIgZGlzdCA9IFV0aWxzLmRpc3RhbmNlKHRoaXMuZ3JhYmJlZC5zcHJpdGUueCwgdGhpcy5ncmFiYmVkLnNwcml0ZS55LCAodGhpcy5pbnB1dC5wb3NpdGlvbi54KyB0aGlzLmdhbWUuY2FtZXJhLngpLCAodGhpcy5pbnB1dC5wb3NpdGlvbi55ICsgdGhpcy5nYW1lLmNhbWVyYS55KSk7XHJcbiAgICAgIHZhciB3ZWlnaHQ7XHJcblx0ICBpZih0aGlzLmdyYWJiZWQuc3ByaXRlLmtleSA9PT0gJ2FzdGVyb2lkJykge1xyXG5cdFx0d2VpZ2h0ID0gMTtcclxuXHQgIH1cclxuXHQgIGVsc2Uge1xyXG5cdFx0d2VpZ2h0ID0gMTA7XHJcblx0ICB9XHJcblx0ICBpZiAoIXRoaXMuZ3JhYmJlZC5zcHJpdGUuZ3JvdXApIHtcclxuICAgICAgICAgdGhpcy5ncmFiYmVkLmZvcmNlLnggPSBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0ICogd2VpZ2h0O1xyXG4gICAgICAgICB0aGlzLmdyYWJiZWQuZm9yY2UueSA9IE1hdGguc2luKGFuZ2xlKSAqIGRpc3QgKiB3ZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5saW5lLnNldFRvKHRoaXMuZ3JhYmJlZC5zcHJpdGUueCwgdGhpcy5ncmFiYmVkLnNwcml0ZS55LCAodGhpcy5pbnB1dC5wb3NpdGlvbi54KyB0aGlzLmdhbWUuY2FtZXJhLngpLCAodGhpcy5pbnB1dC5wb3NpdGlvbi55ICsgdGhpcy5nYW1lLmNhbWVyYS55KSk7XHJcbiAgICAgIHZhciBkZWx0YVggPSB0aGlzLmdyYWJiZWQuc3ByaXRlLnggLSB0aGlzLng7XHJcblx0ICB2YXIgZGVsdGFZID0gdGhpcy5ncmFiYmVkLnNwcml0ZS55IC0gdGhpcy55O1xyXG5cdCAgdGhpcy5yZW1vdmVEaXN0ID0gTWF0aC5zcXJ0KE1hdGgucG93KGRlbHRhWCwgMikgKyBNYXRoLnBvdyhkZWx0YVksIDIpKTtcclxuICAgICAgaWYodGhpcy5ncmFiYmVkLnNwcml0ZS50YWcgPT09ICdtb2R1bGUnKSB7XHJcblx0XHQgIGlmICh0aGlzLnJlbW92ZURpc3QgPj0gdGhpcy5yZW1vdmVUaHJlc2hvbGQgJiYgdGhpcy5ncmFiYmVkLnNwcml0ZS5rZXkgIT09ICdhc3Rlcm9pZCcpIHtcclxuXHRcdFx0IHRoaXMuZ3JhYmJlZC5zcHJpdGUucmVtb3ZlKCk7XHJcblx0XHQgIH1cclxuXHQgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICB0aGlzLmxpbmUuc2V0VG8oMCwgMCwgMCwgMCk7XHJcbiAgICB9XHJcbiAgICB2YXIgcG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KHRoaXMueCwgdGhpcy55KTtcclxuICAgIHZhciBib2RpZXMgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5oaXRUZXN0KHBvaW50KTtcclxuICAgIGlmIChib2RpZXMubGVuZ3RoKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBob3ZlciA9IGJvZGllc1swXS5wYXJlbnQ7XHJcbiAgICAgICAgaWYgKGhvdmVyLnNwcml0ZS5tb2R1bGUgJiYgaG92ZXIuc3ByaXRlLm1vZHVsZS5tb3VzZU92ZXIpIHtcclxuICAgICAgICAgICBob3Zlci5zcHJpdGUubW9kdWxlLm1vdXNlT3ZlcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHJvdGF0ZVxyXG4gICBpZih0aGlzLmNjd0tleS5pc0Rvd24pIHtcclxuXHRcdGlmKHRoaXMuZ3JhYmJlZCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZ3JhYmJlZC5zcHJpdGUuZ3JvdXAgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLmdyYWJiZWQuYW5ndWxhckZvcmNlICs9IC01O1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZih0aGlzLmN3S2V5LmlzRG93bikge1xyXG5cdFx0aWYodGhpcy5ncmFiYmVkICE9PSB1bmRlZmluZWQgJiYgdGhpcy5ncmFiYmVkLnNwcml0ZS5ncm91cCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHRoaXMuZ3JhYmJlZC5hbmd1bGFyRm9yY2UgKz0gNTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5Nb3VzZS5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbihwb2ludGVyKSB7XHJcbiAgIHZhciBwb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQocG9pbnRlci54ICsgdGhpcy5nYW1lLmNhbWVyYS54LCBwb2ludGVyLnkgKyB0aGlzLmdhbWUuY2FtZXJhLnkpO1xyXG4gICB2YXIgYm9kaWVzID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuaGl0VGVzdChwb2ludCk7XHJcbiAgIGlmIChib2RpZXMubGVuZ3RoKVxyXG4gICB7XHJcbiAgICAgdmFyIHRlbXAgPSBib2RpZXNbMF0ucGFyZW50O1xyXG4gICAgIHRoaXMuZ3JhYmJlZCA9IHRlbXA7XHJcbiAgICAgaWYgKHRoaXMuZ3JhYmJlZC5zcHJpdGUubW9kdWxlICYmIHRoaXMuZ3JhYmJlZC5zcHJpdGUubW9kdWxlLmhhc093blByb3BlcnR5KCdtb3VzZURvd24nKSkge1xyXG4gICAgICAgdGhpcy5ncmFiYmVkLnNwcml0ZS5tb2R1bGUubW91c2VEb3duKCk7XHJcbiAgICAgfVxyXG4gICAgIGlmICh0aGlzLmxhc3RDbGlja2VkICYmIHRoaXMubGFzdENsaWNrZWQuc3ByaXRlICYmIHRoaXMubGFzdENsaWNrZWQuc3ByaXRlLm1vZHVsZSAmJlxyXG4gICAgIHRoaXMubGFzdENsaWNrZWQuc3ByaXRlLm1vZHVsZS5naXZlVGFyZ2V0KSB7XHJcbiAgICAgICAgdGhpcy5sYXN0Q2xpY2tlZC5zcHJpdGUubW9kdWxlLmdpdmVUYXJnZXQodGhpcy5ncmFiYmVkLnNwcml0ZS5tb2R1bGUpO1xyXG4gICAgIH1cclxuICAgICBpZiAodGVtcC5zcHJpdGUgJiYgdGVtcC5zcHJpdGUubW9kdWxlICYmIHRlbXAuc3ByaXRlLm1vZHVsZS50eXBlID09PSAnY29yZScpIHtcclxuICAgICAgICB0aGlzLmdyYWJiZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgfVxyXG4gICAgIGlmICh0ZW1wLnNwcml0ZSAmJiB0ZW1wLnNwcml0ZS5ncm91cCAmJiB0ZW1wLnNwcml0ZS5ncm91cCAhPT0gdGhpcy5wbGF5ZXJHcm91cCkge1xyXG4gICAgICAgIHRoaXMuZ3JhYmJlZCA9IHVuZGVmaW5lZDtcclxuICAgICB9XHJcbiAgICAgdGhpcy5sYXN0Q2xpY2tlZCA9IHRlbXA7XHJcbiAgIH1cclxuICAgXHJcbiAgIC8vY3JlYXRlIHNwcml0ZSBvdmVybGF5IHRvIHNob3cgc2VsZWN0aW9uXHJcbiAgIGlmKHRoaXMuZ3JhYmJlZCkge1xyXG5cdFx0dGhpcy5zZWxlY3RlZCA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKDAsIDAsICdzZWxlY3RlZCcpO1xyXG5cdFx0dGhpcy5ncmFiYmVkLnNwcml0ZS5hZGRDaGlsZCh0aGlzLnNlbGVjdGVkKTtcclxuXHRcdHRoaXMuc2VsZWN0ZWQueCA9IDAgLSB0aGlzLmdyYWJiZWQuc3ByaXRlLndpZHRoO1xyXG5cdFx0dGhpcy5zZWxlY3RlZC55ID0gMCAtIHRoaXMuZ3JhYmJlZC5zcHJpdGUuaGVpZ2h0O1xyXG5cdFx0dGhpcy5zZWxlY3RlZC5icmluZ1RvVG9wKCk7XHJcbiAgIH1cclxufTtcclxuICBcclxuIE1vdXNlLnByb3RvdHlwZS5yZWxlYXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgIGlmICh0aGlzLmdyYWJiZWQpIHtcclxuXHRcdC8vZGVzdHJveSBzZWxlY3RlZCBzcHJpdGVcclxuXHRcdHRoaXMuZ3JhYmJlZC5zcHJpdGUucmVtb3ZlQ2hpbGQodGhpcy5zZWxlY3RlZCk7XHJcblx0XHR0aGlzLnNlbGVjdGVkLmRlc3Ryb3koKTtcclxuXHRcdHRoaXMuZ3JhYmJlZCA9IHVuZGVmaW5lZDtcclxuICAgfVxyXG59O1xyXG5cclxuTW91c2UucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbihwb2ludGVyKSB7XHJcbiAgIC8vIHAyIHVzZXMgZGlmZmVyZW50IGNvb3JkaW5hdGUgc3lzdGVtLCBzbyBjb252ZXJ0IHRoZSBwb2ludGVyIHBvc2l0aW9uIHRvIHAyJ3MgY29vcmRpbmF0ZSBzeXN0ZW1cclxuICAgdGhpcy5ib2R5LnBvc2l0aW9uWzBdID0gdGhpcy5nYW1lLnBoeXNpY3MucDIucHhtaShwb2ludGVyLnBvc2l0aW9uLngpO1xyXG4gICB0aGlzLmJvZHkucG9zaXRpb25bMV0gPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5weG1pKHBvaW50ZXIucG9zaXRpb24ueSk7XHJcbiAgIHRoaXMueCA9IHBvaW50ZXIucG9zaXRpb24ueCArIHRoaXMuZ2FtZS5jYW1lcmEueDtcclxuICAgdGhpcy55ID0gcG9pbnRlci5wb3NpdGlvbi55ICsgdGhpcy5nYW1lLmNhbWVyYS55O1xyXG59O1xyXG5cclxuTW91c2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAvL3RoaXMuZ2FtZS5kZWJ1Zy5nZW9tKHRoaXMubGluZSk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1vdXNlO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIi8qXHJcblBsYXlzIHNvdW5kcyBuZWVkZWQgYWNyb3NzIG11bHRpcGxlIHNjcmlwdHMuXHJcbiovXHJcbnZhciBTb3VuZE1hbmFnZXIgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAvLyBpbml0aWFsIHZhcmlhYmxlc1xyXG5cdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgdGhpcy5nYW1lID0gdGhpcy5zdGF0ZS5nYW1lO1xyXG4gICB0aGlzLmNhbSA9IHRoaXMuZ2FtZS5jYW1lcmE7XHJcbiAgIC8vIHNvdW5kc1xyXG4gICB0aGlzLmhvdmVyQ2xpY2sgPSB0aGlzLmdhbWUuYWRkLmF1ZGlvKCdob3ZlckNsaWNrJyk7XHJcbiAgIHRoaXMuZG93bkNsaWNrID0gdGhpcy5nYW1lLmFkZC5hdWRpbygnZG93bkNsaWNrJyk7XHJcbn07XHJcblxyXG5Tb3VuZE1hbmFnZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU291bmRNYW5hZ2VyO1xyXG5cclxuU291bmRNYW5hZ2VyLnByb3RvdHlwZS5wbGF5SG92ZXJDbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICB0aGlzLmhvdmVyQ2xpY2sucGxheSgpO1xyXG59O1xyXG5cclxuU291bmRNYW5hZ2VyLnByb3RvdHlwZS5wbGF5RG93bkNsaWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgIHRoaXMuZG93bkNsaWNrLnBsYXkoKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU291bmRNYW5hZ2VyO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgV2FybmluZyA9IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgIC8vIGluaXRpYWxpc2VcclxuXHR0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgIHRoaXMuZ2FtZSA9IHRoaXMuc3RhdGUuZ2FtZTtcclxuICAgdGhpcy5jYW0gPSB0aGlzLmdhbWUuY2FtZXJhO1xyXG4gICB0aGlzLnRpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcclxuXHR0aGlzLndhcm5pbmcgPSB0aGlzLmdhbWUuYWRkLmltYWdlKHRoaXMuZ2FtZS5jYW1lcmEueCwgdGhpcy5nYW1lLmNhbWVyYS55LCAnd2FybmluZycpO1xyXG5cdHRoaXMud2FybmluZy5raWxsKCk7XHJcbn07XHJcblxyXG5XYXJuaW5nLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFdhcm5pbmc7XHJcblxyXG5XYXJuaW5nLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgLy8gd2FybmluZyBncmFwaGljXHJcblx0aWYodGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUueCArIChNYXRoLm1heCh0aGlzLnN0YXRlLnBsYXllci5jdWJlc1dpZHRoKCksIHRoaXMuc3RhdGUucGxheWVyLmN1YmVzSGVpZ2h0KCkpIC8gMiAqIDY0KSA+IDgwMDAgfHxcclxuXHR0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS54IC0gKE1hdGgubWF4KHRoaXMuc3RhdGUucGxheWVyLmN1YmVzV2lkdGgoKSwgdGhpcy5zdGF0ZS5wbGF5ZXIuY3ViZXNIZWlnaHQoKSkgLyAyICogNjQpIDwgMCB8fFxyXG5cdHRoaXMuc3RhdGUuY29yZU1vZHVsZS5jdWJlLnkgKyAoTWF0aC5tYXgodGhpcy5zdGF0ZS5wbGF5ZXIuY3ViZXNXaWR0aCgpLCB0aGlzLnN0YXRlLnBsYXllci5jdWJlc0hlaWdodCgpKSAvIDIgKiA2NCkgPiA0MDAwIHx8XHJcblx0dGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUueSAtIChNYXRoLm1heCh0aGlzLnN0YXRlLnBsYXllci5jdWJlc1dpZHRoKCksIHRoaXMuc3RhdGUucGxheWVyLmN1YmVzSGVpZ2h0KCkpIC8gMiAqIDY0KSA8IDApIHtcclxuXHRcdGlmKHRoaXMudGltZXIubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdHRoaXMud2FybmluZy5yZXZpdmUoKTtcclxuXHRcdFx0dGhpcy50aW1lci5sb29wKFBoYXNlci5UaW1lci5TRUNPTkQgKiA1LCB0aGlzLnJlc2V0UGxheWVyLCB0aGlzKTtcclxuXHRcdFx0dGhpcy50aW1lci5zdGFydCgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRlbHNlIHtcclxuXHRcdGlmKHRoaXMud2FybmluZy5hbGl2ZSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHR0aGlzLndhcm5pbmcua2lsbCgpO1xyXG5cdFx0fVxyXG5cdFx0aWYodGhpcy50aW1lci5sZW5ndGggPiAwKSB7XHJcblx0XHRcdHRoaXMudGltZXIuc3RvcCh0cnVlKTtcclxuXHRcdH1cclxuXHR9XHJcblx0dGhpcy53YXJuaW5nLnggPSB0aGlzLmdhbWUuY2FtZXJhLng7XHJcblx0dGhpcy53YXJuaW5nLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnk7XHJcbn07XHJcblxyXG5XYXJuaW5nLnByb3RvdHlwZS5yZXNldFBsYXllciA9IGZ1bmN0aW9uKCkge1xyXG4gICBpZih0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS54ICsgKE1hdGgubWF4KHRoaXMuc3RhdGUucGxheWVyLmN1YmVzV2lkdGgoKSwgdGhpcy5zdGF0ZS5wbGF5ZXIuY3ViZXNIZWlnaHQoKSkgLyAyICogNjQpID4gODAwMCkge1xyXG4gICAgICB0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS5ib2R5Lm1vdmVMZWZ0KHRoaXMuc3RhdGUucGxheWVyLm51bUN1YmVzICogNzUwKTtcclxuICAgfVxyXG4gICBpZih0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS54IC0gKE1hdGgubWF4KHRoaXMuc3RhdGUucGxheWVyLmN1YmVzV2lkdGgoKSwgdGhpcy5zdGF0ZS5wbGF5ZXIuY3ViZXNIZWlnaHQoKSkgLyAyICogNjQpIDwgMCkge1xyXG4gICAgICB0aGlzLnN0YXRlLmNvcmVNb2R1bGUuY3ViZS5ib2R5Lm1vdmVSaWdodCh0aGlzLnN0YXRlLnBsYXllci5udW1DdWJlcyAqIDc1MCk7XHJcbiAgIH1cclxuICAgaWYodGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUueSArIChNYXRoLm1heCh0aGlzLnN0YXRlLnBsYXllci5jdWJlc1dpZHRoKCksIHRoaXMuc3RhdGUucGxheWVyLmN1YmVzSGVpZ2h0KCkpIC8gMiAqIDY0KSA+IDQwMDApIHtcclxuICAgICAgdGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUuYm9keS5tb3ZlVXAodGhpcy5zdGF0ZS5wbGF5ZXIubnVtQ3ViZXMgKiA3NTApO1xyXG4gICB9XHJcbiAgIGVsc2UgaWYodGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUueSAtIChNYXRoLm1heCh0aGlzLnN0YXRlLnBsYXllci5jdWJlc1dpZHRoKCksIHRoaXMuc3RhdGUucGxheWVyLmN1YmVzSGVpZ2h0KCkpIC8gMiAqIDY0KSA8IDApIHtcclxuICAgICAgdGhpcy5zdGF0ZS5jb3JlTW9kdWxlLmN1YmUuYm9keS5tb3ZlRG93bih0aGlzLnN0YXRlLnBsYXllci5udW1DdWJlcyAqIDc1MCk7XHJcbiAgIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gV2FybmluZzsiLCJ2YXIgUmVuZGVyYWJsZXMgPSBmdW5jdGlvbigpIHtcclxuXHRpZihSZW5kZXJhYmxlcy5wcm90b3R5cGUuZXhpc3RzKSB7XHJcblx0XHRyZXR1cm4gUmVuZGVyYWJsZXMucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlO1xyXG5cdH1cclxuXHRcclxuXHR0aGlzLmxpc3QgPSBbXTtcclxuXHRSZW5kZXJhYmxlcy5wcm90b3R5cGUuZXhpc3RzID0gdHJ1ZTtcclxuXHRSZW5kZXJhYmxlcy5wcm90b3R5cGUuZXhpc3RpbmdSZWZlcmVuY2UgPSB0aGlzO1xyXG59O1xyXG5cclxuUmVuZGVyYWJsZXMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVuZGVyYWJsZXM7XHJcbi8vVGhlc2UgdmFyJ3MgaGVscCBjcmVhdGUgdGhlIHNpbmdsZXRvbiBmdW5jdGlvbmFsaXR5XHJcblJlbmRlcmFibGVzLnByb3RvdHlwZS5leGlzdHMgPSBmYWxzZTtcclxuUmVuZGVyYWJsZXMucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlID0gbnVsbDtcclxuXHJcblJlbmRlcmFibGVzLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbihzdWJzY3JpYmVyKSB7XHJcblx0dGhpcy5saXN0LnB1c2goc3Vic2NyaWJlcik7XHJcbn07XHJcblxyXG5SZW5kZXJhYmxlcy5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbih1bnN1YnNjcmliZXIpIHtcclxuXHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5saXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRpZih0aGlzLmxpc3RbaV0gPT09IHVuc3Vic2NyaWJlcikge1xyXG5cdFx0XHR0aGlzLmxpc3RbaV0gPSBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5SZW5kZXJhYmxlcy5wcm90b3R5cGUucmVuZGVyQWxsID0gZnVuY3Rpb24oKSB7XHJcblx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGlzdC5sZW5ndGg7IGkrKykge1xyXG5cdFx0aWYodGhpcy5saXN0W2ldID09PSBmYWxzZSkge1xyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHRcdHRoaXMubGlzdFtpXS5yZW5kZXIoKTtcclxuXHR9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFJlbmRlcmFibGVzOyIsIi8vIGphdmFzY3JpcHQtYXN0YXIgMC40LjBcclxuLy8gaHR0cDovL2dpdGh1Yi5jb20vYmdyaW5zL2phdmFzY3JpcHQtYXN0YXJcclxuLy8gRnJlZWx5IGRpc3RyaWJ1dGFibGUgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4vLyBJbXBsZW1lbnRzIHRoZSBhc3RhciBzZWFyY2ggYWxnb3JpdGhtIGluIGphdmFzY3JpcHQgdXNpbmcgYSBCaW5hcnkgSGVhcC5cclxuLy8gSW5jbHVkZXMgQmluYXJ5IEhlYXAgKHdpdGggbW9kaWZpY2F0aW9ucykgZnJvbSBNYXJpam4gSGF2ZXJiZWtlLlxyXG4vLyBodHRwOi8vZWxvcXVlbnRqYXZhc2NyaXB0Lm5ldC9hcHBlbmRpeDIuaHRtbFxyXG5cclxuKGZ1bmN0aW9uKGRlZmluaXRpb24pIHtcclxuICAgIC8qIGdsb2JhbCBtb2R1bGUsIGRlZmluZSAqL1xyXG4gICAgaWYodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpO1xyXG4gICAgfSBlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShbXSwgZGVmaW5pdGlvbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBleHBvcnRzID0gZGVmaW5pdGlvbigpO1xyXG4gICAgICAgIHdpbmRvdy5hc3RhciA9IGV4cG9ydHMuYXN0YXI7XHJcbiAgICAgICAgd2luZG93LkdyYXBoID0gZXhwb3J0cy5HcmFwaDtcclxuICAgIH1cclxufSkoZnVuY3Rpb24oKSB7XHJcblxyXG5mdW5jdGlvbiBwYXRoVG8obm9kZSl7XHJcbiAgICB2YXIgY3VyciA9IG5vZGUsXHJcbiAgICAgICAgcGF0aCA9IFtdO1xyXG4gICAgd2hpbGUoY3Vyci5wYXJlbnQpIHtcclxuICAgICAgICBwYXRoLnB1c2goY3Vycik7XHJcbiAgICAgICAgY3VyciA9IGN1cnIucGFyZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdGgucmV2ZXJzZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRIZWFwKCkge1xyXG4gICAgcmV0dXJuIG5ldyBCaW5hcnlIZWFwKGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZS5mO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbnZhciBhc3RhciA9IHtcclxuICAgIC8qKlxyXG4gICAgKiBQZXJmb3JtIGFuIEEqIFNlYXJjaCBvbiBhIGdyYXBoIGdpdmVuIGEgc3RhcnQgYW5kIGVuZCBub2RlLlxyXG4gICAgKiBAcGFyYW0ge0dyYXBofSBncmFwaFxyXG4gICAgKiBAcGFyYW0ge0dyaWROb2RlfSBzdGFydFxyXG4gICAgKiBAcGFyYW0ge0dyaWROb2RlfSBlbmRcclxuICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAgKiBAcGFyYW0ge2Jvb2x9IFtvcHRpb25zLmNsb3Nlc3RdIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcclxuICAgICAgICAgICAgICAgcGF0aCB0byB0aGUgY2xvc2VzdCBub2RlIGlmIHRoZSB0YXJnZXQgaXMgdW5yZWFjaGFibGUuXHJcbiAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmhldXJpc3RpY10gSGV1cmlzdGljIGZ1bmN0aW9uIChzZWVcclxuICAgICogICAgICAgICAgYXN0YXIuaGV1cmlzdGljcykuXHJcbiAgICAqL1xyXG4gICAgc2VhcmNoOiBmdW5jdGlvbihncmFwaCwgc3RhcnQsIGVuZCwgb3B0aW9ucykge1xyXG4gICAgICAgIGdyYXBoLmNsZWFuRGlydHkoKTtcclxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICB2YXIgaGV1cmlzdGljID0gb3B0aW9ucy5oZXVyaXN0aWMgfHwgYXN0YXIuaGV1cmlzdGljcy5tYW5oYXR0YW4sXHJcbiAgICAgICAgICAgIGNsb3Nlc3QgPSBvcHRpb25zLmNsb3Nlc3QgfHwgZmFsc2U7XHJcblxyXG4gICAgICAgIHZhciBvcGVuSGVhcCA9IGdldEhlYXAoKSxcclxuICAgICAgICAgICAgY2xvc2VzdE5vZGUgPSBzdGFydDsgLy8gc2V0IHRoZSBzdGFydCBub2RlIHRvIGJlIHRoZSBjbG9zZXN0IGlmIHJlcXVpcmVkXHJcblxyXG4gICAgICAgIHN0YXJ0LmggPSBoZXVyaXN0aWMoc3RhcnQsIGVuZCk7XHJcblxyXG4gICAgICAgIG9wZW5IZWFwLnB1c2goc3RhcnQpO1xyXG5cclxuICAgICAgICB3aGlsZShvcGVuSGVhcC5zaXplKCkgPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBHcmFiIHRoZSBsb3dlc3QgZih4KSB0byBwcm9jZXNzIG5leHQuICBIZWFwIGtlZXBzIHRoaXMgc29ydGVkIGZvciB1cy5cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gb3BlbkhlYXAucG9wKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBFbmQgY2FzZSAtLSByZXN1bHQgaGFzIGJlZW4gZm91bmQsIHJldHVybiB0aGUgdHJhY2VkIHBhdGguXHJcbiAgICAgICAgICAgIGlmKGN1cnJlbnROb2RlID09PSBlbmQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXRoVG8oY3VycmVudE5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBOb3JtYWwgY2FzZSAtLSBtb3ZlIGN1cnJlbnROb2RlIGZyb20gb3BlbiB0byBjbG9zZWQsIHByb2Nlc3MgZWFjaCBvZiBpdHMgbmVpZ2hib3JzLlxyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5jbG9zZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gRmluZCBhbGwgbmVpZ2hib3JzIGZvciB0aGUgY3VycmVudCBub2RlLlxyXG4gICAgICAgICAgICB2YXIgbmVpZ2hib3JzID0gZ3JhcGgubmVpZ2hib3JzKGN1cnJlbnROb2RlKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IG5laWdoYm9ycy5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmVpZ2hib3IgPSBuZWlnaGJvcnNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5laWdoYm9yLmNsb3NlZCB8fCBuZWlnaGJvci5pc1dhbGwoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdCBhIHZhbGlkIG5vZGUgdG8gcHJvY2Vzcywgc2tpcCB0byBuZXh0IG5laWdoYm9yLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRoZSBnIHNjb3JlIGlzIHRoZSBzaG9ydGVzdCBkaXN0YW5jZSBmcm9tIHN0YXJ0IHRvIGN1cnJlbnQgbm9kZS5cclxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHBhdGggd2UgaGF2ZSBhcnJpdmVkIGF0IHRoaXMgbmVpZ2hib3IgaXMgdGhlIHNob3J0ZXN0IG9uZSB3ZSBoYXZlIHNlZW4geWV0LlxyXG4gICAgICAgICAgICAgICAgdmFyIGdTY29yZSA9IGN1cnJlbnROb2RlLmcgKyBuZWlnaGJvci5nZXRDb3N0KGN1cnJlbnROb2RlKSxcclxuICAgICAgICAgICAgICAgICAgICBiZWVuVmlzaXRlZCA9IG5laWdoYm9yLnZpc2l0ZWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFiZWVuVmlzaXRlZCB8fCBnU2NvcmUgPCBuZWlnaGJvci5nKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIGFuIG9wdGltYWwgKHNvIGZhcikgcGF0aCB0byB0aGlzIG5vZGUuICBUYWtlIHNjb3JlIGZvciBub2RlIHRvIHNlZSBob3cgZ29vZCBpdCBpcy5cclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci52aXNpdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5wYXJlbnQgPSBjdXJyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5oID0gbmVpZ2hib3IuaCB8fCBoZXVyaXN0aWMobmVpZ2hib3IsIGVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3IuZyA9IGdTY29yZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5mID0gbmVpZ2hib3IuZyArIG5laWdoYm9yLmg7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGgubWFya0RpcnR5KG5laWdoYm9yKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbmVpZ2hib3VyIGlzIGNsb3NlciB0aGFuIHRoZSBjdXJyZW50IGNsb3Nlc3ROb2RlIG9yIGlmIGl0J3MgZXF1YWxseSBjbG9zZSBidXQgaGFzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgY2hlYXBlciBwYXRoIHRoYW4gdGhlIGN1cnJlbnQgY2xvc2VzdCBub2RlIHRoZW4gaXQgYmVjb21lcyB0aGUgY2xvc2VzdCBub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWlnaGJvci5oIDwgY2xvc2VzdE5vZGUuaCB8fCAobmVpZ2hib3IuaCA9PT0gY2xvc2VzdE5vZGUuaCAmJiBuZWlnaGJvci5nIDwgY2xvc2VzdE5vZGUuZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3ROb2RlID0gbmVpZ2hib3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYmVlblZpc2l0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHVzaGluZyB0byBoZWFwIHdpbGwgcHV0IGl0IGluIHByb3BlciBwbGFjZSBiYXNlZCBvbiB0aGUgJ2YnIHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuSGVhcC5wdXNoKG5laWdoYm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgc2VlbiB0aGUgbm9kZSwgYnV0IHNpbmNlIGl0IGhhcyBiZWVuIHJlc2NvcmVkIHdlIG5lZWQgdG8gcmVvcmRlciBpdCBpbiB0aGUgaGVhcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuSGVhcC5yZXNjb3JlRWxlbWVudChuZWlnaGJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2xvc2VzdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGF0aFRvKGNsb3Nlc3ROb2RlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5vIHJlc3VsdCB3YXMgZm91bmQgLSBlbXB0eSBhcnJheSBzaWduaWZpZXMgZmFpbHVyZSB0byBmaW5kIHBhdGguXHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfSxcclxuICAgIC8vIFNlZSBsaXN0IG9mIGhldXJpc3RpY3M6IGh0dHA6Ly90aGVvcnkuc3RhbmZvcmQuZWR1L35hbWl0cC9HYW1lUHJvZ3JhbW1pbmcvSGV1cmlzdGljcy5odG1sXHJcbiAgICBoZXVyaXN0aWNzOiB7XHJcbiAgICAgICAgbWFuaGF0dGFuOiBmdW5jdGlvbihwb3MwLCBwb3MxKSB7XHJcbiAgICAgICAgICAgIHZhciBkMSA9IE1hdGguYWJzKHBvczEueCAtIHBvczAueCk7XHJcbiAgICAgICAgICAgIHZhciBkMiA9IE1hdGguYWJzKHBvczEueSAtIHBvczAueSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkMSArIGQyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlhZ29uYWw6IGZ1bmN0aW9uKHBvczAsIHBvczEpIHtcclxuICAgICAgICAgICAgdmFyIEQgPSAxO1xyXG4gICAgICAgICAgICB2YXIgRDIgPSBNYXRoLnNxcnQoMik7XHJcbiAgICAgICAgICAgIHZhciBkMSA9IE1hdGguYWJzKHBvczEueCAtIHBvczAueCk7XHJcbiAgICAgICAgICAgIHZhciBkMiA9IE1hdGguYWJzKHBvczEueSAtIHBvczAueSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoRCAqIChkMSArIGQyKSkgKyAoKEQyIC0gKDIgKiBEKSkgKiBNYXRoLm1pbihkMSwgZDIpKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY2xlYW5Ob2RlOmZ1bmN0aW9uKG5vZGUpe1xyXG4gICAgICAgIG5vZGUuZiA9IDA7XHJcbiAgICAgICAgbm9kZS5nID0gMDtcclxuICAgICAgICBub2RlLmggPSAwO1xyXG4gICAgICAgIG5vZGUudmlzaXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIG5vZGUuY2xvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgbm9kZS5wYXJlbnQgPSBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiogQSBncmFwaCBtZW1vcnkgc3RydWN0dXJlXHJcbiogQHBhcmFtIHtBcnJheX0gZ3JpZEluIDJEIGFycmF5IG9mIGlucHV0IHdlaWdodHNcclxuKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiogQHBhcmFtIHtib29sfSBbb3B0aW9ucy5kaWFnb25hbF0gU3BlY2lmaWVzIHdoZXRoZXIgZGlhZ29uYWwgbW92ZXMgYXJlIGFsbG93ZWRcclxuKi9cclxuZnVuY3Rpb24gR3JhcGgoZ3JpZEluLCBvcHRpb25zKSB7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIHRoaXMubm9kZXMgPSBbXTtcclxuICAgIHRoaXMuZGlhZ29uYWwgPSAhIW9wdGlvbnMuZGlhZ29uYWw7XHJcbiAgICB0aGlzLmdyaWQgPSBbXTtcclxuICAgIGZvciAodmFyIHggPSAwOyB4IDwgZ3JpZEluLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgdGhpcy5ncmlkW3hdID0gW107XHJcblxyXG4gICAgICAgIGZvciAodmFyIHkgPSAwLCByb3cgPSBncmlkSW5beF07IHkgPCByb3cubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSBuZXcgR3JpZE5vZGUoeCwgeSwgcm93W3ldKTtcclxuICAgICAgICAgICAgdGhpcy5ncmlkW3hdW3ldID0gbm9kZTtcclxuICAgICAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuaW5pdCgpO1xyXG59XHJcblxyXG5HcmFwaC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5kaXJ0eU5vZGVzID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhc3Rhci5jbGVhbk5vZGUodGhpcy5ub2Rlc1tpXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5HcmFwaC5wcm90b3R5cGUuY2xlYW5EaXJ0eSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRpcnR5Tm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhc3Rhci5jbGVhbk5vZGUodGhpcy5kaXJ0eU5vZGVzW2ldKTtcclxuICAgIH1cclxuICAgIHRoaXMuZGlydHlOb2RlcyA9IFtdO1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLm1hcmtEaXJ0eSA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgIHRoaXMuZGlydHlOb2Rlcy5wdXNoKG5vZGUpO1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLm5laWdoYm9ycyA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgIHZhciByZXQgPSBbXSxcclxuICAgICAgICB4ID0gbm9kZS54LFxyXG4gICAgICAgIHkgPSBub2RlLnksXHJcbiAgICAgICAgZ3JpZCA9IHRoaXMuZ3JpZDtcclxuXHJcbiAgICAvLyBXZXN0XHJcbiAgICBpZihncmlkW3gtMV0gJiYgZ3JpZFt4LTFdW3ldKSB7XHJcbiAgICAgICAgcmV0LnB1c2goZ3JpZFt4LTFdW3ldKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFYXN0XHJcbiAgICBpZihncmlkW3grMV0gJiYgZ3JpZFt4KzFdW3ldKSB7XHJcbiAgICAgICAgcmV0LnB1c2goZ3JpZFt4KzFdW3ldKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTb3V0aFxyXG4gICAgaWYoZ3JpZFt4XSAmJiBncmlkW3hdW3ktMV0pIHtcclxuICAgICAgICByZXQucHVzaChncmlkW3hdW3ktMV0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vcnRoXHJcbiAgICBpZihncmlkW3hdICYmIGdyaWRbeF1beSsxXSkge1xyXG4gICAgICAgIHJldC5wdXNoKGdyaWRbeF1beSsxXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZGlhZ29uYWwpIHtcclxuICAgICAgICAvLyBTb3V0aHdlc3RcclxuICAgICAgICBpZihncmlkW3gtMV0gJiYgZ3JpZFt4LTFdW3ktMV0pIHtcclxuICAgICAgICAgICAgcmV0LnB1c2goZ3JpZFt4LTFdW3ktMV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU291dGhlYXN0XHJcbiAgICAgICAgaWYoZ3JpZFt4KzFdICYmIGdyaWRbeCsxXVt5LTFdKSB7XHJcbiAgICAgICAgICAgIHJldC5wdXNoKGdyaWRbeCsxXVt5LTFdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5vcnRod2VzdFxyXG4gICAgICAgIGlmKGdyaWRbeC0xXSAmJiBncmlkW3gtMV1beSsxXSkge1xyXG4gICAgICAgICAgICByZXQucHVzaChncmlkW3gtMV1beSsxXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOb3J0aGVhc3RcclxuICAgICAgICBpZihncmlkW3grMV0gJiYgZ3JpZFt4KzFdW3krMV0pIHtcclxuICAgICAgICAgICAgcmV0LnB1c2goZ3JpZFt4KzFdW3krMV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZ3JhcGhTdHJpbmcgPSBbXSxcclxuICAgICAgICBub2RlcyA9IHRoaXMuZ3JpZCwgLy8gd2hlbiB1c2luZyBncmlkXHJcbiAgICAgICAgcm93RGVidWcsIHJvdywgeSwgbDtcclxuICAgIGZvciAodmFyIHggPSAwLCBsZW4gPSBub2Rlcy5sZW5ndGg7IHggPCBsZW47IHgrKykge1xyXG4gICAgICAgIHJvd0RlYnVnID0gW107XHJcbiAgICAgICAgcm93ID0gbm9kZXNbeF07XHJcbiAgICAgICAgZm9yICh5ID0gMCwgbCA9IHJvdy5sZW5ndGg7IHkgPCBsOyB5KyspIHtcclxuICAgICAgICAgICAgcm93RGVidWcucHVzaChyb3dbeV0ud2VpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ3JhcGhTdHJpbmcucHVzaChyb3dEZWJ1Zy5qb2luKCcgJykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdyYXBoU3RyaW5nLmpvaW4oJ1xcbicpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gR3JpZE5vZGUoeCwgeSwgd2VpZ2h0KSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICAgIHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xyXG59XHJcblxyXG5HcmlkTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiAnWycgKyB0aGlzLnggKyAnICcgKyB0aGlzLnkgKyAnXSc7XHJcbn07XHJcblxyXG5HcmlkTm9kZS5wcm90b3R5cGUuZ2V0Q29zdCA9IGZ1bmN0aW9uKGZyb21OZWlnaGJvcikge1xyXG4gICAgLy8gVGFrZSBkaWFnb25hbCB3ZWlnaHQgaW50byBjb25zaWRlcmF0aW9uLlxyXG4gICAgaWYgKGZyb21OZWlnaGJvciAmJiBmcm9tTmVpZ2hib3IueCAhPT0gdGhpcy54ICYmIGZyb21OZWlnaGJvci55ICE9PSB0aGlzLnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53ZWlnaHQgKiAxLjQxNDIxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMud2VpZ2h0O1xyXG59O1xyXG5cclxuR3JpZE5vZGUucHJvdG90eXBlLmlzV2FsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMud2VpZ2h0ID09PSAwO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gQmluYXJ5SGVhcChzY29yZUZ1bmN0aW9uKXtcclxuICAgIHRoaXMuY29udGVudCA9IFtdO1xyXG4gICAgdGhpcy5zY29yZUZ1bmN0aW9uID0gc2NvcmVGdW5jdGlvbjtcclxufVxyXG5cclxuQmluYXJ5SGVhcC5wcm90b3R5cGUgPSB7XHJcbiAgICBwdXNoOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgLy8gQWRkIHRoZSBuZXcgZWxlbWVudCB0byB0aGUgZW5kIG9mIHRoZSBhcnJheS5cclxuICAgICAgICB0aGlzLmNvbnRlbnQucHVzaChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgLy8gQWxsb3cgaXQgdG8gc2luayBkb3duLlxyXG4gICAgICAgIHRoaXMuc2lua0Rvd24odGhpcy5jb250ZW50Lmxlbmd0aCAtIDEpO1xyXG4gICAgfSxcclxuICAgIHBvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gU3RvcmUgdGhlIGZpcnN0IGVsZW1lbnQgc28gd2UgY2FuIHJldHVybiBpdCBsYXRlci5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jb250ZW50WzBdO1xyXG4gICAgICAgIC8vIEdldCB0aGUgZWxlbWVudCBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheS5cclxuICAgICAgICB2YXIgZW5kID0gdGhpcy5jb250ZW50LnBvcCgpO1xyXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBhbnkgZWxlbWVudHMgbGVmdCwgcHV0IHRoZSBlbmQgZWxlbWVudCBhdCB0aGVcclxuICAgICAgICAvLyBzdGFydCwgYW5kIGxldCBpdCBidWJibGUgdXAuXHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFswXSA9IGVuZDtcclxuICAgICAgICAgICAgdGhpcy5idWJibGVVcCgwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICB2YXIgaSA9IHRoaXMuY29udGVudC5pbmRleE9mKG5vZGUpO1xyXG5cclxuICAgICAgICAvLyBXaGVuIGl0IGlzIGZvdW5kLCB0aGUgcHJvY2VzcyBzZWVuIGluICdwb3AnIGlzIHJlcGVhdGVkXHJcbiAgICAgICAgLy8gdG8gZmlsbCB1cCB0aGUgaG9sZS5cclxuICAgICAgICB2YXIgZW5kID0gdGhpcy5jb250ZW50LnBvcCgpO1xyXG5cclxuICAgICAgICBpZiAoaSAhPT0gdGhpcy5jb250ZW50Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50W2ldID0gZW5kO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcmVGdW5jdGlvbihlbmQpIDwgdGhpcy5zY29yZUZ1bmN0aW9uKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpbmtEb3duKGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWJibGVVcChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzaXplOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aDtcclxuICAgIH0sXHJcbiAgICByZXNjb3JlRWxlbWVudDogZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIHRoaXMuc2lua0Rvd24odGhpcy5jb250ZW50LmluZGV4T2Yobm9kZSkpO1xyXG4gICAgfSxcclxuICAgIHNpbmtEb3duOiBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgLy8gRmV0Y2ggdGhlIGVsZW1lbnQgdGhhdCBoYXMgdG8gYmUgc3Vuay5cclxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuY29udGVudFtuXTtcclxuXHJcbiAgICAgICAgLy8gV2hlbiBhdCAwLCBhbiBlbGVtZW50IGNhbiBub3Qgc2luayBhbnkgZnVydGhlci5cclxuICAgICAgICB3aGlsZSAobiA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbXB1dGUgdGhlIHBhcmVudCBlbGVtZW50J3MgaW5kZXgsIGFuZCBmZXRjaCBpdC5cclxuICAgICAgICAgICAgdmFyIHBhcmVudE4gPSAoKG4gKyAxKSA+PiAxKSAtIDEsIHBhcmVudCA9IHRoaXMuY29udGVudFtwYXJlbnROXTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgICAgICAgICAgIC8vIFN3YXAgdGhlIGVsZW1lbnRzIGlmIHRoZSBwYXJlbnQgaXMgZ3JlYXRlci5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcmVGdW5jdGlvbihlbGVtZW50KSA8IHRoaXMuc2NvcmVGdW5jdGlvbihwYXJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbcGFyZW50Tl0gPSBlbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50W25dID0gcGFyZW50O1xyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlICduJyB0byBjb250aW51ZSBhdCB0aGUgbmV3IHBvc2l0aW9uLlxyXG4gICAgICAgICAgICAgICAgbiA9IHBhcmVudE47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gRm91bmQgYSBwYXJlbnQgdGhhdCBpcyBsZXNzLCBubyBuZWVkIHRvIHNpbmsgYW55IGZ1cnRoZXIuXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgYnViYmxlVXA6IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICAvLyBMb29rIHVwIHRoZSB0YXJnZXQgZWxlbWVudCBhbmQgaXRzIHNjb3JlLlxyXG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmNvbnRlbnQubGVuZ3RoLFxyXG4gICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5jb250ZW50W25dLFxyXG4gICAgICAgICAgICBlbGVtU2NvcmUgPSB0aGlzLnNjb3JlRnVuY3Rpb24oZWxlbWVudCk7XHJcblxyXG4gICAgICAgIHdoaWxlKHRydWUpIHtcclxuICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgaW5kaWNlcyBvZiB0aGUgY2hpbGQgZWxlbWVudHMuXHJcbiAgICAgICAgICAgIHZhciBjaGlsZDJOID0gKG4gKyAxKSA8PCAxLCBjaGlsZDFOID0gY2hpbGQyTiAtIDE7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHVzZWQgdG8gc3RvcmUgdGhlIG5ldyBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCwgaWYgYW55LlxyXG4gICAgICAgICAgICB2YXIgc3dhcCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBjaGlsZDFTY29yZTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGZpcnN0IGNoaWxkIGV4aXN0cyAoaXMgaW5zaWRlIHRoZSBhcnJheSkuLi5cclxuICAgICAgICAgICAgaWYgKGNoaWxkMU4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIExvb2sgaXQgdXAgYW5kIGNvbXB1dGUgaXRzIHNjb3JlLlxyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkMSA9IHRoaXMuY29udGVudFtjaGlsZDFOXTtcclxuICAgICAgICAgICAgICAgIGNoaWxkMVNjb3JlID0gdGhpcy5zY29yZUZ1bmN0aW9uKGNoaWxkMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNjb3JlIGlzIGxlc3MgdGhhbiBvdXIgZWxlbWVudCdzLCB3ZSBuZWVkIHRvIHN3YXAuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQxU2NvcmUgPCBlbGVtU2NvcmUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YXAgPSBjaGlsZDFOO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBEbyB0aGUgc2FtZSBjaGVja3MgZm9yIHRoZSBvdGhlciBjaGlsZC5cclxuICAgICAgICAgICAgaWYgKGNoaWxkMk4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZDIgPSB0aGlzLmNvbnRlbnRbY2hpbGQyTl0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQyU2NvcmUgPSB0aGlzLnNjb3JlRnVuY3Rpb24oY2hpbGQyKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZDJTY29yZSA8IChzd2FwID09PSBudWxsID8gZWxlbVNjb3JlIDogY2hpbGQxU2NvcmUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dhcCA9IGNoaWxkMk47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBlbGVtZW50IG5lZWRzIHRvIGJlIG1vdmVkLCBzd2FwIGl0LCBhbmQgY29udGludWUuXHJcbiAgICAgICAgICAgIGlmIChzd2FwICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbbl0gPSB0aGlzLmNvbnRlbnRbc3dhcF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbc3dhcF0gPSBlbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgbiA9IHN3YXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBhcmUgZG9uZS5cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbnJldHVybiB7XHJcbiAgICBhc3RhcjogYXN0YXIsXHJcbiAgICBHcmFwaDogR3JhcGhcclxufTtcclxuXHJcbn0pO1xyXG4iLCJ2YXIgQm9vdCA9IGZ1bmN0aW9uICgpIHt9O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCb290O1xyXG5cclxuQm9vdC5wcm90b3R5cGUgPSB7XHJcblxyXG4gIHByZWxvYWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgncHJlbG9hZGVyJywgJ2Fzc2V0cy9pbWFnZXMvcHJlbG9hZGVyLmdpZicpO1xyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5nYW1lLmlucHV0Lm1heFBvaW50ZXJzID0gMTtcclxuXHJcbiAgICBpZiAodGhpcy5nYW1lLmRldmljZS5kZXNrdG9wKSB7XHJcbiAgICAgIC8vdGhpcy5nYW1lLnN0YWdlLnNjYWxlLnBhZ2VBbGlnbkhvcml6b250YWxseSA9IHRydWU7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zY2FsZU1vZGUgPSBQaGFzZXIuU2NhbGVNYW5hZ2VyLlJFU0laRTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zY2FsZU1vZGUgPSBQaGFzZXIuU2NhbGVNYW5hZ2VyLlNIT1dfQUxMO1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUubWluV2lkdGggPSAgNDgwO1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUubWluSGVpZ2h0ID0gMjYwO1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUubWF4V2lkdGggPSA2NDA7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5tYXhIZWlnaHQgPSA0ODA7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5mb3JjZUxhbmRzY2FwZSA9IHRydWU7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5wYWdlQWxpZ25Ib3Jpem9udGFsbHkgPSB0cnVlO1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUuc2V0U2NyZWVuU2l6ZSh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ1ByZWxvYWRlcicpO1xyXG4gIH1cclxufTtcclxuIiwiLypcclxuTWFpbiB0ZXN0aW5nIGVudmlyb25tZW50LlxyXG4qL1xyXG52YXIgTGV2ZWxTZXR1cCA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL2xldmVsX3NldHVwJyk7XHJcblxyXG52YXIgR2FtZSA9IGZ1bmN0aW9uICgpIHsgfTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gR2FtZTtcclxuXHJcbkdhbWUucHJvdG90eXBlID0ge1xyXG5cdFxyXG4gIGluaXQ6IGZ1bmN0aW9uKHBhcmFtcyl7XHJcbiAgXHR0aGlzLmxldmVsU29uZyA9IHRoaXMuZ2FtZS5hZGQuYXVkaW8ocGFyYW1zWzBdKTtcclxuXHR0aGlzLmxldmVsU29uZy5wbGF5KCcnLHBhcmFtc1sxXSxwYXJhbXNbMl0sdHJ1ZSx0cnVlKTtcclxuICB9LFxyXG5cdFxyXG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICB0aGlzLmxldmVsU2V0dXAgPSBuZXcgTGV2ZWxTZXR1cCh0aGlzLCAnbGV2ZWxfb25lJyk7XHJcbiAgfSxcclxuICBcclxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgdGhpcy5sZXZlbFNldHVwLnVwZGF0ZSgpO1xyXG4gIH0sXHJcbiAgXHJcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgIHRoaXMubGV2ZWxTZXR1cC5yZW5kZXIoKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsInZhciBNZW51ID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMudGV4dCA9IG51bGw7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1lbnU7XHJcblxyXG5NZW51LnByb3RvdHlwZSA9IHtcclxuXHJcbiAgaW5pdDogZnVuY3Rpb24ocGFyYW1zKXtcclxuICBcdFxyXG5cdHRoaXMubWVudVNvbmcgPSB0aGlzLmdhbWUuYWRkLmF1ZGlvKHBhcmFtc1swXSk7XHJcblx0dGhpcy5tZW51U29uZy5wbGF5KCcnLHBhcmFtc1sxXSxwYXJhbXNbMl0sdHJ1ZSx0cnVlKTtcclxuICB9LFxyXG4gIFxyXG4gIHBvczogWy0yNSwgMjUsIDc1XSxcclxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICBcclxuICAgIHRoaXMudGl0bGUgPSB0aGlzLmFkZC5pbWFnZSh0aGlzLndvcmxkLmNlbnRlclgsIHRoaXMud29ybGQuY2VudGVyWSAtIDk1LCAnbWVudV90aXRsZScpO1xyXG4gICAgdGhpcy50aXRsZS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG4gICAgXHJcbiAgICB0aGlzLnNlbGVjdCA9IHRoaXMuYWRkQnV0dG9uKDEsICdtZW51X3NlbGVjdCcsIHRoaXMuY2hhbmdlVG9HYW1lKTtcclxuICBcdHRoaXMuc2VsZWN0LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcbiAgXHRcclxuICBcdHRoaXMubWFudWFsID0gdGhpcy5hZGRCdXR0b24oMiwgJ21lbnVfbWFudWFsJywgdGhpcy5jaGFuZ2VUb01lbnUpO1xyXG4gIFx0dGhpcy5tYW51YWwuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuICBcdFxyXG4gIFx0dGhpcy5jcmVkaXRzID0gdGhpcy5hZGRCdXR0b24oMywgJ21lbnVfY3JlZGl0cycsIHRoaXMuY2hhbmdlVG9NZW51KTtcclxuICBcdHRoaXMuY3JlZGl0cy5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG4gIFx0XHJcbiAgXHRcclxuICB9LFxyXG5cclxuICBhZGRCdXR0b246IGZ1bmN0aW9uKGJ1dHRvbiwgaW1nLCBmdW5jKXtcclxuICAgIHJldHVybiB0aGlzLmFkZC5idXR0b24odGhpcy53b3JsZC5jZW50ZXJYLCB0aGlzLndvcmxkLmNlbnRlclkgKyB0aGlzLnBvc1tidXR0b24gLSAxXSwgaW1nLCBmdW5jLCB0aGlzKTtcclxuICB9LFxyXG4gIFxyXG4gIGRyYXc6IGZ1bmN0aW9uKCl7XHJcbiAgfSxcclxuICBcclxuICBjaGFuZ2VUb0dhbWU6IGZ1bmN0aW9uKCl7XHJcblx0dGhpcy5tZW51U29uZy5zdG9wKCk7XHJcblx0dmFyIHBhcmFtcyA9IFsnbWFpblNvbmcnLCAwLCB0aGlzLm1lbnVTb25nLnZvbHVtZV07XHJcbiAgXHR0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ0dhbWUnLCB0cnVlLCBmYWxzZSwgcGFyYW1zKTtcclxuICB9LCAgXHJcbiAgXHJcbiAgY2hhbmdlVG9NZW51OiBmdW5jdGlvbigpe1xyXG4gIFx0dmFyIHBhcmFtcyA9IFsnbWVudVNvbmcnLCB0aGlzLm1lbnVTb25nLnBvc2l0aW9uLCB0aGlzLm1lbnVTb25nLnZvbHVtZV07XHJcbiAgXHR0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ01lbnUnLCB0cnVlLCBmYWxzZSwgcGFyYW1zKTtcclxuICB9LCAgXHJcbiAgLypcclxuICBjaGFuZ2VTdGF0ZTogZnVuY3Rpb24oc3RhdGUpe1xyXG4gIFx0c3dpdGNoKHN0YXRlKXtcclxuICBcdFx0Y2FzZSAnZ2FtZSc6XHJcbiAgXHRcdFx0dGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdHYW1lJyk7XHJcbiAgXHRcdFx0YnJlYWs7XHJcbiAgXHRcdGNhc2UgJ21lbnUnOlxyXG4gIFx0XHRcdHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnTWVudScpO1xyXG4gIFx0XHRcdGJyZWFrO1xyXG4gIFx0XHRkZWZhdWx0OlxyXG4gIFx0XHRcdGJyZWFrO1xyXG4gIFx0fVxyXG4gIH0sXHJcbiAgKi9cclxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICB9LFxyXG5cclxufTtcclxuIiwidmFyIFByZWxvYWRlciA9IGZ1bmN0aW9uIChnYW1lKSB7XHJcbiAgZ2FtZSA9IG51bGw7XHJcbiAgdGhpcy5hc3NldCA9IG51bGw7XHJcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQcmVsb2FkZXI7XHJcblxyXG5QcmVsb2FkZXIucHJvdG90eXBlID0ge1xyXG5cclxuICBwcmVsb2FkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmFzc2V0ID0gdGhpcy5hZGQuc3ByaXRlKDY0MCwgMzYwLCAncHJlbG9hZGVyJyk7XHJcbiAgICB0aGlzLmFzc2V0LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcblxyXG4gICAgdGhpcy5sb2FkLm9uTG9hZENvbXBsZXRlLmFkZE9uY2UodGhpcy5vbkxvYWRDb21wbGV0ZSwgdGhpcyk7XHJcbiAgICB0aGlzLmxvYWQuc2V0UHJlbG9hZFNwcml0ZSh0aGlzLmFzc2V0KTtcclxuXHRcclxuXHQvL0xvYWQgU3ByaXRlc2hlZXRzXHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdjb3JlJywgJ2Fzc2V0cy9pbWFnZXMvY29yZVNoZWV0LnBuZycsIDY0LCA2NCk7IFxyXG5cdHRoaXMubG9hZC5zcHJpdGVzaGVldCgndGhydXN0ZXInLCAnYXNzZXRzL2ltYWdlcy90aHJ1c3RlclNoZWV0LnBuZycsIDY0LCA2NCk7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdndW4nLCAnYXNzZXRzL2ltYWdlcy9ndW5TaGVldC5wbmcnLCA2NCwgNjQpO1xyXG5cdHRoaXMubG9hZC5zcHJpdGVzaGVldCgnaGFja2VyJywgJ2Fzc2V0cy9pbWFnZXMvaGFja1NoZWV0LnBuZycsIDY0LCA2NCk7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdzaGllbGRCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9zaGllbGRCdXR0b25TaGVldC5wbmcnLCAyNTYsIDgyKTtcclxuXHR0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ3NvbGFyUGFuZWxCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9zb2xhclBhbmVsQnV0dG9uU2hlZXQucG5nJywgMjU2LCA4Mik7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCd0aHJ1c3RlckJ1dHRvbicsICdhc3NldHMvaW1hZ2VzL3RocnVzdGVyQnV0dG9uU2hlZXQucG5nJywgMjU2LCA4Mik7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdndW5CdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9ndW5CdXR0b25TaGVldC5wbmcnLCAyNTYsIDgyKTtcclxuXHR0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ2hhY2tCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9oYWNrQnV0dG9uU2hlZXQucG5nJywgMjU2LCA4Mik7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdoYWNrYWJsZScsICdhc3NldHMvaW1hZ2VzL2hhY2thYmxlU2hlZXQucG5nJywgNjQsIDY0KTtcclxuXHR0aGlzLmxvYWQuc3ByaXRlc2hlZXQoJ3Nob3BCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9zaG9wQnV0dG9uU2hlZXQucG5nJywgMzIsIDMyKTtcclxuXHRcclxuXHQvL0xvYWQgSW1hZ2VzXHJcblx0dGhpcy5sb2FkLmltYWdlKCdlYXJ0aE5pZ2h0JywgJ2Fzc2V0cy9pbWFnZXMvYmdfZWFydGhOaWdodFNtYWxsLmpwZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnYnVsbGV0JywgJ2Fzc2V0cy9pbWFnZXMvYnVsbGV0LnBuZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnc2hpZWxkJywgJ2Fzc2V0cy9pbWFnZXMvc2hpZWxkLnBuZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnc29sYXJQYW5lbCcsICdhc3NldHMvaW1hZ2VzL3NvbGFyUGFuZWwucG5nJyk7XHJcblx0dGhpcy5sb2FkLmltYWdlKCdhc3Rlcm9pZCcsICdhc3NldHMvaW1hZ2VzL2FzdGVyb2lkLnBuZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnc2hvcFBhbmVsJywgJ2Fzc2V0cy9pbWFnZXMvc2hvcEJhY2tQYW5lbC5wbmcnKTtcclxuXHR0aGlzLmxvYWQuaW1hZ2UoJ3dhcm5pbmcnLCAnYXNzZXRzL2ltYWdlcy93YXJuaW5nLnBuZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnYmUnLCAnYXNzZXRzL2ltYWdlcy9iZS5wbmcnKTtcclxuXHR0aGlzLmxvYWQuaW1hZ2UoJ3NlbGVjdGVkJywgJ2Fzc2V0cy9pbWFnZXMvc2VsZWN0ZWQucG5nJyk7XHJcbiAgICBcclxuXHQvL0xvYWQgRm9udHNcclxuXHR0aGlzLmxvYWQuc2NyaXB0KCd3ZWJmb250JywgJy8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvd2ViZm9udC8xLjQuNy93ZWJmb250LmpzJyk7XHJcblx0XHJcblx0Ly9Mb2FkIEpTT04gRmlsZXNcclxuXHR0aGlzLmxvYWQuYXRsYXNKU09OSGFzaCgnY29ubmVjdGlvbnMnLCAnYXNzZXRzL2ltYWdlcy9jb25uZWN0aW9ucy5wbmcnLCAnYXNzZXRzL2pzb24vY29ubmVjdGlvbnMuanNvbicpO1xyXG5cdHRoaXMubG9hZC5hdGxhc0pTT05IYXNoKCdjb25uZWN0aW9ucycsICdhc3NldHMvaW1hZ2VzL2Nvbm5lY3Rpb25zLnBuZycsICdhc3NldHMvanNvbi9jb25uZWN0aW9ucy5qc29uJyk7XHJcblx0dGhpcy5sb2FkLmF0bGFzSlNPTkhhc2goJ2hlbHBCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9oZWxwQnV0dG9uU2hlZXQucG5nJywgJ2Fzc2V0cy9qc29uL2hlbHBfYnV0dG9uLmpzb24nKTtcclxuXHR0aGlzLmxvYWQuYXRsYXNKU09OSGFzaCgnYXJyb3dCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9hcnJvd0J1dHRvblNoZWV0LnBuZycsICdhc3NldHMvanNvbi9hcnJvd19idXR0b24uanNvbicpO1xyXG5cdHRoaXMubG9hZC5waHlzaWNzKCdtb2R1bGVfcGh5c2ljcycsICdhc3NldHMvanNvbi9tb2R1bGVfcGh5c2ljcy5qc29uJyk7XHJcblx0dGhpcy5sb2FkLnBoeXNpY3MoJ2FzdGVyb2lkUG9seWdvbicsICdhc3NldHMvanNvbi9hc3Rlcm9pZFBvbHlnb24uanNvbicpO1xyXG5cdHRoaXMubG9hZC50ZXh0KCdsZXZlbF9vbmUnLCAnYXNzZXRzL2pzb24vbGV2ZWxfb25lLmpzb24nKTtcclxuXHR0aGlzLmxvYWQudGV4dCgndHV0b3JpYWxfdGV4dCcsICdhc3NldHMvanNvbi90dXRvcmlhbF90ZXh0Lmpzb24nKTtcclxuXHRcclxuXHQvL0xvYWQgU291bmQgRWZmZWN0c1xyXG5cdHRoaXMubG9hZC5hdWRpbygnZG93bkNsaWNrJywgJ2Fzc2V0cy9zb3VuZC9kb3duQ2xpY2sub2dnJyk7XHJcblx0dGhpcy5sb2FkLmF1ZGlvKCdob3ZlckNsaWNrJywgJ2Fzc2V0cy9zb3VuZC9ob3ZlckNsaWNrLm9nZycpO1xyXG5cdHRoaXMubG9hZC5hdWRpbygnZXJyb3InLCAnYXNzZXRzL3NvdW5kL2Vycm9yLm9nZycpO1xyXG5cdHRoaXMubG9hZC5hdWRpbygnY2FzaFJlZ2lzdGVyJywgJ2Fzc2V0cy9zb3VuZC9jYXNoUmVnaXN0ZXIub2dnJyk7XHJcblx0dGhpcy5sb2FkLmF1ZGlvKCdndW4nLCAnYXNzZXRzL3NvdW5kL2d1bi5vZ2cnKTtcclxuXHR0aGlzLmxvYWQuYXVkaW8oJ2hhY2tpbmcnLCAnYXNzZXRzL3NvdW5kL2hhY2tpbmcub2dnJyk7XHJcblx0dGhpcy5sb2FkLmF1ZGlvKCdtb2R1bGVJbXBhY3QnLCAnYXNzZXRzL3NvdW5kL21vZHVsZUltcGFjdC5vZ2cnKTtcclxuXHR0aGlzLmxvYWQuYXVkaW8oJ21vZHVsZUNvbm5lY3QnLCAnYXNzZXRzL3NvdW5kL21vZHVsZUNvbm5lY3Qub2dnJyk7XHJcblx0dGhpcy5sb2FkLmF1ZGlvKCdtb2R1bGVQb3dlcicsICdhc3NldHMvc291bmQvbW9kdWxlUG93ZXIub2dnJyk7XHJcblx0dGhpcy5sb2FkLmF1ZGlvKCd0aHJ1c3Rlckxvb3AnLCAnYXNzZXRzL3NvdW5kL3RocnVzdGVyTG9vcC5vZ2cnKTtcclxuXHRcclxuXHR0aGlzLmxvYWQudGV4dCgndHV0b3JpYWxfdGV4dCcsICdhc3NldHMvanNvbi90dXRvcmlhbF90ZXh0Lmpzb24nKTtcclxuXHQvLyB0aGlzLmxvYWQuc2NyaXB0KCd3ZWJmb250JywgJy8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvd2ViZm9udC8xLjQuNy93ZWJmb250LmpzJyk7XHJcblx0dGhpcy5sb2FkLmF0bGFzSlNPTkhhc2goJ2hlbHBCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9oZWxwQnV0dG9uU2hlZXQucG5nJywgJ2Fzc2V0cy9qc29uL2hlbHBfYnV0dG9uLmpzb24nKTtcclxuXHR0aGlzLmxvYWQuYXRsYXNKU09OSGFzaCgnYXJyb3dCdXR0b24nLCAnYXNzZXRzL2ltYWdlcy9hcnJvd0J1dHRvblNoZWV0LnBuZycsICdhc3NldHMvanNvbi9hcnJvd19idXR0b24uanNvbicpO1xyXG5cdC8vbWVudSBidXR0b25zXHJcblx0dGhpcy5sb2FkLmltYWdlKCdtZW51X3RpdGxlJywgJ2Fzc2V0cy9pbWFnZXMvYXRpY19tZW51X3RpdGxlVC5wbmcnKTtcclxuXHR0aGlzLmxvYWQuaW1hZ2UoJ21lbnVfc2VsZWN0JywgJ2Fzc2V0cy9pbWFnZXMvYXRpY19tZW51X3NlbGVjdFQucG5nJyk7XHJcblx0dGhpcy5sb2FkLmltYWdlKCdtZW51X21hbnVhbCcsICdhc3NldHMvaW1hZ2VzL2F0aWNfbWVudV9tYW51YWxULnBuZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnbWVudV9jcmVkaXRzJywgJ2Fzc2V0cy9pbWFnZXMvYXRpY19tZW51X2NyZWRpdHNULnBuZycpO1xyXG5cclxuXHRcclxuXHRcclxuXHQvL0xvYWQgTXVzaWNcclxuXHR0aGlzLmxvYWQuYXVkaW8oJ21lbnVTb25nJywgJ2Fzc2V0cy9zb3VuZC9ZZXQgQW5vdGhlci5vZ2cnKTtcclxuXHR0aGlzLmxvYWQuYXVkaW8oJ21haW5Tb25nJywgJ2Fzc2V0cy9zb3VuZC9Ub3AgKGRvd24pIE5pZ2h0Lm9nZycpO1xyXG5cclxuICB9LFxyXG5cclxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuYXNzZXQuY3JvcEVuYWJsZWQgPSBmYWxzZTtcclxuICB9LFxyXG5cclxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICghIXRoaXMucmVhZHkpIHtcclxuICAgICAgdmFyIHBhcmFtcyA9IFsnbWVudVNvbmcnLCAwLCAxXTtcclxuICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdNZW51JywgdHJ1ZSwgZmFsc2UsIHBhcmFtcyk7XHJcbiAgICAgIC8vdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KHBsYXllclN0YXRlLmN1cnJlbnRMZXZlbCk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIG9uTG9hZENvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcclxuICB9XHJcbn07XHJcbiIsInZhciBTcGxhc2ggPSBmdW5jdGlvbiAoKSB7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNwbGFzaDtcclxuXHJcblNwbGFzaC5wcm90b3R5cGUgPSB7XHJcbiAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgfVxyXG59OyIsIi8vTk9URTogRE9OJ1QgVVNFIHRoaXMgY29kZSB0byBjcmVhdGUgYSBQcm9ncmVzc0Jhci4gSW5zdGVhZCwgdXNlIHRoZSBVSUJ1aWxkZXIgb2JqZWN0IGFuZCBjYWxsIGJ1aWxkUHJvZ3Jlc3NCYXJcclxuXHJcbnZhciBQcm9ncmVzc0JhciA9IGZ1bmN0aW9uKHNldFR5cGUsIHNldE1heFZhbHVlLCBzZXRHcmFwaGljcywgc2V0UmVuZGVyYWJsZXMpIHtcclxuXHR0aGlzLnR5cGUgPSBzZXRUeXBlOyAvL1R3byB0eXBlcywgXCJncm93aW5nXCIgKHN0YXJ0cyBhdCAwLCB0cmlnZ2VycyBldmVudCB3aGVuIGZ1bGwpIFxyXG5cdFx0XHRcdFx0XHQgLy9hbmQgXCJzaHJpbmtpbmdcIiAoc3RhcnRzIGZ1bGwsIHRyaWdnZXJzIGF0IDApXHJcblx0dGhpcy5iZ0JvcmRlclNpemUgPSAyO1x0XHRcdC8vZGVmYXVsdCBzaXplIG9mIGJhY2tncm91bmQgYm9yZGVyXHJcblx0dGhpcy5iZ0JvcmRlckNvbG9yID0gMHhBQUFBQUE7XHQvL2RlZmF1bHQgY29sb3Igb2YgYmFja2dyb3VuZCBib3JkZXJcclxuXHR0aGlzLmJnQ29sb3IgPSAweDg4ODg4ODtcdFx0Ly9kZWZhdWx0IGNvbG9yIG9mIGJhY2tncm91bmRcclxuXHR0aGlzLnBhZGRpbmdIb3JpeiA9IDU7XHRcdFx0Ly9kZWZhdWx0IHN1bSBvZiBwYWRkaW5nIG9uIGxlZnQgYW5kIHJpZ2h0IHNpZGUgaW5uZXIgdmFsdWUgYmFyXHJcblx0dGhpcy5wYWRkaW5nVmVydCA9IDU7XHRcdFx0Ly9kZWZhdWx0IHN1bSAoaS5lLiBoYWxmIG9uIGVhY2ggc2lkZSkgb2YgdmVydGljYWwgcGFkZGluZyBvZiBpbm5lciB2YWx1ZSBiYXJcclxuXHR0aGlzLnZhbHVlQm9yZGVyU2l6ZSA9IDE7XHRcdC8vZGVmYXVsdCBzaXplIG9mIHZhbHVlIGJvcmRlclxyXG5cdHRoaXMudmFsdWVCb3JkZXJDb2xvciA9IDB4ODg4OEZGOyAvL2RlZmF1bHQgY29sb3Igb2YgdmFsdWUgYm9yZGVyXHJcblx0dGhpcy52YWx1ZUNvbG9yID0gMHgwMDAwOTk7XHRcdC8vZGVmYXVsdCBjb2xvciBvZiBpbm5lciB2YWx1ZSBiYXJcclxuXHR0aGlzLnggPSBudWxsO1xyXG5cdHRoaXMueSA9IG51bGw7XHJcblx0dGhpcy53aWR0aCA9IG51bGw7XHJcblx0dGhpcy5oZWlnaHQgPSBudWxsO1xyXG5cdHRoaXMubWF4VmFsdWUgPSBzZXRNYXhWYWx1ZTtcclxuXHR0aGlzLmdyYXBoaWNzID0gc2V0R3JhcGhpY3M7IC8vc3RvcmUgZ3JhcGhpY3MgY2xhc3MgKHVzZWQgdG8gZHJhdyBiYXIpXHJcblx0dGhpcy5yZW5kZXJhYmxlcyA9IHNldFJlbmRlcmFibGVzO1xyXG5cdFxyXG5cdHRoaXMub25FdmVudCA9IGZ1bmN0aW9uKCkge307IC8vb3ZlcndyaXRlIHRoaXMgZnVuY3Rpb24gdG8gbWFrZSB3aGF0ZXZlciB5b3Ugd2FudCBoYXBwZW4gd2hlbiBwcm9ncmVzc0JhciByZWFjaGVzIGxpbWl0XHJcblx0XHJcblx0Ly9zd2l0Y2godGhpcy50eXBlKSB7XHJcblx0Ly9jYXNlICdncm93aW5nJyA6IFxyXG5cdGlmKHNldFR5cGUgPT09ICdncm93aW5nJykge1xyXG5cdFx0dGhpcy52YWx1ZSA9IDA7XHJcblx0XHQvL3RyeVRyaWdnZXIgaXMgY2FsbGVkIGF1dG9tYXRpY2FsbHkgd2hlbiB5b3UgYWRkL3N1YnRyYWN0IHZhbHVlLCBhbmQgd2lsbCB0cmlnZ2VyIHRoZSBvbkV2ZW50KCkgZnVuY3Rpb25cclxuXHRcdHRoaXMudHJ5VHJpZ2dlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZih0aGlzLnZhbHVlID49IHRoaXMubWF4VmFsdWUpIHtcclxuXHRcdFx0XHR0aGlzLm9uRXZlbnQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdC8vYnJlYWs7XHJcblx0fVxyXG5cdGVsc2UgaWYoc2V0VHlwZSA9PT0gJ3Nocmlua2luZycpIHtcclxuXHQvL2Nhc2UgJ3Nocmlua2luZycgOlxyXG5cdFx0dGhpcy52YWx1ZSA9IHRoaXMubWF4VmFsdWU7XHJcblx0XHR0aGlzLnRyeVRyaWdnZXIgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYodGhpcy52YWx1ZSA8PSAwKSB7XHJcblx0XHRcdFx0dGhpcy5vbkV2ZW50KCk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG59O1xyXG5cclxuUHJvZ3Jlc3NCYXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUHJvZ3Jlc3NCYXI7XHJcblxyXG5Qcm9ncmVzc0Jhci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdHRoaXMuZ3JhcGhpY3MuY2xlYXIoKTtcclxuXHR0aGlzLnJlbmRlcmFibGVzLnVuc3Vic2NyaWJlKHRoaXMpO1xyXG59O1xyXG5cclxuLy9UbyBzdWJ0cmFjdCB2YWx1ZSwganVzdCB1c2UgbmVnYXRpdmUgbnVtYmVycyBhcyBhcmd1bWVudCBpLmUuIGZvby5hZGRWYWx1ZSgtNSk7XHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS5hZGRWYWx1ZSA9IGZ1bmN0aW9uIChhZGRUaGlzKSB7XHJcblx0dGhpcy52YWx1ZSArPSBhZGRUaGlzO1xyXG5cdGlmKHRoaXMudmFsdWUgPiB0aGlzLm1heFZhbHVlKSB7XHJcblx0XHR0aGlzLnZhbHVlID0gdGhpcy5tYXhWYWx1ZTtcclxuXHR9XHJcblx0aWYodGhpcy52YWx1ZSA8IDApIHtcclxuXHRcdHRoaXMudmFsdWUgPSAwO1xyXG5cdH1cclxuXHR0aGlzLnRyeVRyaWdnZXIoKTtcclxufTtcclxuXHJcbi8vU2V0cyB0aGUgbG9jYXRpb24gd2hlcmUgcHJvZ3Jlc3MgYmFyIGlzIHJlbmRlcmVkXHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHNldFgsIHNldFkpIHtcclxuXHR0aGlzLnggPSBzZXRYO1xyXG5cdHRoaXMueSA9IHNldFk7XHJcbn07XHJcblxyXG4vL1NldHMgdGhlIHNpemUgb2YgdGhlIHByb2dyZXNzIGJhclxyXG5Qcm9ncmVzc0Jhci5wcm90b3R5cGUuc2V0U2l6ZSA9IGZ1bmN0aW9uKHNldFdpZHRoLCBzZXRIZWlnaHQpIHtcclxuXHR0aGlzLndpZHRoID0gc2V0V2lkdGg7XHJcblx0dGhpcy5oZWlnaHQgPSBzZXRIZWlnaHQ7XHJcbn07XHJcblxyXG5Qcm9ncmVzc0Jhci5wcm90b3R5cGUuc2V0U3R5bGUgPSBmdW5jdGlvbihiZ0JvcmRlclNpemUsIGJnQm9yZGVyQ29sb3IsIGJnQ29sb3IsIHBhZGRpbmdIb3JpeiwgcGFkZGluZ1ZlcnQsIHZhbHVlQm9yZGVyU2l6ZSwgdmFsdWVCb3JkZXJDb2xvciwgdmFsdWVDb2xvcikge1xyXG5cdHRoaXMuYmdCb3JkZXJTaXplID0gYmdCb3JkZXJTaXplO1xyXG5cdHRoaXMuYmdCb3JkZXJDb2xvciA9IGJnQm9yZGVyQ29sb3I7XHJcblx0dGhpcy5iZ0NvbG9yID0gYmdDb2xvcjtcclxuXHR0aGlzLnBhZGRpbmdIb3JpeiA9IHBhZGRpbmdIb3JpejtcclxuXHR0aGlzLnBhZGRpbmdWZXJ0ID0gcGFkZGluZ1ZlcnQ7XHJcblx0dGhpcy52YWx1ZUJvcmRlclNpemUgPSB2YWx1ZUJvcmRlclNpemU7XHJcblx0dGhpcy52YWx1ZUJvcmRlckNvbG9yID0gdmFsdWVCb3JkZXJDb2xvcjtcclxuXHR0aGlzLnZhbHVlQ29sb3IgPSB2YWx1ZUNvbG9yO1xyXG59O1xyXG5cclxuLy91cGRhdGUgZm9yIHByb2dyZXNzIGJhciwgY2FsbGVkIGp1c3QgYmVmb3JlIGRyYXdpbmcgcHJvZ3Jlc3MgYmFyXHJcbi8vT3ZlcndyaXRlIHRoaXMgZnVuY3Rpb24gaWYgZGVzaXJlZFxyXG5Qcm9ncmVzc0Jhci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHJcbi8vUmVuZGVycyBwcm9ncmVzc0JhclxyXG5Qcm9ncmVzc0Jhci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XHJcblx0dGhpcy51cGRhdGUoKTtcclxuXHR0aGlzLmdyYXBoaWNzLmNsZWFyKCk7XHJcblx0Ly9EcmF3IGJhY2tncm91bmQgb2YgYmFyXHJcblx0dGhpcy5ncmFwaGljcy5saW5lU3R5bGUodGhpcy5iZ0JvcmRlclNpemUsIHRoaXMuYmdCb3JkZXJDb2xvciwgMSk7IC8vc2V0cyBib3JkZXIgY29sb3IgYW5kIHNpemVcclxuXHR0aGlzLmdyYXBoaWNzLmJlZ2luRmlsbCh0aGlzLmJnQ29sb3IpOyAvL3NldHMgY29sb3Igb2YgYmFja2dyb3VuZCBmaWxsXHJcblx0dGhpcy5ncmFwaGljcy5kcmF3UmVjdCh0aGlzLngtdGhpcy53aWR0aC8yLCB0aGlzLnktdGhpcy5oZWlnaHQvMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG5cdHRoaXMuZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG5cdC8vRHJhdyB2YWx1ZSBvZiBiYXJcclxuXHR2YXIgcGVyY2VudGFnZSA9IHRoaXMudmFsdWUgLyB0aGlzLm1heFZhbHVlO1xyXG5cdHZhciBiYXJXaWR0aCA9IHRoaXMud2lkdGggLSB0aGlzLnBhZGRpbmdIb3JpejtcclxuXHR2YXIgYmFySGVpZ2h0ID0gdGhpcy5oZWlnaHQgLSB0aGlzLnBhZGRpbmdWZXJ0O1xyXG5cdHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKHRoaXMudmFsdWVCb3JkZXJTaXplLCB0aGlzLnZhbHVlQm9yZGVyQ29sb3IsIDEpO1xyXG5cdHRoaXMuZ3JhcGhpY3MuYmVnaW5GaWxsKHRoaXMudmFsdWVDb2xvcik7XHJcblx0dGhpcy5ncmFwaGljcy5kcmF3UmVjdCh0aGlzLngtKGJhcldpZHRoLzIpLCB0aGlzLnktKGJhckhlaWdodC8yKSwgYmFyV2lkdGgqcGVyY2VudGFnZSwgYmFySGVpZ2h0KTtcclxuXHR0aGlzLmdyYXBoaWNzLmVuZEZpbGwoKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUHJvZ3Jlc3NCYXI7IiwidmFyIFByb2dyZXNzQmFyID0gcmVxdWlyZSgnLi9Qcm9ncmVzc0JhcicpO1xyXG52YXIgQmFubmVyID0gcmVxdWlyZSgnLi9iYW5uZXInKTtcclxuXHJcbnZhciBVSUJ1aWxkZXIgPSBmdW5jdGlvbihzZXRHYW1lU3RhdGUsIHNldFJlbmRlcmFibGVzKSB7XHJcblx0Ly9FbnN1cmUgdGhhdCBjYW5ub3QgY3JlYXRlIG11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGlzIGNsYXNzXHJcblx0aWYoVUlCdWlsZGVyLnByb3RvdHlwZS5leGlzdHMpIHtcclxuXHRcdHJldHVybiBVSUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlO1xyXG5cdH1cclxuXHRcclxuXHR0aGlzLmdhbWVTdGF0ZSA9IHNldEdhbWVTdGF0ZTtcclxuXHR0aGlzLnJlbmRlcmFibGVzID0gc2V0UmVuZGVyYWJsZXM7XHJcblx0Ly9DcmVhdGUgYW5kIHN0b3JlIGEgZ3JhcGhpY3Mgb2JqZWN0ICh1c2VkIGZvciBzdHVmZiBsaWtlIGRyYXdpbmcgcmVjdGFuZ2xlcylcclxuXHRVSUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0cyA9IHRydWU7XHJcblx0VUlCdWlsZGVyLnByb3RvdHlwZS5leGlzdGluZ1JlZmVyZW5jZSA9IHRoaXM7XHJcbn07XHJcblxyXG5VSUJ1aWxkZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVUlCdWlsZGVyO1xyXG4vL1RoZXNlIHZhcidzIGhlbHAgY3JlYXRlIHRoZSBzaW5nbGV0b24gZnVuY3Rpb25hbGl0eVxyXG5VSUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0cyA9IGZhbHNlO1xyXG5VSUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlID0gbnVsbDtcclxuXHJcbi8vVXNlIHRoaXMgZnVuY3Rpb24gdG8gY3JlYXRlIGEgcHJvZ3Jlc3MgYmFyXHJcbi8vVXNhZ2U6IHR5cGU6IGNhbiBiZSBcImdyb3dpbmdcIiBvciBcInNocmlua2luZ1wiLCB0aGlzIHdpbGwgZWZmZWN0IGlmIGJhciBzdGFydHMgYXQgMCBhbmQgZ29lcyB1cCBvciB2aXMgdmVyc2FcclxuLy9cdFx0IG1heFZhbHVlOiBzZXRzIHRoZSBtYXggdmFsdWUgb2YgdGhlIHByb2dyZXNzIGJhciwgaS5lLiB1c2luZyAxMDAgY3JlYXRlcyBhIGJhciBmcm9tIDAgdG8gMTAwXHJcbi8vXHRcdCB4LHk6IHNldHMgbG9jYXRpb25cclxuLy9cdFx0IERPTidUIEZPUkdFVCB0byBvdmVyd3JpdGUgdGhlIG9uRXZlbnQoKSBmdW5jdGlvbiBmb3IgdGhlIHByb2dyZXNzIGJhciBhZnRlciBjcmVhdGluZyBpdFxyXG4vL1x0XHRcdC1vbkV2ZW50KCkgaXMgYXV0b21hdGljYWxseSBjYWxsZWQgd2hlbiBiYXIgZmlsbHMvc2hyaW5rcyBwYXN0IGxpbWl0IChkZXBlbmRpbmcgb24gYmFyIHR5cGUpXHJcblVJQnVpbGRlci5wcm90b3R5cGUuYnVpbGRQcm9ncmVzc0JhciA9IGZ1bmN0aW9uKHR5cGUsIHgsIHksIHdpZHRoLCBoZWlnaHQsIG1heFZhbHVlKSB7XHJcblx0Ly9jcmVhdGUgYW5kIGZvcm1hdCBuZXcgcHJvZyBiYXJcclxuXHR2YXIgZ3JhcGhpY3MgPSB0aGlzLmdhbWVTdGF0ZS5nYW1lLmFkZC5ncmFwaGljcygwLDApO1xyXG5cdHZhciBuZXdQcm9nQmFyID0gbmV3IFByb2dyZXNzQmFyKHR5cGUsIG1heFZhbHVlLCBncmFwaGljcywgdGhpcy5yZW5kZXJhYmxlcyk7XHJcblx0bmV3UHJvZ0Jhci5zZXRMb2NhdGlvbih4LHkpO1xyXG5cdG5ld1Byb2dCYXIuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuXHQvL3N1YnNjcmliZSB0byAncmVuZGVyYWJsZXMnIHNvIHRoYXQgcmVuZGVyKCkgaXMgY2FsbGVkIGF1dG9tYXRpY2FsbHlcclxuXHR0aGlzLnJlbmRlcmFibGVzLnN1YnNjcmliZShuZXdQcm9nQmFyKTtcclxuXHRyZXR1cm4gbmV3UHJvZ0JhcjtcclxufTtcclxuXHJcblVJQnVpbGRlci5wcm90b3R5cGUuYnVpbGRCYW5uZXIgPSBmdW5jdGlvbih4UmF0aW8sIHlSYXRpbywgdGV4dHMpIHtcclxuICAgdmFyIGdyYXBoaWNzID0gdGhpcy5nYW1lU3RhdGUuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XHJcbiAgIHZhciBuZXdCYW5uZXIgPSBuZXcgQmFubmVyKHRoaXMuZ2FtZVN0YXRlLCB4UmF0aW8sIHlSYXRpbywgdGV4dHMsIGdyYXBoaWNzLCB0aGlzLnJlbmRlcmFibGVzKTtcclxuICAgdGhpcy5yZW5kZXJhYmxlcy5zdWJzY3JpYmUobmV3QmFubmVyKTtcclxuICAgcmV0dXJuIG5ld0Jhbm5lcjtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVUlCdWlsZGVyOyIsInZhciBVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XHJcblxyXG4vL05PVEU6IERPTidUIFVTRSB0aGlzIGNvZGUgdG8gY3JlYXRlIGEgQmFubmVyLiBJbnN0ZWFkLCB1c2UgdGhlIFVJQnVpbGRlciBvYmplY3QgYW5kIGNhbGwgYnVpbGRCYW5uZXJcclxudmFyIEJhbm5lciA9IGZ1bmN0aW9uKHN0YXRlLCB4UmF0aW8sIHlSYXRpbywgdGV4dEpTT04sIGdyYXBoaWNzLCByZW5kZXJhYmxlcykge1xyXG4gICB0aGlzLmJnQm9yZGVyU2l6ZSA9IDY7XHRcdFx0Ly9kZWZhdWx0IHNpemUgb2YgYmFja2dyb3VuZCBib3JkZXJcclxuXHR0aGlzLmJnQm9yZGVyQ29sb3IgPSAweGZmZmZmZjtcdC8vZGVmYXVsdCBjb2xvciBvZiBiYWNrZ3JvdW5kIGJvcmRlclxyXG5cdHRoaXMuYmdDb2xvciA9IDB4NGE0YTRhO1x0XHQvL2RlZmF1bHQgY29sb3Igb2YgYmFja2dyb3VuZFxyXG4gICB0aGlzLnNoYWRvd09mZnNldFggPSAzO1xyXG4gICB0aGlzLnNoYWRvd09mZnNldFkgPSAzO1xyXG4gICB0aGlzLnNoYWRvd0NvbG9yID0gJ3JnYmEoMCwwLDAsMC45KSc7XHJcbiAgIHRoaXMuc2hhZG93Qmx1ciA9IDU7XHJcbiAgIHRoaXMubm9ybWFsVGV4dCA9ICcjZmZmZmZmJztcclxuICAgdGhpcy5oaWdobGlnaHRUZXh0ID0gJyMwMGZmMDAnO1xyXG4gICB0aGlzLnRleHRXcmFwUGFkZGluZyA9IDEwO1xyXG4gICB0aGlzLm9mZlNjcmVlblBhZGRpbmcgPSAtMjAwO1xyXG4gICB0aGlzLnRleHRKU09OID0gdGV4dEpTT047XHJcbiAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgdGhpcy5nYW1lID0gc3RhdGUuZ2FtZTtcclxuICAgdGhpcy5jYW0gPSB0aGlzLmdhbWUuY2FtZXJhO1xyXG4gICB0aGlzLnNtID0gdGhpcy5zdGF0ZS5zb3VuZE1hbmFnZXI7XHJcbiAgIHRoaXMueFJhdGlvID0geFJhdGlvO1xyXG4gICB0aGlzLnlSYXRpbyA9IHlSYXRpbztcclxuICAgdGhpcy5ncmFwaGljcyA9IGdyYXBoaWNzO1xyXG4gICB0aGlzLnJlbmRlcmFibGVzID0gcmVuZGVyYWJsZXM7XHJcbiAgIHRoaXMud2lkdGggPSA0MDA7XHJcbiAgIHRoaXMuaGVpZ2h0ID0gMjAwO1xyXG4gICB0aGlzLmluZGV4ID0gMDtcclxuICAgdGhpcy54ID0gMDtcclxuICAgdGhpcy5oaWRlQnVmZmVyID0gLTUwO1xyXG4gICB0aGlzLmhpZGVIZWlnaHQgPSAtdGhpcy5oZWlnaHQgLSB0aGlzLmhpZGVCdWZmZXI7XHJcbiAgIHRoaXMueSA9IHRoaXMuY2FtLnkgLSB0aGlzLmNhbS5oZWlnaHQgLyAyIC0gdGhpcy5oaWRlSGVpZ2h0O1xyXG4gICB0aGlzLnNsaWRlWSA9IHRoaXMuaGlkZUhlaWdodDtcclxuICAgdGhpcy5nb2FsWSA9IHRoaXMueTtcclxuICAgdGhpcy5zbGlkZVJhdGUgPSAwLjI7XHJcbiAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAvLyBhZGQgYnV0dG9uc1xyXG4gICB0aGlzLnJpZ2h0QnV0dG9uID0gdGhpcy5nYW1lLmFkZC5idXR0b24oMCwgMCwgJ2Fycm93QnV0dG9uJywgdGhpcy5uZXh0SW5kZXgsIHRoaXMsIDEsIDAsIDIpO1xyXG5cdHRoaXMucmlnaHRCdXR0b24ub25JbnB1dE92ZXIuYWRkKHRoaXMuc20ucGxheUhvdmVyQ2xpY2ssIHRoaXMuc20pO1xyXG5cdHRoaXMucmlnaHRCdXR0b24ub25JbnB1dERvd24uYWRkKHRoaXMuc20ucGxheURvd25DbGljaywgdGhpcy5zbSk7XHJcbiAgIHRoaXMubGVmdEJ1dHRvbiA9IHRoaXMuZ2FtZS5hZGQuYnV0dG9uKDAsIDAsICdhcnJvd0J1dHRvbicsIHRoaXMucHJldkluZGV4LCB0aGlzLCAxLCAwLCAyKTtcclxuXHR0aGlzLmxlZnRCdXR0b24ub25JbnB1dE92ZXIuYWRkKHRoaXMuc20ucGxheUhvdmVyQ2xpY2ssIHRoaXMuc20pO1xyXG5cdHRoaXMubGVmdEJ1dHRvbi5vbklucHV0RG93bi5hZGQodGhpcy5zbS5wbGF5RG93bkNsaWNrLCB0aGlzLnNtKTtcclxuICAgdGhpcy5sZWZ0QnV0dG9uLnNjYWxlLnggPSAtMTtcclxuICAgdGhpcy5ncm91cCA9IG5ldyBQaGFzZXIuR3JvdXAodGhpcy5nYW1lKTtcclxuICAgdGhpcy5ncm91cC5hZGQodGhpcy5ncmFwaGljcyk7XHJcbiAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMucmlnaHRCdXR0b24pO1xyXG4gICB0aGlzLmdyb3VwLmFkZCh0aGlzLmxlZnRCdXR0b24pO1xyXG4gICB0aGlzLmFkZFRleHRzKCk7XHJcbiAgIHRoaXMuZ2FtZS53b3JsZC5icmluZ1RvVG9wKHRoaXMuZ3JvdXApO1xyXG4gICB0aGlzLmRlYnVnID0gZmFsc2U7XHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQmFubmVyO1xyXG5cclxuQmFubmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblx0dGhpcy5ncmFwaGljcy5jbGVhcigpO1xyXG5cdHRoaXMucmVuZGVyYWJsZXMudW5zdWJzY3JpYmUodGhpcyk7XHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAvLyBUT0RPOiBhZGQgbGF5ZXIgZ3JvdXBzIHRvIG90aGVyIHRoaW5nc1xyXG4gICB0aGlzLmdhbWUud29ybGQuYnJpbmdUb1RvcCh0aGlzLmdyb3VwKTtcclxuICAgLy8gbXkgcG9zXHJcbiAgIHRoaXMueCA9IHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCAqIHRoaXMueFJhdGlvO1xyXG4gICBpZiAodGhpcy52aXNpYmxlKSB7XHJcbiAgICAgIHRoaXMuZ29hbFkgPSB0aGlzLmNhbS5oZWlnaHQgLyAyO1xyXG4gICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmdvYWxZID0gdGhpcy5oaWRlSGVpZ2h0O1xyXG4gICB9XHJcbiAgIHRoaXMuc2xpZGVZID0gVXRpbHMubGVycCh0aGlzLnNsaWRlWSwgdGhpcy5nb2FsWSwgdGhpcy5zbGlkZVJhdGUpO1xyXG4gICBpZiAodGhpcy5kZWJ1ZykgeyBjb25zb2xlLmxvZygndGhpcy5jYW0ueTonLCB0aGlzLmNhbS55LCAndGhpcy5zbGlkZVk6JywgdGhpcy5zbGlkZVksICd0aGlzLnk6JywgdGhpcy55KTsgfVxyXG4gICB0aGlzLnkgPSB0aGlzLmNhbS55ICsgdGhpcy5zbGlkZVk7XHJcbiAgIC8vIHRleHQgcG9zXHJcbiAgIHZhciBjdXJUZXh0ID0gdGhpcy50ZXh0T2Jqc1t0aGlzLmluZGV4XTtcclxuICAgY3VyVGV4dC54ID0gdGhpcy54O1xyXG4gICBjdXJUZXh0LnkgPSB0aGlzLnk7XHJcbiAgIC8vIGJ1dHRvbiBwb3NcclxuICAgdGhpcy5yaWdodEJ1dHRvbi54ID0gdGhpcy54ICsgdGhpcy53aWR0aCAvIDIgKyB0aGlzLnJpZ2h0QnV0dG9uLndpZHRoIC8gMjtcclxuICAgdGhpcy5yaWdodEJ1dHRvbi55ID0gdGhpcy55IC0gdGhpcy5yaWdodEJ1dHRvbi5oZWlnaHQgLyAyO1xyXG4gICB0aGlzLmxlZnRCdXR0b24ueCA9IHRoaXMueCAtIHRoaXMud2lkdGggLyAyICsgdGhpcy5sZWZ0QnV0dG9uLndpZHRoIC8gMjtcclxuICAgdGhpcy5sZWZ0QnV0dG9uLnkgPSB0aGlzLnkgLSB0aGlzLmxlZnRCdXR0b24uaGVpZ2h0IC8gMjtcclxufTtcclxuXHJcbkJhbm5lci5wcm90b3R5cGUuYWRkVGV4dHMgPSBmdW5jdGlvbigpIHtcclxuICAgaWYgKCF0aGlzLnRleHRPYnMpIHtcclxuICAgICAgdGhpcy50ZXh0T2JqcyA9IFtdO1xyXG4gICB9XHJcbiAgIHZhciB0ZXh0RGVmcyA9IEpTT04ucGFyc2UodGhpcy5nYW1lLmNhY2hlLmdldFRleHQodGhpcy50ZXh0SlNPTikpO1xyXG4gICB2YXIgdGV4dEFycmF5ID0gdGV4dERlZnNbJ3RleHQnXTtcclxuICAgdmFyIHRleHRDb2xvcnMgPSB0ZXh0RGVmc1snY29sb3JzJ107XHJcbiAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dEFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciB0ZXh0ID0gdGV4dEFycmF5W2ldO1xyXG4gICAgICB2YXIgbmV3VGV4dCA9IHRoaXMuZ2FtZS5hZGQudGV4dCh0aGlzLm9mZlNjcmVlblBhZGRpbmcsIHRoaXMub2ZmU2NyZWVuUGFkZGluZywgdGV4dCk7XHJcbiAgICAgIG5ld1RleHQuZm9udCA9ICdSb2JvdG8nO1xyXG4gICAgICBuZXdUZXh0LmZvbnRTaXplID0gMjQ7XHJcbiAgICAgIG5ld1RleHQuYWxpZ24gPSAnY2VudGVyJztcclxuICAgICAgbmV3VGV4dC5maWxsID0gdGhpcy5ub3JtYWxUZXh0O1xyXG4gICAgICBuZXdUZXh0LndvcmRXcmFwID0gdHJ1ZTtcclxuICAgICAgbmV3VGV4dC53b3JkV3JhcFdpZHRoID0gdGhpcy53aWR0aCAtIHRoaXMudGV4dFdyYXBQYWRkaW5nO1xyXG4gICAgICBuZXdUZXh0LmFuY2hvci5zZXQoMC41KTtcclxuICAgICAgbmV3VGV4dC5zZXRTaGFkb3codGhpcy5zaGFkb3dPZmZzZXRYLCB0aGlzLnNoYWRvd09mZnNldFksIHRoaXMuc2hhZG93Q29sb3IsIHRoaXMuc2hhZG93Qmx1cik7XHJcbiAgICAgIHZhciBuZXdDb2xvcnMgPSB0ZXh0Q29sb3JzW2ldO1xyXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5ld0NvbG9ycy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICBuZXdUZXh0LmFkZENvbG9yKHRoaXMuaGlnaGxpZ2h0VGV4dCwgbmV3Q29sb3JzW2pdKTtcclxuICAgICAgICAgaisrO1xyXG4gICAgICAgICBuZXdUZXh0LmFkZENvbG9yKHRoaXMubm9ybWFsVGV4dCwgbmV3Q29sb3JzW2pdKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnRleHRPYmpzLnB1c2gobmV3VGV4dCk7XHJcbiAgICAgIHRoaXMuZ3JvdXAuYWRkKG5ld1RleHQpO1xyXG4gICB9XHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xyXG5cdHRoaXMudXBkYXRlKCk7XHJcblx0dGhpcy5ncmFwaGljcy5jbGVhcigpO1xyXG5cdC8vRHJhdyBiYWNrZ3JvdW5kXHJcblx0dGhpcy5ncmFwaGljcy5saW5lU3R5bGUodGhpcy5iZ0JvcmRlclNpemUsIHRoaXMuYmdCb3JkZXJDb2xvciwgMSk7IC8vc2V0cyBib3JkZXIgY29sb3IgYW5kIHNpemVcclxuXHR0aGlzLmdyYXBoaWNzLmJlZ2luRmlsbCh0aGlzLmJnQ29sb3IpOyAvL3NldHMgY29sb3Igb2YgYmFja2dyb3VuZCBmaWxsXHJcblx0dGhpcy5ncmFwaGljcy5kcmF3UmVjdCh0aGlzLngtdGhpcy53aWR0aC8yLCB0aGlzLnktdGhpcy5oZWlnaHQvMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG5cdHRoaXMuZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG59O1xyXG5cclxuQmFubmVyLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24oKSB7XHJcbiAgIC8vIHRoaXMuZ29hbFkgPSB0aGlzLmNhbS55ICsgdGhpcy5jYW0uaGVpZ2h0ICogdGhpcy55UmF0aW87XHJcbiAgIHRoaXMudmlzaWJsZSA9IHRydWU7XHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbigpIHtcclxuICAgLy8gdGhpcy5nb2FsWSA9IHRoaXMuaGlkZUhlaWdodDtcclxuICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICh0aGlzLnZpc2libGUpIHtcclxuICAgICB0aGlzLmhpZGUoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgIHRoaXMuc2hvdygpO1xyXG4gIH0gIFxyXG59O1xyXG5cclxuQmFubmVyLnByb3RvdHlwZS5oaWRlQ3VyVGV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMudGV4dE9ianNbdGhpcy5pbmRleF0ueCA9IHRoaXMudGV4dE9ianNbdGhpcy5pbmRleF0ueSA9IDA7IFxyXG59O1xyXG5cclxuQmFubmVyLnByb3RvdHlwZS5uZXh0SW5kZXggPSBmdW5jdGlvbigpIHtcclxuICAgdGhpcy5oaWRlQ3VyVGV4dCgpO1xyXG4gICB0aGlzLmluZGV4Kys7XHJcbiAgIGlmICh0aGlzLmluZGV4ID49IHRoaXMudGV4dE9ianMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMuaW5kZXggPSAwO1xyXG4gICB9XHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLnByZXZJbmRleCA9IGZ1bmN0aW9uKCkge1xyXG4gICB0aGlzLmhpZGVDdXJUZXh0KCk7XHJcbiAgIHRoaXMuaW5kZXgtLTtcclxuICAgaWYgKHRoaXMuaW5kZXggPCAwKSB7XHJcbiAgICAgIHRoaXMuaW5kZXggPSB0aGlzLnRleHRPYmpzLmxlbmd0aCAtIDE7XHJcbiAgIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmFubmVyO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsInZhciBTaG9wID0gZnVuY3Rpb24oc3RhdGUpIHtcclxuICAgLy8gaW5pdGlhbCB2YXJpYWJsZXNcclxuXHR0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgIHRoaXMuZ2FtZSA9IHRoaXMuc3RhdGUuZ2FtZTtcclxuICAgdGhpcy5jYW0gPSB0aGlzLmdhbWUuY2FtZXJhO1xyXG4gICB0aGlzLnNtID0gdGhpcy5zdGF0ZS5zb3VuZE1hbmFnZXI7XHJcbiAgIHRoaXMubW91c2UgPSB0aGlzLnN0YXRlLm1vdXNlO1xyXG4gICB0aGlzLm1vbmV5ID0gNTAwO1xyXG4gICB0aGlzLnNob3BTcGVlZCA9IDE7XHJcbiAgIHRoaXMuZGlmZiA9IDA7XHJcbiAgIHRoaXMubmV3TW9kdWxlU3BlZWQgPSAxNTAwO1xyXG4gICAvLyBjcmVhdGUgYnV0dG9uXHJcbiAgIHRoaXMuc2hvcEJ1dHRvbiA9IHRoaXMuZ2FtZS5hZGQuYnV0dG9uKHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMuZ2FtZS5jYW1lcmEud2lkdGggLSA0OCwgMTYsICdzaG9wQnV0dG9uJywgdGhpcy51c2VTaG9wQnV0dG9uLCB0aGlzLCAxLCAwLCAyKTtcclxuXHR0aGlzLnNob3BCdXR0b24ub25JbnB1dE92ZXIuYWRkKHRoaXMuc20ucGxheUhvdmVyQ2xpY2ssIHRoaXMuc20pO1xyXG5cdHRoaXMuc2hvcEJ1dHRvbi5vbklucHV0RG93bi5hZGQodGhpcy5zbS5wbGF5RG93bkNsaWNrLCB0aGlzLnNtKTtcclxuICAgLy8gY3JlYXRlIHRleHRcclxuICAgdGhpcy5tb25leVRleHQgPSB0aGlzLmdhbWUuYWRkLnRleHQodGhpcy5zaG9wQnV0dG9uLnggLSA4LCB0aGlzLnNob3BCdXR0b24ueSArIDQ4LCB0aGlzLm1vbmV5KTtcclxuICAgdGhpcy5tb25leVRleHQuZm9udCA9ICdWVDMyMyc7XHJcbiAgIHRoaXMubW9uZXlUZXh0LmZvbnRTaXplID0gMjQ7XHJcbiAgIHRoaXMubW9uZXlUZXh0LmZpbGwgPSAnI2ZmZmZmZic7XHJcbiAgIHRoaXMubW9uZXlUZXh0LnRleHQgPSB0aGlzLm1vbmV5O1xyXG5cdHRoaXMuYmUgPSB0aGlzLmdhbWUuYWRkLmltYWdlKHRoaXMubW9uZXlUZXh0LnggKyB0aGlzLm1vbmV5VGV4dC53aWR0aCArIDgsIHRoaXMubW9uZXlUZXh0LnksICdiZScpO1xyXG4gICAvLyBjcmVhdGUgc291bmRzXHJcbiAgIHRoaXMuY2FzaFJlZ2lzdGVyID0gdGhpcy5nYW1lLmFkZC5hdWRpbygnY2FzaFJlZ2lzdGVyJyk7XHJcbiAgIHRoaXMuY2FzaFJlZ2lzdGVyLmFsbG93TXVsdGlwbGUgPSB0cnVlO1xyXG4gICB0aGlzLmVycm9yID0gdGhpcy5nYW1lLmFkZC5hdWRpbygnZXJyb3InKTtcclxuICAgLy8gYWRkIGNvbnRyb2xzXHJcbiAgIHRoaXMuYWRkTW9uZXlLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5LKTtcclxuXHR0aGlzLmFkZE1vbmV5S2V5Lm9uRG93bi5hZGQodGhpcy5kZWJ1Z0FkZE1vbmV5LCB0aGlzKTtcclxuICAgLy8gY3JlYXRlIGJ1dHRvbnNcclxuXHR0aGlzLnNob3BQYW5lbCA9IHRoaXMuZ2FtZS5hZGQuaW1hZ2UodGhpcy5jYW0ueCArIHRoaXMuY2FtLndpZHRoICsgMjU2ICsgMTYsIHRoaXMuY2FtLnkgKyAxNiwgJ3Nob3BQYW5lbCcpO1xyXG5cdHRoaXMuc2hvcFBhbmVsLmtpbGwoKTtcclxuXHR0aGlzLnNoaWVsZEJ1dHRvbiA9IHRoaXMuZ2FtZS5hZGQuYnV0dG9uKHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCAtIHRoaXMuZGlmZiwgdGhpcy5jYW0ueSArIDUyICsgKDg4ICogMSksICdzaGllbGRCdXR0b24nLCB0aGlzLnB1cmNoYXNlTW9kdWxlLCB7c3RhdGU6IHRoaXMsIGtleTogJ3NoaWVsZCd9LCAxLCAwLCAyKTtcclxuXHR0aGlzLmZvcm1hdEJ1dHRvbih0aGlzLnNoaWVsZEJ1dHRvbik7XHJcblx0dGhpcy5zb2xhclBhbmVsQnV0dG9uID0gdGhpcy5nYW1lLmFkZC5idXR0b24odGhpcy5jYW0ueCArIHRoaXMuY2FtLndpZHRoIC0gdGhpcy5kaWZmLCB0aGlzLmNhbS55ICsgNTIgKyAoODggKiAyKSwgJ3NvbGFyUGFuZWxCdXR0b24nLCB0aGlzLnB1cmNoYXNlTW9kdWxlLCB7c3RhdGU6IHRoaXMsIGtleTogJ3NvbGFyUGFuZWwnfSwgMSwgMCwgMik7XHJcblx0dGhpcy5mb3JtYXRCdXR0b24odGhpcy5zb2xhclBhbmVsQnV0dG9uKTtcclxuXHR0aGlzLnRocnVzdGVyQnV0dG9uID0gdGhpcy5nYW1lLmFkZC5idXR0b24odGhpcy5jYW0ueCArIHRoaXMuY2FtLndpZHRoIC0gdGhpcy5kaWZmLCB0aGlzLmNhbS55ICsgNTIgKyAoODggKiAzKSwgJ3RocnVzdGVyQnV0dG9uJywgdGhpcy5wdXJjaGFzZU1vZHVsZSwge3N0YXRlOiB0aGlzLCBrZXk6ICd0aHJ1c3Rlcid9LCAxLCAwLCAyKTtcclxuXHR0aGlzLmZvcm1hdEJ1dHRvbih0aGlzLnRocnVzdGVyQnV0dG9uKTtcclxuXHR0aGlzLmd1bkJ1dHRvbiA9IHRoaXMuZ2FtZS5hZGQuYnV0dG9uKHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCAtIHRoaXMuZGlmZiwgdGhpcy5jYW0ueSArIDUyICsgKDg4ICogNCksICdndW5CdXR0b24nLCB0aGlzLnB1cmNoYXNlTW9kdWxlLCB7c3RhdGU6IHRoaXMsIGtleTogJ2d1bid9LCAxLCAwLCAyKTtcclxuXHR0aGlzLmZvcm1hdEJ1dHRvbih0aGlzLmd1bkJ1dHRvbik7XHJcblx0dGhpcy5oYWNrQnV0dG9uID0gdGhpcy5nYW1lLmFkZC5idXR0b24odGhpcy5jYW0ueCArIHRoaXMuY2FtLndpZHRoIC0gdGhpcy5kaWZmLCB0aGlzLmNhbS55ICsgNTIgKyAoODggKiA1KSwgJ2hhY2tCdXR0b24nLCB0aGlzLnB1cmNoYXNlTW9kdWxlLCB7c3RhdGU6IHRoaXMsIGtleTogJ2hhY2tlcid9LCAxLCAwLCAyKTtcclxuXHR0aGlzLmZvcm1hdEJ1dHRvbih0aGlzLmhhY2tCdXR0b24pO1xyXG4gICAvKlxyXG5cdHRoaXMuc2hvcEJ1dHRvbiA9IHRoaXMuZ2FtZS5hZGQuYnV0dG9uKHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCAtIDQ4LCAxNiwgJ3Nob3BCdXR0b24nLCB0aGlzLnVzZVNob3BCdXR0b24sIHRoaXMsIDEsIDAsIDIpO1xyXG5cdHRoaXMuc2hvcEJ1dHRvbi5vbklucHV0T3Zlci5hZGQodGhpcy5zbS5wbGF5SG92ZXJDbGljaywgdGhpcy5zbSk7XHJcblx0dGhpcy5zaG9wQnV0dG9uLm9uSW5wdXREb3duLmFkZCh0aGlzLnNtLnBsYXlEb3duQ2xpY2ssIHRoaXMuc20pO1xyXG4gICAqL1xyXG59O1xyXG5cclxuU2hvcC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaG9wO1xyXG5cclxuU2hvcC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIC8vIGZpbmQgZGlmZlxyXG5cdGlmKHRoaXMuc2hvcE1lbnVPcGVuaW5nID09PSB0cnVlKSB7XHRcclxuICAgICAgdGhpcy5kaWZmICs9IHRoaXMuc2hvcFNwZWVkICogdGhpcy5nYW1lLnRpbWUuZWxhcHNlZDtcclxuXHRcdGlmKHRoaXMuZGlmZiA+PSAyNzYpIHtcclxuXHRcdFx0dGhpcy5zaG9wTWVudU9wZW5pbmcgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5hZGRTaG9wQnV0dG9ucygpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRlbHNlIGlmKHRoaXMuc2hvcE1lbnVDbG9zaW5nID09PSB0cnVlKSB7XHJcbiAgICAgIHRoaXMuZGlmZiAtPSB0aGlzLnNob3BTcGVlZCAqIHRoaXMuZ2FtZS50aW1lLmVsYXBzZWQ7XHJcblx0XHRpZih0aGlzLmRpZmYgPD0gMCkge1xyXG5cdFx0XHR0aGlzLnNob3BQYW5lbC5raWxsKCk7XHJcblx0XHRcdHRoaXMuc2hvcE1lbnVDbG9zaW5nID0gZmFsc2U7XHJcblx0XHR9XHJcblx0fVxyXG4gICAvLyB1cGRhdGUgb3BlbmluZyBidXR0b24gcG9zaXRpb25cclxuICAgdGhpcy5zaG9wQnV0dG9uLnggPSB0aGlzLmNhbS54ICsgdGhpcy5jYW0ud2lkdGggLSA0OCAtIHRoaXMuZGlmZjtcclxuXHR0aGlzLnNob3BCdXR0b24ueSA9IHRoaXMuY2FtLnkgKyAxNjtcclxuICAgLy8gdXBkYXRlIHRleHQgcG9zaXRpb25cclxuICAgdGhpcy5tb25leVRleHQueCA9IHRoaXMuc2hvcEJ1dHRvbi54IC0gMTY7XHJcblx0dGhpcy5tb25leVRleHQueSA9IHRoaXMuc2hvcEJ1dHRvbi55ICsgNDg7XHJcblx0dGhpcy5iZS54ID0gdGhpcy5tb25leVRleHQueCArIHRoaXMubW9uZXlUZXh0LndpZHRoICsgODtcclxuXHR0aGlzLmJlLnkgPSB0aGlzLm1vbmV5VGV4dC55O1xyXG4gICAvLyB1cGRhdGUgcHVyY2hhc2luZyBidXR0b24gcG9zaXRpb25cclxuICAgdGhpcy5zaG9wUGFuZWwueCA9IHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCArIDE2IC0gdGhpcy5kaWZmO1xyXG5cdHRoaXMuc2hvcFBhbmVsLnkgPSB0aGlzLmNhbS55ICsgMTY7XHJcblx0dGhpcy5zaGllbGRCdXR0b24ueCA9IHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCArIDE2IC0gdGhpcy5kaWZmO1xyXG5cdHRoaXMuc2hpZWxkQnV0dG9uLnkgPSB0aGlzLmNhbS55ICsgNzAgKyAoODYgKiAwKTtcclxuXHR0aGlzLnNvbGFyUGFuZWxCdXR0b24ueCA9IHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCArIDE2IC0gdGhpcy5kaWZmO1xyXG5cdHRoaXMuc29sYXJQYW5lbEJ1dHRvbi55ID0gdGhpcy5jYW0ueSArIDcwICsgKDg2ICogMSk7XHJcblx0dGhpcy50aHJ1c3RlckJ1dHRvbi54ID0gdGhpcy5jYW0ueCArIHRoaXMuY2FtLndpZHRoICsgMTYgLSB0aGlzLmRpZmY7XHJcblx0dGhpcy50aHJ1c3RlckJ1dHRvbi55ID0gdGhpcy5jYW0ueSArIDcwICsgKDg2ICogMik7XHJcblx0dGhpcy5ndW5CdXR0b24ueCA9IHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCArIDE2IC0gdGhpcy5kaWZmO1xyXG5cdHRoaXMuZ3VuQnV0dG9uLnkgPSB0aGlzLmNhbS55ICsgNzAgKyAoODYgKiAzKTtcclxuXHR0aGlzLmhhY2tCdXR0b24ueCA9IHRoaXMuY2FtLnggKyB0aGlzLmNhbS53aWR0aCArIDE2IC0gdGhpcy5kaWZmO1xyXG5cdHRoaXMuaGFja0J1dHRvbi55ID0gdGhpcy5jYW0ueSArIDcwICsgKDg2ICogNCk7XHJcbn07XHJcblxyXG5TaG9wLnByb3RvdHlwZS5wdXJjaGFzZU1vZHVsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICB2YXIgcmFuZFkgPSB0aGlzLnN0YXRlLmdhbWUucm5kLmludGVnZXJJblJhbmdlKDEwMCwgdGhpcy5zdGF0ZS5jYW0uaGVpZ2h0IC0gMTAwKTtcclxuICAgaWYodGhpcy5rZXkgPT09ICdzaGllbGQnICYmIHRoaXMuc3RhdGUubW91c2UueCA+IHRoaXMuc3RhdGUuc2hpZWxkQnV0dG9uLnggJiYgdGhpcy5zdGF0ZS5tb3VzZS54IDwgdGhpcy5zdGF0ZS5zaGllbGRCdXR0b24ueCArIDI1NiAmJiB0aGlzLnN0YXRlLm1vdXNlLnkgPiB0aGlzLnN0YXRlLnNoaWVsZEJ1dHRvbi55ICYmIHRoaXMuc3RhdGUubW91c2UueSA8IHRoaXMuc3RhdGUuc2hpZWxkQnV0dG9uLnkgKyA4Mikge1xyXG4gICAgICBpZih0aGlzLnN0YXRlLm1vbmV5ID49IDQ1KSB7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuYWRkTW9kdWxlKHRoaXMuc3RhdGUuY2FtLnggKyB0aGlzLnN0YXRlLmNhbS53aWR0aCArIDgwLCB0aGlzLnN0YXRlLmNhbS55ICsgcmFuZFksIHRoaXMua2V5KTtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5tb25leSAtPSA0NTtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5jYXNoUmVnaXN0ZXIucGxheSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICB0aGlzLnN0YXRlLmVycm9yLnBsYXkoKTtcclxuICAgICAgfVxyXG4gICB9XHJcbiAgIGVsc2UgaWYodGhpcy5rZXkgPT09ICdzb2xhclBhbmVsJyAmJiB0aGlzLnN0YXRlLm1vdXNlLnggPiB0aGlzLnN0YXRlLnNvbGFyUGFuZWxCdXR0b24ueCAmJiB0aGlzLnN0YXRlLm1vdXNlLnggPCB0aGlzLnN0YXRlLnNvbGFyUGFuZWxCdXR0b24ueCArIDI1NiAmJiB0aGlzLnN0YXRlLm1vdXNlLnkgPiB0aGlzLnN0YXRlLnNvbGFyUGFuZWxCdXR0b24ueSAmJiB0aGlzLnN0YXRlLm1vdXNlLnkgPCB0aGlzLnN0YXRlLnNvbGFyUGFuZWxCdXR0b24ueSArIDgyKSB7XHJcbiAgICAgIGlmKHRoaXMuc3RhdGUubW9uZXkgPj0gMTA1KSB7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuYWRkTW9kdWxlKHRoaXMuc3RhdGUuY2FtLnggKyB0aGlzLnN0YXRlLmNhbS53aWR0aCArIDgwLCB0aGlzLnN0YXRlLmNhbS55ICsgcmFuZFksIHRoaXMua2V5KTtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5tb25leSAtPSAxMDU7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuY2FzaFJlZ2lzdGVyLnBsYXkoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5lcnJvci5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICBlbHNlIGlmKHRoaXMua2V5ID09PSAndGhydXN0ZXInICYmIHRoaXMuc3RhdGUubW91c2UueCA+IHRoaXMuc3RhdGUudGhydXN0ZXJCdXR0b24ueCAmJiB0aGlzLnN0YXRlLm1vdXNlLnggPCB0aGlzLnN0YXRlLnRocnVzdGVyQnV0dG9uLnggKyAyNTYgJiYgdGhpcy5zdGF0ZS5tb3VzZS55ID4gdGhpcy5zdGF0ZS50aHJ1c3RlckJ1dHRvbi55ICYmIHRoaXMuc3RhdGUubW91c2UueSA8IHRoaXMuc3RhdGUudGhydXN0ZXJCdXR0b24ueSArIDgyKSB7XHJcbiAgICAgIGlmKHRoaXMuc3RhdGUubW9uZXkgPj0gOTApIHtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5hZGRNb2R1bGUodGhpcy5zdGF0ZS5jYW0ueCArIHRoaXMuc3RhdGUuY2FtLndpZHRoICsgODAsIHRoaXMuc3RhdGUuY2FtLnkgKyByYW5kWSwgdGhpcy5rZXkpO1xyXG4gICAgICAgICB0aGlzLnN0YXRlLm1vbmV5IC09IDkwO1xyXG4gICAgICAgICB0aGlzLnN0YXRlLmNhc2hSZWdpc3Rlci5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuZXJyb3IucGxheSgpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuICAgZWxzZSBpZih0aGlzLmtleSA9PT0gJ2d1bicgJiYgdGhpcy5zdGF0ZS5tb3VzZS54ID4gdGhpcy5zdGF0ZS5ndW5CdXR0b24ueCAmJiB0aGlzLnN0YXRlLm1vdXNlLnggPCB0aGlzLnN0YXRlLmd1bkJ1dHRvbi54ICsgMjU2ICYmIHRoaXMuc3RhdGUubW91c2UueSA+IHRoaXMuc3RhdGUuZ3VuQnV0dG9uLnkgJiYgdGhpcy5zdGF0ZS5tb3VzZS55IDwgdGhpcy5zdGF0ZS5ndW5CdXR0b24ueSArIDgyKSB7XHJcbiAgICAgIGlmKHRoaXMuc3RhdGUubW9uZXkgPj0gMTIwKSB7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuYWRkTW9kdWxlKHRoaXMuc3RhdGUuY2FtLnggKyB0aGlzLnN0YXRlLmNhbS53aWR0aCArIDgwLCB0aGlzLnN0YXRlLmNhbS55ICsgcmFuZFksIHRoaXMua2V5KTtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5tb25leSAtPSAxMjA7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuY2FzaFJlZ2lzdGVyLnBsYXkoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5lcnJvci5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICBlbHNlIGlmKHRoaXMua2V5ID09PSAnaGFja2VyJyAmJiB0aGlzLnN0YXRlLm1vdXNlLnggPiB0aGlzLnN0YXRlLmhhY2tCdXR0b24ueCAmJiB0aGlzLnN0YXRlLm1vdXNlLnggPCB0aGlzLnN0YXRlLmhhY2tCdXR0b24ueCArIDI1NiAmJiB0aGlzLnN0YXRlLm1vdXNlLnkgPiB0aGlzLnN0YXRlLmhhY2tCdXR0b24ueSAmJiB0aGlzLnN0YXRlLm1vdXNlLnkgPCB0aGlzLnN0YXRlLmhhY2tCdXR0b24ueSArIDgyKSB7XHJcbiAgICAgIGlmKHRoaXMuc3RhdGUubW9uZXkgPj0gMjAwKSB7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuYWRkTW9kdWxlKHRoaXMuc3RhdGUuY2FtLnggKyB0aGlzLnN0YXRlLmNhbS53aWR0aCArIDgwLCB0aGlzLnN0YXRlLmNhbS55ICsgcmFuZFksIHRoaXMua2V5KTtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5tb25leSAtPSAyMDA7XHJcbiAgICAgICAgIHRoaXMuc3RhdGUuY2FzaFJlZ2lzdGVyLnBsYXkoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5lcnJvci5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICB0aGlzLnN0YXRlLm1vbmV5VGV4dC50ZXh0ID0gdGhpcy5zdGF0ZS5tb25leTsgXHJcbn07XHJcblxyXG5TaG9wLnByb3RvdHlwZS5hZGRNb2R1bGUgPSBmdW5jdGlvbiAoeCwgeSwga2V5KSB7XHJcbiAgIHZhciBuZXdNb2R1bGUgPSB0aGlzLnN0YXRlLm1vZHVsZUJ1aWxkZXIuYnVpbGQoa2V5LCB4LCB5LCB0cnVlKTtcclxuICAgbmV3TW9kdWxlLmN1YmUuYm9keS5tb3ZlTGVmdCh0aGlzLm5ld01vZHVsZVNwZWVkKTtcclxufTtcclxuXHJcblNob3AucHJvdG90eXBlLmFkZFNob3BCdXR0b25zID0gZnVuY3Rpb24oKSB7XHJcbiAgIHRoaXMuc2hpZWxkQnV0dG9uLnJldml2ZSgpO1xyXG4gICB0aGlzLnNvbGFyUGFuZWxCdXR0b24ucmV2aXZlKCk7XHJcbiAgIHRoaXMudGhydXN0ZXJCdXR0b24ucmV2aXZlKCk7XHJcbiAgIHRoaXMuZ3VuQnV0dG9uLnJldml2ZSgpO1xyXG4gICB0aGlzLmhhY2tCdXR0b24ucmV2aXZlKCk7IFxyXG59O1xyXG5cclxuU2hvcC5wcm90b3R5cGUuZm9ybWF0QnV0dG9uID0gZnVuY3Rpb24oYnV0dG9uKSB7XHJcbiAgIGJ1dHRvbi5vbklucHV0T3Zlci5hZGQodGhpcy5zbS5wbGF5SG92ZXJDbGljaywgdGhpcy5zbSk7XHJcbiAgIGJ1dHRvbi5vbklucHV0RG93bi5hZGQodGhpcy5zbS5wbGF5RG93bkNsaWNrLCB0aGlzLnNtKTtcclxuICAgYnV0dG9uLmtpbGwoKTtcclxufTtcclxuXHJcblNob3AucHJvdG90eXBlLmFkZE1vbmV5ID0gZnVuY3Rpb24oYW10KSB7XHJcbiAgIHRoaXMubW9uZXkgKz0gYW10O1xyXG4gICB0aGlzLm1vbmV5VGV4dC50ZXh0ID0gdGhpcy5tb25leTtcclxuICAgdGhpcy5jYXNoUmVnaXN0ZXIucGxheSgpO1xyXG59O1xyXG5cclxuU2hvcC5wcm90b3R5cGUuZGVidWdBZGRNb25leSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuYWRkTW9uZXkoMTAwMCk7IFxyXG59O1xyXG5cclxuU2hvcC5wcm90b3R5cGUudXNlU2hvcEJ1dHRvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICBpZighdGhpcy5zaG9wUGFuZWwuYWxpdmUgJiYgIXRoaXMuc2hvcE1lbnVPcGVuaW5nICYmICF0aGlzLnNob3BNZW51Q2xvc2luZykge1xyXG4gICAgICB0aGlzLnNob3BQYW5lbC5yZXZpdmUoKTtcclxuICAgICAgdGhpcy5kaWZmID0gMDtcclxuICAgICAgdGhpcy5zaG9wTWVudU9wZW5pbmcgPSB0cnVlO1xyXG4gICB9XHJcbiAgIGVsc2UgaWYodGhpcy5zaG9wUGFuZWwuYWxpdmUmJiAhdGhpcy5zaG9wTWVudUNsb3NpbmcgJiYgIXRoaXMuc2hvcE1lbnVPcGVuaW5nKSB7XHJcbiAgICAgIHRoaXMuc2hvcE1lbnVDbG9zaW5nID0gdHJ1ZTtcclxuICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTaG9wO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCIvKlxyXG5Db2xsZWN0aW9uIG9mIHV0aWxpdHkgZnVuY3Rpb25zLlxyXG4qL1xyXG5cclxudmFyIFV0aWxzID0ge1xyXG4gICAgY29udGFpbnNPYmplY3Q6IGZ1bmN0aW9uKG9iaiwgbGlzdCkge1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChsaXN0W2ldID09PSBvYmopIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgZGlzdGFuY2U6IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyKSB7XHJcbiAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHgxIC0geDIsIDIpICsgTWF0aC5wb3coeTEgLSB5MiwgMikpO1xyXG4gICAgfSxcclxuICAgIGxlcnA6IGZ1bmN0aW9uKGEsIGIsIHQpIHtcclxuICAgICAgIGlmICh0IDwgMCB8fCB0ID4gMSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2JhZCByYW5nZSBmb3IgVXRpbHMubGVycCgpLCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMScpO1xyXG4gICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICB9XHJcbiAgICAgICByZXR1cm4gYSArIHQgKiAoYiAtIGEpO1xyXG4gICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBVdGlsczsiXX0=
