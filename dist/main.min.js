(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(1280, 720, Phaser.AUTO, 'atic-game');

window.playerState = {
    currentLevel: 'Game'
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');
},{"./states/boot":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\boot.js","./states/game":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\game.js","./states/menu":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\menu.js","./states/preloader":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\preloader.js","./states/splash":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\splash.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\Module.js":[function(require,module,exports){
//Don't use this function to create modules, instead use moduleBuilder()
var Module = function(setCube, type) {
   this.cube = setCube;
   this.cube.module = this;
   this.type = type;
};

Module.prototype.constructor = Module;

module.exports = Module;
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js":[function(require,module,exports){
var Cube = require('./cube');
var Module = require('./Module');

var thrustAmt = 5000;

//Use this to create a moduleBuilder- only need to create one instance of it
var ModuleBuilder = function(setGameState, setColGroup) {
	//Ensure that cannot create multiple instances of this class
	if(ModuleBuilder.prototype.exists) {
		return ModuleBuilder.prototype.existingReference;
	}
		
	this.gameState = setGameState;
   this.colGroup = setColGroup;
	// this.coreExists = false;	//records if core has been created
	this.core = null;			//stores core when it is created
	//var space = this.gameState.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
	ModuleBuilder.prototype.exists = true;
	ModuleBuilder.prototype.existingReference = this;
};

ModuleBuilder.prototype.constructor = ModuleBuilder;

//These var's help create the singleton functionality
ModuleBuilder.prototype.exists = false;
ModuleBuilder.prototype.existingReference = null;

/** Module functions **/
function solarPanelGiveTarget(target) {
   if (this.cube.group && target.cube.group && this.cube.group !== target.cube.group || this === target) {
      return;
   }
   var ourGroup = this.cube.group;
   var newConnection = {start: this.cube, end: target.cube};
   this.cube.myConnection = newConnection;
   target.cube.myConnection = newConnection;
   ourGroup.displayConnection(this.cube.myConnection);
}

function solarPanelMouseOver() {
   if (!this.cube.myConnection || !this.cube.group) {
      return;
   }
   this.cube.group.displayConnection(this.cube.myConnection);
}

function solarPanelOnRemove() {
<<<<<<< HEAD
   if (!this.cube.myConnection || !this.cube.myConnection.end) {
      console.log('solarPanelOnRemove() had an error');
   }
   this.cube.myConnection.end.myConnection = undefined;
   this.cube.myConnection = undefined;
=======
   console.log('remove');
   if(this.cube.myConnection !== undefined) {
	this.cube.myConnection.end.myConnection = undefined;
	this.cube.myConnection = undefined;
   }
>>>>>>> origin/gh-pages
}

function beginThrust() {
   this.thrust = true;
   this.cube.frame = 1;
}

function endThrust() {
   this.thrust = false;
   this.cube.frame = 0;
}

function thrusterUpdate() {
   // console.log(this.thrust);
   if (this.thrust && this.cube.myConnection) {
      this.cube.body.force.x = thrustAmt * Math.cos(this.cube.rotation - Math.PI / 2);
      this.cube.body.force.y = thrustAmt * Math.sin(this.cube.rotation - Math.PI / 2);
	  if(this.cube.frame === 1) {
		this.cube.frame = 2;
	  }
	  else {
		this.cube.frame = 1;
	  }
   }
}

/** End module functions **/

//call this function from ModuleBuilder to construct modules
//TYPES: 'core' 'shield' 'thruster' 'solarPanel' 'gun'
ModuleBuilder.prototype.build = function(type, x, y, forPlayer) {
	//Create cube object to be stored within module
	//Sprite names for modules are directly mapped to module names, so just pass 'type' as sprite name
	var newCube = new Cube(this.gameState.game, x, y, type);
    var scale = 0.5;
    newCube.name = this.gameState.debugNum++;
    newCube.scale.setTo(scale, scale);
    newCube.anchor.setTo(0.5, 0.5);
    this.gameState.game.physics.p2.enable(newCube);
    newCube.body.onBeginContact.add(newCube.cubeCollide, newCube);
	newCube.body.collideWorldBounds = false;
    newCube.body.damping = 0.9;
    newCube.body.angularDamping = 0.9;
    if (!this.gameState.rootSpawned) {
       newCube.root = true;
       this.gameState.rootSpawned = true;
    }

   var cIndicator = this.gameState.add.sprite(0, 0, 'connections', 'connection_line.png');
   cIndicator.anchor.setTo(0.5, 0.5);
   cIndicator.animations.add('end', ['connection_end.png'], 60, true);
   cIndicator.animations.add('line', ['connection_line.png'], 60, true);
   cIndicator.animations.add('right', ['connection_right.png'], 60, true);
   newCube.addChild(cIndicator);
   newCube.cIndicator = cIndicator;
   cIndicator.alpha = 0;
	
	//Create module to wrap around cube class
	var newModule = new Module(newCube, type);
		
	//TODO: edit special module attributes based on 'type'z
	
	//Store module if it is core
	if(type === 'core')
	{
		newModule.cube.animations.add('core', [0,1,2], 20, true);
		newModule.cube.animations.play('core');
		this.core = newModule;
		this.coreExists = true;
	}
   // solar panel testing
   if (type === 'solarPanel') {
      newModule.giveTarget = solarPanelGiveTarget;
      newModule.mouseOver = solarPanelMouseOver;
      newModule.onRemove = solarPanelOnRemove;
   }
   
   //Thruster module events
	if(type === 'thruster') {
      if (forPlayer) {
         var space = this.gameState.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR); 
         this.gameState.input.keyboard.addKeyCapture([space]);
         // space.onDown.add(applyThrust, newModule);
         space.onDown.add(beginThrust, newModule);
         space.onUp.add(endThrust, newModule);
      } else {
         // newModule.thrust = false;
         newModule.beginThrust = beginThrust;
         newModule.endThrust = endThrust;
      }
      newModule.update = thrusterUpdate;
	}
	//Return the module object
	return newModule;
};

module.exports = ModuleBuilder;
















},{"./Module":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\Module.js","./cube":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\cube.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\cube.js":[function(require,module,exports){
/*
Defines a cube.
*/

var Cube = function (game, x, y, sprite) {
    Phaser.Sprite.call(this, game, x, y, sprite);
    this.game = game;
    this.game.add.existing(this);
    this.group = undefined;
    this.module = undefined;
    this.indicatorFade = 0.02;
    this.health = 3;
    this.constraints = [];
   // this.ramCooldown = 500;
   // this.ramDelay = 0;
};

Cube.prototype = Object.create(Phaser.Sprite.prototype);
Cube.prototype.constructor = Cube;

/**
 * Automatically called by World.update
 */
Cube.prototype.update = function() {
   if (this.cIndicator && this.cIndicator.alpha > 0) {
      this.cIndicator.alpha -= this.indicatorFade;
   }
   if (this.module.update) {
      this.module.update();
   }
   // if (this.ramDelay > 0) {
      // this.ramDelay -= this.game.time.elapsed;
   // }
};

// Cube.prototype.resetRamDelay = function() {
  // this.ramDelay = this.ramCooldown; 
// };

Cube.prototype.cubeCollide = function(other) {
   if (!this.group || !other || !other.sprite || other.sprite.key === 'asteroid') {
      return;
   }
	this.group.handleCollision(this, other.sprite);
	this.group.countCubes();
};

Cube.prototype.toString = function() {
   var string = '';
   string += this.concat('name', this.name);
   return string;
};

Cube.prototype.concat = function(string, val) {
   return string + ': ' + val + '\n';
};
Cube.prototype.displayIndicator = function() {
  this.cIndicator.alpha = 1; 
};

Cube.prototype.takeDamage = function(amt) {
   this.health -= amt;
   if (this.health <= 0) {
      this.group.destroyCube(this);
	  // this.group.countCubes();
   }
};

Cube.prototype.remove = function() {
   if (!this.group) {
      return;
   }
   this.group.remove(this);
};

module.exports = Cube;















},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js":[function(require,module,exports){
var Astar = require('../libs/javascript-astar/astar');
var EnemyAI = require('./enemy_ai');

/*
Defines a cube group.
*/

var CubeGroup = function (game, root) {
   this.game = game;
   this.root = root;
   this.cubes = [];
   var col = [];
   col.push(this.root);
   this.cubes.push(col);
   if (this.root) {
      this.root.group = this;
   }
   this.DIR = {NORTH: 0, EAST: 1, SOUTH: 2, WEST: 3};
   this.offset = 2;
   this.numCubes = 1;
   this.bounceBackForce = 30;
   this.minRamVel = 100;
};

CubeGroup.prototype.constructor = CubeGroup;

/**
 * Automatically called by World.update
 */
CubeGroup.prototype.update = function() {
   if (this.AI) {
      this.AI.update();
   }
};

CubeGroup.prototype.call = function(fun) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.hasOwnProperty(fun)) {
            // if cubes need functions called
         } else if (cube && cube.module && cube.module.hasOwnProperty(fun)) {
            var fn = cube.module[fun];
            if (typeof fn === 'function') {
               fn.call(cube.module);
            }
         }
      }
   }
};

CubeGroup.prototype.giveAI = function(type, player) {
   this.AI = new EnemyAI(this.game, this, type, player);
};

CubeGroup.prototype.add = function(cube, point) {
  if (!this.root && cube.module.type === 'core') {
     this.root = cube;
  }
  cube.group = this;
  this.set(cube, point);
  this.createConstraints(cube, point);
  // this.displayCubes();
};

CubeGroup.prototype.handleCollision = function(origin, other) {
   // stop if other does not exist, either is not a cube, both are in same group
   if (other === null || origin.prototype !== other.prototype) {
      return;
   }
   // if (other.group && other.group !== this && origin.ramDelay <= 0) {
   var sumVel = Math.abs(origin.body.velocity.x) + Math.abs(origin.body.velocity.y);
   if (other.group && other.group !== this && sumVel >= this.minRamVel) {
      console.log(origin.body.velocity.x, origin.body.velocity.y, sumVel);
      // console.log(origin.name, 'ramming damage!');
      other.takeDamage(3);
      // origin.resetRamDelay();
   } else if (!other.group && this.isPlayer) {
      var relSide = this.relativeSide(origin.body, other.body);
      var originLoc = this.find(origin);
      var otherLoc = this.adjust(originLoc, relSide);
      this.set(other, otherLoc);
      otherLoc = this.find(other); // update position since set can shift grid
      if (!otherLoc) {
         // console.log('handle collision failed to find position for good applicant');
         return;
      }
      this.createConstraints(other, otherLoc);
      // console.log(other.body.collidesWith);
      // this.displayCubes();
   }
};

CubeGroup.prototype.createConstraints = function(me, point) {
   // this.displayCubes();
   var myNorth = this.get(this.adjust(point, this.DIR.NORTH));
   var myEast = this.get(this.adjust(point, this.DIR.EAST));
   var mySouth = this.get(this.adjust(point, this.DIR.SOUTH));
   var myWest = this.get(this.adjust(point, this.DIR.WEST));
   var constraint;
   if (myNorth) {
      constraint = this.game.physics.p2.createLockConstraint(me.body, myNorth.body, [0, me.width + this.offset]); // me - north
      me.constraints.push(constraint);
      myNorth.constraints.push(constraint);
   }
   if (myEast) {
      constraint = this.game.physics.p2.createLockConstraint(me.body, myEast.body, [-me.width - this.offset, 0]); // me - east
      me.constraints.push(constraint);
      myEast.constraints.push(constraint);
   }
   if (mySouth) {
      constraint = this.game.physics.p2.createLockConstraint(mySouth.body, me.body, [0, me.width + this.offset]); // south - me
      me.constraints.push(constraint);
      mySouth.constraints.push(constraint);
   }
   if (myWest) {
      constraint = this.game.physics.p2.createLockConstraint(myWest.body, me.body, [-me.width - this.offset, 0]); // west - me
      me.constraints.push(constraint);
      myWest.constraints.push(constraint);
   }
};

CubeGroup.prototype.relativeSide = function(thisBody, otherBody) {
  var thisPoint = new Phaser.Point(thisBody.x, thisBody.y);
  var otherPoint = new Phaser.Point(otherBody.x, otherBody.y);
  var angleToOther = Phaser.Point.angle(thisPoint, otherPoint);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
  var diffAngle = Math.abs(Math.abs(angleToOther) - Math.abs(thisBody.rotation));
   if (diffAngle < 1 / 4 * Math.PI || diffAngle > 7 / 4 * Math.PI) { // north
     return this.DIR.NORTH;
  } else if (diffAngle >= 1 / 4 * Math.PI && diffAngle < 3 / 4 * Math.PI) { // east
     return this.DIR.EAST;
  } else if (diffAngle >= 3 / 4 * Math.PI && diffAngle < 5 / 4 * Math.PI) { // south
     return this.DIR.SOUTH;
  } else if (diffAngle >= 5 / 4 * Math.PI && diffAngle < 7 / 4 * Math.PI) { // west
     return this.DIR.WEST;
  }
};

CubeGroup.prototype.find = function(cube) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col] === cube) {
            return new Phaser.Point(row, col);
         }
      }
   }
   return undefined;
};

CubeGroup.prototype.get = function(point) {
  if (!point || this.outOfBounds(point)) {
      return;
  }
  return this.cubes[point.x][point.y];
};

CubeGroup.prototype.cubesWidth = function() {
   return this.cubes.length;
};

CubeGroup.prototype.cubesHeight = function() {
   return this.cubes[0].length;
};

CubeGroup.prototype.addTopRow = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].push(undefined);
   }
};

CubeGroup.prototype.addRightCol = function() {
   var newCol = [];
   for (var i = 0; i < this.cubesHeight(); i++) {
      newCol.push(undefined);
   }
   this.cubes.push(newCol);
};

CubeGroup.prototype.addBotRow = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].unshift(undefined);
   }
};

CubeGroup.prototype.addLeftCol = function() {
   var newCol = new Array(this.cubesHeight());
   this.cubes.unshift(newCol);
};

CubeGroup.prototype.getCube = function(point) {
   if (!point || this.outOfBounds(point)) {
      return undefined;
   }
   return this.cubes[point.x][point.y];
};

CubeGroup.prototype.adjust = function(point, dir) {
  if (!point) {
     return;
  }
  var newPoint = new Phaser.Point(point.x, point.y);
  switch (dir) {
      case this.DIR.NORTH:
      newPoint.y++;
      break;
      case this.DIR.EAST:
      newPoint.x++;
      break;
      case this.DIR.SOUTH:
      newPoint.y--;
      break;
      case this.DIR.WEST:
      newPoint.x--;
      break;
   }
   return newPoint;
};

CubeGroup.prototype.set = function(cube, point) {
   if (!point) {
      console.log('set given undefined point');
      return;
   }
   if (point.x < 0) {
      this.addLeftCol();
      point.x = 0;
   } else if (point.x >= this.cubesWidth()) {
      this.addRightCol();
      point.x = this.cubesWidth() - 1;
   } else if (point.y < 0) {
      this.addBotRow();
      point.y = 0;
   } else if (point.y >= this.cubesHeight()) {
      this.addTopRow();
      point.y = this.cubesHeight() - 1;
   }
   if (this.get(point)) {
      // console.log('tried to set to filled position');
      return;
   }
   this.cubes[point.x][point.y] = cube;
   cube.group = this;
};

CubeGroup.prototype.outOfBounds = function(point) {
   if (!point) {
      console.log('out of bounds given undefined point');
      return;
   }
   if (point.x < 0 || point.x >= this.cubesWidth() || point.y < 0 || point.y >= this.cubesHeight()) {
      return true;
   }
   return false;
};

CubeGroup.prototype.displayCubes = function() {
   console.log('================');
   var output = 'Display Cubes\n';
   var row = 0;
   var col = this.cubesHeight() - 1;
   while (col >= 0) {
      while (row < this.cubesWidth()) {
         var cube = this.cubes[row][col];
         if (cube) {
            output += '# ';
         } else {
            output += '_ ';
         }
         row++;
      }
      row = 0;
      col--;
      output += '\n';
   }
   console.log(output);
   console.log('---------------');
};

CubeGroup.prototype.displayConnection = function(connection) {
   var graph = new Astar.Graph(this.cubesToGraph());
   var startPoint = this.find(connection.start);
   var endPoint = this.find(connection.end);
   if (!startPoint || !endPoint) {
      console.log('displayConnection failed to get points');
      return;
   }
   var start = graph.grid[startPoint.x][startPoint.y];
   var end = graph.grid[endPoint.x][endPoint.y];
   var result = Astar.astar.search(graph, start, end);
   result.unshift(start);
   var previous;
   for(var i = 0; i < result.length; i++) {
      var curPoint = new Phaser.Point(result[i].x, result[i].y);
      var cur = this.get(curPoint);
      var indicator = cur.cIndicator;
      var dir;
      var prevPoint;
      var nextPoint;
      if (!previous) {
         indicator.animations.play('end');
         nextPoint = new Phaser.Point(result[i+1].x, result[i+1].y);
         dir = this.dirBetween(curPoint, nextPoint);
         indicator.rotation = this.dirToAngle(dir);
      } else if (i === result.length - 1) {
         indicator.animations.play('end');
         prevPoint = new Phaser.Point(previous.x, previous.y);
         dir = this.dirBetween(curPoint, prevPoint);
         indicator.rotation = this.dirToAngle(dir);
      } else {
         indicator.animations.play('line');
         prevPoint = new Phaser.Point(previous.x, previous.y);
         var prevDir = this.dirBetween(curPoint, prevPoint);
         nextPoint = new Phaser.Point(result[i+1].x, result[i+1].y);
         var nextDir = this.dirBetween(curPoint, nextPoint);
         this.manageIndicator(indicator, prevDir, nextDir);
      }
      previous = result[i];
      cur.displayIndicator();
    }
};

CubeGroup.prototype.manageIndicator = function(indicator, prevDir, nextDir) {
  indicator.scale.setTo(Math.abs(indicator.scale.x), indicator.scale.y);
  if (prevDir === this.DIR.NORTH && nextDir === this.DIR.SOUTH) { // 2
      indicator.rotation = Math.PI;
   } else if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.NORTH) { // 1
      indicator.rotation = 0;
   } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.WEST) { // 4
      indicator.rotation = 1 / 2 * Math.PI;
   } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.EAST) { // 3
      indicator.rotation = 3 / 2  * Math.PI;
   } else {
      indicator.animations.play('right');
      if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.EAST) { // 5
         indicator.rotation = 0;
      } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.SOUTH) { // 6
         indicator.rotation = 1 / 2 * Math.PI;
      } else if (prevDir === this.DIR.NORTH && nextDir === this.DIR.WEST) { // 7
         indicator.rotation = Math.PI;
      } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.NORTH) { // 8
         indicator.rotation = 3 / 2 * Math.PI;
      } else {
         indicator.scale.setTo(-Math.abs(indicator.scale.x), indicator.scale.y);
         if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.WEST) { // 9
            indicator.rotation = 0;
         } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.NORTH) { // 10
            indicator.rotation = 1 / 2 * Math.PI;
         } else if (prevDir === this.DIR.NORTH && nextDir === this.DIR.EAST) { // 11
            indicator.rotation = Math.PI;
         } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.SOUTH) { // 12
            indicator.rotation = 3 / 2 * Math.PI;
         }
      }
   } 
};

CubeGroup.prototype.cubesToGraph = function() {
  var graph = [];
  for (var row = 0; row < this.cubesWidth(); row++) {
     var newCol = [];
      for (var col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col]) {
            newCol.push(1);
         } else {
            newCol.push(0);
         }
      }
      graph.push(newCol);
   }
   return graph;
};

CubeGroup.prototype.dirBetween = function(a, b) {
   var deltaX = a.x - b.x;
   var deltaY = a.y - b.y;
   if (deltaX > 0) {
      return this.DIR.WEST;
   }
   if (deltaX < 0) {
      return this.DIR.EAST;
   }
   if (deltaY > 0) {
      return this.DIR.SOUTH;
   }
   if (deltaY < 0) {
      return this.DIR.NORTH;
   }
   return this.DIR.NORTH;
};

CubeGroup.prototype.dirToAngle = function(dir) {
  switch (dir) {
   case this.DIR.NORTH:
   return Math.PI;
   case this.DIR.EAST:
   return 3 / 2 * Math.PI;
   case this.DIR.SOUTH:
   return 0;
   case this.DIR.WEST:
   return 1 / 2 * Math.PI;
  }  
};

CubeGroup.prototype.destroyCube = function(cube) {
  // console.log('destroyCube');
  var loc = this.find(cube);
  if (!loc) {
     console.log('attempt to destroy cube not in group');
     return;
  }
  // remove cube from group
  this.remove(cube);
  // destroy cube
  cube.kill(true);
};

CubeGroup.prototype.remove = function(cube) {
   // console.log('remove');
   if (this.root === cube) {
      return;
   }
   // remove cube from array
   var row, col;
   for (row = 0; row < this.cubesWidth(); row++) {
      for (col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col] === cube) {
            // this.cubes[row][col].group = undefined;
            this.cubes[row][col] = undefined;
            break;
         }
      }
   }
   // remove constraints from cube
   this.removeConstraints(cube);
   cube.group = undefined;
   if (cube.module && cube.module.hasOwnProperty('onRemove')) {
      cube.module.onRemove();
   }
   // test for exiles
   for (row = 0; row < this.cubesWidth(); row++) {
      for (col = 0; col < this.cubesHeight(); col++) {
         var exile = this.cubes[row][col];
         if (exile && this.isExile(exile)) {
            this.remove(exile);
         }
      }
   }
   // this.displayCubes();
};

CubeGroup.prototype.removeNeighborsConstraint = function(constraint, cube) {
   // console.log('removeNeighborsConstraint');
   var neighbors = this.getNeighbors(cube);
   for (var i = 0; i < neighbors.length; i++) {
      var neighbor = neighbors[i];
      for (var j = 0; j < neighbor.constraints.length; j++) {
         if (neighbor.constraints[j] === constraint) {
            neighbor.constraints.splice(j, 1);
         }
      }
   }
};

CubeGroup.prototype.getNeighbors = function(cube) {
   var loc = this.find(cube);
   var north = this.get(this.adjust(loc, this.DIR.NORTH));
   var east = this.get(this.adjust(loc, this.DIR.EAST));
   var south = this.get(this.adjust(loc, this.DIR.SOUTH));
   var west = this.get(this.adjust(loc, this.DIR.WEST));
   var neighbors = [];
   if (north) {
      neighbors.push(north);
   }
   if (east) {
      neighbors.push(east);
   }
   if (south) {
      neighbors.push(south);
   }
   if (west) {
      neighbors.push(west);
   }
   return neighbors;
};

CubeGroup.prototype.removeConstraints = function(cube) {
   // console.log('removeConstraints');
   while (cube.constraints.length > 0) {
      this.removeNeighborsConstraint(cube.constraints[0], cube);
      this.game.physics.p2.removeConstraint(cube.constraints[0]);
      cube.constraints.splice(0, 1);
   }
};

// only used to test Astar
CubeGroup.prototype.testPath = function() {
  var graph = new Astar.Graph([
        [1,1,1,1],
        [0,1,1,0],
        [0,0,0,1]
    ]);
   var start = graph.grid[0][0];
   var end = graph.grid[2][3];
   var result = Astar.astar.search(graph, start, end);
   result.unshift(start);
   for(var i = 0; i < result.length; i++) {
      console.log(result[i].x, result[i].y);
    } 
};

CubeGroup.prototype.isExile = function(cube) {
   if (cube === this.root) {
      return;
   }
   var graph = new Astar.Graph(this.cubesToGraph());
   var startPoint = this.find(this.root);
   var endPoint = this.find(cube);
   var start = graph.grid[startPoint.x][startPoint.y];
   var end = graph.grid[endPoint.x][endPoint.y];
   var result = Astar.astar.search(graph, start, end);
   // if no path is found, the cube is an exile
   if (result.length === 0) {
      return true;
   }
   return false;
};

CubeGroup.prototype.countCubes = function() {
	var row, col;
	var num  = 0;
	for (row = 0; row < this.cubesWidth(); row++) {
		for (col = 0; col < this.cubesHeight(); col++) {
			if (this.cubes[row][col] !== undefined) {
				num++;
			}
		}
	}
	//console.log(num);
	this.numCubes = num;
};

module.exports = CubeGroup;

















},{"../libs/javascript-astar/astar":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\libs\\javascript-astar\\astar.js","./enemy_ai":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\enemy_ai.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\enemy_ai.js":[function(require,module,exports){
var Utils = require('../utils.js');

var EnemyAI = function(game, group, type, playerGroup) {
   this.game = game;
   this.group = group;
   this.type = type;
   this.playerGroup = playerGroup;
   this.player = this.playerGroup.root;
   this.ramDist = 500;
   this.rotationForce = 50;
   this.facingAllowance = Math.PI / 20;
   this.thrustersFiring = false;
   switch (this.type) {
      case 'ram':
      this.allocateToThrusters();
      break;
   }
};

EnemyAI.prototype.constructor = EnemyAI;

EnemyAI.prototype.update = function() {
   switch (this.type) {
      case 'ram':
      this.ramUpdate();
      break;
   }
};

EnemyAI.prototype.ramUpdate = function() {
   return;
   if (!this.group.root) {
      return;
   }
   var root = this.group.root;
   var myPos = new Phaser.Point(root.x, root.y);
   var playerPos = new Phaser.Point(this.player.x, this.player.y);
   var dist = Utils.distance(myPos.x, myPos.y, playerPos.x, playerPos.y);
   if (dist <= this.ramDist) {
      var angleTo = this.angleTo(myPos, playerPos);
      var diffAngle = angleTo - root.body.rotation;
      if (diffAngle > 0) {
         root.body.angularForce = this.rotationForce;
      } else {
         root.body.angularForce = -this.rotationForce;
      }
      if (Math.abs(diffAngle) <= this.facingAllowance && !this.thrustersFiring) {
         this.group.call('beginThrust');
         this.thrustersFiring = true;
         this.allocateToThrusters();
      } else if (Math.abs(diffAngle) > this.facingAllowance && this.thrustersFiring){
         this.group.call('endThrust');
         this.thrustersFiring = false;
      }
   }
};

EnemyAI.prototype.allocateToThrusters = function() {
   var panels = [];
   var thrusters = [];
   for (var row = 0; row < this.group.cubesWidth(); row++) {
      for (var col = 0; col < this.group.cubesHeight(); col++) {
         var cube = this.group.cubes[row][col];
         if (cube && cube.module) {
            if (cube.module.type === 'solarPanel' && !cube.myConnection) {
               panels.push(cube.module);
            } else if (cube.module.type === 'thruster' && !cube.myConnection) {
               thrusters.push(cube.module);
            }
         }
      }
   }
   var i = 0;
   while (i < thrusters.length && i < panels.length) {
      var tarPanel = panels[i];
      var tarThruster = thrusters[i];
      var newConnection = {start: tarPanel.cube, end: tarThruster.cube};
      tarPanel.cube.myConnection = newConnection;
      tarThruster.cube.myConnection = newConnection;
      this.group.displayConnection(tarPanel.cube.myConnection);
      i++;
   }
};

EnemyAI.prototype.angleTo = function(from, to) {
  var angleToOther = Phaser.Point.angle(from, to);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
  return angleToOther;
};

module.exports = EnemyAI;











},{"../utils.js":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\utils.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\mouse.js":[function(require,module,exports){
var Utils = require('../utils.js');

var Mouse = function(game, input, playerGroup) {
   this.game = game;
   this.input = input;
	this.body = new p2.Body(); // jshint ignore:line
   this.game.physics.p2.world.addBody(this.body);
   // this.game.physics.p2.enable(this);
   
   this.input.onDown.add(this.click, this);
   this.input.onUp.add(this.release, this);
   this.input.addMoveCallback(this.move, this);
   this.x = 0;
   this.y = 0;
   
   this.grabbed = undefined;
   this.lastClicked = undefined;
   this.line = new Phaser.Line(0, 0, 0, 0);
   
   this.removeThreshold = 400; // time in milliseconds
   this.removeTime = 0; // time till threshold
   
   this.playerGroup = playerGroup;
};

Mouse.prototype.constructor = Mouse;

Mouse.prototype.update = function() {
   if (this.grabbed) {
      var angle = Math.atan2(this.grabbed.sprite.y - (this.input.position.y + this.game.camera.y), this.grabbed.sprite.x - (this.input.position.x+ this.game.camera.x)) + Math.PI;
      var dist = Utils.distance(this.grabbed.sprite.x, this.grabbed.sprite.y, (this.input.position.x+ this.game.camera.x), (this.input.position.y + this.game.camera.y));
      var weight = 10;
      if (!this.grabbed.sprite.group) {
         this.grabbed.force.x = Math.cos(angle) * dist * weight;
         this.grabbed.force.y = Math.sin(angle) * dist * weight;
      }
      this.line.setTo(this.grabbed.sprite.x, this.grabbed.sprite.y, (this.input.position.x+ this.game.camera.x), (this.input.position.y + this.game.camera.y));
      this.removeTime += this.game.time.elapsed;
      if (this.removeTime >= this.removeThreshold && this.grabbed.sprite.key !== 'asteroid') {
         this.grabbed.sprite.remove();
         this.removeTime = 0;
      }
    } else {
       this.line.setTo(0, 0, 0, 0);
    }
    var point = new Phaser.Point(this.x, this.y);
    var bodies = this.game.physics.p2.hitTest(point);
    if (bodies.length)
    {
        var hover = bodies[0].parent;
        if (hover.sprite.module && hover.sprite.module.mouseOver) {
           hover.sprite.module.mouseOver();
        }
    }
};

Mouse.prototype.click = function(pointer) {
   var point = new Phaser.Point(pointer.x + this.game.camera.x, pointer.y + this.game.camera.y);
   var bodies = this.game.physics.p2.hitTest(point);
   if (bodies.length)
   {
     var temp = bodies[0].parent;
     if (temp.sprite && temp.sprite.module && temp.sprite.module.type === 'core') {
        return;
     }
     if (temp.sprite && temp.sprite.group && temp.sprite.group !== this.playerGroup) {
        return;
     }
     this.removeTime = 0;
     this.grabbed = temp;
     // console.log(this.grabbed.sprite.name);
     if (this.grabbed.sprite.module && this.grabbed.sprite.module.hasOwnProperty('mouseDown')) {
        this.grabbed.sprite.module.mouseDown();
     }
     if (this.lastClicked && this.lastClicked.sprite && this.lastClicked.sprite.module &&
     this.lastClicked.sprite.module.giveTarget) {
        this.lastClicked.sprite.module.giveTarget(this.grabbed.sprite.module);
     }
     this.lastClicked = temp;
   }
};
  
 Mouse.prototype.release = function() {
   if (this.grabbed) {
     this.grabbed = undefined;
   }
};
  
Mouse.prototype.move = function(pointer) {
   // p2 uses different coordinate system, so convert the pointer position to p2's coordinate system
   this.body.position[0] = this.game.physics.p2.pxmi(pointer.position.x);
   this.body.position[1] = this.game.physics.p2.pxmi(pointer.position.y);
   this.x = pointer.position.x + this.game.camera.x;
   this.y = pointer.position.y + this.game.camera.y;
};

Mouse.prototype.render = function() {
   this.game.debug.geom(this.line);
};

module.exports = Mouse;















},{"../utils.js":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\utils.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\libs\\javascript-astar\\astar.js":[function(require,module,exports){
// javascript-astar 0.4.0
// http://github.com/bgrins/javascript-astar
// Freely distributable under the MIT License.
// Implements the astar search algorithm in javascript using a Binary Heap.
// Includes Binary Heap (with modifications) from Marijn Haverbeke.
// http://eloquentjavascript.net/appendix2.html

(function(definition) {
    /* global module, define */
    if(typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = definition();
    } else if(typeof define === 'function' && define.amd) {
        define([], definition);
    } else {
        var exports = definition();
        window.astar = exports.astar;
        window.Graph = exports.Graph;
    }
})(function() {

function pathTo(node){
    var curr = node,
        path = [];
    while(curr.parent) {
        path.push(curr);
        curr = curr.parent;
    }
    return path.reverse();
}

function getHeap() {
    return new BinaryHeap(function(node) {
        return node.f;
    });
}

var astar = {
    /**
    * Perform an A* Search on a graph given a start and end node.
    * @param {Graph} graph
    * @param {GridNode} start
    * @param {GridNode} end
    * @param {Object} [options]
    * @param {bool} [options.closest] Specifies whether to return the
               path to the closest node if the target is unreachable.
    * @param {Function} [options.heuristic] Heuristic function (see
    *          astar.heuristics).
    */
    search: function(graph, start, end, options) {
        graph.cleanDirty();
        options = options || {};
        var heuristic = options.heuristic || astar.heuristics.manhattan,
            closest = options.closest || false;

        var openHeap = getHeap(),
            closestNode = start; // set the start node to be the closest if required

        start.h = heuristic(start, end);

        openHeap.push(start);

        while(openHeap.size() > 0) {

            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.
            var currentNode = openHeap.pop();

            // End case -- result has been found, return the traced path.
            if(currentNode === end) {
                return pathTo(currentNode);
            }

            // Normal case -- move currentNode from open to closed, process each of its neighbors.
            currentNode.closed = true;

            // Find all neighbors for the current node.
            var neighbors = graph.neighbors(currentNode);

            for (var i = 0, il = neighbors.length; i < il; ++i) {
                var neighbor = neighbors[i];

                if (neighbor.closed || neighbor.isWall()) {
                    // Not a valid node to process, skip to next neighbor.
                    continue;
                }

                // The g score is the shortest distance from start to current node.
                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.
                var gScore = currentNode.g + neighbor.getCost(currentNode),
                    beenVisited = neighbor.visited;

                if (!beenVisited || gScore < neighbor.g) {

                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.
                    neighbor.visited = true;
                    neighbor.parent = currentNode;
                    neighbor.h = neighbor.h || heuristic(neighbor, end);
                    neighbor.g = gScore;
                    neighbor.f = neighbor.g + neighbor.h;
                    graph.markDirty(neighbor);
                    if (closest) {
                        // If the neighbour is closer than the current closestNode or if it's equally close but has
                        // a cheaper path than the current closest node then it becomes the closest node
                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {
                            closestNode = neighbor;
                        }
                    }

                    if (!beenVisited) {
                        // Pushing to heap will put it in proper place based on the 'f' value.
                        openHeap.push(neighbor);
                    }
                    else {
                        // Already seen the node, but since it has been rescored we need to reorder it in the heap
                        openHeap.rescoreElement(neighbor);
                    }
                }
            }
        }

        if (closest) {
            return pathTo(closestNode);
        }

        // No result was found - empty array signifies failure to find path.
        return [];
    },
    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html
    heuristics: {
        manhattan: function(pos0, pos1) {
            var d1 = Math.abs(pos1.x - pos0.x);
            var d2 = Math.abs(pos1.y - pos0.y);
            return d1 + d2;
        },
        diagonal: function(pos0, pos1) {
            var D = 1;
            var D2 = Math.sqrt(2);
            var d1 = Math.abs(pos1.x - pos0.x);
            var d2 = Math.abs(pos1.y - pos0.y);
            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));
        }
    },
    cleanNode:function(node){
        node.f = 0;
        node.g = 0;
        node.h = 0;
        node.visited = false;
        node.closed = false;
        node.parent = null;
    }
};

/**
* A graph memory structure
* @param {Array} gridIn 2D array of input weights
* @param {Object} [options]
* @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed
*/
function Graph(gridIn, options) {
    options = options || {};
    this.nodes = [];
    this.diagonal = !!options.diagonal;
    this.grid = [];
    for (var x = 0; x < gridIn.length; x++) {
        this.grid[x] = [];

        for (var y = 0, row = gridIn[x]; y < row.length; y++) {
            var node = new GridNode(x, y, row[y]);
            this.grid[x][y] = node;
            this.nodes.push(node);
        }
    }
    this.init();
}

Graph.prototype.init = function() {
    this.dirtyNodes = [];
    for (var i = 0; i < this.nodes.length; i++) {
        astar.cleanNode(this.nodes[i]);
    }
};

Graph.prototype.cleanDirty = function() {
    for (var i = 0; i < this.dirtyNodes.length; i++) {
        astar.cleanNode(this.dirtyNodes[i]);
    }
    this.dirtyNodes = [];
};

Graph.prototype.markDirty = function(node) {
    this.dirtyNodes.push(node);
};

Graph.prototype.neighbors = function(node) {
    var ret = [],
        x = node.x,
        y = node.y,
        grid = this.grid;

    // West
    if(grid[x-1] && grid[x-1][y]) {
        ret.push(grid[x-1][y]);
    }

    // East
    if(grid[x+1] && grid[x+1][y]) {
        ret.push(grid[x+1][y]);
    }

    // South
    if(grid[x] && grid[x][y-1]) {
        ret.push(grid[x][y-1]);
    }

    // North
    if(grid[x] && grid[x][y+1]) {
        ret.push(grid[x][y+1]);
    }

    if (this.diagonal) {
        // Southwest
        if(grid[x-1] && grid[x-1][y-1]) {
            ret.push(grid[x-1][y-1]);
        }

        // Southeast
        if(grid[x+1] && grid[x+1][y-1]) {
            ret.push(grid[x+1][y-1]);
        }

        // Northwest
        if(grid[x-1] && grid[x-1][y+1]) {
            ret.push(grid[x-1][y+1]);
        }

        // Northeast
        if(grid[x+1] && grid[x+1][y+1]) {
            ret.push(grid[x+1][y+1]);
        }
    }

    return ret;
};

Graph.prototype.toString = function() {
    var graphString = [],
        nodes = this.grid, // when using grid
        rowDebug, row, y, l;
    for (var x = 0, len = nodes.length; x < len; x++) {
        rowDebug = [];
        row = nodes[x];
        for (y = 0, l = row.length; y < l; y++) {
            rowDebug.push(row[y].weight);
        }
        graphString.push(rowDebug.join(' '));
    }
    return graphString.join('\n');
};

function GridNode(x, y, weight) {
    this.x = x;
    this.y = y;
    this.weight = weight;
}

GridNode.prototype.toString = function() {
    return '[' + this.x + ' ' + this.y + ']';
};

GridNode.prototype.getCost = function(fromNeighbor) {
    // Take diagonal weight into consideration.
    if (fromNeighbor && fromNeighbor.x !== this.x && fromNeighbor.y !== this.y) {
        return this.weight * 1.41421;
    }
    return this.weight;
};

GridNode.prototype.isWall = function() {
    return this.weight === 0;
};

function BinaryHeap(scoreFunction){
    this.content = [];
    this.scoreFunction = scoreFunction;
}

BinaryHeap.prototype = {
    push: function(element) {
        // Add the new element to the end of the array.
        this.content.push(element);

        // Allow it to sink down.
        this.sinkDown(this.content.length - 1);
    },
    pop: function() {
        // Store the first element so we can return it later.
        var result = this.content[0];
        // Get the element at the end of the array.
        var end = this.content.pop();
        // If there are any elements left, put the end element at the
        // start, and let it bubble up.
        if (this.content.length > 0) {
            this.content[0] = end;
            this.bubbleUp(0);
        }
        return result;
    },
    remove: function(node) {
        var i = this.content.indexOf(node);

        // When it is found, the process seen in 'pop' is repeated
        // to fill up the hole.
        var end = this.content.pop();

        if (i !== this.content.length - 1) {
            this.content[i] = end;

            if (this.scoreFunction(end) < this.scoreFunction(node)) {
                this.sinkDown(i);
            }
            else {
                this.bubbleUp(i);
            }
        }
    },
    size: function() {
        return this.content.length;
    },
    rescoreElement: function(node) {
        this.sinkDown(this.content.indexOf(node));
    },
    sinkDown: function(n) {
        // Fetch the element that has to be sunk.
        var element = this.content[n];

        // When at 0, an element can not sink any further.
        while (n > 0) {

            // Compute the parent element's index, and fetch it.
            var parentN = ((n + 1) >> 1) - 1, parent = this.content[parentN]; // jshint ignore:line
            // Swap the elements if the parent is greater.
            if (this.scoreFunction(element) < this.scoreFunction(parent)) {
                this.content[parentN] = element;
                this.content[n] = parent;
                // Update 'n' to continue at the new position.
                n = parentN;
            }
            // Found a parent that is less, no need to sink any further.
            else {
                break;
            }
        }
    },
    bubbleUp: function(n) {
        // Look up the target element and its score.
        var length = this.content.length,
            element = this.content[n],
            elemScore = this.scoreFunction(element);

        while(true) {
            // Compute the indices of the child elements.
            var child2N = (n + 1) << 1, child1N = child2N - 1; // jshint ignore:line
            // This is used to store the new position of the element, if any.
            var swap = null,
                child1Score;
            // If the first child exists (is inside the array)...
            if (child1N < length) {
                // Look it up and compute its score.
                var child1 = this.content[child1N];
                child1Score = this.scoreFunction(child1);

                // If the score is less than our element's, we need to swap.
                if (child1Score < elemScore){
                    swap = child1N;
                }
            }

            // Do the same checks for the other child.
            if (child2N < length) {
                var child2 = this.content[child2N],
                    child2Score = this.scoreFunction(child2);
                if (child2Score < (swap === null ? elemScore : child1Score)) {
                    swap = child2N;
                }
            }

            // If the element needs to be moved, swap it, and continue.
            if (swap !== null) {
                this.content[n] = this.content[swap];
                this.content[swap] = element;
                n = swap;
            }
            // Otherwise, we are done.
            else {
                break;
            }
        }
    }
};

return {
    astar: astar,
    Graph: Graph
};

});

},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\plugins\\Juicy.js":[function(require,module,exports){
'use strict';

/**
* @author       Jeremy Dowell <jeremy@codevinsky.com>
* @license      {@link http://www.wtfpl.net/txt/copying/|WTFPL}
*/

/**
* Creates a new `Juicy` object.
*
* @class Phaser.Plugin.Juicy
* @constructor
*
* @param {Phaser.Game} game Current game instance.
*/
Phaser.Plugin.Juicy = function (game) {

  Phaser.Plugin.call(this, game);

  /**
  * @property {Phaser.Rectangle} _boundsCache - A reference to the current world bounds.
  * @private
  */
  this._boundsCache = Phaser.Utils.extend(false, {}, this.game.world.bounds);

  /**
  * @property {number} _shakeWorldMax - The maximum world shake radius
  * @private
  */
  this._shakeWorldMax = 20;

  /**
  * @property {number} _shakeWorldTime - The maximum world shake time
  * @private
  */
  this._shakeWorldTime = 0;

  /**
  * @property {number} _trailCounter - A count of how many trails we're tracking
  * @private
  */  
  this._trailCounter = 0;

  /**
  * @property {object} _overScales - An object containing overscaling configurations
  * @private
  */  
  this._overScales = {};

  /**
  * @property {number} _overScalesCounter - A count of how many overScales we're tracking
  * @private
  */  
  this._overScalesCounter = 0;
};

if(typeof module === 'object' && module.exports) {
  module.exports = Phaser.Plugin.Juicy;
}

Phaser.Plugin.Juicy.prototype = Object.create(Phaser.Plugin.prototype);
Phaser.Plugin.Juicy.prototype.constructor = Phaser.Plugin.Juicy;

/**
* Creates a new `Juicy.ScreenFlash` object.
*
* @class Phaser.Plugin.Juicy.ScreenFlash
* @constructor
*
* @param {Phaser.Game} game -  Current game instance.
* @param {string} color='white' - The color to flash the screen.
* @memberof Phaser.Plugin.Juicy
*/
Phaser.Plugin.Juicy.ScreenFlash = function(game, color) {
  color = color || 'white';
  var bmd = game.add.bitmapData(game.width, game.height);
  bmd.ctx.fillStyle = color;
  bmd.ctx.fillRect(0,0, game.width, game.height);

  Phaser.Sprite.call(this, game, 0,0, bmd);
  this.alpha = 0;
};

Phaser.Plugin.Juicy.ScreenFlash.prototype = Object.create(Phaser.Sprite.prototype);
Phaser.Plugin.Juicy.ScreenFlash.prototype.constructor = Phaser.Plugin.Juicy.ScreenFlash;


/*
* Flashes the screen
*
* @param {number} [maxAlpha=1] - The maximum alpha to flash the screen to
* @param {number} [duration=100] - The duration of the flash in milliseconds
* @method Phaser.Plugin.Juicy.ScreenFlash.prototype.flash
* @memberof Phaser.Plugin.Juicy.ScreenFlash
*/
Phaser.Plugin.Juicy.ScreenFlash.prototype.flash = function(maxAlpha, duration) {
  maxAlpha = maxAlpha || 1;
  duration = duration || 100;
  var flashTween = this.game.add.tween(this).to({alpha: maxAlpha}, 100, Phaser.Easing.Bounce.InOut, true,0, 0, true);
  flashTween.onComplete.add(function() {
    this.alpha = 0;
  }, this);
};

/**
* Creates a new `Juicy.Trail` object.
*
* @class Phaser.Plugin.Juicy.Trail
* @constructor
*
* @param {Phaser.Game} game -  Current game instance.
* @param {number} [trailLength=100] - The length of the trail
* @param {number} [color=0xFFFFFF] - The color of the trail
* @memberof Phaser.Plugin.Juicy
*/
Phaser.Plugin.Juicy.Trail = function(game, trailLength, color) {
  Phaser.Graphics.call(this, game, 0,0);
  
  /**
  * @property {Phaser.Sprite} target - The target sprite whose movement we want to create the trail from
  */
  this.target = null;
  /**
  * @property {number} trailLength - The number of segments to use to create the trail
  */
  this.trailLength = trailLength || 100;
  /**
  * @property {number} trailWidth - The width of the trail
  */
  this.trailWidth = 15.0;

  /**
  * @property {boolean} trailScale - Whether or not to taper the trail towards the end
  */
  this.trailScaling = false;

  /**
  * @property {Phaser.Sprite} trailColor - The color of the trail
  */
  this.trailColor = color || 0xFFFFFF;
  
  /**
  * @property {Array<Phaser.Point>} _segments - A historical collection of the previous position of the target
  * @private
  */
  this._segments = [];
  /**
  * @property {Array<number>} _verts - A collection of vertices created from _segments
  * @private
  */
  this._verts = [];
  /**
  * @property {Array<Phaser.Point>} _segments - A collection of indices created from _verts
  * @private
  */
  this._indices = [];

};

Phaser.Plugin.Juicy.Trail.prototype = Object.create(Phaser.Graphics.prototype);
Phaser.Plugin.Juicy.Trail.prototype.constructor = Phaser.Plugin.Juicy.Trail;

/**
* Updates the Trail if a target is set
*
* @method Phaser.Plugin.Juicy.Trail#update
* @memberof Phaser.Plugin.Juicy.Trail
*/

Phaser.Plugin.Juicy.Trail.prototype.update = function() {
  if(this.target) {
    this.x = this.target.x;
    this.y = this.target.y;
    this.addSegment(this.target.x, this.target.y);
    this.redrawSegments(this.target.x, this.target.y);
  }
};

/**
* Adds a segment to the segments list and culls the list if it is too long
* 
* @param {number} [x] - The x position of the point
* @param {number} [y] - The y position of the point
* 
* @method Phaser.Plugin.Juicy.Trail#addSegment
* @memberof Phaser.Plugin.Juicy.Trail
*/
Phaser.Plugin.Juicy.Trail.prototype.addSegment = function(x, y) {
  var segment;

  while(this._segments.length > this.trailLength) {
    segment = this._segments.shift();
  }
  if(!segment) {
    segment = new Phaser.Point();
  }

  segment.x = x;
  segment.y = y;

  this._segments.push(segment);
};


/**
* Creates and draws the triangle trail from segments
* 
* @param {number} [offsetX] - The x position of the object
* @param {number} [offsetY] - The y position of the object
* 
* @method Phaser.Plugin.Juicy.Trail#redrawSegment
* @memberof Phaser.Plugin.Juicy.Trail
*/
Phaser.Plugin.Juicy.Trail.prototype.redrawSegments = function(offsetX, offsetY) {
  this.clear();
  var s1, // current segment
      s2, // previous segment
      vertIndex = 0, // keeps track of which vertex index we're at
      offset, // temporary storage for amount to extend line outwards, bigger = wider
      ang, //temporary storage of the inter-segment angles
      sin = 0, // as above
      cos = 0; // again as above

  // first we make sure that the vertice list is the same length as we we want
  // each segment (except the first) will create to vertices with two values each
  if (this._verts.length !== (this._segments.length -1) * 4) {
    // if it's not correct, we clear the entire list
    this._verts = [];
  }

  // now we loop over all the segments, the list has the "youngest" segment at the end
  var prevAng = 0; // jshint ignore:line
  
  for(var j = 0; j < this._segments.length; ++j) {
    // store the active segment for convenience
    s1 = this._segments[j];

    // if there's a previous segment, time to do some math
    if(s2) {
      // we calculate the angle between the two segments
      // the result will be in radians, so adding half of pi will "turn" the angle 90 degrees
      // that means we can use the sin and cos values to "expand" the line outwards
      ang = Math.atan2(s1.y - s2.y, s1.x - s2.x) + Math.PI / 2;
      sin = Math.sin(ang);
      cos = Math.cos(ang);

      // now it's time to creat ethe two vertices that will represent this pair of segments
      // using a loop here is probably a bit overkill since it's only two iterations
      for(var i = 0; i < 2; ++i) {
        // this makes the first segment stand out to the "left" of the line
        // annd the second to the right, changing that magic number at the end will alther the line width
        offset = ( -0.5 + i / 1) * this.trailWidth;

        // if trail scale effect is enabled, we scale down the offset as we move down the list
        if(this.trailScaling) {
          offset *= j / this._segments.length;
        }

        // finally we put to values in the vert list
        // using the segment coordinates as a base we add the "extended" point
        // offsetX and offsetY are used her to move the entire trail
        this._verts[vertIndex++] = s1.x + cos * offset - offsetX;
        this._verts[vertIndex++] = s1.y + sin * offset - offsetY;
      }
    }
    // finally store the current segment as the previous segment and go for another round
    s2 = s1.copyTo({});
  }
  // we need at least four vertices to draw something
  if(this._verts.length >= 8) {
    // now, we have a triangle "strip", but flash can't draw that without 
    // instructions for which vertices to connect, so it's time to make those
    
    // here, we loop over all the vertices and pair them together in triangles
    // each group of four vertices forms two triangles
    for(var k = 0; k < this._verts.length; k++) {
      this._indices[k * 6 + 0] = k * 2 + 0;
      this._indices[k * 6 + 1] = k * 2 + 1;
      this._indices[k * 6 + 2] = k * 2 + 2;
      this._indices[k * 6 + 3] = k * 2 + 1;
      this._indices[k * 6 + 4] = k * 2 + 2;
      this._indices[k * 6 + 5] = k * 2 + 3;
    }
    this.beginFill(this.trailColor);
    this.drawTriangles(this._verts, this._indices);
    this.endFill();
    
  }
};

Phaser.Plugin.Juicy.prototype.shake = function (duration, strength) {
  if (this.game.camera.target !== null) {
     this.cameraTarget = this.game.camera.target;
     this.game.camera.unfollow();
  }
  this._shakeWorldTime = duration || 20;
  this._shakeWorldMax = strength || 20;
};

Phaser.Plugin.Juicy.prototype.createScreenFlash = function(color) {
    return new Phaser.Plugin.Juicy.ScreenFlash(this.game, color);
};


Phaser.Plugin.Juicy.prototype.createTrail = function(length, color) {
  return new Phaser.Plugin.Juicy.Trail(this.game, length, color);
};

Phaser.Plugin.Juicy.prototype.overScale = function(object, scale, initialScale) {
  scale = scale || 1.5;
  var id = this._overScalesCounter++;
  initialScale = initialScale || new Phaser.Point(1,1);
  var scaleObj = this._overScales[id];
  if(!scaleObj) {
    scaleObj = {
      object: object,
      cache: initialScale.copyTo({})
    };
  } 
  scaleObj.scale = scale;
  
  this._overScales[id] = scaleObj;
};

Phaser.Plugin.Juicy.prototype.jelly = function(object, strength, delay, initialScale) {
  strength = strength || 0.2;
  delay = delay || 0;
  initialScale = initialScale ||  new Phaser.Point(1, 1);
  
  this.game.add.tween(object.scale).to({x: initialScale.x + (initialScale.x * strength)}, 50, Phaser.Easing.Quadratic.InOut, true, delay)
  .to({x: initialScale.x}, 600, Phaser.Easing.Elastic.Out, true);

  this.game.add.tween(object.scale).to({y: initialScale.y + (initialScale.y * strength)}, 50, Phaser.Easing.Quadratic.InOut, true, delay + 50)
  .to({y: initialScale.y}, 600, Phaser.Easing.Elastic.Out, true);
};

Phaser.Plugin.Juicy.prototype.mouseStretch = function(object, strength, initialScale) {
    strength = strength || 0.5;
    initialScale = initialScale || new Phaser.Point(1,1);
    object.scale.x = initialScale.x + (Math.abs(object.x - this.game.input.activePointer.x) / 100) * strength;
    object.scale.y = initialScale.y + (initialScale.y * strength) - (object.scale.x * strength);
};

Phaser.Plugin.Juicy.prototype.update = function () {
  var scaleObj;
  // Screen Shake
  if(this._shakeWorldTime > 0) { 
    var magnitude = (this._shakeWorldTime / this._shakeWorldMax) * this._shakeWorldMax;
    var x = this.game.rnd.integerInRange(-magnitude, magnitude) + this.cameraTarget.x - this.game.camera.width / 2;
    var y = this.game.rnd.integerInRange(-magnitude, magnitude) + this.cameraTarget.y - this.game.camera.height / 2;

    this.game.camera.x = x;
    this.game.camera.y = y;
    this._shakeWorldTime--;
    if(this._shakeWorldTime <= 0) {
       this.game.camera.follow(this.cameraTarget);
    }
  }

  // over scales
  for(var s in this._overScales) {
    if(this._overScales.hasOwnProperty(s)) {
      scaleObj = this._overScales[s];
      if(scaleObj.scale > 0.01) {
        scaleObj.object.scale.x = scaleObj.scale * scaleObj.cache.x;
        scaleObj.object.scale.y = scaleObj.scale * scaleObj.cache.y;
        scaleObj.scale -= this.game.time.elapsed * scaleObj.scale * 0.35;
      } else {
        scaleObj.object.scale.x = scaleObj.cache.x;
        scaleObj.object.scale.y = scaleObj.cache.y;
        delete this._overScales[s];
      }
    }
  }
};

// Draw Triangles Polyfill for back compatibility
if(!Phaser.Graphics.prototype.drawTriangle) {
  Phaser.Graphics.prototype.drawTriangle = function(points, cull) {
      var triangle = new Phaser.Polygon(points);
      if (cull) {
          var cameraToFace = new Phaser.Point(this.game.camera.x - points[0].x, this.game.camera.y - points[0].y);
          var ab = new Phaser.Point(points[1].x - points[0].x, points[1].y - points[0].y);
          var cb = new Phaser.Point(points[1].x - points[2].x, points[1].y - points[2].y);
          var faceNormal = cb.cross(ab);
          if (cameraToFace.dot(faceNormal) > 0) {
              this.drawPolygon(triangle);
          }
      } else {
          this.drawPolygon(triangle);
      }
      return;
  };
}
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    /*
    if (this.game.device.desktop) {
      //this.game.stage.scale.pageAlignHorizontally = true;
      this.game.scale.scaleMode = Phaser.ScaleManager.RESIZE;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }
    */
    var width = 800;
    var height = 800;
    this.game.width = width;
    this.game.height = height;
    // this.game.stage.bounds.width = width;
    // this.game.stage.bounds.height = height;
    // this.game.renderer.resize(width, height);

    this.game.state.start('Preloader');
  }
};

},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\game.js":[function(require,module,exports){
/*
Main testing environment.
*/

var ModuleBuilder = require('../entities/ModuleBuilder');
var CubeGroup = require('../entities/cube_group');
var Mouse = require('../entities/mouse');
var Juicy = require('../plugins/Juicy'); // jshint ignore:line

var bg, bg2;
var numRoids = 0;
var maxRoids = 50;
var asteroids, asteroidList;
var leftKey, rightKey, cwKey, ccwKey;
var asteroidCG, cubeCG;

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {
	
  create: function () {
	this.game.world.setBounds(0, 0, 8000, 4000);
	
	//Create the two background images
    bg = this.game.add.sprite(0, 0, 'earthNight');
	bg2 = this.game.add.sprite(-8000, 0, 'earthNight');
	
	this.game.physics.startSystem(Phaser.Physics.P2JS);
   this.game.physics.p2.setImpactEvents(true);
<<<<<<< HEAD
=======
    
	cubeCG = this.game.physics.p2.createCollisionGroup();
	asteroidCG = this.game.physics.p2.createCollisionGroup();
	
   this.mouse = new Mouse(this.game, this.input);
>>>>>>> origin/gh-pages
   
   this.updateDependents = [];
   
	//create ModuleBuilder and store it in this game state object
	this.moduleBuilder = new ModuleBuilder(this);
	//create and store the core module
	this.coreModule = this.moduleBuilder.build('core', 1500, 1500, true);
	this.cubeWidth = this.coreModule.cube.width;
	this.coreModule.cube.body.setCollisionGroup(cubeCG);
	this.coreModule.cube.body.collides([cubeCG, asteroidCG]);
	this.cubeBuffer = 2;
	var playerGroup = new CubeGroup(this, this.coreModule.cube);
	this.updateDependents.push(playerGroup);
	this.player = playerGroup;
<<<<<<< HEAD
   this.player.isPlayer = true;
   
   this.mouse = new Mouse(this.game, this.input, playerGroup);
=======
	this.player.isPlayer = true;
>>>>>>> origin/gh-pages
	
	this.spaceKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
	this.game.input.keyboard.addKeyCapture([this.spaceKey]);
	
	asteroids = this.game.add.group();
	asteroids.enableBody = true;
	asteroids.physicsBodyType = Phaser.Physics.P2JS;
	asteroidList = new Phaser.ArraySet();
	this.generateAsteroids();
	
	leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.A);
	rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.D);
	ccwKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Q);
	cwKey = this.game.input.keyboard.addKey(Phaser.Keyboard.E);
	
	//DEBUGGING LISTENERS- allow you to create modules by pressing keys
	//core
	this.placeCoreKey = this.game.input.keyboard.addKey(Phaser.Keyboard.P);
	this.placeCoreKey.onDown.add(this.addCore, this);
	//shield
	this.placeShieldKey = this.game.input.keyboard.addKey(Phaser.Keyboard.O);
    this.placeShieldKey.onDown.add(this.addShield, this);
	//thruster
	this.placeThrusterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.I);
    this.placeThrusterKey.onDown.add(this.addThruster, this);
	//solarPanel
	this.placeSPKey = this.game.input.keyboard.addKey(Phaser.Keyboard.U);
    this.placeSPKey.onDown.add(this.addSP, this);
	//gun
	this.placeGunKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Y);
    this.placeGunKey.onDown.add(this.addGun, this);
	//END
    
    // Debug controller
    this.debugKey = this.game.input.keyboard.addKey(Phaser.Keyboard.H);
    this.debugKey.onDown.add(this.debug, this);
    this.rootSpawned = false;
    
    this.debugNum = 0;
    this.myRoot = undefined;

	 this.game.camera.setPosition(1000, 1000);
    
    this.levelData = JSON.parse(this.game.cache.getText('level_one'));
    this.loadData();
    
    this.juicy = this.game.plugins.add(new Phaser.Plugin.Juicy(this));
    this.game.camera.follow(this.coreModule.cube);
  },
  
  loadData: function() {
      var myLevel = this.levelData['level_one'];
      for (var key in myLevel) {
         if (myLevel.hasOwnProperty(key)) {
            var element = myLevel[key];
            if (element.hasOwnProperty('blueprint')) { // enemy type
               var enemyX = element['x_pos'];
               var enemyY = element['y_pos'];
               var enemyGroup = new CubeGroup(this, undefined);
               this.updateDependents.push(enemyGroup);
               var blueprint = element['blueprint'];
               // var practical = [];
               for (var row = 0; row < blueprint.length; row++) {
                  // var newCol = [];
                  for (var col = 0; col < blueprint[row].length; col++) {
                     var type = blueprint[row][col];
                     var newModule = this.moduleBuilder.build(type, enemyX + row * (this.cubeWidth + this.cubeBuffer),
                     enemyY - col * (this.cubeWidth + this.cubeBuffer), false);
					 newModule.cube.body.setCollisionGroup(cubeCG);
					 newModule.cube.body.collides([cubeCG, asteroidCG]);
                     // newCol.push(newModule.cube);
                     var point = new Phaser.Point(row, col);
                     enemyGroup.add(newModule.cube, point);
                  }
                  // practical.push(newCol);
               }
               // TODO: give different types here
               enemyGroup.giveAI('ram', this.player);
            }
         }
      }
  },

  update: function () {    
	if(leftKey.isDown) {
		if(this.coreModule.cube.body.angularVelocity > -9) { 
			this.coreModule.cube.body.angularForce += -5 * Math.pow(this.player.numCubes, 1.65);
		}
	}
	
	if(rightKey.isDown) {
		if(this.coreModule.cube.body.angularVelocity < 9) {
			this.coreModule.cube.body.angularForce += 5 * Math.pow(this.player.numCubes, 1.65);
		}
	}
	
	if(ccwKey.isDown) {
		if(this.mouse.grabbed !== undefined && this.mouse.grabbed.sprite.group === undefined) {
			this.mouse.grabbed.angularForce += -5;
		}
	}
	
	if(cwKey.isDown) {
		if(this.mouse.grabbed !== undefined && this.mouse.grabbed.sprite.group === undefined) {
			this.mouse.grabbed.angularForce += 5;
		}
	}
	
	this.mouse.update();
	this.scrollBG();
   
	for (var i = 0; i < this.updateDependents.length; i++) {
		if (this.updateDependents[i].update) {
			this.updateDependents[i].update();
		}
	}
  },
  
  render: function () {
	this.mouse.render();
  },
  
	scrollBG: function() {
		bg.x += 0.125;
		if(bg.x >= 8000) {
			bg.x += 0;
		}
		bg2.x += 0.125;
		if(bg2.x >= 8000) {
			bg2.x = 0;
		}
	},
	
	generateAsteroids: function() {
		for(;numRoids < maxRoids; numRoids++) {
			var coinA = this.game.rnd.integerInRange(0,1);
			var coinB = this.game.rnd.integerInRange(0,1);
			var asteroid;
			if(coinA === 1) {
				if(coinB === 1) { //Spawn asteroid above screen
					asteroid = asteroids.create(this.coreModule.cube.x + this.game.rnd.integerInRange(-this.game.camera.width/2, this.game.camera.width/2), this.coreModule.cube.y - this.game.camera.height/2 - this.game.rnd.integerInRange(32, 300), 'asteroid');
				}
				else { //Spawn asteroid below screen
					asteroid = asteroids.create(this.coreModule.cube.x + this.game.rnd.integerInRange(-this.game.camera.width/2, this.game.camera.width/2), this.coreModule.cube.y + this.game.camera.height/2 + this.game.rnd.integerInRange(32, 300), 'asteroid');
				}
			}
			else {
				if(coinB === 1) { //Spawn asteroid to left of screen
					asteroid = asteroids.create(this.coreModule.cube.x - this.game.camera.width/2 - this.game.rnd.integerInRange(32, 300), this.coreModule.cube.y + this.game.rnd.integerInRange(-this.game.camera.height/2, this.game.camera.height/2), 'asteroid');
				}
				else { //Spawn asteroid to right
					asteroid = asteroids.create(this.coreModule.cube.x + this.game.camera.width/2 + this.game.rnd.integerInRange(32, 300), this.coreModule.cube.y + this.game.rnd.integerInRange(-this.game.camera.height/2, this.game.camera.height/2), 'asteroid');
				}
			}
			
			asteroid.body.setCircle(16); //Change the collision detection from an AABB to a circle
			asteroid.body.angularDamping = 0;
			asteroid.body.damping = 0;
			asteroid.body.rotation = this.game.rnd.realInRange(0, 2 * 3.14);
			asteroid.body.force.x = this.game.rnd.integerInRange(-10, 10) * 750;
			asteroid.body.force.y = this.game.rnd.integerInRange(-10, 10) * 750;
			asteroid.body.setCollisionGroup(asteroidCG);
			asteroid.body.collides([asteroidCG, cubeCG]);
			asteroid.body.collideWorldBounds = false;
			asteroid.autoCull = true;
			asteroid.checkWorldBounds = true;
			asteroid.events.onOutOfBounds.add(this.resetAsteroid, asteroid);
			asteroidList.add(asteroid);
		}
	},
	
	resetAsteroid: function() { //Needs to be updated once collision groups are working
		//this.obj.x = 10;
		//this.obj.y = 10;
	},
	
  //DEBUG FUNCTIONS- event functions called from listeners that allow you to create modules with key presses
  addCore: function () { 
	//Attempts to create more core modules here will only return the existing core
	var newModule = this.moduleBuilder.build('core', this.mouse.x, this.mouse.y, true);
	newModule.cube.body.setCollisionGroup(cubeCG);
	newModule.cube.body.collides([cubeCG, asteroidCG]);
  },
  addShield: function () {
	var newModule = this.moduleBuilder.build('shield', this.mouse.x, this.mouse.y, true);
	newModule.cube.body.setCollisionGroup(cubeCG);
	newModule.cube.body.collides([cubeCG, asteroidCG]);
  },
  addThruster: function () {
	var newModule = this.moduleBuilder.build('thruster', this.mouse.x, this.mouse.y, true);
	newModule.cube.body.setCollisionGroup(cubeCG);
	newModule.cube.body.collides([cubeCG, asteroidCG]);
  },
  addSP: function () {
	var newModule = this.moduleBuilder.build('solarPanel', this.mouse.x, this.mouse.y, true);
	newModule.cube.body.setCollisionGroup(cubeCG);
	newModule.cube.body.collides([cubeCG, asteroidCG]);
  },
  addGun: function () {
	var newModule = this.moduleBuilder.build('gun', this.mouse.x, this.mouse.y, true);
	newModule.cube.body.setCollisionGroup(cubeCG);
	newModule.cube.body.collides([cubeCG, asteroidCG]);
  },

  debug: function () {
    this.juicy.shake();
  }
};




























},{"../entities/ModuleBuilder":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js","../entities/cube_group":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js","../entities/mouse":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\entities\\mouse.js","../plugins/Juicy":"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\plugins\\Juicy.js"}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: '65px Arial', fill: '#ffffff', align: 'center' };
    this.title = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 250, 'Above The Iron Curtain', style);
    this.newGame = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 150, 'New Simulation', style);
    this.level = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 50, 'Mission Select', style);
    this.controls = this.game.add.text(this.game.world.centerX, this.game.world.centerY + 50, 'Manual', style);
    this.credits = this.game.add.text(this.game.world.centerX, this.game.world.centerY + 150, 'Credits', style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel); // jshint ignore:line
  }
};

},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  game = null;
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(640, 360, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test2.png');
	this.load.spritesheet('core', 'assets/coreSheet.png', 64, 64); 
	this.load.spritesheet('thruster', 'assets/thrusterSheet.png', 64, 64);
	this.load.spritesheet('gun', 'assets/gunSheet.png', 64, 64);
	this.load.image('shield', 'assets/shield.png');
	this.load.image('solarPanel', 'assets/solarPanel.png');
	this.load.image('asteroid', 'assets/asteroid.png');
   this.load.atlasJSONHash('connections', 'assets/connections.png', 'assets/connections.json');
	this.load.image('earthNight', 'assets/bg_earthNightSmall.jpg');
    this.load.physics('module_physics', 'assets/module_physics.json');
   this.load.text('level_one', 'assets/level_one.json');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      //this.game.state.start('Menu');
      this.game.state.start(playerState.currentLevel); // jshint ignore:line
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"c:\\Users\\CannpinCarl\\Documents\\CMPM20\\Above the Iron Curtain\\AboveTheIronCurtain\\src\\js\\utils.js":[function(require,module,exports){
/*
Collection of utility functions.
*/

var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
    distance: function(x1, y1, x2, y2) {
       return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlc1xcYnJvd3NlcmlmeVxcbm9kZV9tb2R1bGVzXFxicm93c2VyLXBhY2tcXF9wcmVsdWRlLmpzIiwic3JjL2pzL21haW4uanMiLCJzcmMvanMvZW50aXRpZXMvTW9kdWxlLmpzIiwic3JjL2pzL2VudGl0aWVzL01vZHVsZUJ1aWxkZXIuanMiLCJzcmMvanMvZW50aXRpZXMvY3ViZS5qcyIsInNyYy9qcy9lbnRpdGllcy9jdWJlX2dyb3VwLmpzIiwic3JjL2pzL2VudGl0aWVzL2VuZW15X2FpLmpzIiwic3JjL2pzL2VudGl0aWVzL21vdXNlLmpzIiwic3JjL2pzL2xpYnMvamF2YXNjcmlwdC1hc3Rhci9hc3Rhci5qcyIsInNyYy9qcy9wbHVnaW5zL0p1aWN5LmpzIiwic3JjL2pzL3N0YXRlcy9ib290LmpzIiwic3JjL2pzL3N0YXRlcy9nYW1lLmpzIiwic3JjL2pzL3N0YXRlcy9tZW51LmpzIiwic3JjL2pzL3N0YXRlcy9wcmVsb2FkZXIuanMiLCJzcmMvanMvc3RhdGVzL3NwbGFzaC5qcyIsInNyYy9qcy91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbGpCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6WUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdFFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSgxMjgwLCA3MjAsIFBoYXNlci5BVVRPLCAnYXRpYy1nYW1lJyk7XHJcblxyXG53aW5kb3cucGxheWVyU3RhdGUgPSB7XHJcbiAgICBjdXJyZW50TGV2ZWw6ICdHYW1lJ1xyXG59O1xyXG5cclxuZ2FtZS5zdGF0ZS5hZGQoJ0Jvb3QnLCByZXF1aXJlKCcuL3N0YXRlcy9ib290JykpO1xyXG5nYW1lLnN0YXRlLmFkZCgnU3BsYXNoJywgcmVxdWlyZSgnLi9zdGF0ZXMvc3BsYXNoJykpO1xyXG5nYW1lLnN0YXRlLmFkZCgnUHJlbG9hZGVyJywgcmVxdWlyZSgnLi9zdGF0ZXMvcHJlbG9hZGVyJykpO1xyXG5nYW1lLnN0YXRlLmFkZCgnTWVudScsIHJlcXVpcmUoJy4vc3RhdGVzL21lbnUnKSk7XHJcbmdhbWUuc3RhdGUuYWRkKCdHYW1lJywgcmVxdWlyZSgnLi9zdGF0ZXMvZ2FtZScpKTtcclxuXHJcbmdhbWUuc3RhdGUuc3RhcnQoJ0Jvb3QnKTsiLCIvL0Rvbid0IHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGNyZWF0ZSBtb2R1bGVzLCBpbnN0ZWFkIHVzZSBtb2R1bGVCdWlsZGVyKClcclxudmFyIE1vZHVsZSA9IGZ1bmN0aW9uKHNldEN1YmUsIHR5cGUpIHtcclxuICAgdGhpcy5jdWJlID0gc2V0Q3ViZTtcclxuICAgdGhpcy5jdWJlLm1vZHVsZSA9IHRoaXM7XHJcbiAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbn07XHJcblxyXG5Nb2R1bGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTW9kdWxlO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNb2R1bGU7IiwidmFyIEN1YmUgPSByZXF1aXJlKCcuL2N1YmUnKTtcclxudmFyIE1vZHVsZSA9IHJlcXVpcmUoJy4vTW9kdWxlJyk7XHJcblxyXG52YXIgdGhydXN0QW10ID0gNTAwMDtcclxuXHJcbi8vVXNlIHRoaXMgdG8gY3JlYXRlIGEgbW9kdWxlQnVpbGRlci0gb25seSBuZWVkIHRvIGNyZWF0ZSBvbmUgaW5zdGFuY2Ugb2YgaXRcclxudmFyIE1vZHVsZUJ1aWxkZXIgPSBmdW5jdGlvbihzZXRHYW1lU3RhdGUsIHNldENvbEdyb3VwKSB7XHJcblx0Ly9FbnN1cmUgdGhhdCBjYW5ub3QgY3JlYXRlIG11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGlzIGNsYXNzXHJcblx0aWYoTW9kdWxlQnVpbGRlci5wcm90b3R5cGUuZXhpc3RzKSB7XHJcblx0XHRyZXR1cm4gTW9kdWxlQnVpbGRlci5wcm90b3R5cGUuZXhpc3RpbmdSZWZlcmVuY2U7XHJcblx0fVxyXG5cdFx0XHJcblx0dGhpcy5nYW1lU3RhdGUgPSBzZXRHYW1lU3RhdGU7XHJcbiAgIHRoaXMuY29sR3JvdXAgPSBzZXRDb2xHcm91cDtcclxuXHQvLyB0aGlzLmNvcmVFeGlzdHMgPSBmYWxzZTtcdC8vcmVjb3JkcyBpZiBjb3JlIGhhcyBiZWVuIGNyZWF0ZWRcclxuXHR0aGlzLmNvcmUgPSBudWxsO1x0XHRcdC8vc3RvcmVzIGNvcmUgd2hlbiBpdCBpcyBjcmVhdGVkXHJcblx0Ly92YXIgc3BhY2UgPSB0aGlzLmdhbWVTdGF0ZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlNQQUNFQkFSKTtcclxuXHRNb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5leGlzdHMgPSB0cnVlO1xyXG5cdE1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlID0gdGhpcztcclxufTtcclxuXHJcbk1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTW9kdWxlQnVpbGRlcjtcclxuXHJcbi8vVGhlc2UgdmFyJ3MgaGVscCBjcmVhdGUgdGhlIHNpbmdsZXRvbiBmdW5jdGlvbmFsaXR5XHJcbk1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0cyA9IGZhbHNlO1xyXG5Nb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5leGlzdGluZ1JlZmVyZW5jZSA9IG51bGw7XHJcblxyXG4vKiogTW9kdWxlIGZ1bmN0aW9ucyAqKi9cclxuZnVuY3Rpb24gc29sYXJQYW5lbEdpdmVUYXJnZXQodGFyZ2V0KSB7XHJcbiAgIGlmICh0aGlzLmN1YmUuZ3JvdXAgJiYgdGFyZ2V0LmN1YmUuZ3JvdXAgJiYgdGhpcy5jdWJlLmdyb3VwICE9PSB0YXJnZXQuY3ViZS5ncm91cCB8fCB0aGlzID09PSB0YXJnZXQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIHZhciBvdXJHcm91cCA9IHRoaXMuY3ViZS5ncm91cDtcclxuICAgdmFyIG5ld0Nvbm5lY3Rpb24gPSB7c3RhcnQ6IHRoaXMuY3ViZSwgZW5kOiB0YXJnZXQuY3ViZX07XHJcbiAgIHRoaXMuY3ViZS5teUNvbm5lY3Rpb24gPSBuZXdDb25uZWN0aW9uO1xyXG4gICB0YXJnZXQuY3ViZS5teUNvbm5lY3Rpb24gPSBuZXdDb25uZWN0aW9uO1xyXG4gICBvdXJHcm91cC5kaXNwbGF5Q29ubmVjdGlvbih0aGlzLmN1YmUubXlDb25uZWN0aW9uKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc29sYXJQYW5lbE1vdXNlT3ZlcigpIHtcclxuICAgaWYgKCF0aGlzLmN1YmUubXlDb25uZWN0aW9uIHx8ICF0aGlzLmN1YmUuZ3JvdXApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIHRoaXMuY3ViZS5ncm91cC5kaXNwbGF5Q29ubmVjdGlvbih0aGlzLmN1YmUubXlDb25uZWN0aW9uKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc29sYXJQYW5lbE9uUmVtb3ZlKCkge1xyXG4gICBpZiAoIXRoaXMuY3ViZS5teUNvbm5lY3Rpb24gfHwgIXRoaXMuY3ViZS5teUNvbm5lY3Rpb24uZW5kKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdzb2xhclBhbmVsT25SZW1vdmUoKSBoYWQgYW4gZXJyb3InKTtcclxuICAgfVxyXG4gICB0aGlzLmN1YmUubXlDb25uZWN0aW9uLmVuZC5teUNvbm5lY3Rpb24gPSB1bmRlZmluZWQ7XHJcbiAgIHRoaXMuY3ViZS5teUNvbm5lY3Rpb24gPSB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJlZ2luVGhydXN0KCkge1xyXG4gICB0aGlzLnRocnVzdCA9IHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuZFRocnVzdCgpIHtcclxuICAgdGhpcy50aHJ1c3QgPSBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gdGhydXN0ZXJVcGRhdGUoKSB7XHJcbiAgIC8vIGNvbnNvbGUubG9nKHRoaXMudGhydXN0KTtcclxuICAgaWYgKHRoaXMudGhydXN0ICYmIHRoaXMuY3ViZS5teUNvbm5lY3Rpb24pIHtcclxuICAgICAgdGhpcy5jdWJlLmJvZHkuZm9yY2UueCA9IHRocnVzdEFtdCAqIE1hdGguY29zKHRoaXMuY3ViZS5yb3RhdGlvbiAtIE1hdGguUEkgLyAyKTtcclxuICAgICAgdGhpcy5jdWJlLmJvZHkuZm9yY2UueSA9IHRocnVzdEFtdCAqIE1hdGguc2luKHRoaXMuY3ViZS5yb3RhdGlvbiAtIE1hdGguUEkgLyAyKTtcclxuICAgfVxyXG59XHJcblxyXG4vKiogRW5kIG1vZHVsZSBmdW5jdGlvbnMgKiovXHJcblxyXG4vL2NhbGwgdGhpcyBmdW5jdGlvbiBmcm9tIE1vZHVsZUJ1aWxkZXIgdG8gY29uc3RydWN0IG1vZHVsZXNcclxuLy9UWVBFUzogJ2NvcmUnICdzaGllbGQnICd0aHJ1c3RlcicgJ3NvbGFyUGFubmVsJ1xyXG5Nb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uKHR5cGUsIHgsIHksIGZvclBsYXllcikge1xyXG5cdC8vQ3JlYXRlIGN1YmUgb2JqZWN0IHRvIGJlIHN0b3JlZCB3aXRoaW4gbW9kdWxlXHJcblx0Ly9TcHJpdGUgbmFtZXMgZm9yIG1vZHVsZXMgYXJlIGRpcmVjdGx5IG1hcHBlZCB0byBtb2R1bGUgbmFtZXMsIHNvIGp1c3QgcGFzcyAndHlwZScgYXMgc3ByaXRlIG5hbWVcclxuXHR2YXIgbmV3Q3ViZSA9IG5ldyBDdWJlKHRoaXMuZ2FtZVN0YXRlLmdhbWUsIHgsIHksIHR5cGUpO1xyXG4gICAgdmFyIHNjYWxlID0gMC41O1xyXG4gICAgbmV3Q3ViZS5uYW1lID0gdGhpcy5nYW1lU3RhdGUuZGVidWdOdW0rKztcclxuICAgIG5ld0N1YmUuc2NhbGUuc2V0VG8oc2NhbGUsIHNjYWxlKTtcclxuICAgIG5ld0N1YmUuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuICAgIHRoaXMuZ2FtZVN0YXRlLmdhbWUucGh5c2ljcy5wMi5lbmFibGUobmV3Q3ViZSk7XHJcbiAgICBuZXdDdWJlLmJvZHkub25CZWdpbkNvbnRhY3QuYWRkKG5ld0N1YmUuY3ViZUNvbGxpZGUsIG5ld0N1YmUpO1xyXG4gICAgbmV3Q3ViZS5ib2R5LmRhbXBpbmcgPSAwLjk7XHJcbiAgICBuZXdDdWJlLmJvZHkuYW5ndWxhckRhbXBpbmcgPSAwLjk7XHJcbiAgICBpZiAoIXRoaXMuZ2FtZVN0YXRlLnJvb3RTcGF3bmVkKSB7XHJcbiAgICAgICBuZXdDdWJlLnJvb3QgPSB0cnVlO1xyXG4gICAgICAgdGhpcy5nYW1lU3RhdGUucm9vdFNwYXduZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgdmFyIGNJbmRpY2F0b3IgPSB0aGlzLmdhbWVTdGF0ZS5hZGQuc3ByaXRlKDAsIDAsICdjb25uZWN0aW9ucycsICdjb25uZWN0aW9uX2xpbmUucG5nJyk7XHJcbiAgIGNJbmRpY2F0b3IuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuICAgY0luZGljYXRvci5hbmltYXRpb25zLmFkZCgnZW5kJywgWydjb25uZWN0aW9uX2VuZC5wbmcnXSwgNjAsIHRydWUpO1xyXG4gICBjSW5kaWNhdG9yLmFuaW1hdGlvbnMuYWRkKCdsaW5lJywgWydjb25uZWN0aW9uX2xpbmUucG5nJ10sIDYwLCB0cnVlKTtcclxuICAgY0luZGljYXRvci5hbmltYXRpb25zLmFkZCgncmlnaHQnLCBbJ2Nvbm5lY3Rpb25fcmlnaHQucG5nJ10sIDYwLCB0cnVlKTtcclxuICAgbmV3Q3ViZS5hZGRDaGlsZChjSW5kaWNhdG9yKTtcclxuICAgbmV3Q3ViZS5jSW5kaWNhdG9yID0gY0luZGljYXRvcjtcclxuICAgY0luZGljYXRvci5hbHBoYSA9IDA7XHJcblx0XHJcblx0Ly9DcmVhdGUgbW9kdWxlIHRvIHdyYXAgYXJvdW5kIGN1YmUgY2xhc3NcclxuXHR2YXIgbmV3TW9kdWxlID0gbmV3IE1vZHVsZShuZXdDdWJlLCB0eXBlKTtcclxuXHRcdFxyXG5cdC8vVE9ETzogZWRpdCBzcGVjaWFsIG1vZHVsZSBhdHRyaWJ1dGVzIGJhc2VkIG9uICd0eXBlJ3pcclxuXHRcclxuXHQvL1N0b3JlIG1vZHVsZSBpZiBpdCBpcyBjb3JlXHJcblx0aWYodHlwZSA9PT0gJ2NvcmUnKVxyXG5cdHtcclxuXHRcdHRoaXMuY29yZSA9IG5ld01vZHVsZTtcclxuXHRcdHRoaXMuY29yZUV4aXN0cyA9IHRydWU7XHJcblx0fVxyXG4gICAvLyBzb2xhciBwYW5lbCB0ZXN0aW5nXHJcbiAgIGlmICh0eXBlID09PSAnc29sYXJQYW5lbCcpIHtcclxuICAgICAgbmV3TW9kdWxlLmdpdmVUYXJnZXQgPSBzb2xhclBhbmVsR2l2ZVRhcmdldDtcclxuICAgICAgbmV3TW9kdWxlLm1vdXNlT3ZlciA9IHNvbGFyUGFuZWxNb3VzZU92ZXI7XHJcbiAgICAgIG5ld01vZHVsZS5vblJlbW92ZSA9IHNvbGFyUGFuZWxPblJlbW92ZTtcclxuICAgfVxyXG4gICBcclxuICAgLy9UaHJ1c3RlciBtb2R1bGUgZXZlbnRzXHJcblx0aWYodHlwZSA9PT0gJ3RocnVzdGVyJykge1xyXG4gICAgICBpZiAoZm9yUGxheWVyKSB7XHJcbiAgICAgICAgIHZhciBzcGFjZSA9IHRoaXMuZ2FtZVN0YXRlLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuU1BBQ0VCQVIpOyBcclxuICAgICAgICAgdGhpcy5nYW1lU3RhdGUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5Q2FwdHVyZShbc3BhY2VdKTtcclxuICAgICAgICAgLy8gc3BhY2Uub25Eb3duLmFkZChhcHBseVRocnVzdCwgbmV3TW9kdWxlKTtcclxuICAgICAgICAgc3BhY2Uub25Eb3duLmFkZChiZWdpblRocnVzdCwgbmV3TW9kdWxlKTtcclxuICAgICAgICAgc3BhY2Uub25VcC5hZGQoZW5kVGhydXN0LCBuZXdNb2R1bGUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAvLyBuZXdNb2R1bGUudGhydXN0ID0gZmFsc2U7XHJcbiAgICAgICAgIG5ld01vZHVsZS5iZWdpblRocnVzdCA9IGJlZ2luVGhydXN0O1xyXG4gICAgICAgICBuZXdNb2R1bGUuZW5kVGhydXN0ID0gZW5kVGhydXN0O1xyXG4gICAgICB9XHJcbiAgICAgIG5ld01vZHVsZS51cGRhdGUgPSB0aHJ1c3RlclVwZGF0ZTtcclxuXHR9XHJcblx0Ly9SZXR1cm4gdGhlIG1vZHVsZSBvYmplY3RcclxuXHRyZXR1cm4gbmV3TW9kdWxlO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNb2R1bGVCdWlsZGVyO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCIvKlxyXG5EZWZpbmVzIGEgY3ViZS5cclxuKi9cclxuXHJcbnZhciBDdWJlID0gZnVuY3Rpb24gKGdhbWUsIHgsIHksIHNwcml0ZSkge1xyXG4gICAgUGhhc2VyLlNwcml0ZS5jYWxsKHRoaXMsIGdhbWUsIHgsIHksIHNwcml0ZSk7XHJcbiAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgdGhpcy5nYW1lLmFkZC5leGlzdGluZyh0aGlzKTtcclxuICAgIHRoaXMuZ3JvdXAgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLm1vZHVsZSA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMuaW5kaWNhdG9yRmFkZSA9IDAuMDI7XHJcbiAgICB0aGlzLmhlYWx0aCA9IDM7XHJcbiAgICB0aGlzLmNvbnN0cmFpbnRzID0gW107XHJcbiAgIC8vIHRoaXMucmFtQ29vbGRvd24gPSA1MDA7XHJcbiAgIC8vIHRoaXMucmFtRGVsYXkgPSAwO1xyXG59O1xyXG5cclxuQ3ViZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBoYXNlci5TcHJpdGUucHJvdG90eXBlKTtcclxuQ3ViZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJlO1xyXG5cclxuLyoqXHJcbiAqIEF1dG9tYXRpY2FsbHkgY2FsbGVkIGJ5IFdvcmxkLnVwZGF0ZVxyXG4gKi9cclxuQ3ViZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIGlmICh0aGlzLmNJbmRpY2F0b3IgJiYgdGhpcy5jSW5kaWNhdG9yLmFscGhhID4gMCkge1xyXG4gICAgICB0aGlzLmNJbmRpY2F0b3IuYWxwaGEgLT0gdGhpcy5pbmRpY2F0b3JGYWRlO1xyXG4gICB9XHJcbiAgIGlmICh0aGlzLm1vZHVsZS51cGRhdGUpIHtcclxuICAgICAgdGhpcy5tb2R1bGUudXBkYXRlKCk7XHJcbiAgIH1cclxuICAgLy8gaWYgKHRoaXMucmFtRGVsYXkgPiAwKSB7XHJcbiAgICAgIC8vIHRoaXMucmFtRGVsYXkgLT0gdGhpcy5nYW1lLnRpbWUuZWxhcHNlZDtcclxuICAgLy8gfVxyXG59O1xyXG5cclxuLy8gQ3ViZS5wcm90b3R5cGUucmVzZXRSYW1EZWxheSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHRoaXMucmFtRGVsYXkgPSB0aGlzLnJhbUNvb2xkb3duOyBcclxuLy8gfTtcclxuXHJcbkN1YmUucHJvdG90eXBlLmN1YmVDb2xsaWRlID0gZnVuY3Rpb24ob3RoZXIpIHtcclxuICAgaWYgKCF0aGlzLmdyb3VwIHx8ICFvdGhlciB8fCAhb3RoZXIuc3ByaXRlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICB0aGlzLmdyb3VwLmhhbmRsZUNvbGxpc2lvbih0aGlzLCBvdGhlci5zcHJpdGUpO1xyXG4gICB0aGlzLmdyb3VwLmNvdW50Q3ViZXMoKTtcclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgIHZhciBzdHJpbmcgPSAnJztcclxuICAgc3RyaW5nICs9IHRoaXMuY29uY2F0KCduYW1lJywgdGhpcy5uYW1lKTtcclxuICAgcmV0dXJuIHN0cmluZztcclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uKHN0cmluZywgdmFsKSB7XHJcbiAgIHJldHVybiBzdHJpbmcgKyAnOiAnICsgdmFsICsgJ1xcbic7XHJcbn07XHJcbkN1YmUucHJvdG90eXBlLmRpc3BsYXlJbmRpY2F0b3IgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmNJbmRpY2F0b3IuYWxwaGEgPSAxOyBcclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLnRha2VEYW1hZ2UgPSBmdW5jdGlvbihhbXQpIHtcclxuICAgdGhpcy5oZWFsdGggLT0gYW10O1xyXG4gICBpZiAodGhpcy5oZWFsdGggPD0gMCkge1xyXG4gICAgICB0aGlzLmdyb3VwLmRlc3Ryb3lDdWJlKHRoaXMpO1xyXG5cdCAgLy8gdGhpcy5ncm91cC5jb3VudEN1YmVzKCk7XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICBpZiAoIXRoaXMuZ3JvdXApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIHRoaXMuZ3JvdXAucmVtb3ZlKHRoaXMpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDdWJlO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsInZhciBBc3RhciA9IHJlcXVpcmUoJy4uL2xpYnMvamF2YXNjcmlwdC1hc3Rhci9hc3RhcicpO1xyXG52YXIgRW5lbXlBSSA9IHJlcXVpcmUoJy4vZW5lbXlfYWknKTtcclxuXHJcbi8qXHJcbkRlZmluZXMgYSBjdWJlIGdyb3VwLlxyXG4qL1xyXG5cclxudmFyIEN1YmVHcm91cCA9IGZ1bmN0aW9uIChnYW1lLCByb290KSB7XHJcbiAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgIHRoaXMucm9vdCA9IHJvb3Q7XHJcbiAgIHRoaXMuY3ViZXMgPSBbXTtcclxuICAgdmFyIGNvbCA9IFtdO1xyXG4gICBjb2wucHVzaCh0aGlzLnJvb3QpO1xyXG4gICB0aGlzLmN1YmVzLnB1c2goY29sKTtcclxuICAgaWYgKHRoaXMucm9vdCkge1xyXG4gICAgICB0aGlzLnJvb3QuZ3JvdXAgPSB0aGlzO1xyXG4gICB9XHJcbiAgIHRoaXMuRElSID0ge05PUlRIOiAwLCBFQVNUOiAxLCBTT1VUSDogMiwgV0VTVDogM307XHJcbiAgIHRoaXMub2Zmc2V0ID0gMjtcclxuICAgdGhpcy5udW1DdWJlcyA9IDE7XHJcbiAgIHRoaXMuYm91bmNlQmFja0ZvcmNlID0gMzA7XHJcbiAgIHRoaXMubWluUmFtVmVsID0gMTAwO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmVHcm91cDtcclxuXHJcbi8qKlxyXG4gKiBBdXRvbWF0aWNhbGx5IGNhbGxlZCBieSBXb3JsZC51cGRhdGVcclxuICovXHJcbkN1YmVHcm91cC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIGlmICh0aGlzLkFJKSB7XHJcbiAgICAgIHRoaXMuQUkudXBkYXRlKCk7XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uKGZ1bikge1xyXG4gICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCB0aGlzLmN1YmVzV2lkdGgoKTsgcm93KyspIHtcclxuICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICB2YXIgY3ViZSA9IHRoaXMuY3ViZXNbcm93XVtjb2xdO1xyXG4gICAgICAgICBpZiAoY3ViZSAmJiBjdWJlLmhhc093blByb3BlcnR5KGZ1bikpIHtcclxuICAgICAgICAgICAgLy8gaWYgY3ViZXMgbmVlZCBmdW5jdGlvbnMgY2FsbGVkXHJcbiAgICAgICAgIH0gZWxzZSBpZiAoY3ViZSAmJiBjdWJlLm1vZHVsZSAmJiBjdWJlLm1vZHVsZS5oYXNPd25Qcm9wZXJ0eShmdW4pKSB7XHJcbiAgICAgICAgICAgIHZhciBmbiA9IGN1YmUubW9kdWxlW2Z1bl07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgZm4uY2FsbChjdWJlLm1vZHVsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZ2l2ZUFJID0gZnVuY3Rpb24odHlwZSwgcGxheWVyKSB7XHJcbiAgIHRoaXMuQUkgPSBuZXcgRW5lbXlBSSh0aGlzLmdhbWUsIHRoaXMsIHR5cGUsIHBsYXllcik7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGN1YmUsIHBvaW50KSB7XHJcbiAgaWYgKCF0aGlzLnJvb3QgJiYgY3ViZS5tb2R1bGUudHlwZSA9PT0gJ2NvcmUnKSB7XHJcbiAgICAgdGhpcy5yb290ID0gY3ViZTtcclxuICB9XHJcbiAgY3ViZS5ncm91cCA9IHRoaXM7XHJcbiAgdGhpcy5zZXQoY3ViZSwgcG9pbnQpO1xyXG4gIHRoaXMuY3JlYXRlQ29uc3RyYWludHMoY3ViZSwgcG9pbnQpO1xyXG4gIC8vIHRoaXMuZGlzcGxheUN1YmVzKCk7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmhhbmRsZUNvbGxpc2lvbiA9IGZ1bmN0aW9uKG9yaWdpbiwgb3RoZXIpIHtcclxuICAgLy8gc3RvcCBpZiBvdGhlciBkb2VzIG5vdCBleGlzdCwgZWl0aGVyIGlzIG5vdCBhIGN1YmUsIGJvdGggYXJlIGluIHNhbWUgZ3JvdXBcclxuICAgaWYgKG90aGVyID09PSBudWxsIHx8IG9yaWdpbi5wcm90b3R5cGUgIT09IG90aGVyLnByb3RvdHlwZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgLy8gaWYgKG90aGVyLmdyb3VwICYmIG90aGVyLmdyb3VwICE9PSB0aGlzICYmIG9yaWdpbi5yYW1EZWxheSA8PSAwKSB7XHJcbiAgIHZhciBzdW1WZWwgPSBNYXRoLmFicyhvcmlnaW4uYm9keS52ZWxvY2l0eS54KSArIE1hdGguYWJzKG9yaWdpbi5ib2R5LnZlbG9jaXR5LnkpO1xyXG4gICBpZiAob3RoZXIuZ3JvdXAgJiYgb3RoZXIuZ3JvdXAgIT09IHRoaXMgJiYgc3VtVmVsID49IHRoaXMubWluUmFtVmVsKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKG9yaWdpbi5ib2R5LnZlbG9jaXR5LngsIG9yaWdpbi5ib2R5LnZlbG9jaXR5LnksIHN1bVZlbCk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKG9yaWdpbi5uYW1lLCAncmFtbWluZyBkYW1hZ2UhJyk7XHJcbiAgICAgIG90aGVyLnRha2VEYW1hZ2UoMyk7XHJcbiAgICAgIC8vIG9yaWdpbi5yZXNldFJhbURlbGF5KCk7XHJcbiAgIH0gZWxzZSBpZiAoIW90aGVyLmdyb3VwICYmIHRoaXMuaXNQbGF5ZXIpIHtcclxuICAgICAgdmFyIHJlbFNpZGUgPSB0aGlzLnJlbGF0aXZlU2lkZShvcmlnaW4uYm9keSwgb3RoZXIuYm9keSk7XHJcbiAgICAgIHZhciBvcmlnaW5Mb2MgPSB0aGlzLmZpbmQob3JpZ2luKTtcclxuICAgICAgdmFyIG90aGVyTG9jID0gdGhpcy5hZGp1c3Qob3JpZ2luTG9jLCByZWxTaWRlKTtcclxuICAgICAgdGhpcy5zZXQob3RoZXIsIG90aGVyTG9jKTtcclxuICAgICAgb3RoZXJMb2MgPSB0aGlzLmZpbmQob3RoZXIpOyAvLyB1cGRhdGUgcG9zaXRpb24gc2luY2Ugc2V0IGNhbiBzaGlmdCBncmlkXHJcbiAgICAgIGlmICghb3RoZXJMb2MpIHtcclxuICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hhbmRsZSBjb2xsaXNpb24gZmFpbGVkIHRvIGZpbmQgcG9zaXRpb24gZm9yIGdvb2QgYXBwbGljYW50Jyk7XHJcbiAgICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmNyZWF0ZUNvbnN0cmFpbnRzKG90aGVyLCBvdGhlckxvYyk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKG90aGVyLmJvZHkuY29sbGlkZXNXaXRoKTtcclxuICAgICAgLy8gdGhpcy5kaXNwbGF5Q3ViZXMoKTtcclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jcmVhdGVDb25zdHJhaW50cyA9IGZ1bmN0aW9uKG1lLCBwb2ludCkge1xyXG4gICAvLyB0aGlzLmRpc3BsYXlDdWJlcygpO1xyXG4gICB2YXIgbXlOb3J0aCA9IHRoaXMuZ2V0KHRoaXMuYWRqdXN0KHBvaW50LCB0aGlzLkRJUi5OT1JUSCkpO1xyXG4gICB2YXIgbXlFYXN0ID0gdGhpcy5nZXQodGhpcy5hZGp1c3QocG9pbnQsIHRoaXMuRElSLkVBU1QpKTtcclxuICAgdmFyIG15U291dGggPSB0aGlzLmdldCh0aGlzLmFkanVzdChwb2ludCwgdGhpcy5ESVIuU09VVEgpKTtcclxuICAgdmFyIG15V2VzdCA9IHRoaXMuZ2V0KHRoaXMuYWRqdXN0KHBvaW50LCB0aGlzLkRJUi5XRVNUKSk7XHJcbiAgIHZhciBjb25zdHJhaW50O1xyXG4gICBpZiAobXlOb3J0aCkge1xyXG4gICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbXlOb3J0aC5ib2R5LCBbMCwgbWUud2lkdGggKyB0aGlzLm9mZnNldF0pOyAvLyBtZSAtIG5vcnRoXHJcbiAgICAgIG1lLmNvbnN0cmFpbnRzLnB1c2goY29uc3RyYWludCk7XHJcbiAgICAgIG15Tm9ydGguY29uc3RyYWludHMucHVzaChjb25zdHJhaW50KTtcclxuICAgfVxyXG4gICBpZiAobXlFYXN0KSB7XHJcbiAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBteUVhc3QuYm9keSwgWy1tZS53aWR0aCAtIHRoaXMub2Zmc2V0LCAwXSk7IC8vIG1lIC0gZWFzdFxyXG4gICAgICBtZS5jb25zdHJhaW50cy5wdXNoKGNvbnN0cmFpbnQpO1xyXG4gICAgICBteUVhc3QuY29uc3RyYWludHMucHVzaChjb25zdHJhaW50KTtcclxuICAgfVxyXG4gICBpZiAobXlTb3V0aCkge1xyXG4gICAgICBjb25zdHJhaW50ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobXlTb3V0aC5ib2R5LCBtZS5ib2R5LCBbMCwgbWUud2lkdGggKyB0aGlzLm9mZnNldF0pOyAvLyBzb3V0aCAtIG1lXHJcbiAgICAgIG1lLmNvbnN0cmFpbnRzLnB1c2goY29uc3RyYWludCk7XHJcbiAgICAgIG15U291dGguY29uc3RyYWludHMucHVzaChjb25zdHJhaW50KTtcclxuICAgfVxyXG4gICBpZiAobXlXZXN0KSB7XHJcbiAgICAgIGNvbnN0cmFpbnQgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChteVdlc3QuYm9keSwgbWUuYm9keSwgWy1tZS53aWR0aCAtIHRoaXMub2Zmc2V0LCAwXSk7IC8vIHdlc3QgLSBtZVxyXG4gICAgICBtZS5jb25zdHJhaW50cy5wdXNoKGNvbnN0cmFpbnQpO1xyXG4gICAgICBteVdlc3QuY29uc3RyYWludHMucHVzaChjb25zdHJhaW50KTtcclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5yZWxhdGl2ZVNpZGUgPSBmdW5jdGlvbih0aGlzQm9keSwgb3RoZXJCb2R5KSB7XHJcbiAgdmFyIHRoaXNQb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQodGhpc0JvZHkueCwgdGhpc0JvZHkueSk7XHJcbiAgdmFyIG90aGVyUG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KG90aGVyQm9keS54LCBvdGhlckJvZHkueSk7XHJcbiAgdmFyIGFuZ2xlVG9PdGhlciA9IFBoYXNlci5Qb2ludC5hbmdsZSh0aGlzUG9pbnQsIG90aGVyUG9pbnQpO1xyXG4gIGlmIChhbmdsZVRvT3RoZXIgPCAwKSB7IC8vIGZpeCBkdW1iIHBhcnQgb2YgUGhhc2VyLlBvaW50LmFuZ2xlKClcclxuICAgICBhbmdsZVRvT3RoZXIgPSAyICogTWF0aC5QSSArIGFuZ2xlVG9PdGhlcjtcclxuICB9XHJcbiAgYW5nbGVUb090aGVyID0gKGFuZ2xlVG9PdGhlciArIDMvMiAqIE1hdGguUEkpICUgKDIgKiBNYXRoLlBJKTsgLy8gcm90YXRlIDkwIGQgY2xvY2t3aXNlXHJcbiAgdmFyIGRpZmZBbmdsZSA9IE1hdGguYWJzKE1hdGguYWJzKGFuZ2xlVG9PdGhlcikgLSBNYXRoLmFicyh0aGlzQm9keS5yb3RhdGlvbikpO1xyXG4gICBpZiAoZGlmZkFuZ2xlIDwgMSAvIDQgKiBNYXRoLlBJIHx8IGRpZmZBbmdsZSA+IDcgLyA0ICogTWF0aC5QSSkgeyAvLyBub3J0aFxyXG4gICAgIHJldHVybiB0aGlzLkRJUi5OT1JUSDtcclxuICB9IGVsc2UgaWYgKGRpZmZBbmdsZSA+PSAxIC8gNCAqIE1hdGguUEkgJiYgZGlmZkFuZ2xlIDwgMyAvIDQgKiBNYXRoLlBJKSB7IC8vIGVhc3RcclxuICAgICByZXR1cm4gdGhpcy5ESVIuRUFTVDtcclxuICB9IGVsc2UgaWYgKGRpZmZBbmdsZSA+PSAzIC8gNCAqIE1hdGguUEkgJiYgZGlmZkFuZ2xlIDwgNSAvIDQgKiBNYXRoLlBJKSB7IC8vIHNvdXRoXHJcbiAgICAgcmV0dXJuIHRoaXMuRElSLlNPVVRIO1xyXG4gIH0gZWxzZSBpZiAoZGlmZkFuZ2xlID49IDUgLyA0ICogTWF0aC5QSSAmJiBkaWZmQW5nbGUgPCA3IC8gNCAqIE1hdGguUEkpIHsgLy8gd2VzdFxyXG4gICAgIHJldHVybiB0aGlzLkRJUi5XRVNUO1xyXG4gIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKGN1YmUpIHtcclxuICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMuY3ViZXNIZWlnaHQoKTsgY29sKyspIHtcclxuICAgICAgICAgaWYgKHRoaXMuY3ViZXNbcm93XVtjb2xdID09PSBjdWJlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUGhhc2VyLlBvaW50KHJvdywgY29sKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxuICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24ocG9pbnQpIHtcclxuICBpZiAoIXBvaW50IHx8IHRoaXMub3V0T2ZCb3VuZHMocG9pbnQpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICB9XHJcbiAgcmV0dXJuIHRoaXMuY3ViZXNbcG9pbnQueF1bcG9pbnQueV07XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmN1YmVzV2lkdGggPSBmdW5jdGlvbigpIHtcclxuICAgcmV0dXJuIHRoaXMuY3ViZXMubGVuZ3RoO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jdWJlc0hlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG4gICByZXR1cm4gdGhpcy5jdWJlc1swXS5sZW5ndGg7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmFkZFRvcFJvdyA9IGZ1bmN0aW9uKCkge1xyXG4gICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCB0aGlzLmN1YmVzV2lkdGgoKTsgcm93KyspIHtcclxuICAgICAgdGhpcy5jdWJlc1tyb3ddLnB1c2godW5kZWZpbmVkKTtcclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5hZGRSaWdodENvbCA9IGZ1bmN0aW9uKCkge1xyXG4gICB2YXIgbmV3Q29sID0gW107XHJcbiAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBpKyspIHtcclxuICAgICAgbmV3Q29sLnB1c2godW5kZWZpbmVkKTtcclxuICAgfVxyXG4gICB0aGlzLmN1YmVzLnB1c2gobmV3Q29sKTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuYWRkQm90Um93ID0gZnVuY3Rpb24oKSB7XHJcbiAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICB0aGlzLmN1YmVzW3Jvd10udW5zaGlmdCh1bmRlZmluZWQpO1xyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmFkZExlZnRDb2wgPSBmdW5jdGlvbigpIHtcclxuICAgdmFyIG5ld0NvbCA9IG5ldyBBcnJheSh0aGlzLmN1YmVzSGVpZ2h0KCkpO1xyXG4gICB0aGlzLmN1YmVzLnVuc2hpZnQobmV3Q29sKTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZ2V0Q3ViZSA9IGZ1bmN0aW9uKHBvaW50KSB7XHJcbiAgIGlmICghcG9pbnQgfHwgdGhpcy5vdXRPZkJvdW5kcyhwb2ludCkpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgfVxyXG4gICByZXR1cm4gdGhpcy5jdWJlc1twb2ludC54XVtwb2ludC55XTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuYWRqdXN0ID0gZnVuY3Rpb24ocG9pbnQsIGRpcikge1xyXG4gIGlmICghcG9pbnQpIHtcclxuICAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBuZXdQb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQocG9pbnQueCwgcG9pbnQueSk7XHJcbiAgc3dpdGNoIChkaXIpIHtcclxuICAgICAgY2FzZSB0aGlzLkRJUi5OT1JUSDpcclxuICAgICAgbmV3UG9pbnQueSsrO1xyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSB0aGlzLkRJUi5FQVNUOlxyXG4gICAgICBuZXdQb2ludC54Kys7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIHRoaXMuRElSLlNPVVRIOlxyXG4gICAgICBuZXdQb2ludC55LS07XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIHRoaXMuRElSLldFU1Q6XHJcbiAgICAgIG5ld1BvaW50LngtLTtcclxuICAgICAgYnJlYWs7XHJcbiAgIH1cclxuICAgcmV0dXJuIG5ld1BvaW50O1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihjdWJlLCBwb2ludCkge1xyXG4gICBpZiAoIXBvaW50KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdzZXQgZ2l2ZW4gdW5kZWZpbmVkIHBvaW50Jyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICBpZiAocG9pbnQueCA8IDApIHtcclxuICAgICAgdGhpcy5hZGRMZWZ0Q29sKCk7XHJcbiAgICAgIHBvaW50LnggPSAwO1xyXG4gICB9IGVsc2UgaWYgKHBvaW50LnggPj0gdGhpcy5jdWJlc1dpZHRoKCkpIHtcclxuICAgICAgdGhpcy5hZGRSaWdodENvbCgpO1xyXG4gICAgICBwb2ludC54ID0gdGhpcy5jdWJlc1dpZHRoKCkgLSAxO1xyXG4gICB9IGVsc2UgaWYgKHBvaW50LnkgPCAwKSB7XHJcbiAgICAgIHRoaXMuYWRkQm90Um93KCk7XHJcbiAgICAgIHBvaW50LnkgPSAwO1xyXG4gICB9IGVsc2UgaWYgKHBvaW50LnkgPj0gdGhpcy5jdWJlc0hlaWdodCgpKSB7XHJcbiAgICAgIHRoaXMuYWRkVG9wUm93KCk7XHJcbiAgICAgIHBvaW50LnkgPSB0aGlzLmN1YmVzSGVpZ2h0KCkgLSAxO1xyXG4gICB9XHJcbiAgIGlmICh0aGlzLmdldChwb2ludCkpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ3RyaWVkIHRvIHNldCB0byBmaWxsZWQgcG9zaXRpb24nKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIHRoaXMuY3ViZXNbcG9pbnQueF1bcG9pbnQueV0gPSBjdWJlO1xyXG4gICBjdWJlLmdyb3VwID0gdGhpcztcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUub3V0T2ZCb3VuZHMgPSBmdW5jdGlvbihwb2ludCkge1xyXG4gICBpZiAoIXBvaW50KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdvdXQgb2YgYm91bmRzIGdpdmVuIHVuZGVmaW5lZCBwb2ludCcpO1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgaWYgKHBvaW50LnggPCAwIHx8IHBvaW50LnggPj0gdGhpcy5jdWJlc1dpZHRoKCkgfHwgcG9pbnQueSA8IDAgfHwgcG9pbnQueSA+PSB0aGlzLmN1YmVzSGVpZ2h0KCkpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgIH1cclxuICAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5kaXNwbGF5Q3ViZXMgPSBmdW5jdGlvbigpIHtcclxuICAgY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT0nKTtcclxuICAgdmFyIG91dHB1dCA9ICdEaXNwbGF5IEN1YmVzXFxuJztcclxuICAgdmFyIHJvdyA9IDA7XHJcbiAgIHZhciBjb2wgPSB0aGlzLmN1YmVzSGVpZ2h0KCkgLSAxO1xyXG4gICB3aGlsZSAoY29sID49IDApIHtcclxuICAgICAgd2hpbGUgKHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpKSB7XHJcbiAgICAgICAgIHZhciBjdWJlID0gdGhpcy5jdWJlc1tyb3ddW2NvbF07XHJcbiAgICAgICAgIGlmIChjdWJlKSB7XHJcbiAgICAgICAgICAgIG91dHB1dCArPSAnIyAnO1xyXG4gICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRwdXQgKz0gJ18gJztcclxuICAgICAgICAgfVxyXG4gICAgICAgICByb3crKztcclxuICAgICAgfVxyXG4gICAgICByb3cgPSAwO1xyXG4gICAgICBjb2wtLTtcclxuICAgICAgb3V0cHV0ICs9ICdcXG4nO1xyXG4gICB9XHJcbiAgIGNvbnNvbGUubG9nKG91dHB1dCk7XHJcbiAgIGNvbnNvbGUubG9nKCctLS0tLS0tLS0tLS0tLS0nKTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZGlzcGxheUNvbm5lY3Rpb24gPSBmdW5jdGlvbihjb25uZWN0aW9uKSB7XHJcbiAgIHZhciBncmFwaCA9IG5ldyBBc3Rhci5HcmFwaCh0aGlzLmN1YmVzVG9HcmFwaCgpKTtcclxuICAgdmFyIHN0YXJ0UG9pbnQgPSB0aGlzLmZpbmQoY29ubmVjdGlvbi5zdGFydCk7XHJcbiAgIHZhciBlbmRQb2ludCA9IHRoaXMuZmluZChjb25uZWN0aW9uLmVuZCk7XHJcbiAgIGlmICghc3RhcnRQb2ludCB8fCAhZW5kUG9pbnQpIHtcclxuICAgICAgY29uc29sZS5sb2coJ2Rpc3BsYXlDb25uZWN0aW9uIGZhaWxlZCB0byBnZXQgcG9pbnRzJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICB2YXIgc3RhcnQgPSBncmFwaC5ncmlkW3N0YXJ0UG9pbnQueF1bc3RhcnRQb2ludC55XTtcclxuICAgdmFyIGVuZCA9IGdyYXBoLmdyaWRbZW5kUG9pbnQueF1bZW5kUG9pbnQueV07XHJcbiAgIHZhciByZXN1bHQgPSBBc3Rhci5hc3Rhci5zZWFyY2goZ3JhcGgsIHN0YXJ0LCBlbmQpO1xyXG4gICByZXN1bHQudW5zaGlmdChzdGFydCk7XHJcbiAgIHZhciBwcmV2aW91cztcclxuICAgZm9yKHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgY3VyUG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KHJlc3VsdFtpXS54LCByZXN1bHRbaV0ueSk7XHJcbiAgICAgIHZhciBjdXIgPSB0aGlzLmdldChjdXJQb2ludCk7XHJcbiAgICAgIHZhciBpbmRpY2F0b3IgPSBjdXIuY0luZGljYXRvcjtcclxuICAgICAgdmFyIGRpcjtcclxuICAgICAgdmFyIHByZXZQb2ludDtcclxuICAgICAgdmFyIG5leHRQb2ludDtcclxuICAgICAgaWYgKCFwcmV2aW91cykge1xyXG4gICAgICAgICBpbmRpY2F0b3IuYW5pbWF0aW9ucy5wbGF5KCdlbmQnKTtcclxuICAgICAgICAgbmV4dFBvaW50ID0gbmV3IFBoYXNlci5Qb2ludChyZXN1bHRbaSsxXS54LCByZXN1bHRbaSsxXS55KTtcclxuICAgICAgICAgZGlyID0gdGhpcy5kaXJCZXR3ZWVuKGN1clBvaW50LCBuZXh0UG9pbnQpO1xyXG4gICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSB0aGlzLmRpclRvQW5nbGUoZGlyKTtcclxuICAgICAgfSBlbHNlIGlmIChpID09PSByZXN1bHQubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICBpbmRpY2F0b3IuYW5pbWF0aW9ucy5wbGF5KCdlbmQnKTtcclxuICAgICAgICAgcHJldlBvaW50ID0gbmV3IFBoYXNlci5Qb2ludChwcmV2aW91cy54LCBwcmV2aW91cy55KTtcclxuICAgICAgICAgZGlyID0gdGhpcy5kaXJCZXR3ZWVuKGN1clBvaW50LCBwcmV2UG9pbnQpO1xyXG4gICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSB0aGlzLmRpclRvQW5nbGUoZGlyKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgaW5kaWNhdG9yLmFuaW1hdGlvbnMucGxheSgnbGluZScpO1xyXG4gICAgICAgICBwcmV2UG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KHByZXZpb3VzLngsIHByZXZpb3VzLnkpO1xyXG4gICAgICAgICB2YXIgcHJldkRpciA9IHRoaXMuZGlyQmV0d2VlbihjdXJQb2ludCwgcHJldlBvaW50KTtcclxuICAgICAgICAgbmV4dFBvaW50ID0gbmV3IFBoYXNlci5Qb2ludChyZXN1bHRbaSsxXS54LCByZXN1bHRbaSsxXS55KTtcclxuICAgICAgICAgdmFyIG5leHREaXIgPSB0aGlzLmRpckJldHdlZW4oY3VyUG9pbnQsIG5leHRQb2ludCk7XHJcbiAgICAgICAgIHRoaXMubWFuYWdlSW5kaWNhdG9yKGluZGljYXRvciwgcHJldkRpciwgbmV4dERpcik7XHJcbiAgICAgIH1cclxuICAgICAgcHJldmlvdXMgPSByZXN1bHRbaV07XHJcbiAgICAgIGN1ci5kaXNwbGF5SW5kaWNhdG9yKCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLm1hbmFnZUluZGljYXRvciA9IGZ1bmN0aW9uKGluZGljYXRvciwgcHJldkRpciwgbmV4dERpcikge1xyXG4gIGluZGljYXRvci5zY2FsZS5zZXRUbyhNYXRoLmFicyhpbmRpY2F0b3Iuc2NhbGUueCksIGluZGljYXRvci5zY2FsZS55KTtcclxuICBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuTk9SVEggJiYgbmV4dERpciA9PT0gdGhpcy5ESVIuU09VVEgpIHsgLy8gMlxyXG4gICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSBNYXRoLlBJO1xyXG4gICB9IGVsc2UgaWYgKHByZXZEaXIgPT09IHRoaXMuRElSLlNPVVRIICYmIG5leHREaXIgPT09IHRoaXMuRElSLk5PUlRIKSB7IC8vIDFcclxuICAgICAgaW5kaWNhdG9yLnJvdGF0aW9uID0gMDtcclxuICAgfSBlbHNlIGlmIChwcmV2RGlyID09PSB0aGlzLkRJUi5FQVNUICYmIG5leHREaXIgPT09IHRoaXMuRElSLldFU1QpIHsgLy8gNFxyXG4gICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSAxIC8gMiAqIE1hdGguUEk7XHJcbiAgIH0gZWxzZSBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuV0VTVCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5FQVNUKSB7IC8vIDNcclxuICAgICAgaW5kaWNhdG9yLnJvdGF0aW9uID0gMyAvIDIgICogTWF0aC5QSTtcclxuICAgfSBlbHNlIHtcclxuICAgICAgaW5kaWNhdG9yLmFuaW1hdGlvbnMucGxheSgncmlnaHQnKTtcclxuICAgICAgaWYgKHByZXZEaXIgPT09IHRoaXMuRElSLlNPVVRIICYmIG5leHREaXIgPT09IHRoaXMuRElSLkVBU1QpIHsgLy8gNVxyXG4gICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSAwO1xyXG4gICAgICB9IGVsc2UgaWYgKHByZXZEaXIgPT09IHRoaXMuRElSLldFU1QgJiYgbmV4dERpciA9PT0gdGhpcy5ESVIuU09VVEgpIHsgLy8gNlxyXG4gICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSAxIC8gMiAqIE1hdGguUEk7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuTk9SVEggJiYgbmV4dERpciA9PT0gdGhpcy5ESVIuV0VTVCkgeyAvLyA3XHJcbiAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IE1hdGguUEk7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJldkRpciA9PT0gdGhpcy5ESVIuRUFTVCAmJiBuZXh0RGlyID09PSB0aGlzLkRJUi5OT1JUSCkgeyAvLyA4XHJcbiAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IDMgLyAyICogTWF0aC5QSTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgaW5kaWNhdG9yLnNjYWxlLnNldFRvKC1NYXRoLmFicyhpbmRpY2F0b3Iuc2NhbGUueCksIGluZGljYXRvci5zY2FsZS55KTtcclxuICAgICAgICAgaWYgKHByZXZEaXIgPT09IHRoaXMuRElSLlNPVVRIICYmIG5leHREaXIgPT09IHRoaXMuRElSLldFU1QpIHsgLy8gOVxyXG4gICAgICAgICAgICBpbmRpY2F0b3Iucm90YXRpb24gPSAwO1xyXG4gICAgICAgICB9IGVsc2UgaWYgKHByZXZEaXIgPT09IHRoaXMuRElSLldFU1QgJiYgbmV4dERpciA9PT0gdGhpcy5ESVIuTk9SVEgpIHsgLy8gMTBcclxuICAgICAgICAgICAgaW5kaWNhdG9yLnJvdGF0aW9uID0gMSAvIDIgKiBNYXRoLlBJO1xyXG4gICAgICAgICB9IGVsc2UgaWYgKHByZXZEaXIgPT09IHRoaXMuRElSLk5PUlRIICYmIG5leHREaXIgPT09IHRoaXMuRElSLkVBU1QpIHsgLy8gMTFcclxuICAgICAgICAgICAgaW5kaWNhdG9yLnJvdGF0aW9uID0gTWF0aC5QSTtcclxuICAgICAgICAgfSBlbHNlIGlmIChwcmV2RGlyID09PSB0aGlzLkRJUi5FQVNUICYmIG5leHREaXIgPT09IHRoaXMuRElSLlNPVVRIKSB7IC8vIDEyXHJcbiAgICAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IDMgLyAyICogTWF0aC5QSTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH0gXHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmN1YmVzVG9HcmFwaCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBncmFwaCA9IFtdO1xyXG4gIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgIHZhciBuZXdDb2wgPSBbXTtcclxuICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICBpZiAodGhpcy5jdWJlc1tyb3ddW2NvbF0pIHtcclxuICAgICAgICAgICAgbmV3Q29sLnB1c2goMSk7XHJcbiAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld0NvbC5wdXNoKDApO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZ3JhcGgucHVzaChuZXdDb2wpO1xyXG4gICB9XHJcbiAgIHJldHVybiBncmFwaDtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZGlyQmV0d2VlbiA9IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgdmFyIGRlbHRhWCA9IGEueCAtIGIueDtcclxuICAgdmFyIGRlbHRhWSA9IGEueSAtIGIueTtcclxuICAgaWYgKGRlbHRhWCA+IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLldFU1Q7XHJcbiAgIH1cclxuICAgaWYgKGRlbHRhWCA8IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLkVBU1Q7XHJcbiAgIH1cclxuICAgaWYgKGRlbHRhWSA+IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLlNPVVRIO1xyXG4gICB9XHJcbiAgIGlmIChkZWx0YVkgPCAwKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLkRJUi5OT1JUSDtcclxuICAgfVxyXG4gICByZXR1cm4gdGhpcy5ESVIuTk9SVEg7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmRpclRvQW5nbGUgPSBmdW5jdGlvbihkaXIpIHtcclxuICBzd2l0Y2ggKGRpcikge1xyXG4gICBjYXNlIHRoaXMuRElSLk5PUlRIOlxyXG4gICByZXR1cm4gTWF0aC5QSTtcclxuICAgY2FzZSB0aGlzLkRJUi5FQVNUOlxyXG4gICByZXR1cm4gMyAvIDIgKiBNYXRoLlBJO1xyXG4gICBjYXNlIHRoaXMuRElSLlNPVVRIOlxyXG4gICByZXR1cm4gMDtcclxuICAgY2FzZSB0aGlzLkRJUi5XRVNUOlxyXG4gICByZXR1cm4gMSAvIDIgKiBNYXRoLlBJO1xyXG4gIH0gIFxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5kZXN0cm95Q3ViZSA9IGZ1bmN0aW9uKGN1YmUpIHtcclxuICAvLyBjb25zb2xlLmxvZygnZGVzdHJveUN1YmUnKTtcclxuICB2YXIgbG9jID0gdGhpcy5maW5kKGN1YmUpO1xyXG4gIGlmICghbG9jKSB7XHJcbiAgICAgY29uc29sZS5sb2coJ2F0dGVtcHQgdG8gZGVzdHJveSBjdWJlIG5vdCBpbiBncm91cCcpO1xyXG4gICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gcmVtb3ZlIGN1YmUgZnJvbSBncm91cFxyXG4gIHRoaXMucmVtb3ZlKGN1YmUpO1xyXG4gIC8vIGRlc3Ryb3kgY3ViZVxyXG4gIGN1YmUua2lsbCh0cnVlKTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oY3ViZSkge1xyXG4gICAvLyBjb25zb2xlLmxvZygncmVtb3ZlJyk7XHJcbiAgIGlmICh0aGlzLnJvb3QgPT09IGN1YmUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIC8vIHJlbW92ZSBjdWJlIGZyb20gYXJyYXlcclxuICAgdmFyIHJvdywgY29sO1xyXG4gICBmb3IgKHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IHRoaXMuY3ViZXNIZWlnaHQoKTsgY29sKyspIHtcclxuICAgICAgICAgaWYgKHRoaXMuY3ViZXNbcm93XVtjb2xdID09PSBjdWJlKSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuY3ViZXNbcm93XVtjb2xdLmdyb3VwID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLmN1YmVzW3Jvd11bY29sXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcbiAgIC8vIHJlbW92ZSBjb25zdHJhaW50cyBmcm9tIGN1YmVcclxuICAgdGhpcy5yZW1vdmVDb25zdHJhaW50cyhjdWJlKTtcclxuICAgY3ViZS5ncm91cCA9IHVuZGVmaW5lZDtcclxuICAgaWYgKGN1YmUubW9kdWxlICYmIGN1YmUubW9kdWxlLmhhc093blByb3BlcnR5KCdvblJlbW92ZScpKSB7XHJcbiAgICAgIGN1YmUubW9kdWxlLm9uUmVtb3ZlKCk7XHJcbiAgIH1cclxuICAgLy8gdGVzdCBmb3IgZXhpbGVzXHJcbiAgIGZvciAocm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIGZvciAoY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICB2YXIgZXhpbGUgPSB0aGlzLmN1YmVzW3Jvd11bY29sXTtcclxuICAgICAgICAgaWYgKGV4aWxlICYmIHRoaXMuaXNFeGlsZShleGlsZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmUoZXhpbGUpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICAvLyB0aGlzLmRpc3BsYXlDdWJlcygpO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5yZW1vdmVOZWlnaGJvcnNDb25zdHJhaW50ID0gZnVuY3Rpb24oY29uc3RyYWludCwgY3ViZSkge1xyXG4gICAvLyBjb25zb2xlLmxvZygncmVtb3ZlTmVpZ2hib3JzQ29uc3RyYWludCcpO1xyXG4gICB2YXIgbmVpZ2hib3JzID0gdGhpcy5nZXROZWlnaGJvcnMoY3ViZSk7XHJcbiAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmVpZ2hib3JzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBuZWlnaGJvciA9IG5laWdoYm9yc1tpXTtcclxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZWlnaGJvci5jb25zdHJhaW50cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICBpZiAobmVpZ2hib3IuY29uc3RyYWludHNbal0gPT09IGNvbnN0cmFpbnQpIHtcclxuICAgICAgICAgICAgbmVpZ2hib3IuY29uc3RyYWludHMuc3BsaWNlKGosIDEpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5nZXROZWlnaGJvcnMgPSBmdW5jdGlvbihjdWJlKSB7XHJcbiAgIHZhciBsb2MgPSB0aGlzLmZpbmQoY3ViZSk7XHJcbiAgIHZhciBub3J0aCA9IHRoaXMuZ2V0KHRoaXMuYWRqdXN0KGxvYywgdGhpcy5ESVIuTk9SVEgpKTtcclxuICAgdmFyIGVhc3QgPSB0aGlzLmdldCh0aGlzLmFkanVzdChsb2MsIHRoaXMuRElSLkVBU1QpKTtcclxuICAgdmFyIHNvdXRoID0gdGhpcy5nZXQodGhpcy5hZGp1c3QobG9jLCB0aGlzLkRJUi5TT1VUSCkpO1xyXG4gICB2YXIgd2VzdCA9IHRoaXMuZ2V0KHRoaXMuYWRqdXN0KGxvYywgdGhpcy5ESVIuV0VTVCkpO1xyXG4gICB2YXIgbmVpZ2hib3JzID0gW107XHJcbiAgIGlmIChub3J0aCkge1xyXG4gICAgICBuZWlnaGJvcnMucHVzaChub3J0aCk7XHJcbiAgIH1cclxuICAgaWYgKGVhc3QpIHtcclxuICAgICAgbmVpZ2hib3JzLnB1c2goZWFzdCk7XHJcbiAgIH1cclxuICAgaWYgKHNvdXRoKSB7XHJcbiAgICAgIG5laWdoYm9ycy5wdXNoKHNvdXRoKTtcclxuICAgfVxyXG4gICBpZiAod2VzdCkge1xyXG4gICAgICBuZWlnaGJvcnMucHVzaCh3ZXN0KTtcclxuICAgfVxyXG4gICByZXR1cm4gbmVpZ2hib3JzO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5yZW1vdmVDb25zdHJhaW50cyA9IGZ1bmN0aW9uKGN1YmUpIHtcclxuICAgLy8gY29uc29sZS5sb2coJ3JlbW92ZUNvbnN0cmFpbnRzJyk7XHJcbiAgIHdoaWxlIChjdWJlLmNvbnN0cmFpbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgdGhpcy5yZW1vdmVOZWlnaGJvcnNDb25zdHJhaW50KGN1YmUuY29uc3RyYWludHNbMF0sIGN1YmUpO1xyXG4gICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZW1vdmVDb25zdHJhaW50KGN1YmUuY29uc3RyYWludHNbMF0pO1xyXG4gICAgICBjdWJlLmNvbnN0cmFpbnRzLnNwbGljZSgwLCAxKTtcclxuICAgfVxyXG59O1xyXG5cclxuLy8gb25seSB1c2VkIHRvIHRlc3QgQXN0YXJcclxuQ3ViZUdyb3VwLnByb3RvdHlwZS50ZXN0UGF0aCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBncmFwaCA9IG5ldyBBc3Rhci5HcmFwaChbXHJcbiAgICAgICAgWzEsMSwxLDFdLFxyXG4gICAgICAgIFswLDEsMSwwXSxcclxuICAgICAgICBbMCwwLDAsMV1cclxuICAgIF0pO1xyXG4gICB2YXIgc3RhcnQgPSBncmFwaC5ncmlkWzBdWzBdO1xyXG4gICB2YXIgZW5kID0gZ3JhcGguZ3JpZFsyXVszXTtcclxuICAgdmFyIHJlc3VsdCA9IEFzdGFyLmFzdGFyLnNlYXJjaChncmFwaCwgc3RhcnQsIGVuZCk7XHJcbiAgIHJlc3VsdC51bnNoaWZ0KHN0YXJ0KTtcclxuICAgZm9yKHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXN1bHRbaV0ueCwgcmVzdWx0W2ldLnkpO1xyXG4gICAgfSBcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuaXNFeGlsZSA9IGZ1bmN0aW9uKGN1YmUpIHtcclxuICAgaWYgKGN1YmUgPT09IHRoaXMucm9vdCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgdmFyIGdyYXBoID0gbmV3IEFzdGFyLkdyYXBoKHRoaXMuY3ViZXNUb0dyYXBoKCkpO1xyXG4gICB2YXIgc3RhcnRQb2ludCA9IHRoaXMuZmluZCh0aGlzLnJvb3QpO1xyXG4gICB2YXIgZW5kUG9pbnQgPSB0aGlzLmZpbmQoY3ViZSk7XHJcbiAgIHZhciBzdGFydCA9IGdyYXBoLmdyaWRbc3RhcnRQb2ludC54XVtzdGFydFBvaW50LnldO1xyXG4gICB2YXIgZW5kID0gZ3JhcGguZ3JpZFtlbmRQb2ludC54XVtlbmRQb2ludC55XTtcclxuICAgdmFyIHJlc3VsdCA9IEFzdGFyLmFzdGFyLnNlYXJjaChncmFwaCwgc3RhcnQsIGVuZCk7XHJcbiAgIC8vIGlmIG5vIHBhdGggaXMgZm91bmQsIHRoZSBjdWJlIGlzIGFuIGV4aWxlXHJcbiAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICB9XHJcbiAgIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuY291bnRDdWJlcyA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciByb3csIGNvbDtcclxuXHR2YXIgbnVtICA9IDA7XHJcblx0Zm9yIChyb3cgPSAwOyByb3cgPCB0aGlzLmN1YmVzV2lkdGgoKTsgcm93KyspIHtcclxuXHRcdGZvciAoY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG5cdFx0XHRpZiAodGhpcy5jdWJlc1tyb3ddW2NvbF0gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdG51bSsrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vY29uc29sZS5sb2cobnVtKTtcclxuXHR0aGlzLm51bUN1YmVzID0gbnVtO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDdWJlR3JvdXA7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy5qcycpO1xyXG5cclxudmFyIEVuZW15QUkgPSBmdW5jdGlvbihnYW1lLCBncm91cCwgdHlwZSwgcGxheWVyR3JvdXApIHtcclxuICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgdGhpcy5ncm91cCA9IGdyb3VwO1xyXG4gICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICB0aGlzLnBsYXllckdyb3VwID0gcGxheWVyR3JvdXA7XHJcbiAgIHRoaXMucGxheWVyID0gdGhpcy5wbGF5ZXJHcm91cC5yb290O1xyXG4gICB0aGlzLnJhbURpc3QgPSA1MDA7XHJcbiAgIHRoaXMucm90YXRpb25Gb3JjZSA9IDUwO1xyXG4gICB0aGlzLmZhY2luZ0FsbG93YW5jZSA9IE1hdGguUEkgLyAyMDtcclxuICAgdGhpcy50aHJ1c3RlcnNGaXJpbmcgPSBmYWxzZTtcclxuICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcclxuICAgICAgY2FzZSAncmFtJzpcclxuICAgICAgdGhpcy5hbGxvY2F0ZVRvVGhydXN0ZXJzKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICB9XHJcbn07XHJcblxyXG5FbmVteUFJLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEVuZW15QUk7XHJcblxyXG5FbmVteUFJLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcclxuICAgICAgY2FzZSAncmFtJzpcclxuICAgICAgdGhpcy5yYW1VcGRhdGUoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgIH1cclxufTtcclxuXHJcbkVuZW15QUkucHJvdG90eXBlLnJhbVVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICByZXR1cm47XHJcbiAgIGlmICghdGhpcy5ncm91cC5yb290KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICB2YXIgcm9vdCA9IHRoaXMuZ3JvdXAucm9vdDtcclxuICAgdmFyIG15UG9zID0gbmV3IFBoYXNlci5Qb2ludChyb290LngsIHJvb3QueSk7XHJcbiAgIHZhciBwbGF5ZXJQb3MgPSBuZXcgUGhhc2VyLlBvaW50KHRoaXMucGxheWVyLngsIHRoaXMucGxheWVyLnkpO1xyXG4gICB2YXIgZGlzdCA9IFV0aWxzLmRpc3RhbmNlKG15UG9zLngsIG15UG9zLnksIHBsYXllclBvcy54LCBwbGF5ZXJQb3MueSk7XHJcbiAgIGlmIChkaXN0IDw9IHRoaXMucmFtRGlzdCkge1xyXG4gICAgICB2YXIgYW5nbGVUbyA9IHRoaXMuYW5nbGVUbyhteVBvcywgcGxheWVyUG9zKTtcclxuICAgICAgdmFyIGRpZmZBbmdsZSA9IGFuZ2xlVG8gLSByb290LmJvZHkucm90YXRpb247XHJcbiAgICAgIGlmIChkaWZmQW5nbGUgPiAwKSB7XHJcbiAgICAgICAgIHJvb3QuYm9keS5hbmd1bGFyRm9yY2UgPSB0aGlzLnJvdGF0aW9uRm9yY2U7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIHJvb3QuYm9keS5hbmd1bGFyRm9yY2UgPSAtdGhpcy5yb3RhdGlvbkZvcmNlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChNYXRoLmFicyhkaWZmQW5nbGUpIDw9IHRoaXMuZmFjaW5nQWxsb3dhbmNlICYmICF0aGlzLnRocnVzdGVyc0ZpcmluZykge1xyXG4gICAgICAgICB0aGlzLmdyb3VwLmNhbGwoJ2JlZ2luVGhydXN0Jyk7XHJcbiAgICAgICAgIHRoaXMudGhydXN0ZXJzRmlyaW5nID0gdHJ1ZTtcclxuICAgICAgICAgdGhpcy5hbGxvY2F0ZVRvVGhydXN0ZXJzKCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGlmZkFuZ2xlKSA+IHRoaXMuZmFjaW5nQWxsb3dhbmNlICYmIHRoaXMudGhydXN0ZXJzRmlyaW5nKXtcclxuICAgICAgICAgdGhpcy5ncm91cC5jYWxsKCdlbmRUaHJ1c3QnKTtcclxuICAgICAgICAgdGhpcy50aHJ1c3RlcnNGaXJpbmcgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICB9XHJcbn07XHJcblxyXG5FbmVteUFJLnByb3RvdHlwZS5hbGxvY2F0ZVRvVGhydXN0ZXJzID0gZnVuY3Rpb24oKSB7XHJcbiAgIHZhciBwYW5lbHMgPSBbXTtcclxuICAgdmFyIHRocnVzdGVycyA9IFtdO1xyXG4gICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCB0aGlzLmdyb3VwLmN1YmVzV2lkdGgoKTsgcm93KyspIHtcclxuICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5ncm91cC5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICB2YXIgY3ViZSA9IHRoaXMuZ3JvdXAuY3ViZXNbcm93XVtjb2xdO1xyXG4gICAgICAgICBpZiAoY3ViZSAmJiBjdWJlLm1vZHVsZSkge1xyXG4gICAgICAgICAgICBpZiAoY3ViZS5tb2R1bGUudHlwZSA9PT0gJ3NvbGFyUGFuZWwnICYmICFjdWJlLm15Q29ubmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICBwYW5lbHMucHVzaChjdWJlLm1vZHVsZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3ViZS5tb2R1bGUudHlwZSA9PT0gJ3RocnVzdGVyJyAmJiAhY3ViZS5teUNvbm5lY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgdGhydXN0ZXJzLnB1c2goY3ViZS5tb2R1bGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcbiAgIHZhciBpID0gMDtcclxuICAgd2hpbGUgKGkgPCB0aHJ1c3RlcnMubGVuZ3RoICYmIGkgPCBwYW5lbHMubGVuZ3RoKSB7XHJcbiAgICAgIHZhciB0YXJQYW5lbCA9IHBhbmVsc1tpXTtcclxuICAgICAgdmFyIHRhclRocnVzdGVyID0gdGhydXN0ZXJzW2ldO1xyXG4gICAgICB2YXIgbmV3Q29ubmVjdGlvbiA9IHtzdGFydDogdGFyUGFuZWwuY3ViZSwgZW5kOiB0YXJUaHJ1c3Rlci5jdWJlfTtcclxuICAgICAgdGFyUGFuZWwuY3ViZS5teUNvbm5lY3Rpb24gPSBuZXdDb25uZWN0aW9uO1xyXG4gICAgICB0YXJUaHJ1c3Rlci5jdWJlLm15Q29ubmVjdGlvbiA9IG5ld0Nvbm5lY3Rpb247XHJcbiAgICAgIHRoaXMuZ3JvdXAuZGlzcGxheUNvbm5lY3Rpb24odGFyUGFuZWwuY3ViZS5teUNvbm5lY3Rpb24pO1xyXG4gICAgICBpKys7XHJcbiAgIH1cclxufTtcclxuXHJcbkVuZW15QUkucHJvdG90eXBlLmFuZ2xlVG8gPSBmdW5jdGlvbihmcm9tLCB0bykge1xyXG4gIHZhciBhbmdsZVRvT3RoZXIgPSBQaGFzZXIuUG9pbnQuYW5nbGUoZnJvbSwgdG8pO1xyXG4gIGlmIChhbmdsZVRvT3RoZXIgPCAwKSB7IC8vIGZpeCBkdW1iIHBhcnQgb2YgUGhhc2VyLlBvaW50LmFuZ2xlKClcclxuICAgICBhbmdsZVRvT3RoZXIgPSAyICogTWF0aC5QSSArIGFuZ2xlVG9PdGhlcjtcclxuICB9XHJcbiAgYW5nbGVUb090aGVyID0gKGFuZ2xlVG9PdGhlciArIDMvMiAqIE1hdGguUEkpICUgKDIgKiBNYXRoLlBJKTsgLy8gcm90YXRlIDkwIGQgY2xvY2t3aXNlXHJcbiAgcmV0dXJuIGFuZ2xlVG9PdGhlcjtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRW5lbXlBSTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsInZhciBVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzLmpzJyk7XHJcblxyXG52YXIgTW91c2UgPSBmdW5jdGlvbihnYW1lLCBpbnB1dCwgcGxheWVyR3JvdXApIHtcclxuICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgdGhpcy5pbnB1dCA9IGlucHV0O1xyXG5cdHRoaXMuYm9keSA9IG5ldyBwMi5Cb2R5KCk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICB0aGlzLmdhbWUucGh5c2ljcy5wMi53b3JsZC5hZGRCb2R5KHRoaXMuYm9keSk7XHJcbiAgIC8vIHRoaXMuZ2FtZS5waHlzaWNzLnAyLmVuYWJsZSh0aGlzKTtcclxuICAgXHJcbiAgIHRoaXMuaW5wdXQub25Eb3duLmFkZCh0aGlzLmNsaWNrLCB0aGlzKTtcclxuICAgdGhpcy5pbnB1dC5vblVwLmFkZCh0aGlzLnJlbGVhc2UsIHRoaXMpO1xyXG4gICB0aGlzLmlucHV0LmFkZE1vdmVDYWxsYmFjayh0aGlzLm1vdmUsIHRoaXMpO1xyXG4gICB0aGlzLnggPSAwO1xyXG4gICB0aGlzLnkgPSAwO1xyXG4gICBcclxuICAgdGhpcy5ncmFiYmVkID0gdW5kZWZpbmVkO1xyXG4gICB0aGlzLmxhc3RDbGlja2VkID0gdW5kZWZpbmVkO1xyXG4gICB0aGlzLmxpbmUgPSBuZXcgUGhhc2VyLkxpbmUoMCwgMCwgMCwgMCk7XHJcbiAgIFxyXG4gICB0aGlzLnJlbW92ZVRocmVzaG9sZCA9IDQwMDsgLy8gdGltZSBpbiBtaWxsaXNlY29uZHNcclxuICAgdGhpcy5yZW1vdmVUaW1lID0gMDsgLy8gdGltZSB0aWxsIHRocmVzaG9sZFxyXG4gICBcclxuICAgdGhpcy5wbGF5ZXJHcm91cCA9IHBsYXllckdyb3VwO1xyXG59O1xyXG5cclxuTW91c2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTW91c2U7XHJcblxyXG5Nb3VzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIGlmICh0aGlzLmdyYWJiZWQpIHtcclxuICAgICAgdmFyIGFuZ2xlID0gTWF0aC5hdGFuMih0aGlzLmdyYWJiZWQuc3ByaXRlLnkgLSAodGhpcy5pbnB1dC5wb3NpdGlvbi55ICsgdGhpcy5nYW1lLmNhbWVyYS55KSwgdGhpcy5ncmFiYmVkLnNwcml0ZS54IC0gKHRoaXMuaW5wdXQucG9zaXRpb24ueCsgdGhpcy5nYW1lLmNhbWVyYS54KSkgKyBNYXRoLlBJO1xyXG4gICAgICB2YXIgZGlzdCA9IFV0aWxzLmRpc3RhbmNlKHRoaXMuZ3JhYmJlZC5zcHJpdGUueCwgdGhpcy5ncmFiYmVkLnNwcml0ZS55LCAodGhpcy5pbnB1dC5wb3NpdGlvbi54KyB0aGlzLmdhbWUuY2FtZXJhLngpLCAodGhpcy5pbnB1dC5wb3NpdGlvbi55ICsgdGhpcy5nYW1lLmNhbWVyYS55KSk7XHJcbiAgICAgIHZhciB3ZWlnaHQgPSAxMDtcclxuICAgICAgaWYgKCF0aGlzLmdyYWJiZWQuc3ByaXRlLmdyb3VwKSB7XHJcbiAgICAgICAgIHRoaXMuZ3JhYmJlZC5mb3JjZS54ID0gTWF0aC5jb3MoYW5nbGUpICogZGlzdCAqIHdlaWdodDtcclxuICAgICAgICAgdGhpcy5ncmFiYmVkLmZvcmNlLnkgPSBNYXRoLnNpbihhbmdsZSkgKiBkaXN0ICogd2VpZ2h0O1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMubGluZS5zZXRUbyh0aGlzLmdyYWJiZWQuc3ByaXRlLngsIHRoaXMuZ3JhYmJlZC5zcHJpdGUueSwgKHRoaXMuaW5wdXQucG9zaXRpb24ueCsgdGhpcy5nYW1lLmNhbWVyYS54KSwgKHRoaXMuaW5wdXQucG9zaXRpb24ueSArIHRoaXMuZ2FtZS5jYW1lcmEueSkpO1xyXG4gICAgICB0aGlzLnJlbW92ZVRpbWUgKz0gdGhpcy5nYW1lLnRpbWUuZWxhcHNlZDtcclxuICAgICAgaWYgKHRoaXMucmVtb3ZlVGltZSA+PSB0aGlzLnJlbW92ZVRocmVzaG9sZCkge1xyXG4gICAgICAgICB0aGlzLmdyYWJiZWQuc3ByaXRlLnJlbW92ZSgpO1xyXG4gICAgICAgICB0aGlzLnJlbW92ZVRpbWUgPSAwO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgdGhpcy5saW5lLnNldFRvKDAsIDAsIDAsIDApO1xyXG4gICAgfVxyXG4gICAgdmFyIHBvaW50ID0gbmV3IFBoYXNlci5Qb2ludCh0aGlzLngsIHRoaXMueSk7XHJcbiAgICB2YXIgYm9kaWVzID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuaGl0VGVzdChwb2ludCk7XHJcbiAgICBpZiAoYm9kaWVzLmxlbmd0aClcclxuICAgIHtcclxuICAgICAgICB2YXIgaG92ZXIgPSBib2RpZXNbMF0ucGFyZW50O1xyXG4gICAgICAgIGlmIChob3Zlci5zcHJpdGUubW9kdWxlICYmIGhvdmVyLnNwcml0ZS5tb2R1bGUubW91c2VPdmVyKSB7XHJcbiAgICAgICAgICAgaG92ZXIuc3ByaXRlLm1vZHVsZS5tb3VzZU92ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG5Nb3VzZS5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbihwb2ludGVyKSB7XHJcbiAgIHZhciBwb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQocG9pbnRlci54ICsgdGhpcy5nYW1lLmNhbWVyYS54LCBwb2ludGVyLnkgKyB0aGlzLmdhbWUuY2FtZXJhLnkpO1xyXG4gICB2YXIgYm9kaWVzID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuaGl0VGVzdChwb2ludCk7XHJcbiAgIGlmIChib2RpZXMubGVuZ3RoKVxyXG4gICB7XHJcbiAgICAgdmFyIHRlbXAgPSBib2RpZXNbMF0ucGFyZW50O1xyXG4gICAgIGlmICh0ZW1wLnNwcml0ZSAmJiB0ZW1wLnNwcml0ZS5tb2R1bGUgJiYgdGVtcC5zcHJpdGUubW9kdWxlLnR5cGUgPT09ICdjb3JlJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICB9XHJcbiAgICAgaWYgKHRlbXAuc3ByaXRlICYmIHRlbXAuc3ByaXRlLmdyb3VwICYmIHRlbXAuc3ByaXRlLmdyb3VwICE9PSB0aGlzLnBsYXllckdyb3VwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgIH1cclxuICAgICB0aGlzLnJlbW92ZVRpbWUgPSAwO1xyXG4gICAgIHRoaXMuZ3JhYmJlZCA9IHRlbXA7XHJcbiAgICAgLy8gY29uc29sZS5sb2codGhpcy5ncmFiYmVkLnNwcml0ZS5uYW1lKTtcclxuICAgICBpZiAodGhpcy5ncmFiYmVkLnNwcml0ZS5tb2R1bGUgJiYgdGhpcy5ncmFiYmVkLnNwcml0ZS5tb2R1bGUuaGFzT3duUHJvcGVydHkoJ21vdXNlRG93bicpKSB7XHJcbiAgICAgICAgdGhpcy5ncmFiYmVkLnNwcml0ZS5tb2R1bGUubW91c2VEb3duKCk7XHJcbiAgICAgfVxyXG4gICAgIGlmICh0aGlzLmxhc3RDbGlja2VkICYmIHRoaXMubGFzdENsaWNrZWQuc3ByaXRlICYmIHRoaXMubGFzdENsaWNrZWQuc3ByaXRlLm1vZHVsZSAmJlxyXG4gICAgIHRoaXMubGFzdENsaWNrZWQuc3ByaXRlLm1vZHVsZS5naXZlVGFyZ2V0KSB7XHJcbiAgICAgICAgdGhpcy5sYXN0Q2xpY2tlZC5zcHJpdGUubW9kdWxlLmdpdmVUYXJnZXQodGhpcy5ncmFiYmVkLnNwcml0ZS5tb2R1bGUpO1xyXG4gICAgIH1cclxuICAgICB0aGlzLmxhc3RDbGlja2VkID0gdGVtcDtcclxuICAgfVxyXG59O1xyXG4gIFxyXG4gTW91c2UucHJvdG90eXBlLnJlbGVhc2UgPSBmdW5jdGlvbigpIHtcclxuICAgaWYgKHRoaXMuZ3JhYmJlZCkge1xyXG4gICAgIHRoaXMuZ3JhYmJlZCA9IHVuZGVmaW5lZDtcclxuICAgfVxyXG59O1xyXG4gIFxyXG5Nb3VzZS5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uKHBvaW50ZXIpIHtcclxuICAgLy8gcDIgdXNlcyBkaWZmZXJlbnQgY29vcmRpbmF0ZSBzeXN0ZW0sIHNvIGNvbnZlcnQgdGhlIHBvaW50ZXIgcG9zaXRpb24gdG8gcDIncyBjb29yZGluYXRlIHN5c3RlbVxyXG4gICB0aGlzLmJvZHkucG9zaXRpb25bMF0gPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5weG1pKHBvaW50ZXIucG9zaXRpb24ueCk7XHJcbiAgIHRoaXMuYm9keS5wb3NpdGlvblsxXSA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLnB4bWkocG9pbnRlci5wb3NpdGlvbi55KTtcclxuICAgdGhpcy54ID0gcG9pbnRlci5wb3NpdGlvbi54ICsgdGhpcy5nYW1lLmNhbWVyYS54O1xyXG4gICB0aGlzLnkgPSBwb2ludGVyLnBvc2l0aW9uLnkgKyB0aGlzLmdhbWUuY2FtZXJhLnk7XHJcbn07XHJcblxyXG5Nb3VzZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgIHRoaXMuZ2FtZS5kZWJ1Zy5nZW9tKHRoaXMubGluZSk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1vdXNlO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIi8vIGphdmFzY3JpcHQtYXN0YXIgMC40LjBcclxuLy8gaHR0cDovL2dpdGh1Yi5jb20vYmdyaW5zL2phdmFzY3JpcHQtYXN0YXJcclxuLy8gRnJlZWx5IGRpc3RyaWJ1dGFibGUgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4vLyBJbXBsZW1lbnRzIHRoZSBhc3RhciBzZWFyY2ggYWxnb3JpdGhtIGluIGphdmFzY3JpcHQgdXNpbmcgYSBCaW5hcnkgSGVhcC5cclxuLy8gSW5jbHVkZXMgQmluYXJ5IEhlYXAgKHdpdGggbW9kaWZpY2F0aW9ucykgZnJvbSBNYXJpam4gSGF2ZXJiZWtlLlxyXG4vLyBodHRwOi8vZWxvcXVlbnRqYXZhc2NyaXB0Lm5ldC9hcHBlbmRpeDIuaHRtbFxyXG5cclxuKGZ1bmN0aW9uKGRlZmluaXRpb24pIHtcclxuICAgIC8qIGdsb2JhbCBtb2R1bGUsIGRlZmluZSAqL1xyXG4gICAgaWYodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpO1xyXG4gICAgfSBlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShbXSwgZGVmaW5pdGlvbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBleHBvcnRzID0gZGVmaW5pdGlvbigpO1xyXG4gICAgICAgIHdpbmRvdy5hc3RhciA9IGV4cG9ydHMuYXN0YXI7XHJcbiAgICAgICAgd2luZG93LkdyYXBoID0gZXhwb3J0cy5HcmFwaDtcclxuICAgIH1cclxufSkoZnVuY3Rpb24oKSB7XHJcblxyXG5mdW5jdGlvbiBwYXRoVG8obm9kZSl7XHJcbiAgICB2YXIgY3VyciA9IG5vZGUsXHJcbiAgICAgICAgcGF0aCA9IFtdO1xyXG4gICAgd2hpbGUoY3Vyci5wYXJlbnQpIHtcclxuICAgICAgICBwYXRoLnB1c2goY3Vycik7XHJcbiAgICAgICAgY3VyciA9IGN1cnIucGFyZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdGgucmV2ZXJzZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRIZWFwKCkge1xyXG4gICAgcmV0dXJuIG5ldyBCaW5hcnlIZWFwKGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZS5mO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbnZhciBhc3RhciA9IHtcclxuICAgIC8qKlxyXG4gICAgKiBQZXJmb3JtIGFuIEEqIFNlYXJjaCBvbiBhIGdyYXBoIGdpdmVuIGEgc3RhcnQgYW5kIGVuZCBub2RlLlxyXG4gICAgKiBAcGFyYW0ge0dyYXBofSBncmFwaFxyXG4gICAgKiBAcGFyYW0ge0dyaWROb2RlfSBzdGFydFxyXG4gICAgKiBAcGFyYW0ge0dyaWROb2RlfSBlbmRcclxuICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAgKiBAcGFyYW0ge2Jvb2x9IFtvcHRpb25zLmNsb3Nlc3RdIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcclxuICAgICAgICAgICAgICAgcGF0aCB0byB0aGUgY2xvc2VzdCBub2RlIGlmIHRoZSB0YXJnZXQgaXMgdW5yZWFjaGFibGUuXHJcbiAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmhldXJpc3RpY10gSGV1cmlzdGljIGZ1bmN0aW9uIChzZWVcclxuICAgICogICAgICAgICAgYXN0YXIuaGV1cmlzdGljcykuXHJcbiAgICAqL1xyXG4gICAgc2VhcmNoOiBmdW5jdGlvbihncmFwaCwgc3RhcnQsIGVuZCwgb3B0aW9ucykge1xyXG4gICAgICAgIGdyYXBoLmNsZWFuRGlydHkoKTtcclxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICB2YXIgaGV1cmlzdGljID0gb3B0aW9ucy5oZXVyaXN0aWMgfHwgYXN0YXIuaGV1cmlzdGljcy5tYW5oYXR0YW4sXHJcbiAgICAgICAgICAgIGNsb3Nlc3QgPSBvcHRpb25zLmNsb3Nlc3QgfHwgZmFsc2U7XHJcblxyXG4gICAgICAgIHZhciBvcGVuSGVhcCA9IGdldEhlYXAoKSxcclxuICAgICAgICAgICAgY2xvc2VzdE5vZGUgPSBzdGFydDsgLy8gc2V0IHRoZSBzdGFydCBub2RlIHRvIGJlIHRoZSBjbG9zZXN0IGlmIHJlcXVpcmVkXHJcblxyXG4gICAgICAgIHN0YXJ0LmggPSBoZXVyaXN0aWMoc3RhcnQsIGVuZCk7XHJcblxyXG4gICAgICAgIG9wZW5IZWFwLnB1c2goc3RhcnQpO1xyXG5cclxuICAgICAgICB3aGlsZShvcGVuSGVhcC5zaXplKCkgPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBHcmFiIHRoZSBsb3dlc3QgZih4KSB0byBwcm9jZXNzIG5leHQuICBIZWFwIGtlZXBzIHRoaXMgc29ydGVkIGZvciB1cy5cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gb3BlbkhlYXAucG9wKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBFbmQgY2FzZSAtLSByZXN1bHQgaGFzIGJlZW4gZm91bmQsIHJldHVybiB0aGUgdHJhY2VkIHBhdGguXHJcbiAgICAgICAgICAgIGlmKGN1cnJlbnROb2RlID09PSBlbmQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXRoVG8oY3VycmVudE5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBOb3JtYWwgY2FzZSAtLSBtb3ZlIGN1cnJlbnROb2RlIGZyb20gb3BlbiB0byBjbG9zZWQsIHByb2Nlc3MgZWFjaCBvZiBpdHMgbmVpZ2hib3JzLlxyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5jbG9zZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gRmluZCBhbGwgbmVpZ2hib3JzIGZvciB0aGUgY3VycmVudCBub2RlLlxyXG4gICAgICAgICAgICB2YXIgbmVpZ2hib3JzID0gZ3JhcGgubmVpZ2hib3JzKGN1cnJlbnROb2RlKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IG5laWdoYm9ycy5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmVpZ2hib3IgPSBuZWlnaGJvcnNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5laWdoYm9yLmNsb3NlZCB8fCBuZWlnaGJvci5pc1dhbGwoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdCBhIHZhbGlkIG5vZGUgdG8gcHJvY2Vzcywgc2tpcCB0byBuZXh0IG5laWdoYm9yLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRoZSBnIHNjb3JlIGlzIHRoZSBzaG9ydGVzdCBkaXN0YW5jZSBmcm9tIHN0YXJ0IHRvIGN1cnJlbnQgbm9kZS5cclxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHBhdGggd2UgaGF2ZSBhcnJpdmVkIGF0IHRoaXMgbmVpZ2hib3IgaXMgdGhlIHNob3J0ZXN0IG9uZSB3ZSBoYXZlIHNlZW4geWV0LlxyXG4gICAgICAgICAgICAgICAgdmFyIGdTY29yZSA9IGN1cnJlbnROb2RlLmcgKyBuZWlnaGJvci5nZXRDb3N0KGN1cnJlbnROb2RlKSxcclxuICAgICAgICAgICAgICAgICAgICBiZWVuVmlzaXRlZCA9IG5laWdoYm9yLnZpc2l0ZWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFiZWVuVmlzaXRlZCB8fCBnU2NvcmUgPCBuZWlnaGJvci5nKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIGFuIG9wdGltYWwgKHNvIGZhcikgcGF0aCB0byB0aGlzIG5vZGUuICBUYWtlIHNjb3JlIGZvciBub2RlIHRvIHNlZSBob3cgZ29vZCBpdCBpcy5cclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci52aXNpdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5wYXJlbnQgPSBjdXJyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5oID0gbmVpZ2hib3IuaCB8fCBoZXVyaXN0aWMobmVpZ2hib3IsIGVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3IuZyA9IGdTY29yZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5mID0gbmVpZ2hib3IuZyArIG5laWdoYm9yLmg7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGgubWFya0RpcnR5KG5laWdoYm9yKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbmVpZ2hib3VyIGlzIGNsb3NlciB0aGFuIHRoZSBjdXJyZW50IGNsb3Nlc3ROb2RlIG9yIGlmIGl0J3MgZXF1YWxseSBjbG9zZSBidXQgaGFzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgY2hlYXBlciBwYXRoIHRoYW4gdGhlIGN1cnJlbnQgY2xvc2VzdCBub2RlIHRoZW4gaXQgYmVjb21lcyB0aGUgY2xvc2VzdCBub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWlnaGJvci5oIDwgY2xvc2VzdE5vZGUuaCB8fCAobmVpZ2hib3IuaCA9PT0gY2xvc2VzdE5vZGUuaCAmJiBuZWlnaGJvci5nIDwgY2xvc2VzdE5vZGUuZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3ROb2RlID0gbmVpZ2hib3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYmVlblZpc2l0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHVzaGluZyB0byBoZWFwIHdpbGwgcHV0IGl0IGluIHByb3BlciBwbGFjZSBiYXNlZCBvbiB0aGUgJ2YnIHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuSGVhcC5wdXNoKG5laWdoYm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgc2VlbiB0aGUgbm9kZSwgYnV0IHNpbmNlIGl0IGhhcyBiZWVuIHJlc2NvcmVkIHdlIG5lZWQgdG8gcmVvcmRlciBpdCBpbiB0aGUgaGVhcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuSGVhcC5yZXNjb3JlRWxlbWVudChuZWlnaGJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2xvc2VzdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGF0aFRvKGNsb3Nlc3ROb2RlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5vIHJlc3VsdCB3YXMgZm91bmQgLSBlbXB0eSBhcnJheSBzaWduaWZpZXMgZmFpbHVyZSB0byBmaW5kIHBhdGguXHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfSxcclxuICAgIC8vIFNlZSBsaXN0IG9mIGhldXJpc3RpY3M6IGh0dHA6Ly90aGVvcnkuc3RhbmZvcmQuZWR1L35hbWl0cC9HYW1lUHJvZ3JhbW1pbmcvSGV1cmlzdGljcy5odG1sXHJcbiAgICBoZXVyaXN0aWNzOiB7XHJcbiAgICAgICAgbWFuaGF0dGFuOiBmdW5jdGlvbihwb3MwLCBwb3MxKSB7XHJcbiAgICAgICAgICAgIHZhciBkMSA9IE1hdGguYWJzKHBvczEueCAtIHBvczAueCk7XHJcbiAgICAgICAgICAgIHZhciBkMiA9IE1hdGguYWJzKHBvczEueSAtIHBvczAueSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkMSArIGQyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlhZ29uYWw6IGZ1bmN0aW9uKHBvczAsIHBvczEpIHtcclxuICAgICAgICAgICAgdmFyIEQgPSAxO1xyXG4gICAgICAgICAgICB2YXIgRDIgPSBNYXRoLnNxcnQoMik7XHJcbiAgICAgICAgICAgIHZhciBkMSA9IE1hdGguYWJzKHBvczEueCAtIHBvczAueCk7XHJcbiAgICAgICAgICAgIHZhciBkMiA9IE1hdGguYWJzKHBvczEueSAtIHBvczAueSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoRCAqIChkMSArIGQyKSkgKyAoKEQyIC0gKDIgKiBEKSkgKiBNYXRoLm1pbihkMSwgZDIpKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY2xlYW5Ob2RlOmZ1bmN0aW9uKG5vZGUpe1xyXG4gICAgICAgIG5vZGUuZiA9IDA7XHJcbiAgICAgICAgbm9kZS5nID0gMDtcclxuICAgICAgICBub2RlLmggPSAwO1xyXG4gICAgICAgIG5vZGUudmlzaXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIG5vZGUuY2xvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgbm9kZS5wYXJlbnQgPSBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiogQSBncmFwaCBtZW1vcnkgc3RydWN0dXJlXHJcbiogQHBhcmFtIHtBcnJheX0gZ3JpZEluIDJEIGFycmF5IG9mIGlucHV0IHdlaWdodHNcclxuKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiogQHBhcmFtIHtib29sfSBbb3B0aW9ucy5kaWFnb25hbF0gU3BlY2lmaWVzIHdoZXRoZXIgZGlhZ29uYWwgbW92ZXMgYXJlIGFsbG93ZWRcclxuKi9cclxuZnVuY3Rpb24gR3JhcGgoZ3JpZEluLCBvcHRpb25zKSB7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIHRoaXMubm9kZXMgPSBbXTtcclxuICAgIHRoaXMuZGlhZ29uYWwgPSAhIW9wdGlvbnMuZGlhZ29uYWw7XHJcbiAgICB0aGlzLmdyaWQgPSBbXTtcclxuICAgIGZvciAodmFyIHggPSAwOyB4IDwgZ3JpZEluLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgdGhpcy5ncmlkW3hdID0gW107XHJcblxyXG4gICAgICAgIGZvciAodmFyIHkgPSAwLCByb3cgPSBncmlkSW5beF07IHkgPCByb3cubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSBuZXcgR3JpZE5vZGUoeCwgeSwgcm93W3ldKTtcclxuICAgICAgICAgICAgdGhpcy5ncmlkW3hdW3ldID0gbm9kZTtcclxuICAgICAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuaW5pdCgpO1xyXG59XHJcblxyXG5HcmFwaC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5kaXJ0eU5vZGVzID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhc3Rhci5jbGVhbk5vZGUodGhpcy5ub2Rlc1tpXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5HcmFwaC5wcm90b3R5cGUuY2xlYW5EaXJ0eSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRpcnR5Tm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhc3Rhci5jbGVhbk5vZGUodGhpcy5kaXJ0eU5vZGVzW2ldKTtcclxuICAgIH1cclxuICAgIHRoaXMuZGlydHlOb2RlcyA9IFtdO1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLm1hcmtEaXJ0eSA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgIHRoaXMuZGlydHlOb2Rlcy5wdXNoKG5vZGUpO1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLm5laWdoYm9ycyA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgIHZhciByZXQgPSBbXSxcclxuICAgICAgICB4ID0gbm9kZS54LFxyXG4gICAgICAgIHkgPSBub2RlLnksXHJcbiAgICAgICAgZ3JpZCA9IHRoaXMuZ3JpZDtcclxuXHJcbiAgICAvLyBXZXN0XHJcbiAgICBpZihncmlkW3gtMV0gJiYgZ3JpZFt4LTFdW3ldKSB7XHJcbiAgICAgICAgcmV0LnB1c2goZ3JpZFt4LTFdW3ldKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFYXN0XHJcbiAgICBpZihncmlkW3grMV0gJiYgZ3JpZFt4KzFdW3ldKSB7XHJcbiAgICAgICAgcmV0LnB1c2goZ3JpZFt4KzFdW3ldKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTb3V0aFxyXG4gICAgaWYoZ3JpZFt4XSAmJiBncmlkW3hdW3ktMV0pIHtcclxuICAgICAgICByZXQucHVzaChncmlkW3hdW3ktMV0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vcnRoXHJcbiAgICBpZihncmlkW3hdICYmIGdyaWRbeF1beSsxXSkge1xyXG4gICAgICAgIHJldC5wdXNoKGdyaWRbeF1beSsxXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZGlhZ29uYWwpIHtcclxuICAgICAgICAvLyBTb3V0aHdlc3RcclxuICAgICAgICBpZihncmlkW3gtMV0gJiYgZ3JpZFt4LTFdW3ktMV0pIHtcclxuICAgICAgICAgICAgcmV0LnB1c2goZ3JpZFt4LTFdW3ktMV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU291dGhlYXN0XHJcbiAgICAgICAgaWYoZ3JpZFt4KzFdICYmIGdyaWRbeCsxXVt5LTFdKSB7XHJcbiAgICAgICAgICAgIHJldC5wdXNoKGdyaWRbeCsxXVt5LTFdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5vcnRod2VzdFxyXG4gICAgICAgIGlmKGdyaWRbeC0xXSAmJiBncmlkW3gtMV1beSsxXSkge1xyXG4gICAgICAgICAgICByZXQucHVzaChncmlkW3gtMV1beSsxXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOb3J0aGVhc3RcclxuICAgICAgICBpZihncmlkW3grMV0gJiYgZ3JpZFt4KzFdW3krMV0pIHtcclxuICAgICAgICAgICAgcmV0LnB1c2goZ3JpZFt4KzFdW3krMV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZ3JhcGhTdHJpbmcgPSBbXSxcclxuICAgICAgICBub2RlcyA9IHRoaXMuZ3JpZCwgLy8gd2hlbiB1c2luZyBncmlkXHJcbiAgICAgICAgcm93RGVidWcsIHJvdywgeSwgbDtcclxuICAgIGZvciAodmFyIHggPSAwLCBsZW4gPSBub2Rlcy5sZW5ndGg7IHggPCBsZW47IHgrKykge1xyXG4gICAgICAgIHJvd0RlYnVnID0gW107XHJcbiAgICAgICAgcm93ID0gbm9kZXNbeF07XHJcbiAgICAgICAgZm9yICh5ID0gMCwgbCA9IHJvdy5sZW5ndGg7IHkgPCBsOyB5KyspIHtcclxuICAgICAgICAgICAgcm93RGVidWcucHVzaChyb3dbeV0ud2VpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ3JhcGhTdHJpbmcucHVzaChyb3dEZWJ1Zy5qb2luKCcgJykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdyYXBoU3RyaW5nLmpvaW4oJ1xcbicpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gR3JpZE5vZGUoeCwgeSwgd2VpZ2h0KSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICAgIHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xyXG59XHJcblxyXG5HcmlkTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiAnWycgKyB0aGlzLnggKyAnICcgKyB0aGlzLnkgKyAnXSc7XHJcbn07XHJcblxyXG5HcmlkTm9kZS5wcm90b3R5cGUuZ2V0Q29zdCA9IGZ1bmN0aW9uKGZyb21OZWlnaGJvcikge1xyXG4gICAgLy8gVGFrZSBkaWFnb25hbCB3ZWlnaHQgaW50byBjb25zaWRlcmF0aW9uLlxyXG4gICAgaWYgKGZyb21OZWlnaGJvciAmJiBmcm9tTmVpZ2hib3IueCAhPT0gdGhpcy54ICYmIGZyb21OZWlnaGJvci55ICE9PSB0aGlzLnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53ZWlnaHQgKiAxLjQxNDIxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMud2VpZ2h0O1xyXG59O1xyXG5cclxuR3JpZE5vZGUucHJvdG90eXBlLmlzV2FsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMud2VpZ2h0ID09PSAwO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gQmluYXJ5SGVhcChzY29yZUZ1bmN0aW9uKXtcclxuICAgIHRoaXMuY29udGVudCA9IFtdO1xyXG4gICAgdGhpcy5zY29yZUZ1bmN0aW9uID0gc2NvcmVGdW5jdGlvbjtcclxufVxyXG5cclxuQmluYXJ5SGVhcC5wcm90b3R5cGUgPSB7XHJcbiAgICBwdXNoOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgLy8gQWRkIHRoZSBuZXcgZWxlbWVudCB0byB0aGUgZW5kIG9mIHRoZSBhcnJheS5cclxuICAgICAgICB0aGlzLmNvbnRlbnQucHVzaChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgLy8gQWxsb3cgaXQgdG8gc2luayBkb3duLlxyXG4gICAgICAgIHRoaXMuc2lua0Rvd24odGhpcy5jb250ZW50Lmxlbmd0aCAtIDEpO1xyXG4gICAgfSxcclxuICAgIHBvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gU3RvcmUgdGhlIGZpcnN0IGVsZW1lbnQgc28gd2UgY2FuIHJldHVybiBpdCBsYXRlci5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jb250ZW50WzBdO1xyXG4gICAgICAgIC8vIEdldCB0aGUgZWxlbWVudCBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheS5cclxuICAgICAgICB2YXIgZW5kID0gdGhpcy5jb250ZW50LnBvcCgpO1xyXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBhbnkgZWxlbWVudHMgbGVmdCwgcHV0IHRoZSBlbmQgZWxlbWVudCBhdCB0aGVcclxuICAgICAgICAvLyBzdGFydCwgYW5kIGxldCBpdCBidWJibGUgdXAuXHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFswXSA9IGVuZDtcclxuICAgICAgICAgICAgdGhpcy5idWJibGVVcCgwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICB2YXIgaSA9IHRoaXMuY29udGVudC5pbmRleE9mKG5vZGUpO1xyXG5cclxuICAgICAgICAvLyBXaGVuIGl0IGlzIGZvdW5kLCB0aGUgcHJvY2VzcyBzZWVuIGluICdwb3AnIGlzIHJlcGVhdGVkXHJcbiAgICAgICAgLy8gdG8gZmlsbCB1cCB0aGUgaG9sZS5cclxuICAgICAgICB2YXIgZW5kID0gdGhpcy5jb250ZW50LnBvcCgpO1xyXG5cclxuICAgICAgICBpZiAoaSAhPT0gdGhpcy5jb250ZW50Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50W2ldID0gZW5kO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcmVGdW5jdGlvbihlbmQpIDwgdGhpcy5zY29yZUZ1bmN0aW9uKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpbmtEb3duKGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWJibGVVcChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzaXplOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aDtcclxuICAgIH0sXHJcbiAgICByZXNjb3JlRWxlbWVudDogZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIHRoaXMuc2lua0Rvd24odGhpcy5jb250ZW50LmluZGV4T2Yobm9kZSkpO1xyXG4gICAgfSxcclxuICAgIHNpbmtEb3duOiBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgLy8gRmV0Y2ggdGhlIGVsZW1lbnQgdGhhdCBoYXMgdG8gYmUgc3Vuay5cclxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuY29udGVudFtuXTtcclxuXHJcbiAgICAgICAgLy8gV2hlbiBhdCAwLCBhbiBlbGVtZW50IGNhbiBub3Qgc2luayBhbnkgZnVydGhlci5cclxuICAgICAgICB3aGlsZSAobiA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbXB1dGUgdGhlIHBhcmVudCBlbGVtZW50J3MgaW5kZXgsIGFuZCBmZXRjaCBpdC5cclxuICAgICAgICAgICAgdmFyIHBhcmVudE4gPSAoKG4gKyAxKSA+PiAxKSAtIDEsIHBhcmVudCA9IHRoaXMuY29udGVudFtwYXJlbnROXTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgICAgICAgICAgIC8vIFN3YXAgdGhlIGVsZW1lbnRzIGlmIHRoZSBwYXJlbnQgaXMgZ3JlYXRlci5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcmVGdW5jdGlvbihlbGVtZW50KSA8IHRoaXMuc2NvcmVGdW5jdGlvbihwYXJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbcGFyZW50Tl0gPSBlbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50W25dID0gcGFyZW50O1xyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlICduJyB0byBjb250aW51ZSBhdCB0aGUgbmV3IHBvc2l0aW9uLlxyXG4gICAgICAgICAgICAgICAgbiA9IHBhcmVudE47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gRm91bmQgYSBwYXJlbnQgdGhhdCBpcyBsZXNzLCBubyBuZWVkIHRvIHNpbmsgYW55IGZ1cnRoZXIuXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgYnViYmxlVXA6IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICAvLyBMb29rIHVwIHRoZSB0YXJnZXQgZWxlbWVudCBhbmQgaXRzIHNjb3JlLlxyXG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmNvbnRlbnQubGVuZ3RoLFxyXG4gICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5jb250ZW50W25dLFxyXG4gICAgICAgICAgICBlbGVtU2NvcmUgPSB0aGlzLnNjb3JlRnVuY3Rpb24oZWxlbWVudCk7XHJcblxyXG4gICAgICAgIHdoaWxlKHRydWUpIHtcclxuICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgaW5kaWNlcyBvZiB0aGUgY2hpbGQgZWxlbWVudHMuXHJcbiAgICAgICAgICAgIHZhciBjaGlsZDJOID0gKG4gKyAxKSA8PCAxLCBjaGlsZDFOID0gY2hpbGQyTiAtIDE7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHVzZWQgdG8gc3RvcmUgdGhlIG5ldyBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCwgaWYgYW55LlxyXG4gICAgICAgICAgICB2YXIgc3dhcCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBjaGlsZDFTY29yZTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGZpcnN0IGNoaWxkIGV4aXN0cyAoaXMgaW5zaWRlIHRoZSBhcnJheSkuLi5cclxuICAgICAgICAgICAgaWYgKGNoaWxkMU4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIExvb2sgaXQgdXAgYW5kIGNvbXB1dGUgaXRzIHNjb3JlLlxyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkMSA9IHRoaXMuY29udGVudFtjaGlsZDFOXTtcclxuICAgICAgICAgICAgICAgIGNoaWxkMVNjb3JlID0gdGhpcy5zY29yZUZ1bmN0aW9uKGNoaWxkMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNjb3JlIGlzIGxlc3MgdGhhbiBvdXIgZWxlbWVudCdzLCB3ZSBuZWVkIHRvIHN3YXAuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQxU2NvcmUgPCBlbGVtU2NvcmUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YXAgPSBjaGlsZDFOO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBEbyB0aGUgc2FtZSBjaGVja3MgZm9yIHRoZSBvdGhlciBjaGlsZC5cclxuICAgICAgICAgICAgaWYgKGNoaWxkMk4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZDIgPSB0aGlzLmNvbnRlbnRbY2hpbGQyTl0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQyU2NvcmUgPSB0aGlzLnNjb3JlRnVuY3Rpb24oY2hpbGQyKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZDJTY29yZSA8IChzd2FwID09PSBudWxsID8gZWxlbVNjb3JlIDogY2hpbGQxU2NvcmUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dhcCA9IGNoaWxkMk47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBlbGVtZW50IG5lZWRzIHRvIGJlIG1vdmVkLCBzd2FwIGl0LCBhbmQgY29udGludWUuXHJcbiAgICAgICAgICAgIGlmIChzd2FwICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbbl0gPSB0aGlzLmNvbnRlbnRbc3dhcF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbc3dhcF0gPSBlbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgbiA9IHN3YXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBhcmUgZG9uZS5cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbnJldHVybiB7XHJcbiAgICBhc3RhcjogYXN0YXIsXHJcbiAgICBHcmFwaDogR3JhcGhcclxufTtcclxuXHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG4vKipcclxuKiBAYXV0aG9yICAgICAgIEplcmVteSBEb3dlbGwgPGplcmVteUBjb2Rldmluc2t5LmNvbT5cclxuKiBAbGljZW5zZSAgICAgIHtAbGluayBodHRwOi8vd3d3Lnd0ZnBsLm5ldC90eHQvY29weWluZy98V1RGUEx9XHJcbiovXHJcblxyXG4vKipcclxuKiBDcmVhdGVzIGEgbmV3IGBKdWljeWAgb2JqZWN0LlxyXG4qXHJcbiogQGNsYXNzIFBoYXNlci5QbHVnaW4uSnVpY3lcclxuKiBAY29uc3RydWN0b3JcclxuKlxyXG4qIEBwYXJhbSB7UGhhc2VyLkdhbWV9IGdhbWUgQ3VycmVudCBnYW1lIGluc3RhbmNlLlxyXG4qL1xyXG5QaGFzZXIuUGx1Z2luLkp1aWN5ID0gZnVuY3Rpb24gKGdhbWUpIHtcclxuXHJcbiAgUGhhc2VyLlBsdWdpbi5jYWxsKHRoaXMsIGdhbWUpO1xyXG5cclxuICAvKipcclxuICAqIEBwcm9wZXJ0eSB7UGhhc2VyLlJlY3RhbmdsZX0gX2JvdW5kc0NhY2hlIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgd29ybGQgYm91bmRzLlxyXG4gICogQHByaXZhdGVcclxuICAqL1xyXG4gIHRoaXMuX2JvdW5kc0NhY2hlID0gUGhhc2VyLlV0aWxzLmV4dGVuZChmYWxzZSwge30sIHRoaXMuZ2FtZS53b3JsZC5ib3VuZHMpO1xyXG5cclxuICAvKipcclxuICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfc2hha2VXb3JsZE1heCAtIFRoZSBtYXhpbXVtIHdvcmxkIHNoYWtlIHJhZGl1c1xyXG4gICogQHByaXZhdGVcclxuICAqL1xyXG4gIHRoaXMuX3NoYWtlV29ybGRNYXggPSAyMDtcclxuXHJcbiAgLyoqXHJcbiAgKiBAcHJvcGVydHkge251bWJlcn0gX3NoYWtlV29ybGRUaW1lIC0gVGhlIG1heGltdW0gd29ybGQgc2hha2UgdGltZVxyXG4gICogQHByaXZhdGVcclxuICAqL1xyXG4gIHRoaXMuX3NoYWtlV29ybGRUaW1lID0gMDtcclxuXHJcbiAgLyoqXHJcbiAgKiBAcHJvcGVydHkge251bWJlcn0gX3RyYWlsQ291bnRlciAtIEEgY291bnQgb2YgaG93IG1hbnkgdHJhaWxzIHdlJ3JlIHRyYWNraW5nXHJcbiAgKiBAcHJpdmF0ZVxyXG4gICovICBcclxuICB0aGlzLl90cmFpbENvdW50ZXIgPSAwO1xyXG5cclxuICAvKipcclxuICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBfb3ZlclNjYWxlcyAtIEFuIG9iamVjdCBjb250YWluaW5nIG92ZXJzY2FsaW5nIGNvbmZpZ3VyYXRpb25zXHJcbiAgKiBAcHJpdmF0ZVxyXG4gICovICBcclxuICB0aGlzLl9vdmVyU2NhbGVzID0ge307XHJcblxyXG4gIC8qKlxyXG4gICogQHByb3BlcnR5IHtudW1iZXJ9IF9vdmVyU2NhbGVzQ291bnRlciAtIEEgY291bnQgb2YgaG93IG1hbnkgb3ZlclNjYWxlcyB3ZSdyZSB0cmFja2luZ1xyXG4gICogQHByaXZhdGVcclxuICAqLyAgXHJcbiAgdGhpcy5fb3ZlclNjYWxlc0NvdW50ZXIgPSAwO1xyXG59O1xyXG5cclxuaWYodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IFBoYXNlci5QbHVnaW4uSnVpY3k7XHJcbn1cclxuXHJcblBoYXNlci5QbHVnaW4uSnVpY3kucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQaGFzZXIuUGx1Z2luLnByb3RvdHlwZSk7XHJcblBoYXNlci5QbHVnaW4uSnVpY3kucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGhhc2VyLlBsdWdpbi5KdWljeTtcclxuXHJcbi8qKlxyXG4qIENyZWF0ZXMgYSBuZXcgYEp1aWN5LlNjcmVlbkZsYXNoYCBvYmplY3QuXHJcbipcclxuKiBAY2xhc3MgUGhhc2VyLlBsdWdpbi5KdWljeS5TY3JlZW5GbGFzaFxyXG4qIEBjb25zdHJ1Y3RvclxyXG4qXHJcbiogQHBhcmFtIHtQaGFzZXIuR2FtZX0gZ2FtZSAtICBDdXJyZW50IGdhbWUgaW5zdGFuY2UuXHJcbiogQHBhcmFtIHtzdHJpbmd9IGNvbG9yPSd3aGl0ZScgLSBUaGUgY29sb3IgdG8gZmxhc2ggdGhlIHNjcmVlbi5cclxuKiBAbWVtYmVyb2YgUGhhc2VyLlBsdWdpbi5KdWljeVxyXG4qL1xyXG5QaGFzZXIuUGx1Z2luLkp1aWN5LlNjcmVlbkZsYXNoID0gZnVuY3Rpb24oZ2FtZSwgY29sb3IpIHtcclxuICBjb2xvciA9IGNvbG9yIHx8ICd3aGl0ZSc7XHJcbiAgdmFyIGJtZCA9IGdhbWUuYWRkLmJpdG1hcERhdGEoZ2FtZS53aWR0aCwgZ2FtZS5oZWlnaHQpO1xyXG4gIGJtZC5jdHguZmlsbFN0eWxlID0gY29sb3I7XHJcbiAgYm1kLmN0eC5maWxsUmVjdCgwLDAsIGdhbWUud2lkdGgsIGdhbWUuaGVpZ2h0KTtcclxuXHJcbiAgUGhhc2VyLlNwcml0ZS5jYWxsKHRoaXMsIGdhbWUsIDAsMCwgYm1kKTtcclxuICB0aGlzLmFscGhhID0gMDtcclxufTtcclxuXHJcblBoYXNlci5QbHVnaW4uSnVpY3kuU2NyZWVuRmxhc2gucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQaGFzZXIuU3ByaXRlLnByb3RvdHlwZSk7XHJcblBoYXNlci5QbHVnaW4uSnVpY3kuU2NyZWVuRmxhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGhhc2VyLlBsdWdpbi5KdWljeS5TY3JlZW5GbGFzaDtcclxuXHJcblxyXG4vKlxyXG4qIEZsYXNoZXMgdGhlIHNjcmVlblxyXG4qXHJcbiogQHBhcmFtIHtudW1iZXJ9IFttYXhBbHBoYT0xXSAtIFRoZSBtYXhpbXVtIGFscGhhIHRvIGZsYXNoIHRoZSBzY3JlZW4gdG9cclxuKiBAcGFyYW0ge251bWJlcn0gW2R1cmF0aW9uPTEwMF0gLSBUaGUgZHVyYXRpb24gb2YgdGhlIGZsYXNoIGluIG1pbGxpc2Vjb25kc1xyXG4qIEBtZXRob2QgUGhhc2VyLlBsdWdpbi5KdWljeS5TY3JlZW5GbGFzaC5wcm90b3R5cGUuZmxhc2hcclxuKiBAbWVtYmVyb2YgUGhhc2VyLlBsdWdpbi5KdWljeS5TY3JlZW5GbGFzaFxyXG4qL1xyXG5QaGFzZXIuUGx1Z2luLkp1aWN5LlNjcmVlbkZsYXNoLnByb3RvdHlwZS5mbGFzaCA9IGZ1bmN0aW9uKG1heEFscGhhLCBkdXJhdGlvbikge1xyXG4gIG1heEFscGhhID0gbWF4QWxwaGEgfHwgMTtcclxuICBkdXJhdGlvbiA9IGR1cmF0aW9uIHx8IDEwMDtcclxuICB2YXIgZmxhc2hUd2VlbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcykudG8oe2FscGhhOiBtYXhBbHBoYX0sIDEwMCwgUGhhc2VyLkVhc2luZy5Cb3VuY2UuSW5PdXQsIHRydWUsMCwgMCwgdHJ1ZSk7XHJcbiAgZmxhc2hUd2Vlbi5vbkNvbXBsZXRlLmFkZChmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuYWxwaGEgPSAwO1xyXG4gIH0sIHRoaXMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiogQ3JlYXRlcyBhIG5ldyBgSnVpY3kuVHJhaWxgIG9iamVjdC5cclxuKlxyXG4qIEBjbGFzcyBQaGFzZXIuUGx1Z2luLkp1aWN5LlRyYWlsXHJcbiogQGNvbnN0cnVjdG9yXHJcbipcclxuKiBAcGFyYW0ge1BoYXNlci5HYW1lfSBnYW1lIC0gIEN1cnJlbnQgZ2FtZSBpbnN0YW5jZS5cclxuKiBAcGFyYW0ge251bWJlcn0gW3RyYWlsTGVuZ3RoPTEwMF0gLSBUaGUgbGVuZ3RoIG9mIHRoZSB0cmFpbFxyXG4qIEBwYXJhbSB7bnVtYmVyfSBbY29sb3I9MHhGRkZGRkZdIC0gVGhlIGNvbG9yIG9mIHRoZSB0cmFpbFxyXG4qIEBtZW1iZXJvZiBQaGFzZXIuUGx1Z2luLkp1aWN5XHJcbiovXHJcblBoYXNlci5QbHVnaW4uSnVpY3kuVHJhaWwgPSBmdW5jdGlvbihnYW1lLCB0cmFpbExlbmd0aCwgY29sb3IpIHtcclxuICBQaGFzZXIuR3JhcGhpY3MuY2FsbCh0aGlzLCBnYW1lLCAwLDApO1xyXG4gIFxyXG4gIC8qKlxyXG4gICogQHByb3BlcnR5IHtQaGFzZXIuU3ByaXRlfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHNwcml0ZSB3aG9zZSBtb3ZlbWVudCB3ZSB3YW50IHRvIGNyZWF0ZSB0aGUgdHJhaWwgZnJvbVxyXG4gICovXHJcbiAgdGhpcy50YXJnZXQgPSBudWxsO1xyXG4gIC8qKlxyXG4gICogQHByb3BlcnR5IHtudW1iZXJ9IHRyYWlsTGVuZ3RoIC0gVGhlIG51bWJlciBvZiBzZWdtZW50cyB0byB1c2UgdG8gY3JlYXRlIHRoZSB0cmFpbFxyXG4gICovXHJcbiAgdGhpcy50cmFpbExlbmd0aCA9IHRyYWlsTGVuZ3RoIHx8IDEwMDtcclxuICAvKipcclxuICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0cmFpbFdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSB0cmFpbFxyXG4gICovXHJcbiAgdGhpcy50cmFpbFdpZHRoID0gMTUuMDtcclxuXHJcbiAgLyoqXHJcbiAgKiBAcHJvcGVydHkge2Jvb2xlYW59IHRyYWlsU2NhbGUgLSBXaGV0aGVyIG9yIG5vdCB0byB0YXBlciB0aGUgdHJhaWwgdG93YXJkcyB0aGUgZW5kXHJcbiAgKi9cclxuICB0aGlzLnRyYWlsU2NhbGluZyA9IGZhbHNlO1xyXG5cclxuICAvKipcclxuICAqIEBwcm9wZXJ0eSB7UGhhc2VyLlNwcml0ZX0gdHJhaWxDb2xvciAtIFRoZSBjb2xvciBvZiB0aGUgdHJhaWxcclxuICAqL1xyXG4gIHRoaXMudHJhaWxDb2xvciA9IGNvbG9yIHx8IDB4RkZGRkZGO1xyXG4gIFxyXG4gIC8qKlxyXG4gICogQHByb3BlcnR5IHtBcnJheTxQaGFzZXIuUG9pbnQ+fSBfc2VnbWVudHMgLSBBIGhpc3RvcmljYWwgY29sbGVjdGlvbiBvZiB0aGUgcHJldmlvdXMgcG9zaXRpb24gb2YgdGhlIHRhcmdldFxyXG4gICogQHByaXZhdGVcclxuICAqL1xyXG4gIHRoaXMuX3NlZ21lbnRzID0gW107XHJcbiAgLyoqXHJcbiAgKiBAcHJvcGVydHkge0FycmF5PG51bWJlcj59IF92ZXJ0cyAtIEEgY29sbGVjdGlvbiBvZiB2ZXJ0aWNlcyBjcmVhdGVkIGZyb20gX3NlZ21lbnRzXHJcbiAgKiBAcHJpdmF0ZVxyXG4gICovXHJcbiAgdGhpcy5fdmVydHMgPSBbXTtcclxuICAvKipcclxuICAqIEBwcm9wZXJ0eSB7QXJyYXk8UGhhc2VyLlBvaW50Pn0gX3NlZ21lbnRzIC0gQSBjb2xsZWN0aW9uIG9mIGluZGljZXMgY3JlYXRlZCBmcm9tIF92ZXJ0c1xyXG4gICogQHByaXZhdGVcclxuICAqL1xyXG4gIHRoaXMuX2luZGljZXMgPSBbXTtcclxuXHJcbn07XHJcblxyXG5QaGFzZXIuUGx1Z2luLkp1aWN5LlRyYWlsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUGhhc2VyLkdyYXBoaWNzLnByb3RvdHlwZSk7XHJcblBoYXNlci5QbHVnaW4uSnVpY3kuVHJhaWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGhhc2VyLlBsdWdpbi5KdWljeS5UcmFpbDtcclxuXHJcbi8qKlxyXG4qIFVwZGF0ZXMgdGhlIFRyYWlsIGlmIGEgdGFyZ2V0IGlzIHNldFxyXG4qXHJcbiogQG1ldGhvZCBQaGFzZXIuUGx1Z2luLkp1aWN5LlRyYWlsI3VwZGF0ZVxyXG4qIEBtZW1iZXJvZiBQaGFzZXIuUGx1Z2luLkp1aWN5LlRyYWlsXHJcbiovXHJcblxyXG5QaGFzZXIuUGx1Z2luLkp1aWN5LlRyYWlsLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICBpZih0aGlzLnRhcmdldCkge1xyXG4gICAgdGhpcy54ID0gdGhpcy50YXJnZXQueDtcclxuICAgIHRoaXMueSA9IHRoaXMudGFyZ2V0Lnk7XHJcbiAgICB0aGlzLmFkZFNlZ21lbnQodGhpcy50YXJnZXQueCwgdGhpcy50YXJnZXQueSk7XHJcbiAgICB0aGlzLnJlZHJhd1NlZ21lbnRzKHRoaXMudGFyZ2V0LngsIHRoaXMudGFyZ2V0LnkpO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4qIEFkZHMgYSBzZWdtZW50IHRvIHRoZSBzZWdtZW50cyBsaXN0IGFuZCBjdWxscyB0aGUgbGlzdCBpZiBpdCBpcyB0b28gbG9uZ1xyXG4qIFxyXG4qIEBwYXJhbSB7bnVtYmVyfSBbeF0gLSBUaGUgeCBwb3NpdGlvbiBvZiB0aGUgcG9pbnRcclxuKiBAcGFyYW0ge251bWJlcn0gW3ldIC0gVGhlIHkgcG9zaXRpb24gb2YgdGhlIHBvaW50XHJcbiogXHJcbiogQG1ldGhvZCBQaGFzZXIuUGx1Z2luLkp1aWN5LlRyYWlsI2FkZFNlZ21lbnRcclxuKiBAbWVtYmVyb2YgUGhhc2VyLlBsdWdpbi5KdWljeS5UcmFpbFxyXG4qL1xyXG5QaGFzZXIuUGx1Z2luLkp1aWN5LlRyYWlsLnByb3RvdHlwZS5hZGRTZWdtZW50ID0gZnVuY3Rpb24oeCwgeSkge1xyXG4gIHZhciBzZWdtZW50O1xyXG5cclxuICB3aGlsZSh0aGlzLl9zZWdtZW50cy5sZW5ndGggPiB0aGlzLnRyYWlsTGVuZ3RoKSB7XHJcbiAgICBzZWdtZW50ID0gdGhpcy5fc2VnbWVudHMuc2hpZnQoKTtcclxuICB9XHJcbiAgaWYoIXNlZ21lbnQpIHtcclxuICAgIHNlZ21lbnQgPSBuZXcgUGhhc2VyLlBvaW50KCk7XHJcbiAgfVxyXG5cclxuICBzZWdtZW50LnggPSB4O1xyXG4gIHNlZ21lbnQueSA9IHk7XHJcblxyXG4gIHRoaXMuX3NlZ21lbnRzLnB1c2goc2VnbWVudCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiogQ3JlYXRlcyBhbmQgZHJhd3MgdGhlIHRyaWFuZ2xlIHRyYWlsIGZyb20gc2VnbWVudHNcclxuKiBcclxuKiBAcGFyYW0ge251bWJlcn0gW29mZnNldFhdIC0gVGhlIHggcG9zaXRpb24gb2YgdGhlIG9iamVjdFxyXG4qIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0WV0gLSBUaGUgeSBwb3NpdGlvbiBvZiB0aGUgb2JqZWN0XHJcbiogXHJcbiogQG1ldGhvZCBQaGFzZXIuUGx1Z2luLkp1aWN5LlRyYWlsI3JlZHJhd1NlZ21lbnRcclxuKiBAbWVtYmVyb2YgUGhhc2VyLlBsdWdpbi5KdWljeS5UcmFpbFxyXG4qL1xyXG5QaGFzZXIuUGx1Z2luLkp1aWN5LlRyYWlsLnByb3RvdHlwZS5yZWRyYXdTZWdtZW50cyA9IGZ1bmN0aW9uKG9mZnNldFgsIG9mZnNldFkpIHtcclxuICB0aGlzLmNsZWFyKCk7XHJcbiAgdmFyIHMxLCAvLyBjdXJyZW50IHNlZ21lbnRcclxuICAgICAgczIsIC8vIHByZXZpb3VzIHNlZ21lbnRcclxuICAgICAgdmVydEluZGV4ID0gMCwgLy8ga2VlcHMgdHJhY2sgb2Ygd2hpY2ggdmVydGV4IGluZGV4IHdlJ3JlIGF0XHJcbiAgICAgIG9mZnNldCwgLy8gdGVtcG9yYXJ5IHN0b3JhZ2UgZm9yIGFtb3VudCB0byBleHRlbmQgbGluZSBvdXR3YXJkcywgYmlnZ2VyID0gd2lkZXJcclxuICAgICAgYW5nLCAvL3RlbXBvcmFyeSBzdG9yYWdlIG9mIHRoZSBpbnRlci1zZWdtZW50IGFuZ2xlc1xyXG4gICAgICBzaW4gPSAwLCAvLyBhcyBhYm92ZVxyXG4gICAgICBjb3MgPSAwOyAvLyBhZ2FpbiBhcyBhYm92ZVxyXG5cclxuICAvLyBmaXJzdCB3ZSBtYWtlIHN1cmUgdGhhdCB0aGUgdmVydGljZSBsaXN0IGlzIHRoZSBzYW1lIGxlbmd0aCBhcyB3ZSB3ZSB3YW50XHJcbiAgLy8gZWFjaCBzZWdtZW50IChleGNlcHQgdGhlIGZpcnN0KSB3aWxsIGNyZWF0ZSB0byB2ZXJ0aWNlcyB3aXRoIHR3byB2YWx1ZXMgZWFjaFxyXG4gIGlmICh0aGlzLl92ZXJ0cy5sZW5ndGggIT09ICh0aGlzLl9zZWdtZW50cy5sZW5ndGggLTEpICogNCkge1xyXG4gICAgLy8gaWYgaXQncyBub3QgY29ycmVjdCwgd2UgY2xlYXIgdGhlIGVudGlyZSBsaXN0XHJcbiAgICB0aGlzLl92ZXJ0cyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgLy8gbm93IHdlIGxvb3Agb3ZlciBhbGwgdGhlIHNlZ21lbnRzLCB0aGUgbGlzdCBoYXMgdGhlIFwieW91bmdlc3RcIiBzZWdtZW50IGF0IHRoZSBlbmRcclxuICB2YXIgcHJldkFuZyA9IDA7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gIFxyXG4gIGZvcih2YXIgaiA9IDA7IGogPCB0aGlzLl9zZWdtZW50cy5sZW5ndGg7ICsraikge1xyXG4gICAgLy8gc3RvcmUgdGhlIGFjdGl2ZSBzZWdtZW50IGZvciBjb252ZW5pZW5jZVxyXG4gICAgczEgPSB0aGlzLl9zZWdtZW50c1tqXTtcclxuXHJcbiAgICAvLyBpZiB0aGVyZSdzIGEgcHJldmlvdXMgc2VnbWVudCwgdGltZSB0byBkbyBzb21lIG1hdGhcclxuICAgIGlmKHMyKSB7XHJcbiAgICAgIC8vIHdlIGNhbGN1bGF0ZSB0aGUgYW5nbGUgYmV0d2VlbiB0aGUgdHdvIHNlZ21lbnRzXHJcbiAgICAgIC8vIHRoZSByZXN1bHQgd2lsbCBiZSBpbiByYWRpYW5zLCBzbyBhZGRpbmcgaGFsZiBvZiBwaSB3aWxsIFwidHVyblwiIHRoZSBhbmdsZSA5MCBkZWdyZWVzXHJcbiAgICAgIC8vIHRoYXQgbWVhbnMgd2UgY2FuIHVzZSB0aGUgc2luIGFuZCBjb3MgdmFsdWVzIHRvIFwiZXhwYW5kXCIgdGhlIGxpbmUgb3V0d2FyZHNcclxuICAgICAgYW5nID0gTWF0aC5hdGFuMihzMS55IC0gczIueSwgczEueCAtIHMyLngpICsgTWF0aC5QSSAvIDI7XHJcbiAgICAgIHNpbiA9IE1hdGguc2luKGFuZyk7XHJcbiAgICAgIGNvcyA9IE1hdGguY29zKGFuZyk7XHJcblxyXG4gICAgICAvLyBub3cgaXQncyB0aW1lIHRvIGNyZWF0IGV0aGUgdHdvIHZlcnRpY2VzIHRoYXQgd2lsbCByZXByZXNlbnQgdGhpcyBwYWlyIG9mIHNlZ21lbnRzXHJcbiAgICAgIC8vIHVzaW5nIGEgbG9vcCBoZXJlIGlzIHByb2JhYmx5IGEgYml0IG92ZXJraWxsIHNpbmNlIGl0J3Mgb25seSB0d28gaXRlcmF0aW9uc1xyXG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgMjsgKytpKSB7XHJcbiAgICAgICAgLy8gdGhpcyBtYWtlcyB0aGUgZmlyc3Qgc2VnbWVudCBzdGFuZCBvdXQgdG8gdGhlIFwibGVmdFwiIG9mIHRoZSBsaW5lXHJcbiAgICAgICAgLy8gYW5uZCB0aGUgc2Vjb25kIHRvIHRoZSByaWdodCwgY2hhbmdpbmcgdGhhdCBtYWdpYyBudW1iZXIgYXQgdGhlIGVuZCB3aWxsIGFsdGhlciB0aGUgbGluZSB3aWR0aFxyXG4gICAgICAgIG9mZnNldCA9ICggLTAuNSArIGkgLyAxKSAqIHRoaXMudHJhaWxXaWR0aDtcclxuXHJcbiAgICAgICAgLy8gaWYgdHJhaWwgc2NhbGUgZWZmZWN0IGlzIGVuYWJsZWQsIHdlIHNjYWxlIGRvd24gdGhlIG9mZnNldCBhcyB3ZSBtb3ZlIGRvd24gdGhlIGxpc3RcclxuICAgICAgICBpZih0aGlzLnRyYWlsU2NhbGluZykge1xyXG4gICAgICAgICAgb2Zmc2V0ICo9IGogLyB0aGlzLl9zZWdtZW50cy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBmaW5hbGx5IHdlIHB1dCB0byB2YWx1ZXMgaW4gdGhlIHZlcnQgbGlzdFxyXG4gICAgICAgIC8vIHVzaW5nIHRoZSBzZWdtZW50IGNvb3JkaW5hdGVzIGFzIGEgYmFzZSB3ZSBhZGQgdGhlIFwiZXh0ZW5kZWRcIiBwb2ludFxyXG4gICAgICAgIC8vIG9mZnNldFggYW5kIG9mZnNldFkgYXJlIHVzZWQgaGVyIHRvIG1vdmUgdGhlIGVudGlyZSB0cmFpbFxyXG4gICAgICAgIHRoaXMuX3ZlcnRzW3ZlcnRJbmRleCsrXSA9IHMxLnggKyBjb3MgKiBvZmZzZXQgLSBvZmZzZXRYO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRzW3ZlcnRJbmRleCsrXSA9IHMxLnkgKyBzaW4gKiBvZmZzZXQgLSBvZmZzZXRZO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBmaW5hbGx5IHN0b3JlIHRoZSBjdXJyZW50IHNlZ21lbnQgYXMgdGhlIHByZXZpb3VzIHNlZ21lbnQgYW5kIGdvIGZvciBhbm90aGVyIHJvdW5kXHJcbiAgICBzMiA9IHMxLmNvcHlUbyh7fSk7XHJcbiAgfVxyXG4gIC8vIHdlIG5lZWQgYXQgbGVhc3QgZm91ciB2ZXJ0aWNlcyB0byBkcmF3IHNvbWV0aGluZ1xyXG4gIGlmKHRoaXMuX3ZlcnRzLmxlbmd0aCA+PSA4KSB7XHJcbiAgICAvLyBub3csIHdlIGhhdmUgYSB0cmlhbmdsZSBcInN0cmlwXCIsIGJ1dCBmbGFzaCBjYW4ndCBkcmF3IHRoYXQgd2l0aG91dCBcclxuICAgIC8vIGluc3RydWN0aW9ucyBmb3Igd2hpY2ggdmVydGljZXMgdG8gY29ubmVjdCwgc28gaXQncyB0aW1lIHRvIG1ha2UgdGhvc2VcclxuICAgIFxyXG4gICAgLy8gaGVyZSwgd2UgbG9vcCBvdmVyIGFsbCB0aGUgdmVydGljZXMgYW5kIHBhaXIgdGhlbSB0b2dldGhlciBpbiB0cmlhbmdsZXNcclxuICAgIC8vIGVhY2ggZ3JvdXAgb2YgZm91ciB2ZXJ0aWNlcyBmb3JtcyB0d28gdHJpYW5nbGVzXHJcbiAgICBmb3IodmFyIGsgPSAwOyBrIDwgdGhpcy5fdmVydHMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgdGhpcy5faW5kaWNlc1trICogNiArIDBdID0gayAqIDIgKyAwO1xyXG4gICAgICB0aGlzLl9pbmRpY2VzW2sgKiA2ICsgMV0gPSBrICogMiArIDE7XHJcbiAgICAgIHRoaXMuX2luZGljZXNbayAqIDYgKyAyXSA9IGsgKiAyICsgMjtcclxuICAgICAgdGhpcy5faW5kaWNlc1trICogNiArIDNdID0gayAqIDIgKyAxO1xyXG4gICAgICB0aGlzLl9pbmRpY2VzW2sgKiA2ICsgNF0gPSBrICogMiArIDI7XHJcbiAgICAgIHRoaXMuX2luZGljZXNbayAqIDYgKyA1XSA9IGsgKiAyICsgMztcclxuICAgIH1cclxuICAgIHRoaXMuYmVnaW5GaWxsKHRoaXMudHJhaWxDb2xvcik7XHJcbiAgICB0aGlzLmRyYXdUcmlhbmdsZXModGhpcy5fdmVydHMsIHRoaXMuX2luZGljZXMpO1xyXG4gICAgdGhpcy5lbmRGaWxsKCk7XHJcbiAgICBcclxuICB9XHJcbn07XHJcblxyXG5QaGFzZXIuUGx1Z2luLkp1aWN5LnByb3RvdHlwZS5zaGFrZSA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgc3RyZW5ndGgpIHtcclxuICBpZiAodGhpcy5nYW1lLmNhbWVyYS50YXJnZXQgIT09IG51bGwpIHtcclxuICAgICB0aGlzLmNhbWVyYVRhcmdldCA9IHRoaXMuZ2FtZS5jYW1lcmEudGFyZ2V0O1xyXG4gICAgIHRoaXMuZ2FtZS5jYW1lcmEudW5mb2xsb3coKTtcclxuICB9XHJcbiAgdGhpcy5fc2hha2VXb3JsZFRpbWUgPSBkdXJhdGlvbiB8fCAyMDtcclxuICB0aGlzLl9zaGFrZVdvcmxkTWF4ID0gc3RyZW5ndGggfHwgMjA7XHJcbn07XHJcblxyXG5QaGFzZXIuUGx1Z2luLkp1aWN5LnByb3RvdHlwZS5jcmVhdGVTY3JlZW5GbGFzaCA9IGZ1bmN0aW9uKGNvbG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IFBoYXNlci5QbHVnaW4uSnVpY3kuU2NyZWVuRmxhc2godGhpcy5nYW1lLCBjb2xvcik7XHJcbn07XHJcblxyXG5cclxuUGhhc2VyLlBsdWdpbi5KdWljeS5wcm90b3R5cGUuY3JlYXRlVHJhaWwgPSBmdW5jdGlvbihsZW5ndGgsIGNvbG9yKSB7XHJcbiAgcmV0dXJuIG5ldyBQaGFzZXIuUGx1Z2luLkp1aWN5LlRyYWlsKHRoaXMuZ2FtZSwgbGVuZ3RoLCBjb2xvcik7XHJcbn07XHJcblxyXG5QaGFzZXIuUGx1Z2luLkp1aWN5LnByb3RvdHlwZS5vdmVyU2NhbGUgPSBmdW5jdGlvbihvYmplY3QsIHNjYWxlLCBpbml0aWFsU2NhbGUpIHtcclxuICBzY2FsZSA9IHNjYWxlIHx8IDEuNTtcclxuICB2YXIgaWQgPSB0aGlzLl9vdmVyU2NhbGVzQ291bnRlcisrO1xyXG4gIGluaXRpYWxTY2FsZSA9IGluaXRpYWxTY2FsZSB8fCBuZXcgUGhhc2VyLlBvaW50KDEsMSk7XHJcbiAgdmFyIHNjYWxlT2JqID0gdGhpcy5fb3ZlclNjYWxlc1tpZF07XHJcbiAgaWYoIXNjYWxlT2JqKSB7XHJcbiAgICBzY2FsZU9iaiA9IHtcclxuICAgICAgb2JqZWN0OiBvYmplY3QsXHJcbiAgICAgIGNhY2hlOiBpbml0aWFsU2NhbGUuY29weVRvKHt9KVxyXG4gICAgfTtcclxuICB9IFxyXG4gIHNjYWxlT2JqLnNjYWxlID0gc2NhbGU7XHJcbiAgXHJcbiAgdGhpcy5fb3ZlclNjYWxlc1tpZF0gPSBzY2FsZU9iajtcclxufTtcclxuXHJcblBoYXNlci5QbHVnaW4uSnVpY3kucHJvdG90eXBlLmplbGx5ID0gZnVuY3Rpb24ob2JqZWN0LCBzdHJlbmd0aCwgZGVsYXksIGluaXRpYWxTY2FsZSkge1xyXG4gIHN0cmVuZ3RoID0gc3RyZW5ndGggfHwgMC4yO1xyXG4gIGRlbGF5ID0gZGVsYXkgfHwgMDtcclxuICBpbml0aWFsU2NhbGUgPSBpbml0aWFsU2NhbGUgfHwgIG5ldyBQaGFzZXIuUG9pbnQoMSwgMSk7XHJcbiAgXHJcbiAgdGhpcy5nYW1lLmFkZC50d2VlbihvYmplY3Quc2NhbGUpLnRvKHt4OiBpbml0aWFsU2NhbGUueCArIChpbml0aWFsU2NhbGUueCAqIHN0cmVuZ3RoKX0sIDUwLCBQaGFzZXIuRWFzaW5nLlF1YWRyYXRpYy5Jbk91dCwgdHJ1ZSwgZGVsYXkpXHJcbiAgLnRvKHt4OiBpbml0aWFsU2NhbGUueH0sIDYwMCwgUGhhc2VyLkVhc2luZy5FbGFzdGljLk91dCwgdHJ1ZSk7XHJcblxyXG4gIHRoaXMuZ2FtZS5hZGQudHdlZW4ob2JqZWN0LnNjYWxlKS50byh7eTogaW5pdGlhbFNjYWxlLnkgKyAoaW5pdGlhbFNjYWxlLnkgKiBzdHJlbmd0aCl9LCA1MCwgUGhhc2VyLkVhc2luZy5RdWFkcmF0aWMuSW5PdXQsIHRydWUsIGRlbGF5ICsgNTApXHJcbiAgLnRvKHt5OiBpbml0aWFsU2NhbGUueX0sIDYwMCwgUGhhc2VyLkVhc2luZy5FbGFzdGljLk91dCwgdHJ1ZSk7XHJcbn07XHJcblxyXG5QaGFzZXIuUGx1Z2luLkp1aWN5LnByb3RvdHlwZS5tb3VzZVN0cmV0Y2ggPSBmdW5jdGlvbihvYmplY3QsIHN0cmVuZ3RoLCBpbml0aWFsU2NhbGUpIHtcclxuICAgIHN0cmVuZ3RoID0gc3RyZW5ndGggfHwgMC41O1xyXG4gICAgaW5pdGlhbFNjYWxlID0gaW5pdGlhbFNjYWxlIHx8IG5ldyBQaGFzZXIuUG9pbnQoMSwxKTtcclxuICAgIG9iamVjdC5zY2FsZS54ID0gaW5pdGlhbFNjYWxlLnggKyAoTWF0aC5hYnMob2JqZWN0LnggLSB0aGlzLmdhbWUuaW5wdXQuYWN0aXZlUG9pbnRlci54KSAvIDEwMCkgKiBzdHJlbmd0aDtcclxuICAgIG9iamVjdC5zY2FsZS55ID0gaW5pdGlhbFNjYWxlLnkgKyAoaW5pdGlhbFNjYWxlLnkgKiBzdHJlbmd0aCkgLSAob2JqZWN0LnNjYWxlLnggKiBzdHJlbmd0aCk7XHJcbn07XHJcblxyXG5QaGFzZXIuUGx1Z2luLkp1aWN5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHNjYWxlT2JqO1xyXG4gIC8vIFNjcmVlbiBTaGFrZVxyXG4gIGlmKHRoaXMuX3NoYWtlV29ybGRUaW1lID4gMCkgeyBcclxuICAgIHZhciBtYWduaXR1ZGUgPSAodGhpcy5fc2hha2VXb3JsZFRpbWUgLyB0aGlzLl9zaGFrZVdvcmxkTWF4KSAqIHRoaXMuX3NoYWtlV29ybGRNYXg7XHJcbiAgICB2YXIgeCA9IHRoaXMuZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoLW1hZ25pdHVkZSwgbWFnbml0dWRlKSArIHRoaXMuY2FtZXJhVGFyZ2V0LnggLSB0aGlzLmdhbWUuY2FtZXJhLndpZHRoIC8gMjtcclxuICAgIHZhciB5ID0gdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgtbWFnbml0dWRlLCBtYWduaXR1ZGUpICsgdGhpcy5jYW1lcmFUYXJnZXQueSAtIHRoaXMuZ2FtZS5jYW1lcmEuaGVpZ2h0IC8gMjtcclxuXHJcbiAgICB0aGlzLmdhbWUuY2FtZXJhLnggPSB4O1xyXG4gICAgdGhpcy5nYW1lLmNhbWVyYS55ID0geTtcclxuICAgIHRoaXMuX3NoYWtlV29ybGRUaW1lLS07XHJcbiAgICBpZih0aGlzLl9zaGFrZVdvcmxkVGltZSA8PSAwKSB7XHJcbiAgICAgICB0aGlzLmdhbWUuY2FtZXJhLmZvbGxvdyh0aGlzLmNhbWVyYVRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBvdmVyIHNjYWxlc1xyXG4gIGZvcih2YXIgcyBpbiB0aGlzLl9vdmVyU2NhbGVzKSB7XHJcbiAgICBpZih0aGlzLl9vdmVyU2NhbGVzLmhhc093blByb3BlcnR5KHMpKSB7XHJcbiAgICAgIHNjYWxlT2JqID0gdGhpcy5fb3ZlclNjYWxlc1tzXTtcclxuICAgICAgaWYoc2NhbGVPYmouc2NhbGUgPiAwLjAxKSB7XHJcbiAgICAgICAgc2NhbGVPYmoub2JqZWN0LnNjYWxlLnggPSBzY2FsZU9iai5zY2FsZSAqIHNjYWxlT2JqLmNhY2hlLng7XHJcbiAgICAgICAgc2NhbGVPYmoub2JqZWN0LnNjYWxlLnkgPSBzY2FsZU9iai5zY2FsZSAqIHNjYWxlT2JqLmNhY2hlLnk7XHJcbiAgICAgICAgc2NhbGVPYmouc2NhbGUgLT0gdGhpcy5nYW1lLnRpbWUuZWxhcHNlZCAqIHNjYWxlT2JqLnNjYWxlICogMC4zNTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzY2FsZU9iai5vYmplY3Quc2NhbGUueCA9IHNjYWxlT2JqLmNhY2hlLng7XHJcbiAgICAgICAgc2NhbGVPYmoub2JqZWN0LnNjYWxlLnkgPSBzY2FsZU9iai5jYWNoZS55O1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9vdmVyU2NhbGVzW3NdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gRHJhdyBUcmlhbmdsZXMgUG9seWZpbGwgZm9yIGJhY2sgY29tcGF0aWJpbGl0eVxyXG5pZighUGhhc2VyLkdyYXBoaWNzLnByb3RvdHlwZS5kcmF3VHJpYW5nbGUpIHtcclxuICBQaGFzZXIuR3JhcGhpY3MucHJvdG90eXBlLmRyYXdUcmlhbmdsZSA9IGZ1bmN0aW9uKHBvaW50cywgY3VsbCkge1xyXG4gICAgICB2YXIgdHJpYW5nbGUgPSBuZXcgUGhhc2VyLlBvbHlnb24ocG9pbnRzKTtcclxuICAgICAgaWYgKGN1bGwpIHtcclxuICAgICAgICAgIHZhciBjYW1lcmFUb0ZhY2UgPSBuZXcgUGhhc2VyLlBvaW50KHRoaXMuZ2FtZS5jYW1lcmEueCAtIHBvaW50c1swXS54LCB0aGlzLmdhbWUuY2FtZXJhLnkgLSBwb2ludHNbMF0ueSk7XHJcbiAgICAgICAgICB2YXIgYWIgPSBuZXcgUGhhc2VyLlBvaW50KHBvaW50c1sxXS54IC0gcG9pbnRzWzBdLngsIHBvaW50c1sxXS55IC0gcG9pbnRzWzBdLnkpO1xyXG4gICAgICAgICAgdmFyIGNiID0gbmV3IFBoYXNlci5Qb2ludChwb2ludHNbMV0ueCAtIHBvaW50c1syXS54LCBwb2ludHNbMV0ueSAtIHBvaW50c1syXS55KTtcclxuICAgICAgICAgIHZhciBmYWNlTm9ybWFsID0gY2IuY3Jvc3MoYWIpO1xyXG4gICAgICAgICAgaWYgKGNhbWVyYVRvRmFjZS5kb3QoZmFjZU5vcm1hbCkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5kcmF3UG9seWdvbih0cmlhbmdsZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmRyYXdQb2x5Z29uKHRyaWFuZ2xlKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm47XHJcbiAgfTtcclxufSIsInZhciBCb290ID0gZnVuY3Rpb24gKCkge307XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJvb3Q7XHJcblxyXG5Cb290LnByb3RvdHlwZSA9IHtcclxuXHJcbiAgcHJlbG9hZDogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdwcmVsb2FkZXInLCAnYXNzZXRzL3ByZWxvYWRlci5naWYnKTtcclxuICB9LFxyXG5cclxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuZ2FtZS5pbnB1dC5tYXhQb2ludGVycyA9IDE7XHJcblxyXG4gICAgLypcclxuICAgIGlmICh0aGlzLmdhbWUuZGV2aWNlLmRlc2t0b3ApIHtcclxuICAgICAgLy90aGlzLmdhbWUuc3RhZ2Uuc2NhbGUucGFnZUFsaWduSG9yaXpvbnRhbGx5ID0gdHJ1ZTtcclxuICAgICAgdGhpcy5nYW1lLnNjYWxlLnNjYWxlTW9kZSA9IFBoYXNlci5TY2FsZU1hbmFnZXIuUkVTSVpFO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5nYW1lLnNjYWxlLnNjYWxlTW9kZSA9IFBoYXNlci5TY2FsZU1hbmFnZXIuU0hPV19BTEw7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5taW5XaWR0aCA9ICA0ODA7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5taW5IZWlnaHQgPSAyNjA7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5tYXhXaWR0aCA9IDY0MDtcclxuICAgICAgdGhpcy5nYW1lLnNjYWxlLm1heEhlaWdodCA9IDQ4MDtcclxuICAgICAgdGhpcy5nYW1lLnNjYWxlLmZvcmNlTGFuZHNjYXBlID0gdHJ1ZTtcclxuICAgICAgdGhpcy5nYW1lLnNjYWxlLnBhZ2VBbGlnbkhvcml6b250YWxseSA9IHRydWU7XHJcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zZXRTY3JlZW5TaXplKHRydWUpO1xyXG4gICAgfVxyXG4gICAgKi9cclxuICAgIHZhciB3aWR0aCA9IDgwMDtcclxuICAgIHZhciBoZWlnaHQgPSA4MDA7XHJcbiAgICB0aGlzLmdhbWUud2lkdGggPSB3aWR0aDtcclxuICAgIHRoaXMuZ2FtZS5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAvLyB0aGlzLmdhbWUuc3RhZ2UuYm91bmRzLndpZHRoID0gd2lkdGg7XHJcbiAgICAvLyB0aGlzLmdhbWUuc3RhZ2UuYm91bmRzLmhlaWdodCA9IGhlaWdodDtcclxuICAgIC8vIHRoaXMuZ2FtZS5yZW5kZXJlci5yZXNpemUod2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdQcmVsb2FkZXInKTtcclxuICB9XHJcbn07XHJcbiIsIi8qXHJcbk1haW4gdGVzdGluZyBlbnZpcm9ubWVudC5cclxuKi9cclxuXHJcbnZhciBNb2R1bGVCdWlsZGVyID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvTW9kdWxlQnVpbGRlcicpO1xyXG52YXIgQ3ViZUdyb3VwID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvY3ViZV9ncm91cCcpO1xyXG52YXIgTW91c2UgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9tb3VzZScpO1xyXG52YXIgSnVpY3kgPSByZXF1aXJlKCcuLi9wbHVnaW5zL0p1aWN5Jyk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG5cclxudmFyIGJnLCBiZzI7XHJcbnZhciBudW1Sb2lkcyA9IDA7XHJcbnZhciBtYXhSb2lkcyA9IDUwO1xyXG52YXIgY3ViZUNHLCBhc3Rlcm9pZENHO1xyXG52YXIgYXN0ZXJvaWRzLCBhc3Rlcm9pZExpc3Q7XHJcbnZhciBsZWZ0S2V5LCByaWdodEtleSwgY3dLZXksIGNjd0tleTtcclxuXHJcbnZhciBHYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMudGVzdGVudGl0eSA9IG51bGw7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEdhbWU7XHJcblxyXG5HYW1lLnByb3RvdHlwZSA9IHtcclxuXHRcclxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHR0aGlzLmdhbWUud29ybGQuc2V0Qm91bmRzKDAsIDAsIDgwMDAsIDQwMDApO1xyXG5cdFxyXG5cdC8vQ3JlYXRlIHRoZSB0d28gYmFja2dyb3VuZCBpbWFnZXNcclxuICAgIGJnID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUoMCwgMCwgJ2VhcnRoTmlnaHQnKTtcclxuXHRiZzIgPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSgtODAwMCwgMCwgJ2VhcnRoTmlnaHQnKTtcclxuXHRcclxuXHR0aGlzLmdhbWUucGh5c2ljcy5zdGFydFN5c3RlbShQaGFzZXIuUGh5c2ljcy5QMkpTKTtcclxuICAgdGhpcy5nYW1lLnBoeXNpY3MucDIuc2V0SW1wYWN0RXZlbnRzKHRydWUpO1xyXG4gICBcclxuICAgdGhpcy51cGRhdGVEZXBlbmRlbnRzID0gW107XHJcbiAgIFxyXG5cdC8vY3JlYXRlIE1vZHVsZUJ1aWxkZXIgYW5kIHN0b3JlIGl0IGluIHRoaXMgZ2FtZSBzdGF0ZSBvYmplY3RcclxuXHR0aGlzLm1vZHVsZUJ1aWxkZXIgPSBuZXcgTW9kdWxlQnVpbGRlcih0aGlzKTtcclxuXHQvL2NyZWF0ZSBhbmQgc3RvcmUgdGhlIGNvcmUgbW9kdWxlXHJcblx0dGhpcy5jb3JlTW9kdWxlID0gdGhpcy5tb2R1bGVCdWlsZGVyLmJ1aWxkKCdjb3JlJywgMTUwMCwgMTUwMCwgdHJ1ZSk7XHJcbiAgIHRoaXMuY3ViZVdpZHRoID0gdGhpcy5jb3JlTW9kdWxlLmN1YmUud2lkdGg7XHJcbiAgIHRoaXMuY3ViZUJ1ZmZlciA9IDI7XHJcbiAgIHZhciBwbGF5ZXJHcm91cCA9IG5ldyBDdWJlR3JvdXAodGhpcywgdGhpcy5jb3JlTW9kdWxlLmN1YmUpO1xyXG4gICB0aGlzLnVwZGF0ZURlcGVuZGVudHMucHVzaChwbGF5ZXJHcm91cCk7XHJcblx0dGhpcy5wbGF5ZXIgPSBwbGF5ZXJHcm91cDtcclxuICAgdGhpcy5wbGF5ZXIuaXNQbGF5ZXIgPSB0cnVlO1xyXG4gICBcclxuICAgdGhpcy5tb3VzZSA9IG5ldyBNb3VzZSh0aGlzLmdhbWUsIHRoaXMuaW5wdXQsIHBsYXllckdyb3VwKTtcclxuXHRcclxuXHR0aGlzLnNwYWNlS2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuU1BBQ0VCQVIpO1xyXG5cdHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXlDYXB0dXJlKFt0aGlzLnNwYWNlS2V5XSk7XHJcblx0Ly9DcmVhdGVzIGNvbGxpc2lvbiBncm91cHMgZm9yIHRoZSBwbGF5ZXIgYW5kIHRoZSBhc3Rlcm9pZHNcclxuXHRjdWJlQ0cgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVDb2xsaXNpb25Hcm91cCgpO1xyXG5cdGFzdGVyb2lkQ0cgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVDb2xsaXNpb25Hcm91cCgpO1xyXG5cdFxyXG5cdGFzdGVyb2lkcyA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuXHRhc3Rlcm9pZHMuZW5hYmxlQm9keSA9IHRydWU7XHJcblx0YXN0ZXJvaWRzLnBoeXNpY3NCb2R5VHlwZSA9IFBoYXNlci5QaHlzaWNzLlAySlM7XHJcblx0YXN0ZXJvaWRMaXN0ID0gbmV3IFBoYXNlci5BcnJheVNldCgpO1xyXG5cdHRoaXMuZ2VuZXJhdGVBc3Rlcm9pZHMoKTtcclxuXHRcclxuXHRsZWZ0S2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuQSk7XHJcblx0cmlnaHRLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5EKTtcclxuXHRjY3dLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5RKTtcclxuXHRjd0tleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkUpO1xyXG5cdFxyXG5cdC8vREVCVUdHSU5HIExJU1RFTkVSUy0gYWxsb3cgeW91IHRvIGNyZWF0ZSBtb2R1bGVzIGJ5IHByZXNzaW5nIGtleXNcclxuXHQvL2NvcmVcclxuXHR0aGlzLnBsYWNlQ29yZUtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlApO1xyXG5cdHRoaXMucGxhY2VDb3JlS2V5Lm9uRG93bi5hZGQodGhpcy5hZGRDb3JlLCB0aGlzKTtcclxuXHQvL3NoaWVsZFxyXG5cdHRoaXMucGxhY2VTaGllbGRLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5PKTtcclxuICAgIHRoaXMucGxhY2VTaGllbGRLZXkub25Eb3duLmFkZCh0aGlzLmFkZFNoaWVsZCwgdGhpcyk7XHJcblx0Ly90aHJ1c3RlclxyXG5cdHRoaXMucGxhY2VUaHJ1c3RlcktleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkkpO1xyXG4gICAgdGhpcy5wbGFjZVRocnVzdGVyS2V5Lm9uRG93bi5hZGQodGhpcy5hZGRUaHJ1c3RlciwgdGhpcyk7XHJcblx0Ly9zb2xhclBhbmVsXHJcblx0dGhpcy5wbGFjZVNQS2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuVSk7XHJcbiAgICB0aGlzLnBsYWNlU1BLZXkub25Eb3duLmFkZCh0aGlzLmFkZFNQLCB0aGlzKTtcclxuXHQvL0VORFxyXG4gICAgXHJcbiAgICAvLyBEZWJ1ZyBjb250cm9sbGVyXHJcbiAgICB0aGlzLmRlYnVnS2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuSCk7XHJcbiAgICB0aGlzLmRlYnVnS2V5Lm9uRG93bi5hZGQodGhpcy5kZWJ1ZywgdGhpcyk7XHJcbiAgICB0aGlzLnJvb3RTcGF3bmVkID0gZmFsc2U7XHJcbiAgICBcclxuICAgIHRoaXMuZGVidWdOdW0gPSAwO1xyXG4gICAgdGhpcy5teVJvb3QgPSB1bmRlZmluZWQ7XHJcblxyXG5cdCB0aGlzLmdhbWUuY2FtZXJhLnNldFBvc2l0aW9uKDEwMDAsIDEwMDApO1xyXG4gICAgXHJcbiAgICB0aGlzLmxldmVsRGF0YSA9IEpTT04ucGFyc2UodGhpcy5nYW1lLmNhY2hlLmdldFRleHQoJ2xldmVsX29uZScpKTtcclxuICAgIHRoaXMubG9hZERhdGEoKTtcclxuICAgIFxyXG4gICAgdGhpcy5qdWljeSA9IHRoaXMuZ2FtZS5wbHVnaW5zLmFkZChuZXcgUGhhc2VyLlBsdWdpbi5KdWljeSh0aGlzKSk7XHJcbiAgICB0aGlzLmdhbWUuY2FtZXJhLmZvbGxvdyh0aGlzLmNvcmVNb2R1bGUuY3ViZSk7XHJcbiAgfSxcclxuICBcclxuICBsb2FkRGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBteUxldmVsID0gdGhpcy5sZXZlbERhdGFbJ2xldmVsX29uZSddO1xyXG4gICAgICBmb3IgKHZhciBrZXkgaW4gbXlMZXZlbCkge1xyXG4gICAgICAgICBpZiAobXlMZXZlbC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gbXlMZXZlbFtrZXldO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnYmx1ZXByaW50JykpIHsgLy8gZW5lbXkgdHlwZVxyXG4gICAgICAgICAgICAgICB2YXIgZW5lbXlYID0gZWxlbWVudFsneF9wb3MnXTtcclxuICAgICAgICAgICAgICAgdmFyIGVuZW15WSA9IGVsZW1lbnRbJ3lfcG9zJ107XHJcbiAgICAgICAgICAgICAgIHZhciBlbmVteUdyb3VwID0gbmV3IEN1YmVHcm91cCh0aGlzLCB1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICAgICB0aGlzLnVwZGF0ZURlcGVuZGVudHMucHVzaChlbmVteUdyb3VwKTtcclxuICAgICAgICAgICAgICAgdmFyIGJsdWVwcmludCA9IGVsZW1lbnRbJ2JsdWVwcmludCddO1xyXG4gICAgICAgICAgICAgICAvLyB2YXIgcHJhY3RpY2FsID0gW107XHJcbiAgICAgICAgICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IGJsdWVwcmludC5sZW5ndGg7IHJvdysrKSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIHZhciBuZXdDb2wgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgYmx1ZXByaW50W3Jvd10ubGVuZ3RoOyBjb2wrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGJsdWVwcmludFtyb3ddW2NvbF07XHJcbiAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdNb2R1bGUgPSB0aGlzLm1vZHVsZUJ1aWxkZXIuYnVpbGQodHlwZSwgZW5lbXlYICsgcm93ICogKHRoaXMuY3ViZVdpZHRoICsgdGhpcy5jdWJlQnVmZmVyKSxcclxuICAgICAgICAgICAgICAgICAgICAgZW5lbXlZIC0gY29sICogKHRoaXMuY3ViZVdpZHRoICsgdGhpcy5jdWJlQnVmZmVyKSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAvLyBuZXdDb2wucHVzaChuZXdNb2R1bGUuY3ViZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQocm93LCBjb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgICBlbmVteUdyb3VwLmFkZChuZXdNb2R1bGUuY3ViZSwgcG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIC8vIHByYWN0aWNhbC5wdXNoKG5ld0NvbCk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgLy8gVE9ETzogZ2l2ZSBkaWZmZXJlbnQgdHlwZXMgaGVyZVxyXG4gICAgICAgICAgICAgICBlbmVteUdyb3VwLmdpdmVBSSgncmFtJywgdGhpcy5wbGF5ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gIH0sXHJcblxyXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkgeyAgICBcclxuXHRpZihsZWZ0S2V5LmlzRG93bikge1xyXG5cdFx0aWYodGhpcy5jb3JlTW9kdWxlLmN1YmUuYm9keS5hbmd1bGFyVmVsb2NpdHkgPiAtOSkgeyBcclxuXHRcdFx0dGhpcy5jb3JlTW9kdWxlLmN1YmUuYm9keS5hbmd1bGFyRm9yY2UgKz0gLTUgKiBNYXRoLnBvdyh0aGlzLnBsYXllci5udW1DdWJlcywgMS42NSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGlmKHJpZ2h0S2V5LmlzRG93bikge1xyXG5cdFx0aWYodGhpcy5jb3JlTW9kdWxlLmN1YmUuYm9keS5hbmd1bGFyVmVsb2NpdHkgPCA5KSB7XHJcblx0XHRcdHRoaXMuY29yZU1vZHVsZS5jdWJlLmJvZHkuYW5ndWxhckZvcmNlICs9IDUgKiBNYXRoLnBvdyh0aGlzLnBsYXllci5udW1DdWJlcywgMS42NSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGlmKGNjd0tleS5pc0Rvd24pIHtcclxuXHRcdGlmKHRoaXMubW91c2UuZ3JhYmJlZCAhPT0gdW5kZWZpbmVkICYmIHRoaXMubW91c2UuZ3JhYmJlZC5zcHJpdGUuZ3JvdXAgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLm1vdXNlLmdyYWJiZWQuYW5ndWxhckZvcmNlICs9IC01O1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRpZihjd0tleS5pc0Rvd24pIHtcclxuXHRcdGlmKHRoaXMubW91c2UuZ3JhYmJlZCAhPT0gdW5kZWZpbmVkICYmIHRoaXMubW91c2UuZ3JhYmJlZC5zcHJpdGUuZ3JvdXAgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLm1vdXNlLmdyYWJiZWQuYW5ndWxhckZvcmNlICs9IDU7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG4gICB0aGlzLm1vdXNlLnVwZGF0ZSgpO1xyXG5cdHRoaXMuc2Nyb2xsQkcoKTtcclxuICAgXHJcbiAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy51cGRhdGVEZXBlbmRlbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICh0aGlzLnVwZGF0ZURlcGVuZGVudHNbaV0udXBkYXRlKSB7XHJcbiAgICAgICAgIHRoaXMudXBkYXRlRGVwZW5kZW50c1tpXS51cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICB9XHJcbiAgfSxcclxuICBcclxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgdGhpcy5tb3VzZS5yZW5kZXIoKTtcclxuXHR0aGlzLmdhbWUuZGVidWcudGV4dCgnbW91c2VYOiAnICsgdGhpcy5tb3VzZVggKyAnIG1vdXNlWTogJyArIHRoaXMubW91c2VZLCAzMiwgMzIpO1xyXG5cdHRoaXMuZ2FtZS5kZWJ1Zy50ZXh0KCdpbnB1dC54OiAnICsgdGhpcy5pbnB1dC54ICsgJyBpbnB1dC55OiAnICsgdGhpcy5pbnB1dC55LCAzMiwgNDgpO1xyXG4gICB0aGlzLmdhbWUuZGVidWcudGV4dChtYXhSb2lkcywgMzIsIDMyKTtcclxuICB9LFxyXG4gIFxyXG5cdHNjcm9sbEJHOiBmdW5jdGlvbigpIHtcclxuXHRcdGJnLnggKz0gMC4xMjU7XHJcblx0XHRpZihiZy54ID49IDgwMDApIHtcclxuXHRcdFx0YmcueCArPSAwO1xyXG5cdFx0fVxyXG5cdFx0YmcyLnggKz0gMC4xMjU7XHJcblx0XHRpZihiZzIueCA+PSA4MDAwKSB7XHJcblx0XHRcdGJnMi54ID0gMDtcclxuXHRcdH1cclxuXHR9LFxyXG5cdFxyXG5cdGdlbmVyYXRlQXN0ZXJvaWRzOiBmdW5jdGlvbigpIHtcclxuXHRcdGZvcig7bnVtUm9pZHMgPCBtYXhSb2lkczsgbnVtUm9pZHMrKykge1xyXG5cdFx0XHR2YXIgY29pbkEgPSB0aGlzLmdhbWUucm5kLmludGVnZXJJblJhbmdlKDAsMSk7XHJcblx0XHRcdHZhciBjb2luQiA9IHRoaXMuZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoMCwxKTtcclxuXHRcdFx0dmFyIGFzdGVyb2lkO1xyXG5cdFx0XHRpZihjb2luQSA9PT0gMSkge1xyXG5cdFx0XHRcdGlmKGNvaW5CID09PSAxKSB7IC8vU3Bhd24gYXN0ZXJvaWQgYWJvdmUgc2NyZWVuXHJcblx0XHRcdFx0XHRhc3Rlcm9pZCA9IGFzdGVyb2lkcy5jcmVhdGUodGhpcy5jb3JlTW9kdWxlLmN1YmUueCArIHRoaXMuZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoLXRoaXMuZ2FtZS5jYW1lcmEud2lkdGgvMiwgdGhpcy5nYW1lLmNhbWVyYS53aWR0aC8yKSwgdGhpcy5jb3JlTW9kdWxlLmN1YmUueSAtIHRoaXMuZ2FtZS5jYW1lcmEuaGVpZ2h0LzIgLSB0aGlzLmdhbWUucm5kLmludGVnZXJJblJhbmdlKDMyLCAzMDApLCAnYXN0ZXJvaWQnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB7IC8vU3Bhd24gYXN0ZXJvaWQgYmVsb3cgc2NyZWVuXHJcblx0XHRcdFx0XHRhc3Rlcm9pZCA9IGFzdGVyb2lkcy5jcmVhdGUodGhpcy5jb3JlTW9kdWxlLmN1YmUueCArIHRoaXMuZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoLXRoaXMuZ2FtZS5jYW1lcmEud2lkdGgvMiwgdGhpcy5nYW1lLmNhbWVyYS53aWR0aC8yKSwgdGhpcy5jb3JlTW9kdWxlLmN1YmUueSArIHRoaXMuZ2FtZS5jYW1lcmEuaGVpZ2h0LzIgKyB0aGlzLmdhbWUucm5kLmludGVnZXJJblJhbmdlKDMyLCAzMDApLCAnYXN0ZXJvaWQnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0aWYoY29pbkIgPT09IDEpIHsgLy9TcGF3biBhc3Rlcm9pZCB0byBsZWZ0IG9mIHNjcmVlblxyXG5cdFx0XHRcdFx0YXN0ZXJvaWQgPSBhc3Rlcm9pZHMuY3JlYXRlKHRoaXMuY29yZU1vZHVsZS5jdWJlLnggLSB0aGlzLmdhbWUuY2FtZXJhLndpZHRoLzIgLSB0aGlzLmdhbWUucm5kLmludGVnZXJJblJhbmdlKDMyLCAzMDApLCB0aGlzLmNvcmVNb2R1bGUuY3ViZS55ICsgdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgtdGhpcy5nYW1lLmNhbWVyYS5oZWlnaHQvMiwgdGhpcy5nYW1lLmNhbWVyYS5oZWlnaHQvMiksICdhc3Rlcm9pZCcpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHsgLy9TcGF3biBhc3Rlcm9pZCB0byByaWdodFxyXG5cdFx0XHRcdFx0YXN0ZXJvaWQgPSBhc3Rlcm9pZHMuY3JlYXRlKHRoaXMuY29yZU1vZHVsZS5jdWJlLnggKyB0aGlzLmdhbWUuY2FtZXJhLndpZHRoLzIgKyB0aGlzLmdhbWUucm5kLmludGVnZXJJblJhbmdlKDMyLCAzMDApLCB0aGlzLmNvcmVNb2R1bGUuY3ViZS55ICsgdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgtdGhpcy5nYW1lLmNhbWVyYS5oZWlnaHQvMiwgdGhpcy5nYW1lLmNhbWVyYS5oZWlnaHQvMiksICdhc3Rlcm9pZCcpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0YXN0ZXJvaWQuYm9keS5zZXRDaXJjbGUoMTYpOyAvL0NoYW5nZSB0aGUgY29sbGlzaW9uIGRldGVjdGlvbiBmcm9tIGFuIEFBQkIgdG8gYSBjaXJjbGVcclxuXHRcdFx0YXN0ZXJvaWQuYm9keS5hbmd1bGFyRGFtcGluZyA9IDA7XHJcblx0XHRcdGFzdGVyb2lkLmJvZHkuZGFtcGluZyA9IDA7XHJcblx0XHRcdGFzdGVyb2lkLmJvZHkucm90YXRpb24gPSB0aGlzLmdhbWUucm5kLnJlYWxJblJhbmdlKDAsIDIgKiAzLjE0KTtcclxuXHRcdFx0YXN0ZXJvaWQuYm9keS5mb3JjZS54ID0gdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgtMTAsIDEwKSAqIDc1MDtcclxuXHRcdFx0YXN0ZXJvaWQuYm9keS5mb3JjZS55ID0gdGhpcy5nYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSgtMTAsIDEwKSAqIDc1MDtcclxuXHRcdFx0YXN0ZXJvaWQuYm9keS5zZXRDb2xsaXNpb25Hcm91cChhc3Rlcm9pZENHKTsgLy9TZXQgZWFjaCBhc3Rlcm9pZCB0byB1c2UgdGhlIGFzdGVyb2lkIGNvbGxpc2lvbiBncm91cFxyXG5cdFx0XHRhc3Rlcm9pZC5ib2R5LmNvbGxpZGVzKFthc3Rlcm9pZENHLCBjdWJlQ0ddKTsgLy9TZXRzIHdoYXQgdGhlIGFzdGVyb2lkcyB3aWxsIGNvbGxpZGUgd2l0aC4gQ2FuIGJlIGFuIGFycmF5IG9yIGp1c3QgYSBzaW5nbGUgY29sbGlzaW9uIGdyb3VwXHJcblx0XHRcdGFzdGVyb2lkTGlzdC5hZGQoYXN0ZXJvaWQpO1xyXG5cdFx0fVxyXG5cdH0sXHJcbiAgXHJcbiAgLy9ERUJVRyBGVU5DVElPTlMtIGV2ZW50IGZ1bmN0aW9ucyBjYWxsZWQgZnJvbSBsaXN0ZW5lcnMgdGhhdCBhbGxvdyB5b3UgdG8gY3JlYXRlIG1vZHVsZXMgd2l0aCBrZXkgcHJlc3Nlc1xyXG4gIGFkZENvcmU6IGZ1bmN0aW9uICgpIHsgXHJcblx0Ly9BdHRlbXB0cyB0byBjcmVhdGUgbW9yZSBjb3JlIG1vZHVsZXMgaGVyZSB3aWxsIG9ubHkgcmV0dXJuIHRoZSBleGlzdGluZyBjb3JlXHJcblx0dGhpcy5tb2R1bGVCdWlsZGVyLmJ1aWxkKCdjb3JlJywgdGhpcy5tb3VzZS54LCB0aGlzLm1vdXNlLnksIHRydWUpO1xyXG4gIH0sXHJcbiAgYWRkU2hpZWxkOiBmdW5jdGlvbiAoKSB7XHJcblx0dGhpcy5tb2R1bGVCdWlsZGVyLmJ1aWxkKCdzaGllbGQnLCB0aGlzLm1vdXNlLngsIHRoaXMubW91c2UueSwgdHJ1ZSk7XHJcbiAgfSxcclxuICBhZGRUaHJ1c3RlcjogZnVuY3Rpb24gKCkge1xyXG5cdHRoaXMubW9kdWxlQnVpbGRlci5idWlsZCgndGhydXN0ZXInLCB0aGlzLm1vdXNlLngsIHRoaXMubW91c2UueSwgdHJ1ZSk7XHJcbiAgfSxcclxuICBhZGRTUDogZnVuY3Rpb24gKCkge1xyXG5cdHRoaXMubW9kdWxlQnVpbGRlci5idWlsZCgnc29sYXJQYW5lbCcsIHRoaXMubW91c2UueCwgdGhpcy5tb3VzZS55LCB0cnVlKTtcclxuICB9LFxyXG5cclxuICBkZWJ1ZzogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5qdWljeS5zaGFrZSgpO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwidmFyIE1lbnUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy50ZXh0ID0gbnVsbDtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTWVudTtcclxuXHJcbk1lbnUucHJvdG90eXBlID0ge1xyXG5cclxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB4ID0gdGhpcy5nYW1lLndpZHRoIC8gMjtcclxuICAgIHZhciB5ID0gdGhpcy5nYW1lLmhlaWdodCAvIDI7XHJcblxyXG4gICAgdmFyIHN0eWxlID0geyBmb250OiAnNjVweCBBcmlhbCcsIGZpbGw6ICcjZmZmZmZmJywgYWxpZ246ICdjZW50ZXInIH07XHJcblxyXG4gICAgdGhpcy50ZXh0ID0gdGhpcy5hZGQudGV4dCh4IC0gMzAwLCB5IC0gMjAwLCAnUHJlc3MgdG8gU3RhcnQnLCBzdHlsZSk7XHJcblxyXG4gICAgdGhpcy5pbnB1dC5vbkRvd24uYWRkKHRoaXMub25Eb3duLCB0aGlzKTtcclxuICB9LFxyXG5cclxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICB9LFxyXG5cclxuICBvbkRvd246IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydChwbGF5ZXJTdGF0ZS5jdXJyZW50TGV2ZWwpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuICB9XHJcbn07XHJcbiIsInZhciBQcmVsb2FkZXIgPSBmdW5jdGlvbiAoZ2FtZSkge1xyXG4gIGdhbWUgPSBudWxsO1xyXG4gIHRoaXMuYXNzZXQgPSBudWxsO1xyXG4gIHRoaXMucmVhZHkgPSBmYWxzZTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUHJlbG9hZGVyO1xyXG5cclxuUHJlbG9hZGVyLnByb3RvdHlwZSA9IHtcclxuXHJcbiAgcHJlbG9hZDogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5hc3NldCA9IHRoaXMuYWRkLnNwcml0ZSg2NDAsIDM2MCwgJ3ByZWxvYWRlcicpO1xyXG4gICAgdGhpcy5hc3NldC5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG5cclxuICAgIHRoaXMubG9hZC5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKHRoaXMub25Mb2FkQ29tcGxldGUsIHRoaXMpO1xyXG4gICAgdGhpcy5sb2FkLnNldFByZWxvYWRTcHJpdGUodGhpcy5hc3NldCk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ3Rlc3RzcHJpdGUnLCAnYXNzZXRzL3Rlc3QyLnBuZycpO1xyXG5cdHRoaXMubG9hZC5zcHJpdGVzaGVldCgnY29yZScsICdhc3NldHMvY29yZVNoZWV0LnBuZycsIDY0LCA2NCk7XHJcblx0dGhpcy5sb2FkLnNwcml0ZXNoZWV0KCd0aHJ1c3RlcicsICdhc3NldHMvdGhydXN0ZXJTaGVldC5wbmcnLCA2NCwgNjQpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnc2hpZWxkJywgJ2Fzc2V0cy9zaGllbGQucG5nJyk7XHJcblx0dGhpcy5sb2FkLmltYWdlKCdzb2xhclBhbmVsJywgJ2Fzc2V0cy9zb2xhclBhbmVsLnBuZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnYXN0ZXJvaWQnLCAnYXNzZXRzL2FzdGVyb2lkLnBuZycpO1xyXG4gICB0aGlzLmxvYWQuYXRsYXNKU09OSGFzaCgnY29ubmVjdGlvbnMnLCAnYXNzZXRzL2Nvbm5lY3Rpb25zLnBuZycsICdhc3NldHMvY29ubmVjdGlvbnMuanNvbicpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnZWFydGhOaWdodCcsICdhc3NldHMvYmdfZWFydGhOaWdodFNtYWxsLmpwZycpO1xyXG4gICAgdGhpcy5sb2FkLnBoeXNpY3MoJ21vZHVsZV9waHlzaWNzJywgJ2Fzc2V0cy9tb2R1bGVfcGh5c2ljcy5qc29uJyk7XHJcbiAgIHRoaXMubG9hZC50ZXh0KCdsZXZlbF9vbmUnLCAnYXNzZXRzL2xldmVsX29uZS5qc29uJyk7XHJcbiAgfSxcclxuXHJcbiAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmFzc2V0LmNyb3BFbmFibGVkID0gZmFsc2U7XHJcbiAgfSxcclxuXHJcbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoISF0aGlzLnJlYWR5KSB7XHJcbiAgICAgIC8vIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnTWVudScpO1xyXG4gICAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQocGxheWVyU3RhdGUuY3VycmVudExldmVsKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgb25Mb2FkQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMucmVhZHkgPSB0cnVlO1xyXG4gIH1cclxufTtcclxuIiwidmFyIFNwbGFzaCA9IGZ1bmN0aW9uICgpIHtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU3BsYXNoO1xyXG5cclxuU3BsYXNoLnByb3RvdHlwZSA9IHtcclxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuICB9XHJcbn07IiwiLypcclxuQ29sbGVjdGlvbiBvZiB1dGlsaXR5IGZ1bmN0aW9ucy5cclxuKi9cclxuXHJcbnZhciBVdGlscyA9IHtcclxuICAgIGNvbnRhaW5zT2JqZWN0OiBmdW5jdGlvbihvYmosIGxpc3QpIHtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGRpc3RhbmNlOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Mikge1xyXG4gICAgICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyh4MSAtIHgyLCAyKSArIE1hdGgucG93KHkxIC0geTIsIDIpKTtcclxuICAgIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVXRpbHM7Il19
=======
//# sourceMappingURL=data:application/json;base64,
>>>>>>> origin/gh-pages
