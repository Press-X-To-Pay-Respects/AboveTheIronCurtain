(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
var game = new Phaser.Game(window.innerWidth, window.innerHeigh, Phaser.AUTO, 'atic-game');

window.playerState = {
    currentLevel: 'Game'
};

//  The Google WebFont Loader will look for this object, so create it before loading the script.
WebFontConfig = { // jshint ignore:line
    //  The Google Fonts we want to load (specify as many as you like in the array)
    google: {
      families: ['Roboto::latin', 'VT323::latin']
    }
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');
},{"./states/boot":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\boot.js","./states/game":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\game.js","./states/menu":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\menu.js","./states/preloader":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\preloader.js","./states/splash":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\splash.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\effects\\BinaryParticle.js":[function(require,module,exports){
var BinaryParticle = function(game, targetObj, x, y, tarOffsetX, tarOffsetY) {
	var style = {font: '20px VT323', fill: '#FFFFFF', align: 'center'};
	var byteSymbol = Math.random() >= 0.5 ? '1' : '0';
	Phaser.Text.call(this, game, x, y, byteSymbol, style);
	game.add.existing(this);
	this.targetObj = targetObj;
	this.speed = 3.6;
	this.tarOffsetX = tarOffsetX;
	this.tarOffsetY = tarOffsetY;
};

BinaryParticle.prototype = Object.create(Phaser.Text.prototype);
BinaryParticle.prototype.constructor = BinaryParticle;

BinaryParticle.prototype.update = function() {
	//Get delta vector to target object
	var delta = [this.targetObj.x + this.tarOffsetX - this.x, this.targetObj.y + this.tarOffsetY - this.y];
	//Get distance and check if we've reached target distance
	var dist = Math.sqrt(Math.pow(delta[0], 2) + Math.pow(delta[1], 2));
	if(dist <= this.speed) {
		this.destroy();
		return;
	}
	//Normalize delta vector
	delta = [delta[0]/dist, delta[1]/dist];
	//Update position
	this.x = this.x + this.speed*delta[0];
	this.y = this.y + this.speed*delta[1];
};

module.exports = BinaryParticle;
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\effects\\Emitter.js":[function(require,module,exports){
var BinaryParticle = require('./BinaryParticle');

var Emitter = function(gameState) {
	this.gameState = gameState;
};

Emitter.prototype.constructor = Emitter;

Emitter.prototype.emitBinary = function (targetObj, x, y, spacing) {
	var offsetX = (Math.random()-0.5)*spacing;
	var offsetY = (Math.random()-0.5)*spacing;
	var newParticle = new BinaryParticle(this.gameState.game, targetObj, x, y, offsetX, offsetY);
};

module.exports = Emitter;
},{"./BinaryParticle":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\effects\\BinaryParticle.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\Bullet.js":[function(require,module,exports){
//Bullets are tagged as 'playerBullet' or 'enemyBullet'
var Bullet = function(gameState, x, y, direction, inhertitSpeed, tag) {
    Phaser.Sprite.call(this, gameState.game, x, y, 'bullet');
	this.direction = direction; //Unit vector representing direction bullet is travelling;
	this.speed = 500 + inhertitSpeed;				//Speed bullet is travelling;
	this.tag = tag;
	this.game = gameState.game;
	this.game.add.existing(this);
	this.lifeTime = 300;
	var scale = 0.5;
	this.scale.x = scale;
	this.scale.y = scale;
	this.anchor.setTo(0.5, 0.5);
	this.destroyBuffer = 100;
	
	//set physics
	gameState.game.physics.p2.enable(this);
	this.body.setCollisionGroup(gameState.collisionGroup);
	this.body.collides(gameState.collisionGroup);
	//Set proper collision function by determining type from 'tag'
	if(this.tag === 'enemyBullet') {
		this.collision = function(other) {
			if(other) {
				if(other.sprite){
					if(other.sprite.tag) {
						if(other.sprite.tag === 'module') {
							other.sprite.takeDamage(1);
						}
						this.destroy();
					}
				}
			}
		};
	}
	else if(this.tag === 'playerBullet') {
		this.collision = function(other) {
			if(other) {
				if(other.sprite){
					if(other.sprite.tag) {
						if(other.sprite.tag === 'enemy_module') {
							other.sprite.takeDamage(1);
						}
					}
				}
			}
			this.destroy();
		};
	}
	this.body.onBeginContact.add(this.collision, this);
	this.body.setZeroDamping();
	this.body.mass = 0.1;
	this.body.velocity.x = direction[0]*this.speed;
	this.body.velocity.y = direction[1]*this.speed;
};

Bullet.prototype = Object.create(Phaser.Sprite.prototype);
Bullet.prototype.constructor = Bullet;

Bullet.prototype.update = function() {
	if(this.body.x > this.game.camera.x + this.game.camera.width + this.destroyBuffer || this.body.x  < this.game.camera.x - this.destroyBuffer || 
	this.body.y > this.game.camera.y + this.game.camera.height + this.destroyBuffer || this.body.y < this.game.camera.y - this.destroyBuffer) {
		this.destroy(true);
	}
};

module.exports = Bullet;
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\Hackable.js":[function(require,module,exports){
// DEPRECATED

/*
Defines a hackable object.
*/

var Hackable = function (gameState, x, y, sprite, hackDistance) {
   Phaser.Sprite.call(this, gameState.game, x, y, sprite);
   gameState.game.add.existing(this);
	//store gameState
	this.gameState = gameState;
	//set isHacked to false
	this.isHacked = false;
	this.beingHacked = false;
	this.beingHackedPrev = false;
	//add hackBar
	this.hackBar = gameState.uiBuilder.buildProgressBar('growing', 1500, 1200, 100, 10,  200);
	this.hackBar.setStyle(0, 0xFFFFFF, 0x363636, 0, 0, 0, 0xFFFFFF, 0x2020CC);
	this.hackBar.hackable = this;
	this.hackBar.onEvent = function() {
		this.hackable.animations.stop();
		this.hackable.animations.play('hacked');
		this.hackable.isHacked = true;
		this.destroy();
	};
	this.tag = 'neutralObj';	//Tag is used to identify object type during collision checking
	this.hackDistance = hackDistance;
	var scale = 0.5;
   this.scale.x = scale;
   this.scale.y = scale;
   this.anchor.setTo(0.5, 0.5);
   this.animations.add('hackable', [0,1,2,3,4], 10, true);
   this.animations.add('hacked', [5,6,7,8,9], 10, true);
   this.hacking = this.gameState.add.audio('hacking', 1, true);
   
   //Set up physics body for 'hackable' sprite
   gameState.game.physics.p2.enable(this);
   this.body.setCollisionGroup(gameState.collisionGroup);
	this.body.collides(gameState.collisionGroup);
   this.body.onBeginContact.add(this.cubeCollide, this);
   this.body.damping = 0.9;
   this.body.angularDamping = 0.9;
};

Hackable.prototype = Object.create(Phaser.Sprite.prototype);
Hackable.prototype.constructor = Hackable;

/**
 * Automatically called by World.update
 */
Hackable.prototype.update = function() {
	this.hackBar.setLocation(this.x, this.y - 70);
	//check if getting hacked
	if(!this.isHacked) {
		this.animations.play('hackable');
		if(this.gameState.player.activeHackerModules.length > 0) {
			var dist;
			var hacker;
			//Loop through all hacker modules on the player's cubesat
			for(var i = 0; i < this.gameState.player.activeHackerModules.length; i++) {
				hacker = this.gameState.player.activeHackerModules[i];
				dist = Math.sqrt( Math.pow(this.x - hacker.cube.x, 2) + Math.pow(this.y - hacker.cube.y, 2) );
				if(dist < this.hackDistance) {
					//If hacker is in range, increase hack value and try to emit binary particle
					if(this.beingHacked === true) {
						this.beingHackedPrev = true;
					}
					this.beingHacked = true;
					this.hackBar.addValue(0.1);
					hacker.count++;
					if(hacker.count >= hacker.cycle) {
						hacker.count = 0;
						this.gameState.BinaryEmitter.emitBinary(this, hacker.cube.x, hacker.cube.y, 60);
						if(hacker.cube.frame === 5) {
							hacker.cube.frame = 0;
						}
						hacker.cube.frame++;
						
					}
				}
				else {
					hacker.cube.animations.stop();
					if(this.beingHacked === false) {
						this.beingHackedPrev = false;
					}
					this.beingHacked = false;
				}
			}
		}
	}
	else {
		this.hacking.stop();
	}
	if(this.beingHacked === true && this.beingHackedPrev === false) {
		if(this.hacking.paused === true) {
			this.hacking.resume();
		}
		else {
			this.hacking.play();
		}
	}
	else if(this.beingHacked === false && this.beingHackedPrev === true){
		this.hacking.pause();
	}
};


Hackable.prototype.cubeCollide = function(other) {
/*   if (this.group === undefined) {
      return;
   }
   this.group.handleCollision(this, other.sprite);*/
};

module.exports = Hackable;
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\Module.js":[function(require,module,exports){
//Don't use this function to create modules, instead use moduleBuilder()
var Module = function(setType, setCube, setGameState) {
	this.isActive = false;
	this.type = setType;
	this.cube = setCube;
	setCube.module = this;
	this.gameState = setGameState;
};

Module.prototype.constructor = Module;

module.exports = Module;
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js":[function(require,module,exports){
var Cube = require('./cube');
var Module = require('./Module');
var Bullet = require('./Bullet');

var thrustAmt = 5000;

//Use this to create a moduleBuilder- only need to create one instance of it
var ModuleBuilder = function(setGameState, setColGroup) {
	//Ensure that cannot create multiple instances of this class
	if(ModuleBuilder.prototype.exists) {
		return ModuleBuilder.prototype.existingReference;
	}
		
	this.gameState = setGameState;
   this.colGroup = setColGroup;
	// this.coreExists = false;	//records if core has been created
	this.core = null;			//stores core when it is created
	//var space = this.gameState.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
	ModuleBuilder.prototype.exists = true;
	ModuleBuilder.prototype.existingReference = this;
};

ModuleBuilder.prototype.constructor = ModuleBuilder;

//These var's help create the singleton functionality
ModuleBuilder.prototype.exists = false;
ModuleBuilder.prototype.existingReference = null;

/** Module functions **/
function solarPanelGiveTarget(target) {
   if (this === target || !this.cube.group || !target.cube.group || this.cube.group !== target.cube.group) {
      return;
   }
   this.cube.loseConnection();
   var ourGroup = this.cube.group;
   var newConnection = {start: this.cube, end: target.cube};
   this.cube.myConnection = newConnection;
   target.cube.myConnection = newConnection;
   ourGroup.displayConnection(this.cube.myConnection);
	if(!target.isActive) {
		//Activate the module
		target.isActive = true;
		this.modulePower.play();
		if(target.type === 'hacker') {
			ourGroup.activeHackerModules.push(target);
		}
		//If this is one of the powerable types, switch the frame from 'greyed' to 'active'
		if(target.type === 'gun' || target.type === 'hacker' || target.type === 'thruster') {
			target.cube.frame = 1;
		}
	}
}

function solarPanelMouseOver() {
   if (!this.cube.myConnection || !this.cube.group) {
      return;
   }
   this.cube.group.displayConnection(this.cube.myConnection);
}

function genericOnRemove() {
   this.cube.loseConnection();
}

function hackerOnLoseConnection() {
   var hackIndex = this.gameState.player.activeHackerModules.indexOf(this);
   this.gameState.player.activeHackerModules.splice(hackIndex, 1);
   this.isActive = false;
}

function beginAct() {
   this.timer = 0;
   this.act = true;
}

function endAct() {
   this.act = false;
   this.cube.frame = 1;
}

function thrusterUpdate() {
   if (this.haltTime && this.haltTime > 0) {
      this.haltTime -= this.cube.game.time.elapsed;
      this.cube.frame = 1;
   } else if (this.act && this.cube.myConnection) {
	  if(this.isThrust === true) {
		this.isThrustPrev = true;
	  }
	  this.isThrust = true;
      this.cube.body.force.x = thrustAmt * Math.cos(this.cube.rotation - Math.PI / 2);
      this.cube.body.force.y = thrustAmt * Math.sin(this.cube.rotation - Math.PI / 2);
	  if(this.cube.frame === 1) {
		this.cube.frame = 3;
	  }
	  else {
		this.cube.frame = 2;
	  }
	  if(this.isThrust === true && this.isThrustPrev === false) {
		this.thrusterLoop.play();
	  }
   }
   else if(!this.act) {
	  if(this.isThrust === false) {
		this.isThrustPrev = false;
	  }
	  this.isThrust = false;
	  if(this.isThrust === false && this.isThrustPrev === true) {
		this.thrusterLoop.stop();
	  }
   }
}

function thrusterHalt() {
   this.haltTime = 1500;
}

function gunUpdate() {
   if (!this.cube.myConnection || !this.act) {
      this.cube.animations.stop();
	  return;
   }
   if (this.timer <= 0) {
      var angle = this.cube.body.rotation % (2*Math.PI);
      var direction = [Math.sin(angle), -Math.cos(angle)];
      var deltaDist = Math.sqrt(Math.pow(this.cube.deltaX, 2) + Math.pow(this.cube.deltaY, 2));
      var speed = deltaDist * 50;
      new Bullet(this.gameState, this.cube.x + 30*direction[0], this.cube.y + 30*direction[1], 
               direction, speed, this.tag + 'Bullet');
	  this.gun.play();
      this.timer = 400;
   } else {
      this.timer -= this.gameState.game.time.elapsed;
   }
}

function hackableUpdate() {
   this.hackBar.setLocation(this.cube.x, this.cube.y - 25);
   if (this.barFadeDelay <= 0 && this.hackBar.graphics.alpha > 0) {
      this.hackBar.graphics.alpha -= this.gameState.time.elapsed * this.barFade;
   } else if (this.barFadeDelay > 0) {
      this.barFadeDelay -= this.gameState.time.elapsed;
   }
	//check if getting hacked
	if(!this.isHacked) {
		this.cube.animations.play('hackable');
		if(this.gameState.player.activeHackerModules.length > 0) {
			var dist;
			var hacker;
			//Loop through all hacker modules on the player's cubsat
			for(var i = 0; i < this.gameState.player.activeHackerModules.length; i++) {
				hacker = this.gameState.player.activeHackerModules[i];
				dist = Math.sqrt( Math.pow(this.cube.x - hacker.cube.x, 2) + Math.pow(this.cube.y - hacker.cube.y, 2) );
				if(dist < this.hackDistance) {
					//If hacker is in range, increase hack value and try to emit binary particle
               if (this.beingHacked) {
                  this.beingHackedPrev = true;
               }
               this.beingHacked = true;
					this.hackBar.addValue(0.1);
					hacker.count++;
					if(hacker.count >= hacker.cycle) {
                  this.hackBar.graphics.alpha = 1;
                  this.barFadeDelay = this.barFadeMaxDelay;
						hacker.count = 0;
						this.gameState.BinaryEmitter.emitBinary(this.cube, hacker.cube.x, hacker.cube.y, 60);
						if(hacker.cube.frame === 5) {
							hacker.cube.frame = 0;
						}
						hacker.cube.frame++;
						
					}
				}
				else {
					hacker.cube.animations.stop();
               if(!this.beingHacked) {
						this.beingHackedPrev = false;
					}
					this.beingHacked = false;
				}
			}
		}
	} else if (this.delay < 0) {
      this.hacking.stop();
      this.hackBar.destroy();
      this.cube.dieQuick();
   } else {
      this.hacking.stop();
      this.delay -= this.gameState.time.elapsed;
   }
   if(this.beingHacked === true && this.beingHackedPrev === false) {
		if(this.hacking.paused === true) {
			this.hacking.resume();
		}
		else {
			this.hacking.play();
		}
	}
	else if(this.beingHacked === false && this.beingHackedPrev === true){
		this.hacking.pause();
	}
}
/** End module functions **/

//call this function from ModuleBuilder to construct modules
//TYPES: 'core' 'shield' 'thruster' 'solarPannel' 'hacker'
ModuleBuilder.prototype.build = function(type, x, y, forPlayer) {	
	//Create cube object to be stored within module
	//Sprite names for modules are directly mapped to module names, so just pass 'type' as sprite name
	var newCube = new Cube(this.gameState, x, y, type);
    var scale = 0.5;
    newCube.name = this.gameState.debugNum++;
    newCube.scale.setTo(scale, scale);
    newCube.anchor.setTo(0.5, 0.5);
	
	//Create physics for new cube
    this.gameState.game.physics.p2.enable(newCube);
	newCube.body.setCollisionGroup(this.gameState.collisionGroup);
	newCube.body.collides(this.gameState.collisionGroup);
	newCube.body.onBeginContact.add(newCube.cubeCollide, newCube);
   newCube.body.damping = 0.9;
   newCube.body.angularDamping = 0.9;
 
   var cIndicator = this.gameState.add.sprite(0, 0, 'connections', 'connection_line.png');
   cIndicator.anchor.setTo(0.5, 0.5);
   cIndicator.animations.add('end', ['connection_end.png'], 60, true);
   cIndicator.animations.add('line', ['connection_line.png'], 60, true);
   cIndicator.animations.add('right', ['connection_right.png'], 60, true);
   newCube.addChild(cIndicator);
   newCube.cIndicator = cIndicator;
   cIndicator.alpha = 0;
	
	//Create module to wrap around cube class
	var newModule = new Module(type, newCube, this.gameState);
		
	//TODO: edit special module attributes based on 'type'
	if(type === 'hacker') {
		newModule.cycle = 6;
		newModule.count = 0;
		newModule.cube.animations.add('hacker', [0,1,2,3,4], 10, true);
      newModule.onRemove = genericOnRemove;
      newModule.onLoseConnection = hackerOnLoseConnection;
      newModule.powerable = true;
	}
	
	//Store module if it is core
	if(type === 'core')
	{
		newModule.cube.animations.add('core', [0,1,2], 20, true);
		newModule.cube.animations.play('core');
		this.core = newModule;
		this.coreExists = true;
      newModule.onRemove = genericOnRemove;
	}
   
   // solar panel testing
   if (type === 'solarPanel') {
	  newModule.modulePower = this.gameState.add.audio('modulePower', 0.5);
      newModule.giveTarget = solarPanelGiveTarget;
      newModule.mouseOver = solarPanelMouseOver;
      newModule.onRemove = genericOnRemove;
   }
   
   //Thruster module events
	if(type === 'thruster') {
	  newModule.isThrust = false;
	  newModule.isThrustPrev = false;
	  newModule.thrusterLoop = this.gameState.add.audio('thrusterLoop', 1, true);
	  newModule.thrusterLoop.allowMultiple = true;
      if (forPlayer) {
         var thrusterKey = this.gameState.input.keyboard.addKey(Phaser.Keyboard.W); 
         this.gameState.input.keyboard.addKeyCapture([thrusterKey]);
         thrusterKey.onDown.add(beginAct, newModule);
         thrusterKey.onUp.add(endAct, newModule);
      } else {
         // newModule.thrust = false;
         newModule.beginAct = beginAct;
         newModule.endAct = endAct;
      }
      newModule.update = thrusterUpdate;
      newModule.thrusterHalt = thrusterHalt;
      newModule.onRemove = genericOnRemove;
      newModule.powerable = true;
	}

	//Gun module events
	if(type === 'gun') {
	  newModule.cube.animations.add('gun', [0,1,2,3,4,5], 16, true);
	  newModule.gun = this.gameState.add.audio('gun');
	  newModule.gun.allowMultiple = true;
      if (forPlayer) {
	     newModule.tag = 'player';
         var actKey = this.gameState.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
         this.gameState.input.keyboard.addKeyCapture([actKey]);
         actKey.onDown.add(beginAct, newModule);
         actKey.onUp.add(endAct, newModule);
      } else {
		 newModule.tag = 'enemy';
         newModule.beginAct = beginAct;
         newModule.endAct = endAct;
      }
	  newModule.update = gunUpdate;
     newModule.onRemove = genericOnRemove;
     newModule.powerable = true;
	}
   
   if (type === 'hackable') {
      // set values
      newModule.isHacked = false;
      newModule.hackDistance = 400;
      newModule.cube.animations.add('hackable', [0,1,2,3,4], 10, true);
      newModule.cube.animations.add('hacked', [5,6,7,8,9], 10, true);
      newModule.barFade = 0.001;
      newModule.barFadeMaxDelay = 200;
      newModule.barFadeDelay = 0;
      newModule.delay = 1600;
      newModule.beingHacked = false;
      newModule.beingHackedPrev = false;
      newModule.hacking = this.gameState.add.audio('hacking', 1, true);
      // give progress bar
      newModule.hackBar = this.gameState.uiBuilder.buildProgressBar('growing', 1500, 1200, 100, 10,  200);
      newModule.hackBar.setStyle(0, 0xFFFFFF, 0x363636, 0, 0, 0, 0xFFFFFF, 0x2020CC);
      newModule.hackBar.hackable = newModule.cube;
      newModule.hackBar.onEvent = function() {
         this.hackable.animations.stop();
         this.hackable.animations.play('hacked');
         this.hackable.module.isHacked = true;
      };
      // add functions
      newModule.update = hackableUpdate;
      newModule.onRemove = genericOnRemove;
   }
	//Return the module object
	return newModule;
};

module.exports = ModuleBuilder;
















},{"./Bullet":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\Bullet.js","./Module":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\Module.js","./cube":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\cube.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\cheating.js":[function(require,module,exports){
var Cheating = function(state) {
   // initialisation
	this.state = state;
   this.game = state.game;
   this.cam = this.game.camera;
   this.mouse = this.state.mouse;
   // buttons
   //core
	this.placeCoreKey = this.game.input.keyboard.addKey(Phaser.Keyboard.P);
	this.placeCoreKey.onDown.add(this.debugAddModule, {caller: this, key: 'core'});
	//shield
	this.placeShieldKey = this.game.input.keyboard.addKey(Phaser.Keyboard.O);
    this.placeShieldKey.onDown.add(this.debugAddModule, {caller: this, key: 'shield'});
	//thruster
	this.placeThrusterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.I);
    this.placeThrusterKey.onDown.add(this.debugAddModule, {caller: this, key: 'thruster'});
	//solarPanel
	this.placeSPKey = this.game.input.keyboard.addKey(Phaser.Keyboard.U);
    this.placeSPKey.onDown.add(this.debugAddModule, {caller: this, key: 'solarPanel'});
	//hacker
	this.placeHackKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Y);
	this.placeHackKey.onDown.add(this.debugAddModule, {caller: this, key: 'hacker'});
	//gun
	this.placeGunKey = this.game.input.keyboard.addKey(Phaser.Keyboard.T);
    this.placeGunKey.onDown.add(this.debugAddModule, {caller: this, key: 'gun'});
	//hackable
	this.placeHackableKey = this.game.input.keyboard.addKey(Phaser.Keyboard.L);
   this.placeHackableKey.onDown.add(this.debugAddModule, {caller: this, key: 'hackable'});
};

Cheating.prototype.constructor = Cheating;

Cheating.prototype.debugAddModule = function() {
   this.caller.state.moduleBuilder.build(this.key, this.caller.mouse.x, this.caller.mouse.y, true);
};

module.exports = Cheating;














},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\cube.js":[function(require,module,exports){
/*
Defines a cube.
*/

var Cube = function (gameState, x, y, sprite) {
    Phaser.Sprite.call(this, gameState.game, x, y, sprite);
	 this.tag = 'module';	//tag is used to detect object type during collision checking
    this.game = gameState.game;
	this.gameState = gameState;
    this.game.add.existing(this);
    this.group = undefined;
    this.module = undefined;
    this.indicatorFade = 0.02;
    this.healthBar = gameState.uiBuilder.buildProgressBar('shrinking', 0, 0, 20, 4, 3);
	this.healthBar.setStyle(0, 0xFFFFFF, 0x363636, 0, 0, 0, 0xFFFFFF, 0x20CC20);
	this.healthBar.cube = this;
	this.healthBarFade = 0.0008;
	this.impact = this.game.add.audio('moduleImpact');
	this.impact.volume = 0.25;
	this.impact.allowMultiple = true;
	//set update function of health bar
	this.healthBar.update = function() {
		this.setLocation(this.cube.x, this.cube.y+10);
	};
	//onEvent called when cube runs out of health
	this.healthBar.onEvent = function() {
		this.cube.dying = true;
		this.cube.life = 50;
		// this.group.countCubes();
		// this.destroy();
	};
	this.constraints = [];
};

Cube.prototype = Object.create(Phaser.Sprite.prototype);
Cube.prototype.constructor = Cube;

/**
 * Automatically called by World.update
 */
Cube.prototype.update = function() {
   if (this.cIndicator && this.cIndicator.alpha > 0) {
      this.cIndicator.alpha -= this.indicatorFade;
   }
   if (this.module.update) {
      this.module.update();
   }
   if (this.healthBar.graphics.alpha > 0) {
      this.healthBar.graphics.alpha -= this.healthBarFade * this.game.time.elapsed;
   }
   if (this.dying) {
      this.life -= this.game.time.elapsed;
      if (this.life < 0) {
         this.dying = false;
         this.healthBar.destroy();
         if (this.group) {
            if(this.tag === 'enemy_module') {
               if(this.key === 'thruster') {
                  this.gameState.money += 35;
               }
               else if(this.key === 'shield') {
                  this.gameState.money += 10;
               }
               else if(this.key === 'gun') {
                  this.gameState.money += 50;
               }
               else if(this.key === 'solarPanel') {
                  this.gameState.money += 25;
               }
               this.gameState.moneyText.text = this.gameState.money;
            }
            this.group.destroyCube(this);
         } else {
            if(this.key === 'core' && this.tag === 'module') {
               this.kill();
               this.gameState.restartLevel();
            }
            this.destroy();
         }
      }
   }
};

Cube.prototype.loseConnection = function() {
  if (!this.myConnection) {
    return;
  }  
  if (this.myConnection.start === this) {
      var endModule = this.myConnection.end.module;
      if (endModule.hasOwnProperty('onLoseConnection')) {
         endModule.onLoseConnection();
      }
      this.myConnection.end.myConnection = undefined;
      this.myConnection = undefined;
   } else if (this.myConnection.end === this) {
      var startModule = this.myConnection.end.module;
      if (startModule.hasOwnProperty('onLoseConnection')) {
         startModule.onLoseConnection();
      }
      this.myConnection.start.myConnection = undefined;
      this.myConnection = undefined;
   }
};

Cube.prototype.cubeCollide = function(other) {
   // floating cube, bad collision, collision with non-sprite, collision with non-cube
   if (!this.group || !other || !other.sprite || other.prototype !== this.prototype) {
      return;
   }
   if (other.group && this.group === other.group) {// if cubes in same group
      return;
   }
   if (this.group.isPlayer) { // player
      if (other.sprite.tag === 'enemy_module') { // collision with enemy, ramming
         this.group.handleRamming(this, other.sprite);
      } else if (other.sprite.tag === 'module') { // collision with floating, attatching
         this.group.handleAttatch(this, other.sprite);
      }
   } else {// enemy
      this.group.handleRamming(this, other.sprite); // enemies only ram on collision
   }
   this.group.countCubes();
};

Cube.prototype.toString = function() {
   var string = '';
   string += this.concat('name', this.name);
   return string;
};

Cube.prototype.concat = function(string, val) {
   return string + ': ' + val + '\n';
};

Cube.prototype.displayIndicator = function() {
  this.cIndicator.alpha = 1; 
};

Cube.prototype.hideIndicator = function() {
  this.cIndicator.alpha = 0; 
};

Cube.prototype.takeDamage = function(amt) {
   this.impact.play();
   this.healthBar.addValue(-amt);
   this.healthBar.graphics.alpha = 1;
};

Cube.prototype.dieQuick = function() {
  this.dying = true;
  this.life = 0;
};

Cube.prototype.remove = function() {
   if (!this.group) {
      return;
   }
   this.group.remove(this);
};

module.exports = Cube;















},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js":[function(require,module,exports){
var Astar = require('../libs/javascript-astar/astar');
var EnemyAI = require('./enemy_ai');

/*
Defines a cube group.
*/

var CubeGroup = function (game, root) {
   this.game = game;
   this.root = root;
   this.cubes = [];
   var col = [];
   col.push(this.root);
   this.cubes.push(col);
   if (this.root) {
      this.root.group = this;
   }
   this.DIR = {NORTH: 0, EAST: 1, SOUTH: 2, WEST: 3};
   this.offset = 2;
	this.activeHackerModules = [];	//list of hacker modules in this group
	//this.activeGuns = [];
	this.moduleConnect = this.game.add.audio('moduleConnect');
	this.moduleConnect.allowMultiple = true;

   this.numCubes = 1;
   this.bounceBackForce = 30;
   this.minRamVel = 300;
   this.debug = false;
};

CubeGroup.prototype.constructor = CubeGroup;

/**
 * Automatically called by World.update
 */
CubeGroup.prototype.update = function() {
   if (this.AI) {
      this.AI.update();
   }
};

CubeGroup.prototype.call = function(fun) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.hasOwnProperty(fun)) {
            // if cubes need functions called
         } else if (cube && cube.module && cube.module.hasOwnProperty(fun)) {
            var fn = cube.module[fun];
            if (typeof fn === 'function') {
               fn.call(cube.module);
            }
         }
      }
   }
};

CubeGroup.prototype.callOnType = function(fun, type) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.hasOwnProperty(fun)) {
            // if cubes need functions called
         } else if (cube && cube.module && cube.module.type === type && cube.module.hasOwnProperty(fun)) {
            var fn = cube.module[fun];
            if (typeof fn === 'function') {
               fn.call(cube.module);
            }
         }
      }
   }
};

CubeGroup.prototype.getModules = function(type) {
   var modules = [];
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.module.type === type) {
            modules.push(cube.module);
         }
      }
   }
   return modules;
};

CubeGroup.prototype.giveAI = function(type, player) {
   this.AI = new EnemyAI(this.game, this, type, player);
};

CubeGroup.prototype.add = function(cube, point) {
  if (!this.root && cube.module.type === 'core') {
     this.root = cube;
  }
  cube.group = this;
  this.set(cube, point);
  this.createConstraints(cube, point);
};

CubeGroup.prototype.handleAttatch = function(origin, other) {
   if (this.debug) { console.log('handleCollision() start:', origin.module.type, other.module.type); }
   if (this.debug) { this.displayCubes(); }
   var relSide = this.relativeSide(origin.body, other.body);
   var originLoc = this.find(origin);
   var otherLoc = this.calcPos(origin, relSide);
   this.moduleConnect.play();
   if (this.debug) console.log('handleCollision() pre-find:', 'relSide:', relSide, 'originLoc:', Math.floor(originLoc.x), Math.floor(originLoc.y), 'otherLoc:', Math.floor(otherLoc.x), Math.floor(otherLoc.y)); // jshint ignore:line
   this.set(other, otherLoc);
   otherLoc = this.find(other); // update position since set can shift grid
   if (!otherLoc) {
      if (this.debug) {
         console.log('handleCollision(): otherLoc DNE', '---------------------');
         this.displayCubes();
      }
      return;
   }
   if (this.debug) console.log('handleCollision() post-find:', 'otherLoc:', Math.floor(otherLoc.x), Math.floor(otherLoc.y)); // jshint ignore:line
   this.createConstraints(other, otherLoc);
   if (other.module.type === 'solarPanel') {
      this.createConnectionFrom(other);
   } else if (other.module.powerable) {
      var spareSolarPanel = this.spareSolarPanel();
      if (spareSolarPanel) {
         spareSolarPanel.giveTarget(other.module);
      }
   }
   if (this.debug) { this.displayCubes(); }
   if (this.debug) { console.log('handleCollision() end:', '------------------------------'); }
};

CubeGroup.prototype.createConnectionFrom = function(panel) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube !== panel && !cube.myConnection && cube.module.powerable) {
            panel.module.giveTarget(cube.module);
            return;
         }
      }
   }
};

CubeGroup.prototype.spareSolarPanel = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && !cube.myConnection && cube.module.type === 'solarPanel') {
            return cube.module;
         }
      }
   }
};

CubeGroup.prototype.handleRamming = function(origin, other) {
   if (!other.group || other.group === this) {
      return;
   }
   var sumVel = Math.abs(origin.body.velocity.x) + Math.abs(origin.body.velocity.y);
   if (this.debug) { console.log('handleRamming():', 'sumVel:', sumVel.toPrecision(4)); }
   if (sumVel >= this.minRamVel) {
      if (this.game.juicy) {
         this.game.juicy.shake();
      }
      other.takeDamage(3);
      this.call('thrusterHalt');
   }
};

CubeGroup.prototype.calcPos = function(origin, relSide) {
   var diffAngle = origin.body.rotation - this.root.body.rotation;
   var relative = this.angleToDir(diffAngle);
   var output = this.find(origin);
   if (relative === 0) { // north relative to the root
      if (relSide === 0) {
         output.y++;
      } else if (relSide === 1) {
         output.x++;
      } else if (relSide === 2) {
         output.y--;
      } else if (relSide === 3) {
         output.x--;
      }
   } else if (relative === 1) { // east relative to root
      if (relSide === 0) {
         output.x++;
      } else if (relSide === 1) {
         output.y--;
      } else if (relSide === 2) {
         output.x--;
      } else if (relSide === 3) {
         output.y++;
      }
   } else if (relative === 2) { // south relative to root
      if (relSide === 0) {
         output.y--;
      } else if (relSide === 1) {
         output.x--;
      } else if (relSide === 2) {
         output.y++;
      } else if (relSide === 3) {
         output.x++;
      }
   } else if (relative === 3) { // west relative to root
      if (relSide === 0) {
         output.x--;
      } else if (relSide === 1) {
         output.y++;
      } else if (relSide === 2) {
         output.x++;
      } else if (relSide === 3) {
         output.y--;
      }
   }
   return output;
};

CubeGroup.prototype.angleToDir = function(angle) {
   if (angle >= 0) {
     angle %= 2 * Math.PI;
  } else {
     angle *= -1;
     angle %= 2 * Math.PI;
     angle *= -1;
  }
  if (this.debug) { console.log('angleToDir():', 'angle:', angle.toPrecision(4)); }
  if ((angle >= -1 / 4 * Math.PI && angle < 1 / 4 * Math.PI) || angle > 7 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case one NORTH'); }
     return this.DIR.NORTH;
  } else if (angle >= 1 / 4 * Math.PI && angle < 3 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case two EAST'); }
     return this.DIR.EAST;
  } else if (angle >= 3 / 4 * Math.PI && angle < 5 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case three SOUTH'); }
     return this.DIR.SOUTH;
  } else if (angle >= 5 / 4 * Math.PI && angle < 7 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case four WEST'); }
     return this.DIR.WEST;
  } else if (angle >= -3 / 4 * Math.PI && angle < -1 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case five WEST'); }
     return this.DIR.WEST;
  } else if (angle >= -5 / 4 * Math.PI && angle < -3 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case six SOUTH'); }
     return this.DIR.SOUTH;
  } else if (angle >= -7 / 4 * Math.PI && angle < -5 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case seven EAST'); }
     return this.DIR.EAST;
  } else if (angle < -7 / 4 * Math.PI) {
     if (this.debug) { console.log('angleToDir() case eight NORTH'); }
     return this.DIR.NORTH;
  }
};

CubeGroup.prototype.createConstraints = function(me, point) {
   var neighbors = this.getNeighbors(me);
   for (var i = 0; i < neighbors.length; i++) {
      var neighbor = neighbors[i];
      var mySide = this.relativeSide(me.body, neighbor.body);
      var neighborSide = this.relativeSide(neighbor.body, me.body);
      var constraint;
      var offset = me.width + this.offset;
      if (mySide === 0) {
        if (neighborSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [0, offset], Math.PI);
        } else if (neighborSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [0, offset], 1 / 2 * Math.PI);
        } else if (neighborSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [0, offset], 0);
        } else if (neighborSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [0, offset], 3 / 2 * Math.PI);
        }
     } else if (mySide === 1) {
        if (neighborSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [-offset, 0], -1 / 2 * Math.PI);
        } else if (neighborSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [-offset, 0], Math.PI);
        } else if (neighborSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [-offset, 0], 1 / 2 * Math.PI);
        } else if (neighborSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [-offset, 0], 0);
        }
     } else if (mySide === 2) {
         if (neighborSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [0, -offset], 0);
        } else if (neighborSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [0, -offset], 3 / 2 * Math.PI);
        } else if (neighborSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [0, -offset], Math.PI);
        } else if (neighborSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [0, -offset], 1 / 2 * Math.PI);
        }
     } else if (mySide === 3) {
        if (neighborSide === 0) {
           constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [offset, 0], 1 / 2 * Math.PI);
        } else if (neighborSide === 1) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [offset, 0], 0);
        } else if (neighborSide === 2) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [offset, 0], -1 / 2 * Math.PI);
        } else if (neighborSide === 3) {
            constraint = this.game.physics.p2.createLockConstraint(me.body, neighbor.body, [offset, 0], Math.PI);
        }
     }
     me.constraints.push(constraint);
     neighbor.constraints.push(constraint);
   }
};

CubeGroup.prototype.relativeSide = function(thisBody, otherBody) {
  var thisPoint = new Phaser.Point(thisBody.x, thisBody.y);
  var otherPoint = new Phaser.Point(otherBody.x, otherBody.y);
  var angleToOther = this.angleBetweenPoints(thisPoint, otherPoint);
  var diffAngle = angleToOther - thisBody.rotation;
  var returnDir = this.angleToDir(diffAngle);
  if (this.debug) { console.log('relativeSide():', 'angleToOther:', angleToOther.toPrecision(4), 'thisBody.rotation:', thisBody.rotation.toPrecision(4), 'diffAngle:', diffAngle.toPrecision(4), 'returnDir:', returnDir); }
  return returnDir;
};

CubeGroup.prototype.angleBetweenPoints = function(thisPoint, otherPoint) {
  var angleToOther = Phaser.Point.angle(thisPoint, otherPoint);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
   return angleToOther;
};

CubeGroup.prototype.find = function(cube) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col] === cube) {
            return new Phaser.Point(row, col);
         }
      }
   }
   return undefined;
};

CubeGroup.prototype.get = function(point) {
  if (!point || this.outOfBounds(point)) {
      return;
  }
  return this.cubes[point.x][point.y];
};

CubeGroup.prototype.cubesWidth = function() {
   return this.cubes.length;
};

CubeGroup.prototype.cubesHeight = function() {
   return this.cubes[0].length;
};

CubeGroup.prototype.addTopRow = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].push(undefined);
   }
};

CubeGroup.prototype.addRightCol = function() {
   var newCol = [];
   for (var i = 0; i < this.cubesHeight(); i++) {
      newCol.push(undefined);
   }
   this.cubes.push(newCol);
};

CubeGroup.prototype.addBotRow = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].unshift(undefined);
   }
};

CubeGroup.prototype.addLeftCol = function() {
   var newCol = new Array(this.cubesHeight());
   this.cubes.unshift(newCol);
};

CubeGroup.prototype.getCube = function(point) {
   if (!point || this.outOfBounds(point)) {
      return undefined;
   }
   return this.cubes[point.x][point.y];
};

CubeGroup.prototype.adjust = function(point, dir) {
  if (!point) {
     return;
  }
  var newPoint = new Phaser.Point(point.x, point.y);
  switch (dir) {
      case this.DIR.NORTH:
      newPoint.y++;
      break;
      case this.DIR.EAST:
      newPoint.x++;
      break;
      case this.DIR.SOUTH:
      newPoint.y--;
      break;
      case this.DIR.WEST:
      newPoint.x--;
      break;
   }
   return newPoint;
};

CubeGroup.prototype.set = function(cube, point) {
   if (!point) {
      console.log('set given undefined point');
      return;
   }
   if (point.x < 0) {
      if (this.debug) { console.log('add left col'); }
      this.addLeftCol();
      point.x = 0;
   } else if (point.x >= this.cubesWidth()) {
      if (this.debug) { console.log('add right col'); }
      this.addRightCol();
      point.x = this.cubesWidth() - 1;
   } else if (point.y < 0) {
      if (this.debug) { console.log('add bot row'); }
      this.addBotRow();
      point.y = 0;
   } else if (point.y >= this.cubesHeight()) {
      if (this.debug) { console.log('add top row'); }
      this.addTopRow();
      point.y = this.cubesHeight() - 1;
   }
   if (this.get(point)) {
      return;
   }
   this.cubes[point.x][point.y] = cube;
   cube.group = this;
};

CubeGroup.prototype.outOfBounds = function(point) {
   if (!point) {
      console.log('out of bounds given undefined point');
      return;
   }
   if (point.x < 0 || point.x >= this.cubesWidth() || point.y < 0 || point.y >= this.cubesHeight()) {
      return true;
   }
   return false;
};

CubeGroup.prototype.displayCubes = function() {
   var output = 'displayCubes():\n';
   var row = 0;
   var col = this.cubesHeight() - 1;
   while (col >= 0) {
      while (row < this.cubesWidth()) {
         var cube = this.cubes[row][col];
         if (cube) {
            switch (cube.module.type) {
               case 'shield':
               output += 'S ';
               break;
               case 'core':
               output += 'C ';
               break;
               case 'thruster':
               output += 'T ';
               break;
               case 'solarPanel':
               output += 'P ';
               break;
               case 'hacker':
               output += 'H ';
               break;
               case 'gun':
               output += 'G ';
               break;
            }
         } else {
            output += '_ ';
         }
         row++;
      }
      row = 0;
      col--;
      output += '\n';
   }
   console.log(output);
};

CubeGroup.prototype.displayConnection = function(connection) {
   this.hideOtherConnections(connection);
   var graph = new Astar.Graph(this.cubesToGraph());
   var startPoint = this.find(connection.start);
   var endPoint = this.find(connection.end);
   if (!startPoint || !endPoint) {
      console.log('displayConnection failed to get points');
      return;
   }
   var start = graph.grid[startPoint.x][startPoint.y];
   var end = graph.grid[endPoint.x][endPoint.y];
   var result = Astar.astar.search(graph, start, end);
   result.unshift(start);
   var previous;
   for(var i = 0; i < result.length; i++) {
      var curPoint = new Phaser.Point(result[i].x, result[i].y);
      var curCube = this.get(curPoint);
      var indicator = curCube.cIndicator;
      var prevPoint;
      var nextPoint;
      var side;
      var prevCube;
      var nextCube;
      if (!previous) {
         indicator.animations.play('end');
         nextPoint = new Phaser.Point(result[i+1].x, result[i+1].y);
         nextCube = this.get(nextPoint);
         side = this.relativeSide(curCube.body, nextCube.body);
         indicator.rotation = this.dirToAngle(side);
      } else if (i === result.length - 1) {
         indicator.animations.play('end');
         prevPoint = new Phaser.Point(previous.x, previous.y);
         prevCube = this.get(prevPoint);
         side = this.relativeSide(curCube.body, prevCube.body);
         indicator.rotation = this.dirToAngle(side);
      } else {
         indicator.animations.play('line');
         prevPoint = new Phaser.Point(previous.x, previous.y);
         nextPoint = new Phaser.Point(result[i+1].x, result[i+1].y);
         prevCube = this.get(prevPoint);
         nextCube = this.get(nextPoint);
         var prevSide = this.relativeSide(curCube.body, prevCube.body);
         var nextSide = this.relativeSide(curCube.body, nextCube.body);
         this.manageIndicator(indicator, prevSide, nextSide);
      }
      previous = result[i];
      curCube.displayIndicator();
    }
};

CubeGroup.prototype.manageIndicator = function(indicator, prevDir, nextDir) {
  indicator.scale.setTo(Math.abs(indicator.scale.x), indicator.scale.y);
  if (prevDir === this.DIR.NORTH && nextDir === this.DIR.SOUTH) { // 2
      if (this.debug) { console.log('case 2'); }
      indicator.rotation = Math.PI;
   } else if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.NORTH) { // 1
      if (this.debug) { console.log('case 1'); }
      indicator.rotation = 0;
   } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.WEST) { // 4
      if (this.debug) { console.log('case 4'); }
      indicator.rotation = 1 / 2 * Math.PI;
   } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.EAST) { // 3
      if (this.debug) { console.log('case 3'); }
      indicator.rotation = 3 / 2  * Math.PI;
   } else {
      indicator.animations.play('right');
      if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.EAST) { // 5
         if (this.debug) { console.log('case 5'); }
         indicator.rotation = 0;
      } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.SOUTH) { // 6
         if (this.debug) { console.log('case 6'); }
         indicator.rotation = 1 / 2 * Math.PI;
      } else if (prevDir === this.DIR.NORTH && nextDir === this.DIR.WEST) { // 7
         if (this.debug) { console.log('case 7'); }
         indicator.rotation = Math.PI;
      } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.NORTH) { // 8
         if (this.debug) { console.log('case 8'); }
         indicator.rotation = 3 / 2 * Math.PI;
      } else {
         indicator.scale.setTo(-Math.abs(indicator.scale.x), indicator.scale.y);
         if (prevDir === this.DIR.SOUTH && nextDir === this.DIR.WEST) { // 9
            if (this.debug) { console.log('case 9'); }
            indicator.rotation = 0;
         } else if (prevDir === this.DIR.WEST && nextDir === this.DIR.NORTH) { // 10
            if (this.debug) { console.log('case 10'); }
            indicator.rotation = 1 / 2 * Math.PI;
         } else if (prevDir === this.DIR.NORTH && nextDir === this.DIR.EAST) { // 11
            if (this.debug) { console.log('case 11'); }
            indicator.rotation = Math.PI;
         } else if (prevDir === this.DIR.EAST && nextDir === this.DIR.SOUTH) { // 12
            if (this.debug) { console.log('case 12'); }
            indicator.rotation = 3 / 2 * Math.PI;
         }
      }
   } 
};

CubeGroup.prototype.hideOtherConnections = function(exception) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube && cube.myConnection && cube.myConnection !== exception) {
            cube.hideIndicator();
         }
      }
   }
};

CubeGroup.prototype.cubesToGraph = function() {
  var graph = [];
  for (var row = 0; row < this.cubesWidth(); row++) {
     var newCol = [];
      for (var col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col]) {
            newCol.push(1);
         } else {
            newCol.push(0);
         }
      }
      graph.push(newCol);
   }
   return graph;
};

CubeGroup.prototype.dirBetween = function(a, b) {
   var deltaX = a.x - b.x;
   var deltaY = a.y - b.y;
   if (deltaX > 0) {
      return this.DIR.WEST;
   }
   if (deltaX < 0) {
      return this.DIR.EAST;
   }
   if (deltaY > 0) {
      return this.DIR.SOUTH;
   }
   if (deltaY < 0) {
      return this.DIR.NORTH;
   }
   return this.DIR.NORTH;
};

CubeGroup.prototype.dirToAngle = function(dir) {
  switch (dir) {
   case this.DIR.NORTH:
   return Math.PI;
   case this.DIR.EAST:
   return 3 / 2 * Math.PI;
   case this.DIR.SOUTH:
   return 0;
   case this.DIR.WEST:
   return 1 / 2 * Math.PI;
  }  
};

CubeGroup.prototype.destroyCube = function(cube) {
  var loc = this.find(cube);
  if (!loc) {
     console.log('attempt to destroy cube not in group');
     return;
  }
  // remove cube from group
  this.remove(cube);
  // destroy cube
  if(cube.key === 'core' && cube.tag === 'module') {
	cube.kill();
	this.game.restartLevel();
  }
  cube.destroy(true);
};

CubeGroup.prototype.remove = function(cube) {
   if (this.debug) { console.log('remove()'); }
   if (this.root === cube) {
      return;
   }
   // remove cube from array
   var row, col;
   for (row = 0; row < this.cubesWidth(); row++) {
      for (col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col] === cube) {
            cube.group = undefined;
            cube.tag = 'module';
            this.cubes[row][col] = undefined;
            break;
         }
      }
   }
   //If this is an active module, splice it from the active list
   if(cube.module.isActive){
	   if(cube.module.type === 'hacker') {
			var hackIndex = this.activeHackerModules.indexOf(cube.module);
			this.activeHackerModules.splice(hackIndex, 1);
	   }
	   cube.module.isActive = false;
   }
   //set sprite of cube to greyed if necisarry
   if(cube.module.type === 'thruster' || cube.module.type === 'gun' || cube.module.type === 'hacker') {
		cube.frame = 0;
   }
   // remove constraints from cube
   this.removeConstraints(cube);
   cube.group = undefined;
   if (cube.module && cube.module.hasOwnProperty('onRemove')) {
      cube.module.onRemove();
   }
   // test for exiles
   for (row = 0; row < this.cubesWidth(); row++) {
      for (col = 0; col < this.cubesHeight(); col++) {
         var exile = this.cubes[row][col];
         if (exile && this.isExile(exile)) {
            this.remove(exile);
         }
      }
   }
   if (this.debug) { this.displayCubes(); }
};

CubeGroup.prototype.removeNeighborsConstraint = function(constraint, cube) {
   // console.log('removeNeighborsConstraint');
   var neighbors = this.getNeighbors(cube);
   for (var i = 0; i < neighbors.length; i++) {
      var neighbor = neighbors[i];
      for (var j = 0; j < neighbor.constraints.length; j++) {
         if (neighbor.constraints[j] === constraint) {
            neighbor.constraints.splice(j, 1);
         }
      }
   }
};

CubeGroup.prototype.getNeighbors = function(cube) {
   var loc = this.find(cube);
   var north = this.get(this.adjust(loc, this.DIR.NORTH));
   var east = this.get(this.adjust(loc, this.DIR.EAST));
   var south = this.get(this.adjust(loc, this.DIR.SOUTH));
   var west = this.get(this.adjust(loc, this.DIR.WEST));
   var neighbors = [];
   if (north) {
      neighbors.push(north);
   }
   if (east) {
      neighbors.push(east);
   }
   if (south) {
      neighbors.push(south);
   }
   if (west) {
      neighbors.push(west);
   }
   return neighbors;
};

CubeGroup.prototype.removeConstraints = function(cube) {
   // console.log('removeConstraints');
   while (cube.constraints.length > 0) {
      this.removeNeighborsConstraint(cube.constraints[0], cube);
      this.game.physics.p2.removeConstraint(cube.constraints[0]);
      cube.constraints.splice(0, 1);
   }
};

// only used to test Astar
CubeGroup.prototype.testPath = function() {
  var graph = new Astar.Graph([
        [1,1,1,1],
        [0,1,1,0],
        [0,0,0,1]
    ]);
   var start = graph.grid[0][0];
   var end = graph.grid[2][3];
   var result = Astar.astar.search(graph, start, end);
   result.unshift(start);
   for(var i = 0; i < result.length; i++) {
      console.log(result[i].x, result[i].y);
    } 
};

CubeGroup.prototype.isExile = function(cube) {
   if (cube === this.root) {
      return;
   }
   var graph = new Astar.Graph(this.cubesToGraph());
   var startPoint = this.find(this.root);
   var endPoint = this.find(cube);
   var start = graph.grid[startPoint.x][startPoint.y];
   var end = graph.grid[endPoint.x][endPoint.y];
   var result = Astar.astar.search(graph, start, end);
   // if no path is found, the cube is an exile
   if (result.length === 0) {
      return true;
   }
   return false;
};

CubeGroup.prototype.countCubes = function() {
	var row, col;
	var num  = 0;
	for (row = 0; row < this.cubesWidth(); row++) {
		for (col = 0; col < this.cubesHeight(); col++) {
			if (this.cubes[row][col] !== undefined) {
				num++;
			}
		}
	}
	//console.log(num);
	this.numCubes = num;
};

module.exports = CubeGroup;

















},{"../libs/javascript-astar/astar":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\libs\\javascript-astar\\astar.js","./enemy_ai":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\enemy_ai.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\enemy_ai.js":[function(require,module,exports){
var Utils = require('../utils.js');

var EnemyAI = function(game, group, type, playerGroup) {
   this.game = game;
   this.group = group;
   this.type = type;
   this.playerGroup = playerGroup;
   this.player = this.playerGroup.root;
   this.ramDist = 500;
   this.shootDist = 500;
   this.rotationForce = 50;
   this.facingAllowance = Math.PI / 15;
   this.acting = false;
   switch (this.type) {
      case 'ram':
      this.allocateTo('thruster');
      break;
      case 'shoot':
      this.allocateTo('gun');
   }
};

EnemyAI.prototype.constructor = EnemyAI;

EnemyAI.prototype.update = function() {
   switch (this.type) {
      case 'ram':
      this.customUpdate('thruster', this.ramDist);
      break;
      case 'shoot':
      this.customUpdate('gun', this.shootDist);
   }
};

EnemyAI.prototype.customUpdate = function(type, threshold) {
   if (!this.group.root) {
      return;
   }
   else if(!this.group.root.body) {
		return;
   }
   var root = this.group.root;
   var myPos = new Phaser.Point(root.x, root.y);
   var playerPos = new Phaser.Point(this.player.x, this.player.y);
   var dist = Utils.distance(myPos.x, myPos.y, playerPos.x, playerPos.y);
   if (dist <= threshold) {
      var angleTo = this.angleTo(myPos, playerPos);
      var diffAngle = angleTo - root.body.rotation;
      if (diffAngle > 0) {
         root.body.angularForce = this.rotationForce;
      } else {
         root.body.angularForce = -this.rotationForce;
      }
      if (Math.abs(diffAngle) <= this.facingAllowance && !this.acting) {
         // this.group.call('beginAct');
         this.group.callOnType('beginAct', type);
         this.acting = true;
         // this.allocateTo(type);
      } else if (Math.abs(diffAngle) > this.facingAllowance && this.acting){
         // this.group.call('endAct');
         this.group.callOnType('endAct', type);
         this.acting = false;
      }
   }
};

EnemyAI.prototype.allocateTo = function(type) {
   var panels = [];
   var types = [];
   for (var row = 0; row < this.group.cubesWidth(); row++) {
      for (var col = 0; col < this.group.cubesHeight(); col++) {
         var cube = this.group.cubes[row][col];
         if (cube && cube.module) {
            if (cube.module.type === 'solarPanel' && !cube.myConnection) {
               panels.push(cube.module);
            } else if (cube.module.type === type && !cube.myConnection) {
               types.push(cube.module);
            }
         }
      }
   }
   var i = 0;
   while (i < types.length && i < panels.length) {
      var tarPanel = panels[i];
      var tarType = types[i];
      var newConnection = {start: tarPanel.cube, end: tarType.cube};
      tarPanel.cube.myConnection = newConnection;
      tarType.cube.myConnection = newConnection;
      this.group.displayConnection(tarPanel.cube.myConnection);
      i++;
   }
};

EnemyAI.prototype.angleTo = function(from, to) {
  var angleToOther = Phaser.Point.angle(from, to);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
  return angleToOther;
};

module.exports = EnemyAI;











},{"../utils.js":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\helper.js":[function(require,module,exports){
var Helper = function(state) {
	this.state = state;
   this.game = this.state.game;
   this.cam = this.game.camera;
   this.sm = this.state.soundManager;
   this.helpBanner = this.state.uiBuilder.buildBanner(0.5, 0.5, 'tutorial_text');
	this.helpButton = this.game.add.button(this.cam.x - 100, this.cam.y - 100, 'helpButton', this.helpBanner.toggle, this.helpBanner, 1, 0, 2);
	this.helpButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.helpButton.onInputDown.add(this.sm.playDownClick, this.sm);
};

Helper.prototype.constructor = Helper;

Helper.prototype.update = function() {
   this.helpButton.x = this.cam.x + 16;
   this.helpButton.y = this.cam.y + 16;
};

module.exports = Helper;
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\mouse.js":[function(require,module,exports){
var Utils = require('../utils.js');

var Mouse = function(game, input, playerGroup) {
   this.game = game;
   this.input = input;
	this.body = new p2.Body(); // jshint ignore:line
   this.game.physics.p2.world.addBody(this.body);
   this.input.onDown.add(this.click, this);
   this.input.onUp.add(this.release, this);
   this.input.addMoveCallback(this.move, this);
   this.x = 0;
   this.y = 0;
   this.grabbed = undefined;
   this.lastClicked = undefined;
   this.line = new Phaser.Line(0, 0, 0, 0);
   this.removeThreshold = 100; // time distance you must pull to remove module
   this.removeDist = 0; // distance you are pulling
   this.playerGroup = playerGroup;
   // keys
   this.ccwKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Q);
	this.cwKey = this.game.input.keyboard.addKey(Phaser.Keyboard.E);
};

Mouse.prototype.constructor = Mouse;

Mouse.prototype.update = function() {
   if (this.grabbed) {
      var angle = Math.atan2(this.grabbed.sprite.y - (this.input.position.y + this.game.camera.y), this.grabbed.sprite.x - (this.input.position.x+ this.game.camera.x)) + Math.PI;
      var dist = Utils.distance(this.grabbed.sprite.x, this.grabbed.sprite.y, (this.input.position.x+ this.game.camera.x), (this.input.position.y + this.game.camera.y));
      var weight;
	  if(this.grabbed.sprite.key === 'asteroid') {
		weight = 1;
	  }
	  else {
		weight = 10;
	  }
	  if (!this.grabbed.sprite.group) {
         this.grabbed.force.x = Math.cos(angle) * dist * weight;
         this.grabbed.force.y = Math.sin(angle) * dist * weight;
      }
      this.line.setTo(this.grabbed.sprite.x, this.grabbed.sprite.y, (this.input.position.x+ this.game.camera.x), (this.input.position.y + this.game.camera.y));
      var deltaX = this.grabbed.sprite.x - this.x;
	  var deltaY = this.grabbed.sprite.y - this.y;
	  this.removeDist = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
      if(this.grabbed.sprite.tag === 'module') {
		  if (this.removeDist >= this.removeThreshold && this.grabbed.sprite.key !== 'asteroid') {
			 this.grabbed.sprite.remove();
		  }
	  }
    } else {
       this.line.setTo(0, 0, 0, 0);
    }
    var point = new Phaser.Point(this.x, this.y);
    var bodies = this.game.physics.p2.hitTest(point);
    if (bodies.length)
    {
        var hover = bodies[0].parent;
        if (hover.sprite.module && hover.sprite.module.mouseOver) {
           hover.sprite.module.mouseOver();
        }
    }
    // rotate
   if(this.ccwKey.isDown) {
		if(this.grabbed !== undefined && this.grabbed.sprite.group === undefined) {
			this.grabbed.angularForce += -5;
		}
	}
	if(this.cwKey.isDown) {
		if(this.grabbed !== undefined && this.grabbed.sprite.group === undefined) {
			this.grabbed.angularForce += 5;
		}
	}
};

Mouse.prototype.click = function(pointer) {
   var point = new Phaser.Point(pointer.x + this.game.camera.x, pointer.y + this.game.camera.y);
   var bodies = this.game.physics.p2.hitTest(point);
   if (bodies.length)
   {
     var temp = bodies[0].parent;
     // console.log('rotation:', temp.rotation);
     this.grabbed = temp;
     if (this.grabbed.sprite.module && this.grabbed.sprite.module.hasOwnProperty('mouseDown')) {
       this.grabbed.sprite.module.mouseDown();
     }
     if (this.lastClicked && this.lastClicked.sprite && this.lastClicked.sprite.module &&
     this.lastClicked.sprite.module.giveTarget) {
        this.lastClicked.sprite.module.giveTarget(this.grabbed.sprite.module);
     }
     if (temp.sprite && temp.sprite.module && temp.sprite.module.type === 'core') {
        this.grabbed = undefined;
     }
     if (temp.sprite && temp.sprite.group && temp.sprite.group !== this.playerGroup) {
        this.grabbed = undefined;
     }
     this.lastClicked = temp;
   }
   
   //create sprite overlay to show selection
   if(this.grabbed) {
		this.selected = this.game.add.sprite(0, 0, 'selected');
		this.grabbed.sprite.addChild(this.selected);
		this.selected.x = 0 - this.grabbed.sprite.width;
		this.selected.y = 0 - this.grabbed.sprite.height;
		this.selected.bringToTop();
   }
};
  
 Mouse.prototype.release = function() {
   if (this.grabbed) {
		//destroy selected sprite
		this.grabbed.sprite.removeChild(this.selected);
		this.selected.destroy();
		this.grabbed = undefined;
   }
};

Mouse.prototype.move = function(pointer) {
   // p2 uses different coordinate system, so convert the pointer position to p2's coordinate system
   this.body.position[0] = this.game.physics.p2.pxmi(pointer.position.x);
   this.body.position[1] = this.game.physics.p2.pxmi(pointer.position.y);
   this.x = pointer.position.x + this.game.camera.x;
   this.y = pointer.position.y + this.game.camera.y;
};

Mouse.prototype.render = function() {
   //this.game.debug.geom(this.line);
};

module.exports = Mouse;















},{"../utils.js":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\sound_manager.js":[function(require,module,exports){
/*
Plays sounds needed across multiple scripts.
*/
var SoundManager = function(state) {
   // initial variables
	this.state = state;
   this.game = this.state.game;
   this.cam = this.game.camera;
   // sounds
   this.hoverClick = this.game.add.audio('hoverClick');
   this.downClick = this.game.add.audio('downClick');
};

SoundManager.prototype.constructor = SoundManager;

SoundManager.prototype.playHoverClick = function() {
   this.hoverClick.play();
};

SoundManager.prototype.playDownClick = function() {
   this.downClick.play();
};

module.exports = SoundManager;













},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\functionAccess\\Renderables.js":[function(require,module,exports){
var Renderables = function() {
	if(Renderables.prototype.exists) {
		return Renderables.prototype.existingReference;
	}
	
	this.list = [];
	Renderables.prototype.exists = true;
	Renderables.prototype.existingReference = this;
};

Renderables.prototype.constructor = Renderables;
//These var's help create the singleton functionality
Renderables.prototype.exists = false;
Renderables.prototype.existingReference = null;

Renderables.prototype.subscribe = function(subscriber) {
	this.list.push(subscriber);
};

Renderables.prototype.unsubscribe = function(unsubscriber) {
	for(var i = 0; i < this.list.length; i++) {
		if(this.list[i] === unsubscriber) {
			this.list[i] = false;
		}
	}
};

Renderables.prototype.renderAll = function() {
	for(var i = 0; i < this.list.length; i++) {
		if(this.list[i] === false) {
			continue;
		}
		this.list[i].render();
	}
};

module.exports = Renderables;
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\libs\\javascript-astar\\astar.js":[function(require,module,exports){
// javascript-astar 0.4.0
// http://github.com/bgrins/javascript-astar
// Freely distributable under the MIT License.
// Implements the astar search algorithm in javascript using a Binary Heap.
// Includes Binary Heap (with modifications) from Marijn Haverbeke.
// http://eloquentjavascript.net/appendix2.html

(function(definition) {
    /* global module, define */
    if(typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = definition();
    } else if(typeof define === 'function' && define.amd) {
        define([], definition);
    } else {
        var exports = definition();
        window.astar = exports.astar;
        window.Graph = exports.Graph;
    }
})(function() {

function pathTo(node){
    var curr = node,
        path = [];
    while(curr.parent) {
        path.push(curr);
        curr = curr.parent;
    }
    return path.reverse();
}

function getHeap() {
    return new BinaryHeap(function(node) {
        return node.f;
    });
}

var astar = {
    /**
    * Perform an A* Search on a graph given a start and end node.
    * @param {Graph} graph
    * @param {GridNode} start
    * @param {GridNode} end
    * @param {Object} [options]
    * @param {bool} [options.closest] Specifies whether to return the
               path to the closest node if the target is unreachable.
    * @param {Function} [options.heuristic] Heuristic function (see
    *          astar.heuristics).
    */
    search: function(graph, start, end, options) {
        graph.cleanDirty();
        options = options || {};
        var heuristic = options.heuristic || astar.heuristics.manhattan,
            closest = options.closest || false;

        var openHeap = getHeap(),
            closestNode = start; // set the start node to be the closest if required

        start.h = heuristic(start, end);

        openHeap.push(start);

        while(openHeap.size() > 0) {

            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.
            var currentNode = openHeap.pop();

            // End case -- result has been found, return the traced path.
            if(currentNode === end) {
                return pathTo(currentNode);
            }

            // Normal case -- move currentNode from open to closed, process each of its neighbors.
            currentNode.closed = true;

            // Find all neighbors for the current node.
            var neighbors = graph.neighbors(currentNode);

            for (var i = 0, il = neighbors.length; i < il; ++i) {
                var neighbor = neighbors[i];

                if (neighbor.closed || neighbor.isWall()) {
                    // Not a valid node to process, skip to next neighbor.
                    continue;
                }

                // The g score is the shortest distance from start to current node.
                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.
                var gScore = currentNode.g + neighbor.getCost(currentNode),
                    beenVisited = neighbor.visited;

                if (!beenVisited || gScore < neighbor.g) {

                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.
                    neighbor.visited = true;
                    neighbor.parent = currentNode;
                    neighbor.h = neighbor.h || heuristic(neighbor, end);
                    neighbor.g = gScore;
                    neighbor.f = neighbor.g + neighbor.h;
                    graph.markDirty(neighbor);
                    if (closest) {
                        // If the neighbour is closer than the current closestNode or if it's equally close but has
                        // a cheaper path than the current closest node then it becomes the closest node
                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {
                            closestNode = neighbor;
                        }
                    }

                    if (!beenVisited) {
                        // Pushing to heap will put it in proper place based on the 'f' value.
                        openHeap.push(neighbor);
                    }
                    else {
                        // Already seen the node, but since it has been rescored we need to reorder it in the heap
                        openHeap.rescoreElement(neighbor);
                    }
                }
            }
        }

        if (closest) {
            return pathTo(closestNode);
        }

        // No result was found - empty array signifies failure to find path.
        return [];
    },
    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html
    heuristics: {
        manhattan: function(pos0, pos1) {
            var d1 = Math.abs(pos1.x - pos0.x);
            var d2 = Math.abs(pos1.y - pos0.y);
            return d1 + d2;
        },
        diagonal: function(pos0, pos1) {
            var D = 1;
            var D2 = Math.sqrt(2);
            var d1 = Math.abs(pos1.x - pos0.x);
            var d2 = Math.abs(pos1.y - pos0.y);
            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));
        }
    },
    cleanNode:function(node){
        node.f = 0;
        node.g = 0;
        node.h = 0;
        node.visited = false;
        node.closed = false;
        node.parent = null;
    }
};

/**
* A graph memory structure
* @param {Array} gridIn 2D array of input weights
* @param {Object} [options]
* @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed
*/
function Graph(gridIn, options) {
    options = options || {};
    this.nodes = [];
    this.diagonal = !!options.diagonal;
    this.grid = [];
    for (var x = 0; x < gridIn.length; x++) {
        this.grid[x] = [];

        for (var y = 0, row = gridIn[x]; y < row.length; y++) {
            var node = new GridNode(x, y, row[y]);
            this.grid[x][y] = node;
            this.nodes.push(node);
        }
    }
    this.init();
}

Graph.prototype.init = function() {
    this.dirtyNodes = [];
    for (var i = 0; i < this.nodes.length; i++) {
        astar.cleanNode(this.nodes[i]);
    }
};

Graph.prototype.cleanDirty = function() {
    for (var i = 0; i < this.dirtyNodes.length; i++) {
        astar.cleanNode(this.dirtyNodes[i]);
    }
    this.dirtyNodes = [];
};

Graph.prototype.markDirty = function(node) {
    this.dirtyNodes.push(node);
};

Graph.prototype.neighbors = function(node) {
    var ret = [],
        x = node.x,
        y = node.y,
        grid = this.grid;

    // West
    if(grid[x-1] && grid[x-1][y]) {
        ret.push(grid[x-1][y]);
    }

    // East
    if(grid[x+1] && grid[x+1][y]) {
        ret.push(grid[x+1][y]);
    }

    // South
    if(grid[x] && grid[x][y-1]) {
        ret.push(grid[x][y-1]);
    }

    // North
    if(grid[x] && grid[x][y+1]) {
        ret.push(grid[x][y+1]);
    }

    if (this.diagonal) {
        // Southwest
        if(grid[x-1] && grid[x-1][y-1]) {
            ret.push(grid[x-1][y-1]);
        }

        // Southeast
        if(grid[x+1] && grid[x+1][y-1]) {
            ret.push(grid[x+1][y-1]);
        }

        // Northwest
        if(grid[x-1] && grid[x-1][y+1]) {
            ret.push(grid[x-1][y+1]);
        }

        // Northeast
        if(grid[x+1] && grid[x+1][y+1]) {
            ret.push(grid[x+1][y+1]);
        }
    }

    return ret;
};

Graph.prototype.toString = function() {
    var graphString = [],
        nodes = this.grid, // when using grid
        rowDebug, row, y, l;
    for (var x = 0, len = nodes.length; x < len; x++) {
        rowDebug = [];
        row = nodes[x];
        for (y = 0, l = row.length; y < l; y++) {
            rowDebug.push(row[y].weight);
        }
        graphString.push(rowDebug.join(' '));
    }
    return graphString.join('\n');
};

function GridNode(x, y, weight) {
    this.x = x;
    this.y = y;
    this.weight = weight;
}

GridNode.prototype.toString = function() {
    return '[' + this.x + ' ' + this.y + ']';
};

GridNode.prototype.getCost = function(fromNeighbor) {
    // Take diagonal weight into consideration.
    if (fromNeighbor && fromNeighbor.x !== this.x && fromNeighbor.y !== this.y) {
        return this.weight * 1.41421;
    }
    return this.weight;
};

GridNode.prototype.isWall = function() {
    return this.weight === 0;
};

function BinaryHeap(scoreFunction){
    this.content = [];
    this.scoreFunction = scoreFunction;
}

BinaryHeap.prototype = {
    push: function(element) {
        // Add the new element to the end of the array.
        this.content.push(element);

        // Allow it to sink down.
        this.sinkDown(this.content.length - 1);
    },
    pop: function() {
        // Store the first element so we can return it later.
        var result = this.content[0];
        // Get the element at the end of the array.
        var end = this.content.pop();
        // If there are any elements left, put the end element at the
        // start, and let it bubble up.
        if (this.content.length > 0) {
            this.content[0] = end;
            this.bubbleUp(0);
        }
        return result;
    },
    remove: function(node) {
        var i = this.content.indexOf(node);

        // When it is found, the process seen in 'pop' is repeated
        // to fill up the hole.
        var end = this.content.pop();

        if (i !== this.content.length - 1) {
            this.content[i] = end;

            if (this.scoreFunction(end) < this.scoreFunction(node)) {
                this.sinkDown(i);
            }
            else {
                this.bubbleUp(i);
            }
        }
    },
    size: function() {
        return this.content.length;
    },
    rescoreElement: function(node) {
        this.sinkDown(this.content.indexOf(node));
    },
    sinkDown: function(n) {
        // Fetch the element that has to be sunk.
        var element = this.content[n];

        // When at 0, an element can not sink any further.
        while (n > 0) {

            // Compute the parent element's index, and fetch it.
            var parentN = ((n + 1) >> 1) - 1, parent = this.content[parentN]; // jshint ignore:line
            // Swap the elements if the parent is greater.
            if (this.scoreFunction(element) < this.scoreFunction(parent)) {
                this.content[parentN] = element;
                this.content[n] = parent;
                // Update 'n' to continue at the new position.
                n = parentN;
            }
            // Found a parent that is less, no need to sink any further.
            else {
                break;
            }
        }
    },
    bubbleUp: function(n) {
        // Look up the target element and its score.
        var length = this.content.length,
            element = this.content[n],
            elemScore = this.scoreFunction(element);

        while(true) {
            // Compute the indices of the child elements.
            var child2N = (n + 1) << 1, child1N = child2N - 1; // jshint ignore:line
            // This is used to store the new position of the element, if any.
            var swap = null,
                child1Score;
            // If the first child exists (is inside the array)...
            if (child1N < length) {
                // Look it up and compute its score.
                var child1 = this.content[child1N];
                child1Score = this.scoreFunction(child1);

                // If the score is less than our element's, we need to swap.
                if (child1Score < elemScore){
                    swap = child1N;
                }
            }

            // Do the same checks for the other child.
            if (child2N < length) {
                var child2 = this.content[child2N],
                    child2Score = this.scoreFunction(child2);
                if (child2Score < (swap === null ? elemScore : child1Score)) {
                    swap = child2N;
                }
            }

            // If the element needs to be moved, swap it, and continue.
            if (swap !== null) {
                this.content[n] = this.content[swap];
                this.content[swap] = element;
                n = swap;
            }
            // Otherwise, we are done.
            else {
                break;
            }
        }
    }
};

return {
    astar: astar,
    Graph: Graph
};

});

},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/images/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      //this.game.stage.scale.pageAlignHorizontally = true;
      this.game.scale.scaleMode = Phaser.ScaleManager.RESIZE;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\game.js":[function(require,module,exports){
/*
Main testing environment.
*/

var Renderables = require('../functionAccess/Renderables');
var UIBuilder = require('../ui/UIBuilder');
var ModuleBuilder = require('../entities/ModuleBuilder');
var CubeGroup = require('../entities/cube_group');
var Hackable = require('../entities/Hackable');
var Emitter = require('../effects/Emitter');
var Mouse = require('../entities/mouse');
var Bullet = require('../entities/Bullet');
var SoundManager = require('../entities/sound_manager');
var Shop = require('../ui/shop');
var Helper = require('../entities/helper');
var Cheating = require('../entities/cheating');

var playerStartX = 1200, playerStartY = 1200;
var bg, bg2;
var numRoids;
var maxRoids = 100;
var newModuleSpeed = 1000;
var asteroids, asteroidList;
var leftKey, rightKey;
var warning;
var timer;

var Game = function () { };

module.exports = Game;

Game.prototype = {
	
  create: function () {
	this.game.world.setBounds(0, 0, 8000, 4000);
	
	numRoids = 0;
	//Create the two background images
   bg = this.game.add.sprite(0, 0, 'earthNight');
	bg2 = this.game.add.sprite(-8000, 0, 'earthNight');
	
	//Set up physics
	this.game.physics.startSystem(Phaser.Physics.P2JS);
	this.game.physics.p2.setImpactEvents(true);
	//add collision group
	this.collisionGroup = this.game.physics.p2.createCollisionGroup();
	
   this.simplify = true; // prevents things that get in the way of debugging
	
	this.mouse = new Mouse(this.game, this.input);
   
	this.updateDependents = [];

	//create Renderables class
	this.renderables = new Renderables();
	//create the UIBuilder
	this.uiBuilder = new UIBuilder(this, this.renderables);   
	//create ModuleBuilder and store it in this game state object
	this.moduleBuilder = new ModuleBuilder(this);
	//create and store the core module
	this.coreModule = this.moduleBuilder.build('core', playerStartX, playerStartY, true);
	this.game.camera.x = playerStartX;
	this.game.camera.y = playerStartY;
	this.cubeWidth = this.coreModule.cube.width;
	this.cubeBuffer = 2;
	this.testVar = 7;
	var playerGroup = new CubeGroup(this, this.coreModule.cube);
	this.updateDependents.push(playerGroup);
	this.player = playerGroup;
	this.player.isPlayer = true;
   
	this.mouse = new Mouse(this.game, this.input, playerGroup);
	this.player.isPlayer = true;
	
	//Create the emitter for the binary particle effects
	this.BinaryEmitter = new Emitter(this);
	
	//test hackable object
	// this.testHack = new Hackable(this, 1600, 1200, 'hackable1', 400);
	
	asteroids = this.game.add.group();
	asteroids.enableBody = true;
	asteroids.physicsBodyType = Phaser.Physics.P2JS;
	asteroidList = new Phaser.ArraySet();
	if (!this.simplify) { this.generateAsteroids(); }
	
	timer = this.game.time.create(false);
	warning = this.game.add.image(this.game.camera.x, this.game.camera.y, 'warning');
	warning.kill();
	
	leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.A);
	rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.D);
	
	this.pauseText = this.game.add.text(-1000, -1000, 'Press \'Esc\' To Unpause');
	this.pauseText.font = 'Roboto';
    this.pauseText.fontSize = 64;
    this.pauseText.fill = '#ffffff';
	this.pauseKey = this.game.input.keyboard.addKey(27);
	this.pauseKey.onDown.add(this.pauseMenu, this);

   this.levelData = JSON.parse(this.game.cache.getText('level_one'));
   this.loadData();

   this.juicy = this.game.plugins.add(new Phaser.Plugin.Juicy(this));
   this.game.camera.follow(this.coreModule.cube);
	
	this.mainSong = this.game.add.audio('mainSong', 1, true);
	if (!this.simplify) { this.mainSong.play('',0,1,true,true); }
   
   this.soundManager = new SoundManager(this);
   this.shop = new Shop(this);
   this.updateDependents.push(this.shop);
   this.helper = new Helper(this);
   this.updateDependents.push(this.helper);
   this.cheating = new Cheating(this);
  },
  
  restartLevel: function() {
	this.mainSong.stop();
	this.game.state.start(playerState.currentLevel);
  },
  
	pauseMenu: function() {
		
		if(this.game.paused === false) {
			this.pauseText.x = this.game.camera.x + (this.game.camera.width / 2) - (this.pauseText.width / 2);
			this.pauseText.y = this.game.camera.y + (this.game.camera.height / 2) - (this.pauseText.height / 2);
			this.game.paused = true;
		}
		else {
			this.game.paused = false;
			this.pauseText.x = -1000;
			this.pauseText.y = -1000;
		}
	},
  
  loadData: function() {
      var myLevel = this.levelData['level_one'];
      for (var key in myLevel) {
         if (myLevel.hasOwnProperty(key)) {
            var element = myLevel[key];
            if (element.hasOwnProperty('blueprint')) { // enemy type
               var enemyX = element['x_pos'];
               var enemyY = element['y_pos'];
               var enemyGroup = new CubeGroup(this, undefined);
               this.updateDependents.push(enemyGroup);
               var blueprint = element['blueprint'];
               for (var row = 0; row < blueprint.length; row++) {
                  for (var col = 0; col < blueprint[row].length; col++) {
                     var type = blueprint[row][col];
                     if (type !== 'none') {
                        var newModule = this.moduleBuilder.build(type, enemyX + row * (this.cubeWidth + this.cubeBuffer),
                        enemyY - col * (this.cubeWidth + this.cubeBuffer), false);
                        newModule.cube.tag = 'enemy_module';
                        var point = new Phaser.Point(row, col);
                        enemyGroup.add(newModule.cube, point);
                     }
                  }
               }
               var aiType = element['type'];
               enemyGroup.giveAI(aiType, this.player);
            }
         }
      }
  },

  update: function () {
	if(leftKey.isDown) {
		if(this.coreModule.cube.body.angularVelocity > -9) { 
			this.coreModule.cube.body.angularForce += -7.5 * Math.pow(this.player.numCubes, 1.65);
		}
	}
	if(rightKey.isDown) {
		if(this.coreModule.cube.body.angularVelocity < 9) {
			this.coreModule.cube.body.angularForce += 7.5 * Math.pow(this.player.numCubes, 1.65);
		}
	}
	this.mouse.update();
	this.scrollBG();
 
	for (var i = 0; i < this.updateDependents.length; i++) {
		if (this.updateDependents[i].update) {
			this.updateDependents[i].update();
		}
	}
	//Warning Code
	if(this.coreModule.cube.x + (Math.max(this.player.cubesWidth(), this.player.cubesHeight()) / 2 * 64) > 8000 ||
	this.coreModule.cube.x - (Math.max(this.player.cubesWidth(), this.player.cubesHeight()) / 2 * 64) < 0 ||
	this.coreModule.cube.y + (Math.max(this.player.cubesWidth(), this.player.cubesHeight()) / 2 * 64) > 4000 ||
	this.coreModule.cube.y - (Math.max(this.player.cubesWidth(), this.player.cubesHeight()) / 2 * 64) < 0) {
		if(timer.length === 0) {
			warning.revive();
			timer.loop(Phaser.Timer.SECOND * 5, this.resetPlayer, this);
			timer.start();
		}
	}
	else {
		if(warning.alive === true) {
			warning.kill();
		}
		if(timer.length > 0) {
			timer.stop(true);
		}
	}
	warning.x = this.game.camera.x;
	warning.y = this.game.camera.y;
  },
  
  render: function () {
	this.mouse.render();
	this.renderables.renderAll();
  },
  
	scrollBG: function() {
		bg.x += 0.125;
		if(bg.x >= 8000) {
			bg.x = 0;
		}
		bg2.x += 0.125;
		if(bg2.x >= 8000) {
			bg2.x = 0;
		}
	},
	
	generateAsteroids: function() {
		for(;numRoids < maxRoids; numRoids++) {
			var randX = this.game.rnd.integerInRange(0, this.game.world.width);
			var randY = this.game.rnd.integerInRange(0, this.game.world.height);
			
			while(randX < this.coreModule.cube.x - (this.player.cubesWidth() / 2 + 100) && randX > this.coreModule.cube.x + (this.player.cubesWidth() / 2 + 100) &&
			randY < this.coreModule.cube.y - (this.player.cubesHeight() / 2 + 100) && randY > this.coreModule.cube.y + (this.player.cubesHeight() / 2 + 100)) {
				randX = this.game.rnd.integerInRange(0, this.game.world.width);
				randY = this.game.rnd.integerInRange(0, this.game.world.height);
			}
			
			var asteroid = asteroids.create(randX, randY, 'asteroid');
			
			asteroid.body.clearShapes(); 
			asteroid.body.loadPolygon('asteroidPolygon', 'asteroid'); //Change the collision detection from an AABB to a polygon
			asteroid.body.damping = this.game.rnd.realInRange(0, 0.3) * this.game.rnd.integerInRange(0, 1) * this.game.rnd.integerInRange(0, 1);
			asteroid.body.rotation = this.game.rnd.realInRange(0, 2 * Math.PI);
			asteroid.body.force.x = this.game.rnd.integerInRange(-10, 10) * 750;
			asteroid.body.force.y = this.game.rnd.integerInRange(-10, 10) * 750;
			asteroid.body.setCollisionGroup(this.collisionGroup);
			asteroid.body.collides(this.collisionGroup);
			asteroid.body.collideWorldBounds = false;
			asteroid.autoCull = true;
			asteroid.checkWorldBounds = true;
			asteroid.events.onOutOfBounds.add(this.resetAsteroid, {roid: asteroid, coreModule: this.coreModule, player: this.player, game: this.game});
			asteroidList.add(asteroid);
		}
	},
	
	resetAsteroid: function() {
		var randX = this.game.rnd.integerInRange(0, this.game.world.width);
		var randY = this.game.rnd.integerInRange(0, this.game.world.height);
			
		while(randX < this.coreModule.cube.x - (this.player.cubesWidth() / 2 + 100) && randX > this.coreModule.cube.x + (this.player.cubesWidth() / 2 + 100) &&
			randY < this.coreModule.cube.y - (this.player.cubesHeight() / 2 + 100) && randY > this.coreModule.cube.y + (this.player.cubesHeight() / 2 + 100)) {
				randX = this.game.rnd.integerInRange(0, this.game.world.width);
				randY = this.game.rnd.integerInRange(0, this.game.world.height);
		}
		this.roid.x = randX;
		this.roid.y = randY;
		this.roid.body.rotation = this.game.rnd.realInRange(0, 2 * Math.PI);
		this.roid.body.force.x = this.game.rnd.integerInRange(-10, 10) * 750;
		this.roid.body.force.y = this.game.rnd.integerInRange(-10, 10) * 750;
	},
	
	resetPlayer: function() {
		if(this.coreModule.cube.x + (Math.max(this.player.cubesWidth(), this.player.cubesHeight()) / 2 * 64) > 8000) {
			this.coreModule.cube.body.moveLeft(this.player.numCubes * 750);
		}
		if(this.coreModule.cube.x - (Math.max(this.player.cubesWidth(), this.player.cubesHeight()) / 2 * 64) < 0) {
			this.coreModule.cube.body.moveRight(this.player.numCubes * 750);
		}
		if(this.coreModule.cube.y + (Math.max(this.player.cubesWidth(), this.player.cubesHeight()) / 2 * 64) > 4000) {
			this.coreModule.cube.body.moveUp(this.player.numCubes * 750);
		}
		else if(this.coreModule.cube.y - (Math.max(this.player.cubesWidth(), this.player.cubesHeight()) / 2 * 64) < 0) {
			this.coreModule.cube.body.moveDown(this.player.numCubes * 750);
		}
	},
};




























},{"../effects/Emitter":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\effects\\Emitter.js","../entities/Bullet":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\Bullet.js","../entities/Hackable":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\Hackable.js","../entities/ModuleBuilder":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js","../entities/cheating":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\cheating.js","../entities/cube_group":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js","../entities/helper":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\helper.js","../entities/mouse":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\mouse.js","../entities/sound_manager":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\entities\\sound_manager.js","../functionAccess/Renderables":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\functionAccess\\Renderables.js","../ui/UIBuilder":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\ui\\UIBuilder.js","../ui/shop":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\ui\\shop.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

var menuSong;

Menu.prototype = {
	
  pos: [-25, 25, 75],
  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;
	
	menuSong = this.game.add.audio('menuSong');
	menuSong.play('',0,1,true,true);
    
    this.title = this.add.image(this.world.centerX, this.world.centerY - 95, 'menu_title');
    this.title.anchor.setTo(0.5, 0.5);
    
    this.select = this.addButton(1, 'menu_select', this.changeToGame);
  	this.select.anchor.setTo(0.5, 0.5);
  	
  	this.manual = this.addButton(2, 'menu_manual', this.changeToMenu);
  	this.manual.anchor.setTo(0.5, 0.5);
  	
  	this.credits = this.addButton(3, 'menu_credits', this.changeToMenu);
  	this.credits.anchor.setTo(0.5, 0.5);
  },

  addButton: function(button, img, func){
    return this.add.button(this.world.centerX, this.world.centerY + this.pos[button - 1], img, func);
  },
  
  draw: function(){
  },
  
  changeToGame: function(){
	menuSong.stop();
  	this.game.state.start('Game');
  },  
  
  changeToMenu: function(){
  	this.game.state.start('Menu');
  },  
  /*
  changeState: function(state){
  	switch(state){
  		case 'game':
  			this.game.state.start('Game');
  			break;
  		case 'menu':
  			this.game.state.start('Menu');
  			break;
  		default:
  			break;
  	}
  },
  */
  update: function () {
  },

};

},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  game = null;
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(640, 360, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
	
	//Load Spritesheets
	this.load.spritesheet('core', 'assets/images/coreSheet.png', 64, 64); 
	this.load.spritesheet('thruster', 'assets/images/thrusterSheet.png', 64, 64);
	this.load.spritesheet('gun', 'assets/images/gunSheet.png', 64, 64);
	this.load.spritesheet('hacker', 'assets/images/hackSheet.png', 64, 64);
	this.load.spritesheet('shieldButton', 'assets/images/shieldButtonSheet.png', 256, 82);
	this.load.spritesheet('solarPanelButton', 'assets/images/solarPanelButtonSheet.png', 256, 82);
	this.load.spritesheet('thrusterButton', 'assets/images/thrusterButtonSheet.png', 256, 82);
	this.load.spritesheet('gunButton', 'assets/images/gunButtonSheet.png', 256, 82);
	this.load.spritesheet('hackButton', 'assets/images/hackButtonSheet.png', 256, 82);
	this.load.spritesheet('hackable', 'assets/images/hackableSheet.png', 64, 64);
	this.load.spritesheet('shopButton', 'assets/images/shopButtonSheet.png', 32, 32);
	
	//Load Images
	this.load.image('earthNight', 'assets/images/bg_earthNightSmall.jpg');
	this.load.image('bullet', 'assets/images/bullet.png');
	this.load.image('shield', 'assets/images/shield.png');
	this.load.image('solarPanel', 'assets/images/solarPanel.png');
	this.load.image('asteroid', 'assets/images/asteroid.png');
	this.load.image('shopPanel', 'assets/images/shopBackPanel.png');
	this.load.image('warning', 'assets/images/warning.png');
	this.load.image('be', 'assets/images/be.png');
	this.load.image('selected', 'assets/images/selected.png');
    
	//Load Fonts
	this.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');
	
	//Load JSON Files
	this.load.atlasJSONHash('connections', 'assets/images/connections.png', 'assets/json/connections.json');
	this.load.atlasJSONHash('connections', 'assets/images/connections.png', 'assets/json/connections.json');
	this.load.atlasJSONHash('helpButton', 'assets/images/helpButtonSheet.png', 'assets/json/help_button.json');
	this.load.atlasJSONHash('arrowButton', 'assets/images/arrowButtonSheet.png', 'assets/json/arrow_button.json');
	this.load.physics('module_physics', 'assets/json/module_physics.json');
	this.load.physics('asteroidPolygon', 'assets/json/asteroidPolygon.json');
	this.load.text('level_one', 'assets/json/level_one.json');
	this.load.text('tutorial_text', 'assets/json/tutorial_text.json');
	
	//Load Sound Effects
	this.load.audio('downClick', 'assets/sound/downClick.ogg');
	this.load.audio('hoverClick', 'assets/sound/hoverClick.ogg');
	this.load.audio('error', 'assets/sound/error.ogg');
	this.load.audio('cashRegister', 'assets/sound/cashRegister.ogg');
	this.load.audio('gun', 'assets/sound/gun.ogg');
	this.load.audio('hacking', 'assets/sound/hacking.ogg');
	this.load.audio('moduleImpact', 'assets/sound/moduleImpact.ogg');
	this.load.audio('moduleConnect', 'assets/sound/moduleConnect.ogg');
	this.load.audio('modulePower', 'assets/sound/modulePower.ogg');
	this.load.audio('thrusterLoop', 'assets/sound/thrusterLoop.ogg');
	
	this.load.text('tutorial_text', 'assets/json/tutorial_text.json');
	// this.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');
	this.load.atlasJSONHash('helpButton', 'assets/images/helpButtonSheet.png', 'assets/json/help_button.json');
	this.load.atlasJSONHash('arrowButton', 'assets/images/arrowButtonSheet.png', 'assets/json/arrow_button.json');
	//menu buttons
	this.load.image('menu_title', 'assets/images/atic_menu_titleT.png');
	this.load.image('menu_select', 'assets/images/atic_menu_selectT.png');
	this.load.image('menu_manual', 'assets/images/atic_menu_manualT.png');
	this.load.image('menu_credits', 'assets/images/atic_menu_creditsT.png');

	
	
	//Load Music
	this.load.audio('menuSong', 'assets/sound/Yet Another.ogg');
	this.load.audio('mainSong', 'assets/sound/Top (down) Night.ogg');

  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      // this.game.state.start('Menu');
      this.game.state.start(playerState.currentLevel); // jshint ignore:line
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\ui\\ProgressBar.js":[function(require,module,exports){
//NOTE: DON'T USE this code to create a ProgressBar. Instead, use the UIBuilder object and call buildProgressBar

var ProgressBar = function(setType, setMaxValue, setGraphics, setRenderables) {
	this.type = setType; //Two types, "growing" (starts at 0, triggers event when full) 
						 //and "shrinking" (starts full, triggers at 0)
	this.bgBorderSize = 2;			//default size of background border
	this.bgBorderColor = 0xAAAAAA;	//default color of background border
	this.bgColor = 0x888888;		//default color of background
	this.paddingHoriz = 5;			//default sum of padding on left and right side inner value bar
	this.paddingVert = 5;			//default sum (i.e. half on each side) of vertical padding of inner value bar
	this.valueBorderSize = 1;		//default size of value border
	this.valueBorderColor = 0x8888FF; //default color of value border
	this.valueColor = 0x000099;		//default color of inner value bar
	this.x = null;
	this.y = null;
	this.width = null;
	this.height = null;
	this.maxValue = setMaxValue;
	this.graphics = setGraphics; //store graphics class (used to draw bar)
	this.renderables = setRenderables;
	
	this.onEvent = function() {}; //overwrite this function to make whatever you want happen when progressBar reaches limit
	
	//switch(this.type) {
	//case 'growing' : 
	if(setType === 'growing') {
		this.value = 0;
		//tryTrigger is called automatically when you add/subtract value, and will trigger the onEvent() function
		this.tryTrigger = function() {
			if(this.value >= this.maxValue) {
				this.onEvent();
			}
		};
		//break;
	}
	else if(setType === 'shrinking') {
	//case 'shrinking' :
		this.value = this.maxValue;
		this.tryTrigger = function() {
			if(this.value <= 0) {
				this.onEvent();
			}
		};
	}
};

ProgressBar.prototype.constructor = ProgressBar;

ProgressBar.prototype.destroy = function() {
	this.graphics.clear();
	this.renderables.unsubscribe(this);
};

//To subtract value, just use negative numbers as argument i.e. foo.addValue(-5);
ProgressBar.prototype.addValue = function (addThis) {
	this.value += addThis;
	if(this.value > this.maxValue) {
		this.value = this.maxValue;
	}
	if(this.value < 0) {
		this.value = 0;
	}
	this.tryTrigger();
};

//Sets the location where progress bar is rendered
ProgressBar.prototype.setLocation = function(setX, setY) {
	this.x = setX;
	this.y = setY;
};

//Sets the size of the progress bar
ProgressBar.prototype.setSize = function(setWidth, setHeight) {
	this.width = setWidth;
	this.height = setHeight;
};

ProgressBar.prototype.setStyle = function(bgBorderSize, bgBorderColor, bgColor, paddingHoriz, paddingVert, valueBorderSize, valueBorderColor, valueColor) {
	this.bgBorderSize = bgBorderSize;
	this.bgBorderColor = bgBorderColor;
	this.bgColor = bgColor;
	this.paddingHoriz = paddingHoriz;
	this.paddingVert = paddingVert;
	this.valueBorderSize = valueBorderSize;
	this.valueBorderColor = valueBorderColor;
	this.valueColor = valueColor;
};

//update for progress bar, called just before drawing progress bar
//Overwrite this function if desired
ProgressBar.prototype.update = function() {};

//Renders progressBar
ProgressBar.prototype.render = function() {
	this.update();
	this.graphics.clear();
	//Draw background of bar
	this.graphics.lineStyle(this.bgBorderSize, this.bgBorderColor, 1); //sets border color and size
	this.graphics.beginFill(this.bgColor); //sets color of background fill
	this.graphics.drawRect(this.x-this.width/2, this.y-this.height/2, this.width, this.height);
	this.graphics.endFill();
	//Draw value of bar
	var percentage = this.value / this.maxValue;
	var barWidth = this.width - this.paddingHoriz;
	var barHeight = this.height - this.paddingVert;
	this.graphics.lineStyle(this.valueBorderSize, this.valueBorderColor, 1);
	this.graphics.beginFill(this.valueColor);
	this.graphics.drawRect(this.x-(barWidth/2), this.y-(barHeight/2), barWidth*percentage, barHeight);
	this.graphics.endFill();
};

module.exports = ProgressBar;
},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\ui\\UIBuilder.js":[function(require,module,exports){
var ProgressBar = require('./ProgressBar');
var Banner = require('./banner');

var UIBuilder = function(setGameState, setRenderables) {
	//Ensure that cannot create multiple instances of this class
	if(UIBuilder.prototype.exists) {
		return UIBuilder.prototype.existingReference;
	}
	
	this.gameState = setGameState;
	this.renderables = setRenderables;
	//Create and store a graphics object (used for stuff like drawing rectangles)
	UIBuilder.prototype.exists = true;
	UIBuilder.prototype.existingReference = this;
};

UIBuilder.prototype.constructor = UIBuilder;
//These var's help create the singleton functionality
UIBuilder.prototype.exists = false;
UIBuilder.prototype.existingReference = null;

//Use this function to create a progress bar
//Usage: type: can be "growing" or "shrinking", this will effect if bar starts at 0 and goes up or vis versa
//		 maxValue: sets the max value of the progress bar, i.e. using 100 creates a bar from 0 to 100
//		 x,y: sets location
//		 DON'T FORGET to overwrite the onEvent() function for the progress bar after creating it
//			-onEvent() is automatically called when bar fills/shrinks past limit (depending on bar type)
UIBuilder.prototype.buildProgressBar = function(type, x, y, width, height, maxValue) {
	//create and format new prog bar
	var graphics = this.gameState.game.add.graphics(0,0);
	var newProgBar = new ProgressBar(type, maxValue, graphics, this.renderables);
	newProgBar.setLocation(x,y);
	newProgBar.setSize(width, height);
	//subscribe to 'renderables' so that render() is called automatically
	this.renderables.subscribe(newProgBar);
	return newProgBar;
};

UIBuilder.prototype.buildBanner = function(xRatio, yRatio, texts) {
   var graphics = this.gameState.game.add.graphics(0, 0);
   var newBanner = new Banner(this.gameState, xRatio, yRatio, texts, graphics, this.renderables);
   this.renderables.subscribe(newBanner);
   return newBanner;
};

module.exports = UIBuilder;
},{"./ProgressBar":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\ui\\ProgressBar.js","./banner":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\ui\\banner.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\ui\\banner.js":[function(require,module,exports){
var Utils = require('../utils');

//NOTE: DON'T USE this code to create a Banner. Instead, use the UIBuilder object and call buildBanner
var Banner = function(state, xRatio, yRatio, textJSON, graphics, renderables) {
   this.bgBorderSize = 6;			//default size of background border
	this.bgBorderColor = 0xffffff;	//default color of background border
	this.bgColor = 0x4a4a4a;		//default color of background
   this.shadowOffsetX = 3;
   this.shadowOffsetY = 3;
   this.shadowColor = 'rgba(0,0,0,0.9)';
   this.shadowBlur = 5;
   this.normalText = '#ffffff';
   this.highlightText = '#00ff00';
   this.textWrapPadding = 10;
   this.offScreenPadding = -200;
   this.textJSON = textJSON;
   this.state = state;
   this.game = state.game;
   this.cam = this.game.camera;
   this.sm = this.state.soundManager;
   this.xRatio = xRatio;
   this.yRatio = yRatio;
   this.graphics = graphics;
   this.renderables = renderables;
   this.width = 400;
   this.height = 200;
   this.index = 0;
   this.x = 0;
   this.hideBuffer = -50;
   this.hideHeight = -this.height - this.hideBuffer;
   this.y = this.cam.y - this.cam.height / 2 - this.hideHeight;
   this.slideY = this.hideHeight;
   this.goalY = this.y;
   this.slideRate = 0.2;
   this.visible = false;
   // add buttons
   this.rightButton = this.game.add.button(0, 0, 'arrowButton', this.nextIndex, this, 1, 0, 2);
	this.rightButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.rightButton.onInputDown.add(this.sm.playDownClick, this.sm);
   this.leftButton = this.game.add.button(0, 0, 'arrowButton', this.prevIndex, this, 1, 0, 2);
	this.leftButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.leftButton.onInputDown.add(this.sm.playDownClick, this.sm);
   this.leftButton.scale.x = -1;
   this.group = new Phaser.Group(this.game);
   this.group.add(this.graphics);
   this.group.add(this.rightButton);
   this.group.add(this.leftButton);
   this.addTexts();
   this.game.world.bringToTop(this.group);
   this.debug = false;
};

Banner.prototype.constructor = Banner;

Banner.prototype.destroy = function() {
	this.graphics.clear();
	this.renderables.unsubscribe(this);
};

Banner.prototype.update = function() {
   // TODO: add layer groups to other things
   this.game.world.bringToTop(this.group);
   // my pos
   this.x = this.cam.x + this.cam.width * this.xRatio;
   if (this.visible) {
      this.goalY = this.cam.height / 2;
   } else {
      this.goalY = this.hideHeight;
   }
   this.slideY = Utils.lerp(this.slideY, this.goalY, this.slideRate);
   if (this.debug) { console.log('this.cam.y:', this.cam.y, 'this.slideY:', this.slideY, 'this.y:', this.y); }
   this.y = this.cam.y + this.slideY;
   // text pos
   var curText = this.textObjs[this.index];
   curText.x = this.x;
   curText.y = this.y;
   // button pos
   this.rightButton.x = this.x + this.width / 2 + this.rightButton.width / 2;
   this.rightButton.y = this.y - this.rightButton.height / 2;
   this.leftButton.x = this.x - this.width / 2 + this.leftButton.width / 2;
   this.leftButton.y = this.y - this.leftButton.height / 2;
};

Banner.prototype.addTexts = function() {
   if (!this.textObs) {
      this.textObjs = [];
   }
   var textDefs = JSON.parse(this.game.cache.getText(this.textJSON));
   var textArray = textDefs['text'];
   var textColors = textDefs['colors'];
   for (var i = 0; i < textArray.length; i++) {
      var text = textArray[i];
      var newText = this.game.add.text(this.offScreenPadding, this.offScreenPadding, text);
      newText.font = 'Roboto';
      newText.fontSize = 24;
      newText.align = 'center';
      newText.fill = this.normalText;
      newText.wordWrap = true;
      newText.wordWrapWidth = this.width - this.textWrapPadding;
      newText.anchor.set(0.5);
      newText.setShadow(this.shadowOffsetX, this.shadowOffsetY, this.shadowColor, this.shadowBlur);
      var newColors = textColors[i];
      for (var j = 0; j < newColors.length; j++) {
         newText.addColor(this.highlightText, newColors[j]);
         j++;
         newText.addColor(this.normalText, newColors[j]);
      }
      this.textObjs.push(newText);
      this.group.add(newText);
   }
};

Banner.prototype.render = function() {
	this.update();
	this.graphics.clear();
	//Draw background
	this.graphics.lineStyle(this.bgBorderSize, this.bgBorderColor, 1); //sets border color and size
	this.graphics.beginFill(this.bgColor); //sets color of background fill
	this.graphics.drawRect(this.x-this.width/2, this.y-this.height/2, this.width, this.height);
	this.graphics.endFill();
};

Banner.prototype.show = function() {
   // this.goalY = this.cam.y + this.cam.height * this.yRatio;
   this.visible = true;
};

Banner.prototype.hide = function() {
   // this.goalY = this.hideHeight;
   this.visible = false;
};

Banner.prototype.toggle = function() {
  if (this.visible) {
     this.hide();
  } else {
     this.show();
  }  
};

Banner.prototype.hideCurText = function() {
  this.textObjs[this.index].x = this.textObjs[this.index].y = 0; 
};

Banner.prototype.nextIndex = function() {
   this.hideCurText();
   this.index++;
   if (this.index >= this.textObjs.length) {
      this.index = 0;
   }
};

Banner.prototype.prevIndex = function() {
   this.hideCurText();
   this.index--;
   if (this.index < 0) {
      this.index = this.textObjs.length - 1;
   }
};

module.exports = Banner;









},{"../utils":"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\ui\\shop.js":[function(require,module,exports){
var Shop = function(state) {
   // initial variables
	this.state = state;
   this.game = this.state.game;
   this.cam = this.game.camera;
   this.sm = this.state.soundManager;
   this.mouse = this.state.mouse;
   this.money = 500;
   this.shopSpeed = 1;
   this.diff = 0;
   this.newModuleSpeed = 1500;
   // create button
   this.shopButton = this.game.add.button(this.game.camera.x + this.game.camera.width - 48, 16, 'shopButton', this.useShopButton, this, 1, 0, 2);
	this.shopButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.shopButton.onInputDown.add(this.sm.playDownClick, this.sm);
   // create text
   this.moneyText = this.game.add.text(this.shopButton.x - 8, this.shopButton.y + 48, this.money);
   this.moneyText.font = 'VT323';
   this.moneyText.fontSize = 24;
   this.moneyText.fill = '#ffffff';
   this.moneyText.text = this.money;
	this.be = this.game.add.image(this.moneyText.x + this.moneyText.width + 8, this.moneyText.y, 'be');
   // create sounds
   this.cashRegister = this.game.add.audio('cashRegister');
   this.cashRegister.allowMultiple = true;
   this.error = this.game.add.audio('error');
   // add controls
   this.addMoneyKey = this.game.input.keyboard.addKey(Phaser.Keyboard.K);
	this.addMoneyKey.onDown.add(this.debugAddMoney, this);
   // create buttons
	this.shopPanel = this.game.add.image(this.cam.x + this.cam.width + 256 + 16, this.cam.y + 16, 'shopPanel');
	this.shopPanel.kill();
	this.shieldButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 1), 'shieldButton', this.purchaseModule, {state: this, key: 'shield'}, 1, 0, 2);
	this.formatButton(this.shieldButton);
	this.solarPanelButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 2), 'solarPanelButton', this.purchaseModule, {state: this, key: 'solarPanel'}, 1, 0, 2);
	this.formatButton(this.solarPanelButton);
	this.thrusterButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 3), 'thrusterButton', this.purchaseModule, {state: this, key: 'thruster'}, 1, 0, 2);
	this.formatButton(this.thrusterButton);
	this.gunButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 4), 'gunButton', this.purchaseModule, {state: this, key: 'gun'}, 1, 0, 2);
	this.formatButton(this.gunButton);
	this.hackButton = this.game.add.button(this.cam.x + this.cam.width - this.diff, this.cam.y + 52 + (88 * 5), 'hackButton', this.purchaseModule, {state: this, key: 'hacker'}, 1, 0, 2);
	this.formatButton(this.hackButton);
	this.shopButton = this.game.add.button(this.cam.x + this.cam.width - 48, 16, 'shopButton', this.useShopButton, this, 1, 0, 2);
	this.shopButton.onInputOver.add(this.sm.playHoverClick, this.sm);
	this.shopButton.onInputDown.add(this.sm.playDownClick, this.sm);
};

Shop.prototype.constructor = Shop;

Shop.prototype.update = function() {
   // find diff
	if(this.shopMenuOpening === true) {	
      this.diff += this.shopSpeed * this.game.time.elapsed;
		if(this.diff >= 276) {
			this.shopMenuOpening = false;
			this.addShopButtons();
		}
	}
	else if(this.shopMenuClosing === true) {
      this.diff -= this.shopSpeed * this.game.time.elapsed;
		if(this.diff <= 0) {
			this.shopPanel.kill();
			this.shopMenuClosing = false;
		}
	}
   // update opening button position
   this.shopButton.x = this.cam.x + this.cam.width - 48 - this.diff;
	this.shopButton.y = this.cam.y + 16;
   // update text position
   this.moneyText.x = this.shopButton.x - 16;
	this.moneyText.y = this.shopButton.y + 48;
	this.be.x = this.moneyText.x + this.moneyText.width + 8;
	this.be.y = this.moneyText.y;
   // update purchasing button position
   this.shopPanel.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.shopPanel.y = this.cam.y + 16;
	this.shieldButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.shieldButton.y = this.cam.y + 70 + (86 * 0);
	this.solarPanelButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.solarPanelButton.y = this.cam.y + 70 + (86 * 1);
	this.thrusterButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.thrusterButton.y = this.cam.y + 70 + (86 * 2);
	this.gunButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.gunButton.y = this.cam.y + 70 + (86 * 3);
	this.hackButton.x = this.cam.x + this.cam.width + 16 - this.diff;
	this.hackButton.y = this.cam.y + 70 + (86 * 4);
};

Shop.prototype.purchaseModule = function() {
   var randY = this.state.game.rnd.integerInRange(100, this.state.cam.height - 100);
   if(this.key === 'shield' && this.state.mouse.x > this.state.shieldButton.x && this.state.mouse.x < this.state.shieldButton.x + 256 && this.state.mouse.y > this.state.shieldButton.y && this.state.mouse.y < this.state.shieldButton.y + 82) {
      if(this.state.money >= 45) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 45;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'solarPanel' && this.state.mouse.x > this.state.solarPanelButton.x && this.state.mouse.x < this.state.solarPanelButton.x + 256 && this.state.mouse.y > this.state.solarPanelButton.y && this.state.mouse.y < this.state.solarPanelButton.y + 82) {
      if(this.state.money >= 105) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 105;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'thruster' && this.state.mouse.x > this.state.thrusterButton.x && this.state.mouse.x < this.state.thrusterButton.x + 256 && this.state.mouse.y > this.state.thrusterButton.y && this.state.mouse.y < this.state.thrusterButton.y + 82) {
      if(this.state.money >= 90) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 90;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'gun' && this.state.mouse.x > this.state.gunButton.x && this.state.mouse.x < this.state.gunButton.x + 256 && this.state.mouse.y > this.state.gunButton.y && this.state.mouse.y < this.state.gunButton.y + 82) {
      if(this.state.money >= 120) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 120;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   else if(this.key === 'hacker' && this.state.mouse.x > this.state.hackButton.x && this.state.mouse.x < this.state.hackButton.x + 256 && this.state.mouse.y > this.state.hackButton.y && this.state.mouse.y < this.state.hackButton.y + 82) {
      if(this.state.money >= 200) {
         this.state.addModule(this.state.cam.x + this.state.cam.width + 80, this.state.cam.y + randY, this.key);
         this.state.money -= 200;
         this.state.cashRegister.play();
      }
      else {
         this.state.error.play();
      }
   }
   this.state.moneyText.text = this.state.money; 
};

Shop.prototype.addModule = function (x, y, key) {
   var newModule = this.state.moduleBuilder.build(key, x, y, true);
   newModule.cube.body.moveLeft(this.newModuleSpeed);
};

Shop.prototype.addShopButtons = function() {
   this.shieldButton.revive();
   this.solarPanelButton.revive();
   this.thrusterButton.revive();
   this.gunButton.revive();
   this.hackButton.revive(); 
};

Shop.prototype.formatButton = function(button) {
   button.onInputOver.add(this.sm.playHoverClick, this.sm);
   button.onInputDown.add(this.sm.playDownClick, this.sm);
   button.kill();
};

Shop.prototype.addMoney = function(amt) {
   this.money += amt;
   this.moneyText.text = this.money;
   this.cashRegister.play();
};

Shop.prototype.debugAddMoney = function() {
  this.addMoney(1000); 
};

Shop.prototype.useShopButton = function() {
   if(!this.shopPanel.alive && !this.shopMenuOpening && !this.shopMenuClosing) {
      this.shopPanel.revive();
      this.diff = 0;
      this.shopMenuOpening = true;
   }
   else if(this.shopPanel.alive&& !this.shopMenuClosing && !this.shopMenuOpening) {
      this.shopMenuClosing = true;
   }
};

module.exports = Shop;





// //Shop Movement Code
	// if(shopMenuOpening === true) {	
		// // diff += 4;
      // diff += this.shopSpeed * this.game.time.elapsed;
		// if(diff >= 276) {
			// shopMenuOpening = false;
			// this.addShopButtons();
		// }
	// }
	// else if(shopMenuClosing === true) {
		// // diff -= 4;
      // diff -= this.shopSpeed * this.game.time.elapsed;
		// if(diff <= 0) {
			// shopPanel.kill();
			// shopMenuClosing = false;
		// }
	// }




},{}],"C:\\Users\\Zachary\\Documents\\!cmpm20\\AboveTheIronCurtain\\src\\js\\utils.js":[function(require,module,exports){
/*
Collection of utility functions.
*/

var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
    distance: function(x1, y1, x2, y2) {
       return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    },
    lerp: function(a, b, t) {
       if (t < 0 || t > 1) {
          console.log('bad range for Utils.lerp(), must be between 0 and 1');
          return 0;
       }
       return a + t * (b - a);
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,
