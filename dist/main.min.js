(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 800, Phaser.AUTO, 'atic-game');

window.playerState = {
    currentLevel: 'Game'
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');
},{"./states/boot":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\boot.js","./states/game":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\game.js","./states/menu":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\menu.js","./states/preloader":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\preloader.js","./states/splash":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\splash.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\Module.js":[function(require,module,exports){
//Don't use this function to create modules, instead use moduleBuilder()
var Module = function(setCube) {
	this.cube = setCube;
   setCube.module = this;
};

Module.prototype.constructor = Module;

module.exports = Module;
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js":[function(require,module,exports){
var Cube = require('./cube');
var Module = require('./Module');

//Use this to create a moduleBuilder- only need to create one instance of it
var ModuleBuilder = function(setGameState) {
	//Ensure that cannot create multiple instances of this class
	if(ModuleBuilder.prototype.exists) {
		return ModuleBuilder.prototype.existingReference;
	}
		
	this.gameState = setGameState;
	this.coreExists = false;	//records if core has been created
	this.core = null;			//stores core when it is created
	ModuleBuilder.prototype.exists = true;
	ModuleBuilder.prototype.existingReference = this;
};

ModuleBuilder.prototype.constructor = ModuleBuilder;

//These var's help create the singleton functionality
ModuleBuilder.prototype.exists = false;
ModuleBuilder.prototype.existingReference = null;

/** Module functions **/
function solarPanelGiveTarget(target) {
   if (this.cube.group !== target.cube.group || this === target) {
      return;
   }
   // TODO: restrict to only powered modules
   var ourGroup = this.cube.group;
   this.cube.removeConnection();
   target.cube.removeConnection();
   // TODO: restrict by length
   var newConnection = {start: ourGroup.find(this.cube), end: ourGroup.find(target.cube)};
   this.cube.myConnection = newConnection;
   target.cube.myConnection = newConnection;
   ourGroup.displayConnection(this.cube.myConnection);
}

function solarPanelMouseOver() {
   if (!this.cube.myConnection) {
      return;
   }
   this.cube.group.displayConnection(this.cube.myConnection);
}
/** End module functions **/

//call this function from ModuleBuilder to construct modules
//TYPES: 'core' 'shield' 'thruster' 'solarPannel'
ModuleBuilder.prototype.build = function(type, x, y) {
	//Check if core has been created
	if(type === 'core' && this.coreExists) {
		//if so, return existing core b/c is singleton
		//b/c of this, can call ModuleBuilder.build('core') to access reference to existing core
		return this.core;
	}
	
	//Create cube object to be stored within module
	//Sprite names for modules are directly mapped to module names, so just pass 'type' as sprite name
	var newCube = new Cube(this.gameState.game, x, y, type);
    var scale = 0.5;
    newCube.name = this.gameState.debugNum++;
    newCube.scale.setTo(scale, scale);
    newCube.anchor.setTo(0.5, 0.5);
    this.gameState.game.physics.p2.enable(newCube);
    newCube.body.onBeginContact.add(newCube.cubeCollide, newCube);
    newCube.body.damping = 0.9;
    newCube.body.angularDamping = 0.9;
    if (!this.gameState.rootSpawned) {
       newCube.root = true;
       this.gameState.rootSpawned = true;
    }

   // var cIndicator = new Phaser.Sprite(this.game, 0, 0, 'connections', 'grid_line.png');
   var cIndicator = this.gameState.add.sprite(0, 0, 'connections', 'connection_line.png');
   cIndicator.anchor.setTo(0.5, 0.5);
   cIndicator.animations.add('end', ['connection_end.png'], 60, true);
   cIndicator.animations.add('line', ['connection_line.png'], 60, true);
   cIndicator.animations.add('right', ['connection_right.png'], 60, true);
   // cIndicator.animations.add('test', ['connection_end.png'], 60, true);
   newCube.addChild(cIndicator);
   newCube.cIndicator = cIndicator;
   cIndicator.alpha = 0;
	
	//Create module to wrap around cube class
	var newModule = new Module(newCube);
		
	//TODO: edit special module atributes based on 'type'
	
	//Store module if it is core
	if(type === 'core')
	{
		this.core = newModule;
		this.coreExists = true;
	}
   // solar panel testing
   if (type === 'solarPannel') {
      newModule.giveTarget = solarPanelGiveTarget;
      newModule.mouseOver = solarPanelMouseOver;
   }
	
	//Return the module object
	return newModule;
};

module.exports = ModuleBuilder;
},{"./Module":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\Module.js","./cube":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube.js":[function(require,module,exports){
/*
Defines a cube.
*/

// var Astar = require('../libs/javascript-astar/astar');

var Cube = function (game, x, y, sprite) {
    Phaser.Sprite.call(this, game, x, y, sprite);
    game.add.existing(this);
    this.group = undefined;
    this.module = undefined;
    this.indicatorFade = 0.008;
};

Cube.prototype = Object.create(Phaser.Sprite.prototype);
Cube.prototype.constructor = Cube;

/**
 * Automatically called by World.update
 */
Cube.prototype.update = function() {
   if (this.cIndicator && this.cIndicator.alpha > 0) {
      this.cIndicator.alpha -= this.indicatorFade;
   }
};

Cube.prototype.cubeCollide = function(other) {
   if (!this.group || !other || !other.sprite) {
      return;
   }
   this.group.handleCollision(this, other.sprite);
};

Cube.prototype.toString = function() {
   var string = '';
   string += this.concat('name', this.name);
   return string;
};

Cube.prototype.concat = function(string, val) {
   return string + ': ' + val + '\n';
};

Cube.prototype.removeConnection = function() {
  
};

Cube.prototype.displayIndicator = function() {
  this.cIndicator.alpha = 1; 
};

/*
Cube.prototype.runAstar = function() {
   var graph = new Astar.Graph([
        [1,1,1,1],
        [0,1,1,0],
        [0,0,1,1]
    ]);
    var start = graph.grid[0][0];
    var end = graph.grid[1][2];
    var result = Astar.astar.search(graph, start, end);
    for(var i = 0; i < result.length; i++) {
       console.log(result[i].x, result[i].y);
    }
};
*/

module.exports = Cube;















},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js":[function(require,module,exports){
var Astar = require('../libs/javascript-astar/astar');

/*
Defines a cube group.
*/

var CubeGroup = function (game, root) {
   this.game = game;
   this.root = root;
   this.cubes = [];
   var col = [];
   col.push(this.root);
   this.cubes.push(col);
   this.root.group = this;
   this.DIR = {NORTH: 0, EAST: 1, SOUTH: 2, WEST: 3};
   this.offset = 2;
   // this.groups = this.game.add.group();
   // this.cubeSprites = new Phaser.Group(this.game, this.groups);
   // this.gridSprites = new Phaser.Group(this.game, this.groups);
};

CubeGroup.prototype.constructor = CubeGroup;

/**
 * Automatically called by World.update
 */
CubeGroup.prototype.update = function() {
};

CubeGroup.prototype.add = function(cube) {
  cube.group = this;
  // this.cubeSprites.add(cube);
};

CubeGroup.prototype.handleCollision = function(origin, other) {
   // stop if other does not exist, either is not a cube, both are in same group
   if (other === null || origin.prototype !== other.prototype || origin.group === other.group) {
      return;
   }
   var relSide = this.relativeSide(origin.body, other.body);
   var originLoc = this.find(origin);
   var otherLoc = this.adjust(originLoc, relSide);
   if (this.getCube(otherLoc)) {
      return;
   }
   switch (relSide) {
      case this.DIR.NORTH:
      if (originLoc.y === this.cubesHeight() - 1) {
         this.addTopRow();
      }
      break;
      case this.DIR.EAST:
      if (originLoc.x === this.cubesWidth() - 1) {
         this.addRightCol();
      }
      break;
      case this.DIR.SOUTH:
      if (originLoc.y === 0) {
         this.addBotRow();
      }
      break;
      case this.DIR.WEST:
      if (originLoc.x === 0) {
         this.addLeftCol();
      }
      break;
   }
   originLoc = this.find(origin);
   otherLoc = this.adjust(originLoc, relSide);
   this.createConstraints(otherLoc, other);
   if (!otherLoc) {
      console.log('hande collision failed to find second other loc');
      return;
   }
   this.set(otherLoc, other);
   other.group = this;
};

CubeGroup.prototype.createConstraints = function(loc, me) {
   var myNorth = this.get(this.adjust(loc, this.DIR.NORTH));
   var myEast = this.get(this.adjust(loc, this.DIR.EAST));
   var mySouth = this.get(this.adjust(loc, this.DIR.SOUTH));
   var myWest = this.get(this.adjust(loc, this.DIR.WEST));
   if (myNorth) {
      this.game.physics.p2.createLockConstraint(me.body, myNorth.body, [0, me.width + this.offset]); // me - north
   }
   if (myEast) {
      this.game.physics.p2.createLockConstraint(me.body, myEast.body, [-me.width - this.offset, 0]); // me - east
   }
   if (mySouth) {
      this.game.physics.p2.createLockConstraint(mySouth.body, me.body, [0, me.width + this.offset]); // south - me
   }
   if (myWest) {
      this.game.physics.p2.createLockConstraint(myWest.body, me.body, [-me.width - this.offset, 0]); // west - me
   }
};

CubeGroup.prototype.relativeSide = function(thisBody, otherBody) {
  var thisPoint = new Phaser.Point(thisBody.x, thisBody.y);
  var otherPoint = new Phaser.Point(otherBody.x, otherBody.y);
  var angleToOther = Phaser.Point.angle(thisPoint, otherPoint);
  if (angleToOther < 0) { // fix dumb part of Phaser.Point.angle()
     angleToOther = 2 * Math.PI + angleToOther;
  }
  angleToOther = (angleToOther + 3/2 * Math.PI) % (2 * Math.PI); // rotate 90 d clockwise
  var diffAngle = angleToOther - thisBody.rotation;
   if (diffAngle < 1 / 4 * Math.PI || diffAngle > 7 / 4 * Math.PI) { // north
     return this.DIR.NORTH;
  } else if (diffAngle >= 1 / 4 * Math.PI && diffAngle < 3 / 4 * Math.PI) { // east
     return this.DIR.EAST;
  } else if (diffAngle >= 3 / 4 * Math.PI && diffAngle < 5 / 4 * Math.PI) { // south
     return this.DIR.SOUTH;
  } else if (diffAngle >= 5 / 4 * Math.PI && diffAngle < 7 / 4 * Math.PI) { // west
     return this.DIR.WEST;
  }
};

CubeGroup.prototype.find = function(cube) {
   for (var row = 0; row < this.cubesWidth(); row++) {
      for (var col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col] === cube) {
            return new Phaser.Point(row, col);
         }
      }
   }
   return undefined;
};

CubeGroup.prototype.get = function(point) {
  if (!point || this.outOfBounds(point)) {
      return;
  }
  return this.cubes[point.x][point.y];
};

CubeGroup.prototype.cubesWidth = function() {
   return this.cubes.length;
};

CubeGroup.prototype.cubesHeight = function() {
   return this.cubes[0].length;
};

/*
[0,height] ...  [width, height]
.                 
.               .
.               .
[0,1] [1,1] ... .
[0,0] [1,0] ... [width,0]
*/
CubeGroup.prototype.addTopRow = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].push(undefined);
   }
};

CubeGroup.prototype.addRightCol = function() {
   var newCol = new Array(this.cubesHeight);
   this.cubes.push(newCol);
};

CubeGroup.prototype.addBotRow = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      this.cubes[row].unshift(undefined);
   }
};

CubeGroup.prototype.addLeftCol = function() {
   var newCol = new Array(this.cubesHeight());
   this.cubes.unshift(newCol);
};

CubeGroup.prototype.getCube = function(point) {
   if (!point || this.outOfBounds(point)) {
      return undefined;
   }
   return this.cubes[point.x][point.y];
};

CubeGroup.prototype.adjust = function(point, dir) {
  if (!point) {
     console.log('adjust given undefined point');
     return;
  }
  var newPoint = new Phaser.Point(point.x, point.y);
  switch (dir) {
      case this.DIR.NORTH:
      newPoint.y++;
      break;
      case this.DIR.EAST:
      newPoint.x++;
      break;
      case this.DIR.SOUTH:
      newPoint.y--;
      break;
      case this.DIR.WEST:
      newPoint.x--;
      break;
   }
   return newPoint;
};

CubeGroup.prototype.set = function(point, cube) {
   if (!point) {
      console.log('set given undefined point');
      return;
   }
   if (this.outOfBounds(point)) {
      return;
   }
   this.cubes[point.x][point.y] = cube;
};

CubeGroup.prototype.outOfBounds = function(point) {
   if (!point) {
      console.log('out of bounds given undefined point');
      return;
   }
   if (point.x < 0 || point.x >= this.cubesWidth() || point.y < 0 || point.y >= this.cubesHeight()) {
      return true;
   }
   return false;
};

CubeGroup.prototype.displayCubes = function() {
   for (var row = 0; row < this.cubesWidth(); row++) {
      var string = '';
      for (var col = 0; col < this.cubesHeight(); col++) {
         var cube = this.cubes[row][col];
         if (cube) {
            string += '# ';
         } else {
            string += '_ ';
         }
      }
      console.log('row ' + row + ': ' + string + '| ' + this.cubes[row].length);
   }
};

CubeGroup.prototype.displayConnection = function(connection) {
   var graph = new Astar.Graph(this.cubesToGraph());
   var start = graph.grid[connection.start.x][connection.start.y];
   var end = graph.grid[connection.end.x][connection.end.y];
   var result = Astar.astar.search(graph, start, end);
   result.unshift(start);
   var previous;
   for(var i = 0; i < result.length; i++) {
      var curPoint = new Phaser.Point(result[i].x, result[i].y);
      var cur = this.get(curPoint);
      var indicator = cur.cIndicator;
      var dir;
      if (!previous) {
         indicator.animations.play('end');
         var nextPoint = new Phaser.Point(result[i+1].x, result[i+1].y);
         var next = this.get(nextPoint);
         dir = this.dirBetween(curPoint, this.find(next));
         indicator.rotation = this.dirToAngle(dir);
      } else if (i === result.length - 1) {
         indicator.animations.play('end');
         // indicator.frame = 'connection_end';
         var prevPoint = new Phaser.Point(previous.x, previous.y);
         var prev = this.get(prevPoint);
         dir = this.dirBetween(curPoint, this.find(prev));
         indicator.rotation = this.dirToAngle(dir);
      } else {
         indicator.animations.play('line');
         // indicator.frame = 'connection_end';
      }
      previous = result[i];
      cur.displayIndicator();
    }
};

CubeGroup.prototype.cubesToGraph = function() {
  var graph = [];
  for (var row = 0; row < this.cubesWidth(); row++) {
     var newCol = [];
      for (var col = 0; col < this.cubesHeight(); col++) {
         if (this.cubes[row][col]) {
            newCol.push(1);
         } else {
            newCol.push(0);
         }
      }
      graph.push(newCol);
   }
   return graph;
};

// [0,0] [1,0] -> east
// [0,0] [0,1] -> north
// assumes neighbors
CubeGroup.prototype.dirBetween = function(a, b) {
   var deltaX = a.x - b.x;
   var deltaY = a.y - b.y;
   if (deltaX > 0) {
      return this.DIR.EAST;
   }
   if (deltaX < 0) {
      return this.DIR.WEST;
   }
   if (deltaY > 0) {
      return this.DIR.SOUTH;
   }
   if (deltaY < 0) {
      return this.DIR.NORTH;
   }
   return this.DIR.NORTH;
};

CubeGroup.prototype.dirToAngle = function(dir) {
  switch (dir) {
   case this.DIR.NORTH:
   return Math.PI;
   case this.DIR.EAST:
   return 3 / 2 * Math.PI;
   case this.DIR.SOUTH:
   return 0;
   case this.DIR.WEST:
   return 1 / 2 * Math.PI;
  }  
};

module.exports = CubeGroup;

















},{"../libs/javascript-astar/astar":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\libs\\javascript-astar\\astar.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\libs\\javascript-astar\\astar.js":[function(require,module,exports){
// javascript-astar 0.4.0
// http://github.com/bgrins/javascript-astar
// Freely distributable under the MIT License.
// Implements the astar search algorithm in javascript using a Binary Heap.
// Includes Binary Heap (with modifications) from Marijn Haverbeke.
// http://eloquentjavascript.net/appendix2.html

(function(definition) {
    /* global module, define */
    if(typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = definition();
    } else if(typeof define === 'function' && define.amd) {
        define([], definition);
    } else {
        var exports = definition();
        window.astar = exports.astar;
        window.Graph = exports.Graph;
    }
})(function() {

function pathTo(node){
    var curr = node,
        path = [];
    while(curr.parent) {
        path.push(curr);
        curr = curr.parent;
    }
    return path.reverse();
}

function getHeap() {
    return new BinaryHeap(function(node) {
        return node.f;
    });
}

var astar = {
    /**
    * Perform an A* Search on a graph given a start and end node.
    * @param {Graph} graph
    * @param {GridNode} start
    * @param {GridNode} end
    * @param {Object} [options]
    * @param {bool} [options.closest] Specifies whether to return the
               path to the closest node if the target is unreachable.
    * @param {Function} [options.heuristic] Heuristic function (see
    *          astar.heuristics).
    */
    search: function(graph, start, end, options) {
        graph.cleanDirty();
        options = options || {};
        var heuristic = options.heuristic || astar.heuristics.manhattan,
            closest = options.closest || false;

        var openHeap = getHeap(),
            closestNode = start; // set the start node to be the closest if required

        start.h = heuristic(start, end);

        openHeap.push(start);

        while(openHeap.size() > 0) {

            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.
            var currentNode = openHeap.pop();

            // End case -- result has been found, return the traced path.
            if(currentNode === end) {
                return pathTo(currentNode);
            }

            // Normal case -- move currentNode from open to closed, process each of its neighbors.
            currentNode.closed = true;

            // Find all neighbors for the current node.
            var neighbors = graph.neighbors(currentNode);

            for (var i = 0, il = neighbors.length; i < il; ++i) {
                var neighbor = neighbors[i];

                if (neighbor.closed || neighbor.isWall()) {
                    // Not a valid node to process, skip to next neighbor.
                    continue;
                }

                // The g score is the shortest distance from start to current node.
                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.
                var gScore = currentNode.g + neighbor.getCost(currentNode),
                    beenVisited = neighbor.visited;

                if (!beenVisited || gScore < neighbor.g) {

                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.
                    neighbor.visited = true;
                    neighbor.parent = currentNode;
                    neighbor.h = neighbor.h || heuristic(neighbor, end);
                    neighbor.g = gScore;
                    neighbor.f = neighbor.g + neighbor.h;
                    graph.markDirty(neighbor);
                    if (closest) {
                        // If the neighbour is closer than the current closestNode or if it's equally close but has
                        // a cheaper path than the current closest node then it becomes the closest node
                        if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {
                            closestNode = neighbor;
                        }
                    }

                    if (!beenVisited) {
                        // Pushing to heap will put it in proper place based on the 'f' value.
                        openHeap.push(neighbor);
                    }
                    else {
                        // Already seen the node, but since it has been rescored we need to reorder it in the heap
                        openHeap.rescoreElement(neighbor);
                    }
                }
            }
        }

        if (closest) {
            return pathTo(closestNode);
        }

        // No result was found - empty array signifies failure to find path.
        return [];
    },
    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html
    heuristics: {
        manhattan: function(pos0, pos1) {
            var d1 = Math.abs(pos1.x - pos0.x);
            var d2 = Math.abs(pos1.y - pos0.y);
            return d1 + d2;
        },
        diagonal: function(pos0, pos1) {
            var D = 1;
            var D2 = Math.sqrt(2);
            var d1 = Math.abs(pos1.x - pos0.x);
            var d2 = Math.abs(pos1.y - pos0.y);
            return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));
        }
    },
    cleanNode:function(node){
        node.f = 0;
        node.g = 0;
        node.h = 0;
        node.visited = false;
        node.closed = false;
        node.parent = null;
    }
};

/**
* A graph memory structure
* @param {Array} gridIn 2D array of input weights
* @param {Object} [options]
* @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed
*/
function Graph(gridIn, options) {
    options = options || {};
    this.nodes = [];
    this.diagonal = !!options.diagonal;
    this.grid = [];
    for (var x = 0; x < gridIn.length; x++) {
        this.grid[x] = [];

        for (var y = 0, row = gridIn[x]; y < row.length; y++) {
            var node = new GridNode(x, y, row[y]);
            this.grid[x][y] = node;
            this.nodes.push(node);
        }
    }
    this.init();
}

Graph.prototype.init = function() {
    this.dirtyNodes = [];
    for (var i = 0; i < this.nodes.length; i++) {
        astar.cleanNode(this.nodes[i]);
    }
};

Graph.prototype.cleanDirty = function() {
    for (var i = 0; i < this.dirtyNodes.length; i++) {
        astar.cleanNode(this.dirtyNodes[i]);
    }
    this.dirtyNodes = [];
};

Graph.prototype.markDirty = function(node) {
    this.dirtyNodes.push(node);
};

Graph.prototype.neighbors = function(node) {
    var ret = [],
        x = node.x,
        y = node.y,
        grid = this.grid;

    // West
    if(grid[x-1] && grid[x-1][y]) {
        ret.push(grid[x-1][y]);
    }

    // East
    if(grid[x+1] && grid[x+1][y]) {
        ret.push(grid[x+1][y]);
    }

    // South
    if(grid[x] && grid[x][y-1]) {
        ret.push(grid[x][y-1]);
    }

    // North
    if(grid[x] && grid[x][y+1]) {
        ret.push(grid[x][y+1]);
    }

    if (this.diagonal) {
        // Southwest
        if(grid[x-1] && grid[x-1][y-1]) {
            ret.push(grid[x-1][y-1]);
        }

        // Southeast
        if(grid[x+1] && grid[x+1][y-1]) {
            ret.push(grid[x+1][y-1]);
        }

        // Northwest
        if(grid[x-1] && grid[x-1][y+1]) {
            ret.push(grid[x-1][y+1]);
        }

        // Northeast
        if(grid[x+1] && grid[x+1][y+1]) {
            ret.push(grid[x+1][y+1]);
        }
    }

    return ret;
};

Graph.prototype.toString = function() {
    var graphString = [],
        nodes = this.grid, // when using grid
        rowDebug, row, y, l;
    for (var x = 0, len = nodes.length; x < len; x++) {
        rowDebug = [];
        row = nodes[x];
        for (y = 0, l = row.length; y < l; y++) {
            rowDebug.push(row[y].weight);
        }
        graphString.push(rowDebug.join(' '));
    }
    return graphString.join('\n');
};

function GridNode(x, y, weight) {
    this.x = x;
    this.y = y;
    this.weight = weight;
}

GridNode.prototype.toString = function() {
    return '[' + this.x + ' ' + this.y + ']';
};

GridNode.prototype.getCost = function(fromNeighbor) {
    // Take diagonal weight into consideration.
    if (fromNeighbor && fromNeighbor.x !== this.x && fromNeighbor.y !== this.y) {
        return this.weight * 1.41421;
    }
    return this.weight;
};

GridNode.prototype.isWall = function() {
    return this.weight === 0;
};

function BinaryHeap(scoreFunction){
    this.content = [];
    this.scoreFunction = scoreFunction;
}

BinaryHeap.prototype = {
    push: function(element) {
        // Add the new element to the end of the array.
        this.content.push(element);

        // Allow it to sink down.
        this.sinkDown(this.content.length - 1);
    },
    pop: function() {
        // Store the first element so we can return it later.
        var result = this.content[0];
        // Get the element at the end of the array.
        var end = this.content.pop();
        // If there are any elements left, put the end element at the
        // start, and let it bubble up.
        if (this.content.length > 0) {
            this.content[0] = end;
            this.bubbleUp(0);
        }
        return result;
    },
    remove: function(node) {
        var i = this.content.indexOf(node);

        // When it is found, the process seen in 'pop' is repeated
        // to fill up the hole.
        var end = this.content.pop();

        if (i !== this.content.length - 1) {
            this.content[i] = end;

            if (this.scoreFunction(end) < this.scoreFunction(node)) {
                this.sinkDown(i);
            }
            else {
                this.bubbleUp(i);
            }
        }
    },
    size: function() {
        return this.content.length;
    },
    rescoreElement: function(node) {
        this.sinkDown(this.content.indexOf(node));
    },
    sinkDown: function(n) {
        // Fetch the element that has to be sunk.
        var element = this.content[n];

        // When at 0, an element can not sink any further.
        while (n > 0) {

            // Compute the parent element's index, and fetch it.
            var parentN = ((n + 1) >> 1) - 1, parent = this.content[parentN]; // jshint ignore:line
            // Swap the elements if the parent is greater.
            if (this.scoreFunction(element) < this.scoreFunction(parent)) {
                this.content[parentN] = element;
                this.content[n] = parent;
                // Update 'n' to continue at the new position.
                n = parentN;
            }
            // Found a parent that is less, no need to sink any further.
            else {
                break;
            }
        }
    },
    bubbleUp: function(n) {
        // Look up the target element and its score.
        var length = this.content.length,
            element = this.content[n],
            elemScore = this.scoreFunction(element);

        while(true) {
            // Compute the indices of the child elements.
            var child2N = (n + 1) << 1, child1N = child2N - 1; // jshint ignore:line
            // This is used to store the new position of the element, if any.
            var swap = null,
                child1Score;
            // If the first child exists (is inside the array)...
            if (child1N < length) {
                // Look it up and compute its score.
                var child1 = this.content[child1N];
                child1Score = this.scoreFunction(child1);

                // If the score is less than our element's, we need to swap.
                if (child1Score < elemScore){
                    swap = child1N;
                }
            }

            // Do the same checks for the other child.
            if (child2N < length) {
                var child2 = this.content[child2N],
                    child2Score = this.scoreFunction(child2);
                if (child2Score < (swap === null ? elemScore : child1Score)) {
                    swap = child2N;
                }
            }

            // If the element needs to be moved, swap it, and continue.
            if (swap !== null) {
                this.content[n] = this.content[swap];
                this.content[swap] = element;
                n = swap;
            }
            // Otherwise, we are done.
            else {
                break;
            }
        }
    }
};

return {
    astar: astar,
    Graph: Graph
};

});

},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\game.js":[function(require,module,exports){
/*
Main testing environment.
*/

var ModuleBuilder = require('../entities/ModuleBuilder');
var Cube = require('../entities/cube');
var ModuleBuilder = require('../entities/ModuleBuilder');
var Utils = require('../utils');
var CubeGroup = require('../entities/cube_group');

var mouseBody; // physics body for mouse

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {
	
  create: function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.setImpactEvents(true);
    mouseBody = new p2.Body(); // jshint ignore:line
    this.game.physics.p2.world.addBody(mouseBody);
    
	//create ModuleBuilder and store it in this game state object
	this.moduleBuilder = new ModuleBuilder(this);
	//create and store the core module
	this.coreModule = this.moduleBuilder.build('core', 200, 200);
   this.player = new CubeGroup(this, this.coreModule.cube);
   
	
	//DEBUGGING LISTENERS- allow you to create modules by pressing keys
	//core
	this.placeCoreKey = this.game.input.keyboard.addKey(Phaser.Keyboard.P);
   this.placeCoreKey.onDown.add(this.addCore, this);
	//shield
	this.placeShieldKey = this.game.input.keyboard.addKey(Phaser.Keyboard.O);
    this.placeShieldKey.onDown.add(this.addShield, this);
	//thruster
	this.placeThrusterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.I);
    this.placeThrusterKey.onDown.add(this.addThruster, this);
	//solarPannel
	this.placeSPKey = this.game.input.keyboard.addKey(Phaser.Keyboard.U);
    this.placeSPKey.onDown.add(this.addSP, this);
	//END
    
    this.mouseX = 0;
    this.mouseY = 0;
    
    this.input.onDown.add(this.click, this);
    this.input.onUp.add(this.release, this);
    this.input.addMoveCallback(this.move, this);
    this.grabbed = undefined;
    this.lastClicked = undefined;
    this.line = new Phaser.Line(0, 0, 0, 0);
    
    this.rootSpawned = false;
    
    this.debugNum = 0;
    this.myRoot = undefined;
  },

  update: function () {
    if (this.grabbed) {
      var angle = Math.atan2(this.grabbed.sprite.y - this.input.position.y, this.grabbed.sprite.x - this.input.position.x) + Math.PI;
      var dist = Utils.distance(this.grabbed.sprite.x, this.grabbed.sprite.y, this.input.position.x, this.input.position.y);
      var weight = 10;
      this.grabbed.force.x = Math.cos(angle) * dist * weight;
      this.grabbed.force.y = Math.sin(angle) * dist * weight;
      this.line.setTo(this.grabbed.sprite.x, this.grabbed.sprite.y, this.input.position.x, this.input.position.y);
    } else {
       this.line.setTo(0, 0, 0, 0);
    }
  },
  
  render: function () {
    this.game.debug.geom(this.line);
  },

  click: function (pointer) {
    var bodies = this.game.physics.p2.hitTest(pointer.position);
    if (bodies.length)
    {
        this.grabbed = bodies[0].parent;
        if (this.lastClicked && this.lastClicked.sprite.module.giveTarget) {
           this.lastClicked.sprite.module.giveTarget(this.grabbed.sprite.module);
        }
        this.lastClicked = bodies[0].parent;
    }
  },
  
  release: function () {
     if (this.grabbed) {
        this.grabbed = undefined;
     }
  },
  
  move: function (pointer) {
    // p2 uses different coordinate system, so convert the pointer position to p2's coordinate system
    mouseBody.position[0] = this.game.physics.p2.pxmi(pointer.position.x);
    mouseBody.position[1] = this.game.physics.p2.pxmi(pointer.position.y);
    this.mouseX = pointer.position.x;
    this.mouseY = pointer.position.y;
    var bodies = this.game.physics.p2.hitTest(pointer.position);
    if (bodies.length)
    {
         var hover = bodies[0].parent;
        if (hover.sprite.module.mouseOver) {
           hover.sprite.module.mouseOver();
        }
    }
  },
  
  //DEBUG FUNCTIONS- event functions called from listeners that allow you to create modules with key presses
  addCore: function () {
	//Attempts to create more core modules here will only return the existing core
	this.moduleBuilder.build('core', this.mouseX, this.mouseY);
  },
  addShield: function () {
	this.moduleBuilder.build('shield', this.mouseX, this.mouseY);
  },
  addThruster: function () {
	this.moduleBuilder.build('thruster', this.mouseX, this.mouseY);
  },
  addSP: function () {
	this.moduleBuilder.build('solarPannel', this.mouseX, this.mouseY);
  },
  placeCube: function () {
    var entity = new Cube(this.game, this.mouseX, this.mouseY);
    var scale = 0.5;
    entity.name = this.debugNum++;
    entity.scale.x = scale;
    entity.scale.y = scale;
    entity.anchor.setTo(0.5, 0.5);
    this.game.physics.p2.enable(entity);
    entity.body.onBeginContact.add(entity.cubeCollide, entity);
    entity.body.damping = 0.9;
    entity.body.angularDamping = 0.9;
    if (!this.rootSpawned) {
       entity.root = true;
       this.rootSpawned = true;
    }
  }
};




























},{"../entities/ModuleBuilder":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\ModuleBuilder.js","../entities/cube":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube.js","../entities/cube_group":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\entities\\cube_group.js","../utils":"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js"}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: '65px Arial', fill: '#ffffff', align: 'center' };

    this.text = this.add.text(x - 300, y - 200, 'Press to Start', style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel); // jshint ignore:line
  }
};

},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  game = null;
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test2.png');
	this.load.image('core', 'assets/core.png');
	this.load.image('thruster', 'assets/thruster.png');
	this.load.image('shield', 'assets/shield.png');
	this.load.image('solarPannel', 'assets/solarPannel.png');
   // this.load.image('gridEnd', 'assets/grid_endpoint.png');
   // this.load.image('gridLine', 'assets/grid_line.png');
	// this.load.spritesheet('connections', 'assets/connections.png', 73, 74);
   this.load.atlasJSONHash('connections', 'assets/connections.png', 'assets/connections.json');
   // this.load.physics('module_physics', 'assets/module_physics.json');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      // this.game.state.start('Menu');
      this.game.state.start(playerState.currentLevel); // jshint ignore:line
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"C:\\Users\\mattd_000\\Documents\\GitHub\\AboveTheIronCurtain\\src\\js\\utils.js":[function(require,module,exports){
/*
Collection of utility functions.
*/

var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
    distance: function(x1, y1, x2, y2) {
       return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlc1xcYnJvd3NlcmlmeVxcbm9kZV9tb2R1bGVzXFxicm93c2VyLXBhY2tcXF9wcmVsdWRlLmpzIiwic3JjL2pzL21haW4uanMiLCJzcmMvanMvZW50aXRpZXMvTW9kdWxlLmpzIiwic3JjL2pzL2VudGl0aWVzL01vZHVsZUJ1aWxkZXIuanMiLCJzcmMvanMvZW50aXRpZXMvY3ViZS5qcyIsInNyYy9qcy9lbnRpdGllcy9jdWJlX2dyb3VwLmpzIiwic3JjL2pzL2xpYnMvamF2YXNjcmlwdC1hc3Rhci9hc3Rhci5qcyIsInNyYy9qcy9zdGF0ZXMvYm9vdC5qcyIsInNyYy9qcy9zdGF0ZXMvZ2FtZS5qcyIsInNyYy9qcy9zdGF0ZXMvbWVudS5qcyIsInNyYy9qcy9zdGF0ZXMvcHJlbG9hZGVyLmpzIiwic3JjL2pzL3N0YXRlcy9zcGxhc2guanMiLCJzcmMvanMvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDclZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBnYW1lID0gbmV3IFBoYXNlci5HYW1lKDgwMCwgODAwLCBQaGFzZXIuQVVUTywgJ2F0aWMtZ2FtZScpO1xyXG5cclxud2luZG93LnBsYXllclN0YXRlID0ge1xyXG4gICAgY3VycmVudExldmVsOiAnR2FtZSdcclxufTtcclxuXHJcbmdhbWUuc3RhdGUuYWRkKCdCb290JywgcmVxdWlyZSgnLi9zdGF0ZXMvYm9vdCcpKTtcclxuZ2FtZS5zdGF0ZS5hZGQoJ1NwbGFzaCcsIHJlcXVpcmUoJy4vc3RhdGVzL3NwbGFzaCcpKTtcclxuZ2FtZS5zdGF0ZS5hZGQoJ1ByZWxvYWRlcicsIHJlcXVpcmUoJy4vc3RhdGVzL3ByZWxvYWRlcicpKTtcclxuZ2FtZS5zdGF0ZS5hZGQoJ01lbnUnLCByZXF1aXJlKCcuL3N0YXRlcy9tZW51JykpO1xyXG5nYW1lLnN0YXRlLmFkZCgnR2FtZScsIHJlcXVpcmUoJy4vc3RhdGVzL2dhbWUnKSk7XHJcblxyXG5nYW1lLnN0YXRlLnN0YXJ0KCdCb290Jyk7IiwiLy9Eb24ndCB1c2UgdGhpcyBmdW5jdGlvbiB0byBjcmVhdGUgbW9kdWxlcywgaW5zdGVhZCB1c2UgbW9kdWxlQnVpbGRlcigpXHJcbnZhciBNb2R1bGUgPSBmdW5jdGlvbihzZXRDdWJlKSB7XHJcblx0dGhpcy5jdWJlID0gc2V0Q3ViZTtcclxuICAgc2V0Q3ViZS5tb2R1bGUgPSB0aGlzO1xyXG59O1xyXG5cclxuTW9kdWxlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1vZHVsZTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTW9kdWxlOyIsInZhciBDdWJlID0gcmVxdWlyZSgnLi9jdWJlJyk7XHJcbnZhciBNb2R1bGUgPSByZXF1aXJlKCcuL01vZHVsZScpO1xyXG5cclxuLy9Vc2UgdGhpcyB0byBjcmVhdGUgYSBtb2R1bGVCdWlsZGVyLSBvbmx5IG5lZWQgdG8gY3JlYXRlIG9uZSBpbnN0YW5jZSBvZiBpdFxyXG52YXIgTW9kdWxlQnVpbGRlciA9IGZ1bmN0aW9uKHNldEdhbWVTdGF0ZSkge1xyXG5cdC8vRW5zdXJlIHRoYXQgY2Fubm90IGNyZWF0ZSBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzc1xyXG5cdGlmKE1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0cykge1xyXG5cdFx0cmV0dXJuIE1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlO1xyXG5cdH1cclxuXHRcdFxyXG5cdHRoaXMuZ2FtZVN0YXRlID0gc2V0R2FtZVN0YXRlO1xyXG5cdHRoaXMuY29yZUV4aXN0cyA9IGZhbHNlO1x0Ly9yZWNvcmRzIGlmIGNvcmUgaGFzIGJlZW4gY3JlYXRlZFxyXG5cdHRoaXMuY29yZSA9IG51bGw7XHRcdFx0Ly9zdG9yZXMgY29yZSB3aGVuIGl0IGlzIGNyZWF0ZWRcclxuXHRNb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5leGlzdHMgPSB0cnVlO1xyXG5cdE1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlID0gdGhpcztcclxufTtcclxuXHJcbk1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTW9kdWxlQnVpbGRlcjtcclxuXHJcbi8vVGhlc2UgdmFyJ3MgaGVscCBjcmVhdGUgdGhlIHNpbmdsZXRvbiBmdW5jdGlvbmFsaXR5XHJcbk1vZHVsZUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0cyA9IGZhbHNlO1xyXG5Nb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5leGlzdGluZ1JlZmVyZW5jZSA9IG51bGw7XHJcblxyXG4vKiogTW9kdWxlIGZ1bmN0aW9ucyAqKi9cclxuZnVuY3Rpb24gc29sYXJQYW5lbEdpdmVUYXJnZXQodGFyZ2V0KSB7XHJcbiAgIGlmICh0aGlzLmN1YmUuZ3JvdXAgIT09IHRhcmdldC5jdWJlLmdyb3VwIHx8IHRoaXMgPT09IHRhcmdldCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgLy8gVE9ETzogcmVzdHJpY3QgdG8gb25seSBwb3dlcmVkIG1vZHVsZXNcclxuICAgdmFyIG91ckdyb3VwID0gdGhpcy5jdWJlLmdyb3VwO1xyXG4gICB0aGlzLmN1YmUucmVtb3ZlQ29ubmVjdGlvbigpO1xyXG4gICB0YXJnZXQuY3ViZS5yZW1vdmVDb25uZWN0aW9uKCk7XHJcbiAgIC8vIFRPRE86IHJlc3RyaWN0IGJ5IGxlbmd0aFxyXG4gICB2YXIgbmV3Q29ubmVjdGlvbiA9IHtzdGFydDogb3VyR3JvdXAuZmluZCh0aGlzLmN1YmUpLCBlbmQ6IG91ckdyb3VwLmZpbmQodGFyZ2V0LmN1YmUpfTtcclxuICAgdGhpcy5jdWJlLm15Q29ubmVjdGlvbiA9IG5ld0Nvbm5lY3Rpb247XHJcbiAgIHRhcmdldC5jdWJlLm15Q29ubmVjdGlvbiA9IG5ld0Nvbm5lY3Rpb247XHJcbiAgIG91ckdyb3VwLmRpc3BsYXlDb25uZWN0aW9uKHRoaXMuY3ViZS5teUNvbm5lY3Rpb24pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzb2xhclBhbmVsTW91c2VPdmVyKCkge1xyXG4gICBpZiAoIXRoaXMuY3ViZS5teUNvbm5lY3Rpb24pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIHRoaXMuY3ViZS5ncm91cC5kaXNwbGF5Q29ubmVjdGlvbih0aGlzLmN1YmUubXlDb25uZWN0aW9uKTtcclxufVxyXG4vKiogRW5kIG1vZHVsZSBmdW5jdGlvbnMgKiovXHJcblxyXG4vL2NhbGwgdGhpcyBmdW5jdGlvbiBmcm9tIE1vZHVsZUJ1aWxkZXIgdG8gY29uc3RydWN0IG1vZHVsZXNcclxuLy9UWVBFUzogJ2NvcmUnICdzaGllbGQnICd0aHJ1c3RlcicgJ3NvbGFyUGFubmVsJ1xyXG5Nb2R1bGVCdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uKHR5cGUsIHgsIHkpIHtcclxuXHQvL0NoZWNrIGlmIGNvcmUgaGFzIGJlZW4gY3JlYXRlZFxyXG5cdGlmKHR5cGUgPT09ICdjb3JlJyAmJiB0aGlzLmNvcmVFeGlzdHMpIHtcclxuXHRcdC8vaWYgc28sIHJldHVybiBleGlzdGluZyBjb3JlIGIvYyBpcyBzaW5nbGV0b25cclxuXHRcdC8vYi9jIG9mIHRoaXMsIGNhbiBjYWxsIE1vZHVsZUJ1aWxkZXIuYnVpbGQoJ2NvcmUnKSB0byBhY2Nlc3MgcmVmZXJlbmNlIHRvIGV4aXN0aW5nIGNvcmVcclxuXHRcdHJldHVybiB0aGlzLmNvcmU7XHJcblx0fVxyXG5cdFxyXG5cdC8vQ3JlYXRlIGN1YmUgb2JqZWN0IHRvIGJlIHN0b3JlZCB3aXRoaW4gbW9kdWxlXHJcblx0Ly9TcHJpdGUgbmFtZXMgZm9yIG1vZHVsZXMgYXJlIGRpcmVjdGx5IG1hcHBlZCB0byBtb2R1bGUgbmFtZXMsIHNvIGp1c3QgcGFzcyAndHlwZScgYXMgc3ByaXRlIG5hbWVcclxuXHR2YXIgbmV3Q3ViZSA9IG5ldyBDdWJlKHRoaXMuZ2FtZVN0YXRlLmdhbWUsIHgsIHksIHR5cGUpO1xyXG4gICAgdmFyIHNjYWxlID0gMC41O1xyXG4gICAgbmV3Q3ViZS5uYW1lID0gdGhpcy5nYW1lU3RhdGUuZGVidWdOdW0rKztcclxuICAgIG5ld0N1YmUuc2NhbGUuc2V0VG8oc2NhbGUsIHNjYWxlKTtcclxuICAgIG5ld0N1YmUuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuICAgIHRoaXMuZ2FtZVN0YXRlLmdhbWUucGh5c2ljcy5wMi5lbmFibGUobmV3Q3ViZSk7XHJcbiAgICBuZXdDdWJlLmJvZHkub25CZWdpbkNvbnRhY3QuYWRkKG5ld0N1YmUuY3ViZUNvbGxpZGUsIG5ld0N1YmUpO1xyXG4gICAgbmV3Q3ViZS5ib2R5LmRhbXBpbmcgPSAwLjk7XHJcbiAgICBuZXdDdWJlLmJvZHkuYW5ndWxhckRhbXBpbmcgPSAwLjk7XHJcbiAgICBpZiAoIXRoaXMuZ2FtZVN0YXRlLnJvb3RTcGF3bmVkKSB7XHJcbiAgICAgICBuZXdDdWJlLnJvb3QgPSB0cnVlO1xyXG4gICAgICAgdGhpcy5nYW1lU3RhdGUucm9vdFNwYXduZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgLy8gdmFyIGNJbmRpY2F0b3IgPSBuZXcgUGhhc2VyLlNwcml0ZSh0aGlzLmdhbWUsIDAsIDAsICdjb25uZWN0aW9ucycsICdncmlkX2xpbmUucG5nJyk7XHJcbiAgIHZhciBjSW5kaWNhdG9yID0gdGhpcy5nYW1lU3RhdGUuYWRkLnNwcml0ZSgwLCAwLCAnY29ubmVjdGlvbnMnLCAnY29ubmVjdGlvbl9saW5lLnBuZycpO1xyXG4gICBjSW5kaWNhdG9yLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcbiAgIGNJbmRpY2F0b3IuYW5pbWF0aW9ucy5hZGQoJ2VuZCcsIFsnY29ubmVjdGlvbl9lbmQucG5nJ10sIDYwLCB0cnVlKTtcclxuICAgY0luZGljYXRvci5hbmltYXRpb25zLmFkZCgnbGluZScsIFsnY29ubmVjdGlvbl9saW5lLnBuZyddLCA2MCwgdHJ1ZSk7XHJcbiAgIGNJbmRpY2F0b3IuYW5pbWF0aW9ucy5hZGQoJ3JpZ2h0JywgWydjb25uZWN0aW9uX3JpZ2h0LnBuZyddLCA2MCwgdHJ1ZSk7XHJcbiAgIC8vIGNJbmRpY2F0b3IuYW5pbWF0aW9ucy5hZGQoJ3Rlc3QnLCBbJ2Nvbm5lY3Rpb25fZW5kLnBuZyddLCA2MCwgdHJ1ZSk7XHJcbiAgIG5ld0N1YmUuYWRkQ2hpbGQoY0luZGljYXRvcik7XHJcbiAgIG5ld0N1YmUuY0luZGljYXRvciA9IGNJbmRpY2F0b3I7XHJcbiAgIGNJbmRpY2F0b3IuYWxwaGEgPSAwO1xyXG5cdFxyXG5cdC8vQ3JlYXRlIG1vZHVsZSB0byB3cmFwIGFyb3VuZCBjdWJlIGNsYXNzXHJcblx0dmFyIG5ld01vZHVsZSA9IG5ldyBNb2R1bGUobmV3Q3ViZSk7XHJcblx0XHRcclxuXHQvL1RPRE86IGVkaXQgc3BlY2lhbCBtb2R1bGUgYXRyaWJ1dGVzIGJhc2VkIG9uICd0eXBlJ1xyXG5cdFxyXG5cdC8vU3RvcmUgbW9kdWxlIGlmIGl0IGlzIGNvcmVcclxuXHRpZih0eXBlID09PSAnY29yZScpXHJcblx0e1xyXG5cdFx0dGhpcy5jb3JlID0gbmV3TW9kdWxlO1xyXG5cdFx0dGhpcy5jb3JlRXhpc3RzID0gdHJ1ZTtcclxuXHR9XHJcbiAgIC8vIHNvbGFyIHBhbmVsIHRlc3RpbmdcclxuICAgaWYgKHR5cGUgPT09ICdzb2xhclBhbm5lbCcpIHtcclxuICAgICAgbmV3TW9kdWxlLmdpdmVUYXJnZXQgPSBzb2xhclBhbmVsR2l2ZVRhcmdldDtcclxuICAgICAgbmV3TW9kdWxlLm1vdXNlT3ZlciA9IHNvbGFyUGFuZWxNb3VzZU92ZXI7XHJcbiAgIH1cclxuXHRcclxuXHQvL1JldHVybiB0aGUgbW9kdWxlIG9iamVjdFxyXG5cdHJldHVybiBuZXdNb2R1bGU7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1vZHVsZUJ1aWxkZXI7IiwiLypcclxuRGVmaW5lcyBhIGN1YmUuXHJcbiovXHJcblxyXG4vLyB2YXIgQXN0YXIgPSByZXF1aXJlKCcuLi9saWJzL2phdmFzY3JpcHQtYXN0YXIvYXN0YXInKTtcclxuXHJcbnZhciBDdWJlID0gZnVuY3Rpb24gKGdhbWUsIHgsIHksIHNwcml0ZSkge1xyXG4gICAgUGhhc2VyLlNwcml0ZS5jYWxsKHRoaXMsIGdhbWUsIHgsIHksIHNwcml0ZSk7XHJcbiAgICBnYW1lLmFkZC5leGlzdGluZyh0aGlzKTtcclxuICAgIHRoaXMuZ3JvdXAgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLm1vZHVsZSA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMuaW5kaWNhdG9yRmFkZSA9IDAuMDA4O1xyXG59O1xyXG5cclxuQ3ViZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBoYXNlci5TcHJpdGUucHJvdG90eXBlKTtcclxuQ3ViZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJlO1xyXG5cclxuLyoqXHJcbiAqIEF1dG9tYXRpY2FsbHkgY2FsbGVkIGJ5IFdvcmxkLnVwZGF0ZVxyXG4gKi9cclxuQ3ViZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgIGlmICh0aGlzLmNJbmRpY2F0b3IgJiYgdGhpcy5jSW5kaWNhdG9yLmFscGhhID4gMCkge1xyXG4gICAgICB0aGlzLmNJbmRpY2F0b3IuYWxwaGEgLT0gdGhpcy5pbmRpY2F0b3JGYWRlO1xyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlLnByb3RvdHlwZS5jdWJlQ29sbGlkZSA9IGZ1bmN0aW9uKG90aGVyKSB7XHJcbiAgIGlmICghdGhpcy5ncm91cCB8fCAhb3RoZXIgfHwgIW90aGVyLnNwcml0ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgdGhpcy5ncm91cC5oYW5kbGVDb2xsaXNpb24odGhpcywgb3RoZXIuc3ByaXRlKTtcclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgIHZhciBzdHJpbmcgPSAnJztcclxuICAgc3RyaW5nICs9IHRoaXMuY29uY2F0KCduYW1lJywgdGhpcy5uYW1lKTtcclxuICAgcmV0dXJuIHN0cmluZztcclxufTtcclxuXHJcbkN1YmUucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uKHN0cmluZywgdmFsKSB7XHJcbiAgIHJldHVybiBzdHJpbmcgKyAnOiAnICsgdmFsICsgJ1xcbic7XHJcbn07XHJcblxyXG5DdWJlLnByb3RvdHlwZS5yZW1vdmVDb25uZWN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgXHJcbn07XHJcblxyXG5DdWJlLnByb3RvdHlwZS5kaXNwbGF5SW5kaWNhdG9yID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5jSW5kaWNhdG9yLmFscGhhID0gMTsgXHJcbn07XHJcblxyXG4vKlxyXG5DdWJlLnByb3RvdHlwZS5ydW5Bc3RhciA9IGZ1bmN0aW9uKCkge1xyXG4gICB2YXIgZ3JhcGggPSBuZXcgQXN0YXIuR3JhcGgoW1xyXG4gICAgICAgIFsxLDEsMSwxXSxcclxuICAgICAgICBbMCwxLDEsMF0sXHJcbiAgICAgICAgWzAsMCwxLDFdXHJcbiAgICBdKTtcclxuICAgIHZhciBzdGFydCA9IGdyYXBoLmdyaWRbMF1bMF07XHJcbiAgICB2YXIgZW5kID0gZ3JhcGguZ3JpZFsxXVsyXTtcclxuICAgIHZhciByZXN1bHQgPSBBc3Rhci5hc3Rhci5zZWFyY2goZ3JhcGgsIHN0YXJ0LCBlbmQpO1xyXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgY29uc29sZS5sb2cocmVzdWx0W2ldLngsIHJlc3VsdFtpXS55KTtcclxuICAgIH1cclxufTtcclxuKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQ3ViZTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgQXN0YXIgPSByZXF1aXJlKCcuLi9saWJzL2phdmFzY3JpcHQtYXN0YXIvYXN0YXInKTtcclxuXHJcbi8qXHJcbkRlZmluZXMgYSBjdWJlIGdyb3VwLlxyXG4qL1xyXG5cclxudmFyIEN1YmVHcm91cCA9IGZ1bmN0aW9uIChnYW1lLCByb290KSB7XHJcbiAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgIHRoaXMucm9vdCA9IHJvb3Q7XHJcbiAgIHRoaXMuY3ViZXMgPSBbXTtcclxuICAgdmFyIGNvbCA9IFtdO1xyXG4gICBjb2wucHVzaCh0aGlzLnJvb3QpO1xyXG4gICB0aGlzLmN1YmVzLnB1c2goY29sKTtcclxuICAgdGhpcy5yb290Lmdyb3VwID0gdGhpcztcclxuICAgdGhpcy5ESVIgPSB7Tk9SVEg6IDAsIEVBU1Q6IDEsIFNPVVRIOiAyLCBXRVNUOiAzfTtcclxuICAgdGhpcy5vZmZzZXQgPSAyO1xyXG4gICAvLyB0aGlzLmdyb3VwcyA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgLy8gdGhpcy5jdWJlU3ByaXRlcyA9IG5ldyBQaGFzZXIuR3JvdXAodGhpcy5nYW1lLCB0aGlzLmdyb3Vwcyk7XHJcbiAgIC8vIHRoaXMuZ3JpZFNwcml0ZXMgPSBuZXcgUGhhc2VyLkdyb3VwKHRoaXMuZ2FtZSwgdGhpcy5ncm91cHMpO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmVHcm91cDtcclxuXHJcbi8qKlxyXG4gKiBBdXRvbWF0aWNhbGx5IGNhbGxlZCBieSBXb3JsZC51cGRhdGVcclxuICovXHJcbkN1YmVHcm91cC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGN1YmUpIHtcclxuICBjdWJlLmdyb3VwID0gdGhpcztcclxuICAvLyB0aGlzLmN1YmVTcHJpdGVzLmFkZChjdWJlKTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuaGFuZGxlQ29sbGlzaW9uID0gZnVuY3Rpb24ob3JpZ2luLCBvdGhlcikge1xyXG4gICAvLyBzdG9wIGlmIG90aGVyIGRvZXMgbm90IGV4aXN0LCBlaXRoZXIgaXMgbm90IGEgY3ViZSwgYm90aCBhcmUgaW4gc2FtZSBncm91cFxyXG4gICBpZiAob3RoZXIgPT09IG51bGwgfHwgb3JpZ2luLnByb3RvdHlwZSAhPT0gb3RoZXIucHJvdG90eXBlIHx8IG9yaWdpbi5ncm91cCA9PT0gb3RoZXIuZ3JvdXApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICB9XHJcbiAgIHZhciByZWxTaWRlID0gdGhpcy5yZWxhdGl2ZVNpZGUob3JpZ2luLmJvZHksIG90aGVyLmJvZHkpO1xyXG4gICB2YXIgb3JpZ2luTG9jID0gdGhpcy5maW5kKG9yaWdpbik7XHJcbiAgIHZhciBvdGhlckxvYyA9IHRoaXMuYWRqdXN0KG9yaWdpbkxvYywgcmVsU2lkZSk7XHJcbiAgIGlmICh0aGlzLmdldEN1YmUob3RoZXJMb2MpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICBzd2l0Y2ggKHJlbFNpZGUpIHtcclxuICAgICAgY2FzZSB0aGlzLkRJUi5OT1JUSDpcclxuICAgICAgaWYgKG9yaWdpbkxvYy55ID09PSB0aGlzLmN1YmVzSGVpZ2h0KCkgLSAxKSB7XHJcbiAgICAgICAgIHRoaXMuYWRkVG9wUm93KCk7XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgdGhpcy5ESVIuRUFTVDpcclxuICAgICAgaWYgKG9yaWdpbkxvYy54ID09PSB0aGlzLmN1YmVzV2lkdGgoKSAtIDEpIHtcclxuICAgICAgICAgdGhpcy5hZGRSaWdodENvbCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIHRoaXMuRElSLlNPVVRIOlxyXG4gICAgICBpZiAob3JpZ2luTG9jLnkgPT09IDApIHtcclxuICAgICAgICAgdGhpcy5hZGRCb3RSb3coKTtcclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSB0aGlzLkRJUi5XRVNUOlxyXG4gICAgICBpZiAob3JpZ2luTG9jLnggPT09IDApIHtcclxuICAgICAgICAgdGhpcy5hZGRMZWZ0Q29sKCk7XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgIH1cclxuICAgb3JpZ2luTG9jID0gdGhpcy5maW5kKG9yaWdpbik7XHJcbiAgIG90aGVyTG9jID0gdGhpcy5hZGp1c3Qob3JpZ2luTG9jLCByZWxTaWRlKTtcclxuICAgdGhpcy5jcmVhdGVDb25zdHJhaW50cyhvdGhlckxvYywgb3RoZXIpO1xyXG4gICBpZiAoIW90aGVyTG9jKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdoYW5kZSBjb2xsaXNpb24gZmFpbGVkIHRvIGZpbmQgc2Vjb25kIG90aGVyIGxvYycpO1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgdGhpcy5zZXQob3RoZXJMb2MsIG90aGVyKTtcclxuICAgb3RoZXIuZ3JvdXAgPSB0aGlzO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jcmVhdGVDb25zdHJhaW50cyA9IGZ1bmN0aW9uKGxvYywgbWUpIHtcclxuICAgdmFyIG15Tm9ydGggPSB0aGlzLmdldCh0aGlzLmFkanVzdChsb2MsIHRoaXMuRElSLk5PUlRIKSk7XHJcbiAgIHZhciBteUVhc3QgPSB0aGlzLmdldCh0aGlzLmFkanVzdChsb2MsIHRoaXMuRElSLkVBU1QpKTtcclxuICAgdmFyIG15U291dGggPSB0aGlzLmdldCh0aGlzLmFkanVzdChsb2MsIHRoaXMuRElSLlNPVVRIKSk7XHJcbiAgIHZhciBteVdlc3QgPSB0aGlzLmdldCh0aGlzLmFkanVzdChsb2MsIHRoaXMuRElSLldFU1QpKTtcclxuICAgaWYgKG15Tm9ydGgpIHtcclxuICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobWUuYm9keSwgbXlOb3J0aC5ib2R5LCBbMCwgbWUud2lkdGggKyB0aGlzLm9mZnNldF0pOyAvLyBtZSAtIG5vcnRoXHJcbiAgIH1cclxuICAgaWYgKG15RWFzdCkge1xyXG4gICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVMb2NrQ29uc3RyYWludChtZS5ib2R5LCBteUVhc3QuYm9keSwgWy1tZS53aWR0aCAtIHRoaXMub2Zmc2V0LCAwXSk7IC8vIG1lIC0gZWFzdFxyXG4gICB9XHJcbiAgIGlmIChteVNvdXRoKSB7XHJcbiAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUxvY2tDb25zdHJhaW50KG15U291dGguYm9keSwgbWUuYm9keSwgWzAsIG1lLndpZHRoICsgdGhpcy5vZmZzZXRdKTsgLy8gc291dGggLSBtZVxyXG4gICB9XHJcbiAgIGlmIChteVdlc3QpIHtcclxuICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlTG9ja0NvbnN0cmFpbnQobXlXZXN0LmJvZHksIG1lLmJvZHksIFstbWUud2lkdGggLSB0aGlzLm9mZnNldCwgMF0pOyAvLyB3ZXN0IC0gbWVcclxuICAgfVxyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5yZWxhdGl2ZVNpZGUgPSBmdW5jdGlvbih0aGlzQm9keSwgb3RoZXJCb2R5KSB7XHJcbiAgdmFyIHRoaXNQb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQodGhpc0JvZHkueCwgdGhpc0JvZHkueSk7XHJcbiAgdmFyIG90aGVyUG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KG90aGVyQm9keS54LCBvdGhlckJvZHkueSk7XHJcbiAgdmFyIGFuZ2xlVG9PdGhlciA9IFBoYXNlci5Qb2ludC5hbmdsZSh0aGlzUG9pbnQsIG90aGVyUG9pbnQpO1xyXG4gIGlmIChhbmdsZVRvT3RoZXIgPCAwKSB7IC8vIGZpeCBkdW1iIHBhcnQgb2YgUGhhc2VyLlBvaW50LmFuZ2xlKClcclxuICAgICBhbmdsZVRvT3RoZXIgPSAyICogTWF0aC5QSSArIGFuZ2xlVG9PdGhlcjtcclxuICB9XHJcbiAgYW5nbGVUb090aGVyID0gKGFuZ2xlVG9PdGhlciArIDMvMiAqIE1hdGguUEkpICUgKDIgKiBNYXRoLlBJKTsgLy8gcm90YXRlIDkwIGQgY2xvY2t3aXNlXHJcbiAgdmFyIGRpZmZBbmdsZSA9IGFuZ2xlVG9PdGhlciAtIHRoaXNCb2R5LnJvdGF0aW9uO1xyXG4gICBpZiAoZGlmZkFuZ2xlIDwgMSAvIDQgKiBNYXRoLlBJIHx8IGRpZmZBbmdsZSA+IDcgLyA0ICogTWF0aC5QSSkgeyAvLyBub3J0aFxyXG4gICAgIHJldHVybiB0aGlzLkRJUi5OT1JUSDtcclxuICB9IGVsc2UgaWYgKGRpZmZBbmdsZSA+PSAxIC8gNCAqIE1hdGguUEkgJiYgZGlmZkFuZ2xlIDwgMyAvIDQgKiBNYXRoLlBJKSB7IC8vIGVhc3RcclxuICAgICByZXR1cm4gdGhpcy5ESVIuRUFTVDtcclxuICB9IGVsc2UgaWYgKGRpZmZBbmdsZSA+PSAzIC8gNCAqIE1hdGguUEkgJiYgZGlmZkFuZ2xlIDwgNSAvIDQgKiBNYXRoLlBJKSB7IC8vIHNvdXRoXHJcbiAgICAgcmV0dXJuIHRoaXMuRElSLlNPVVRIO1xyXG4gIH0gZWxzZSBpZiAoZGlmZkFuZ2xlID49IDUgLyA0ICogTWF0aC5QSSAmJiBkaWZmQW5nbGUgPCA3IC8gNCAqIE1hdGguUEkpIHsgLy8gd2VzdFxyXG4gICAgIHJldHVybiB0aGlzLkRJUi5XRVNUO1xyXG4gIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKGN1YmUpIHtcclxuICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMuY3ViZXNIZWlnaHQoKTsgY29sKyspIHtcclxuICAgICAgICAgaWYgKHRoaXMuY3ViZXNbcm93XVtjb2xdID09PSBjdWJlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUGhhc2VyLlBvaW50KHJvdywgY29sKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxuICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24ocG9pbnQpIHtcclxuICBpZiAoIXBvaW50IHx8IHRoaXMub3V0T2ZCb3VuZHMocG9pbnQpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICB9XHJcbiAgcmV0dXJuIHRoaXMuY3ViZXNbcG9pbnQueF1bcG9pbnQueV07XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmN1YmVzV2lkdGggPSBmdW5jdGlvbigpIHtcclxuICAgcmV0dXJuIHRoaXMuY3ViZXMubGVuZ3RoO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5jdWJlc0hlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG4gICByZXR1cm4gdGhpcy5jdWJlc1swXS5sZW5ndGg7XHJcbn07XHJcblxyXG4vKlxyXG5bMCxoZWlnaHRdIC4uLiAgW3dpZHRoLCBoZWlnaHRdXHJcbi4gICAgICAgICAgICAgICAgIFxyXG4uICAgICAgICAgICAgICAgLlxyXG4uICAgICAgICAgICAgICAgLlxyXG5bMCwxXSBbMSwxXSAuLi4gLlxyXG5bMCwwXSBbMSwwXSAuLi4gW3dpZHRoLDBdXHJcbiovXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuYWRkVG9wUm93ID0gZnVuY3Rpb24oKSB7XHJcbiAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgICB0aGlzLmN1YmVzW3Jvd10ucHVzaCh1bmRlZmluZWQpO1xyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmFkZFJpZ2h0Q29sID0gZnVuY3Rpb24oKSB7XHJcbiAgIHZhciBuZXdDb2wgPSBuZXcgQXJyYXkodGhpcy5jdWJlc0hlaWdodCk7XHJcbiAgIHRoaXMuY3ViZXMucHVzaChuZXdDb2wpO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5hZGRCb3RSb3cgPSBmdW5jdGlvbigpIHtcclxuICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIHRoaXMuY3ViZXNbcm93XS51bnNoaWZ0KHVuZGVmaW5lZCk7XHJcbiAgIH1cclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuYWRkTGVmdENvbCA9IGZ1bmN0aW9uKCkge1xyXG4gICB2YXIgbmV3Q29sID0gbmV3IEFycmF5KHRoaXMuY3ViZXNIZWlnaHQoKSk7XHJcbiAgIHRoaXMuY3ViZXMudW5zaGlmdChuZXdDb2wpO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5nZXRDdWJlID0gZnVuY3Rpb24ocG9pbnQpIHtcclxuICAgaWYgKCFwb2ludCB8fCB0aGlzLm91dE9mQm91bmRzKHBvaW50KSkge1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICB9XHJcbiAgIHJldHVybiB0aGlzLmN1YmVzW3BvaW50LnhdW3BvaW50LnldO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5hZGp1c3QgPSBmdW5jdGlvbihwb2ludCwgZGlyKSB7XHJcbiAgaWYgKCFwb2ludCkge1xyXG4gICAgIGNvbnNvbGUubG9nKCdhZGp1c3QgZ2l2ZW4gdW5kZWZpbmVkIHBvaW50Jyk7XHJcbiAgICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgbmV3UG9pbnQgPSBuZXcgUGhhc2VyLlBvaW50KHBvaW50LngsIHBvaW50LnkpO1xyXG4gIHN3aXRjaCAoZGlyKSB7XHJcbiAgICAgIGNhc2UgdGhpcy5ESVIuTk9SVEg6XHJcbiAgICAgIG5ld1BvaW50LnkrKztcclxuICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgdGhpcy5ESVIuRUFTVDpcclxuICAgICAgbmV3UG9pbnQueCsrO1xyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSB0aGlzLkRJUi5TT1VUSDpcclxuICAgICAgbmV3UG9pbnQueS0tO1xyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSB0aGlzLkRJUi5XRVNUOlxyXG4gICAgICBuZXdQb2ludC54LS07XHJcbiAgICAgIGJyZWFrO1xyXG4gICB9XHJcbiAgIHJldHVybiBuZXdQb2ludDtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24ocG9pbnQsIGN1YmUpIHtcclxuICAgaWYgKCFwb2ludCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnc2V0IGdpdmVuIHVuZGVmaW5lZCBwb2ludCcpO1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgaWYgKHRoaXMub3V0T2ZCb3VuZHMocG9pbnQpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgfVxyXG4gICB0aGlzLmN1YmVzW3BvaW50LnhdW3BvaW50LnldID0gY3ViZTtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUub3V0T2ZCb3VuZHMgPSBmdW5jdGlvbihwb2ludCkge1xyXG4gICBpZiAoIXBvaW50KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdvdXQgb2YgYm91bmRzIGdpdmVuIHVuZGVmaW5lZCBwb2ludCcpO1xyXG4gICAgICByZXR1cm47XHJcbiAgIH1cclxuICAgaWYgKHBvaW50LnggPCAwIHx8IHBvaW50LnggPj0gdGhpcy5jdWJlc1dpZHRoKCkgfHwgcG9pbnQueSA8IDAgfHwgcG9pbnQueSA+PSB0aGlzLmN1YmVzSGVpZ2h0KCkpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgIH1cclxuICAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5kaXNwbGF5Q3ViZXMgPSBmdW5jdGlvbigpIHtcclxuICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5jdWJlc1dpZHRoKCk7IHJvdysrKSB7XHJcbiAgICAgIHZhciBzdHJpbmcgPSAnJztcclxuICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICB2YXIgY3ViZSA9IHRoaXMuY3ViZXNbcm93XVtjb2xdO1xyXG4gICAgICAgICBpZiAoY3ViZSkge1xyXG4gICAgICAgICAgICBzdHJpbmcgKz0gJyMgJztcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RyaW5nICs9ICdfICc7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zb2xlLmxvZygncm93ICcgKyByb3cgKyAnOiAnICsgc3RyaW5nICsgJ3wgJyArIHRoaXMuY3ViZXNbcm93XS5sZW5ndGgpO1xyXG4gICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmRpc3BsYXlDb25uZWN0aW9uID0gZnVuY3Rpb24oY29ubmVjdGlvbikge1xyXG4gICB2YXIgZ3JhcGggPSBuZXcgQXN0YXIuR3JhcGgodGhpcy5jdWJlc1RvR3JhcGgoKSk7XHJcbiAgIHZhciBzdGFydCA9IGdyYXBoLmdyaWRbY29ubmVjdGlvbi5zdGFydC54XVtjb25uZWN0aW9uLnN0YXJ0LnldO1xyXG4gICB2YXIgZW5kID0gZ3JhcGguZ3JpZFtjb25uZWN0aW9uLmVuZC54XVtjb25uZWN0aW9uLmVuZC55XTtcclxuICAgdmFyIHJlc3VsdCA9IEFzdGFyLmFzdGFyLnNlYXJjaChncmFwaCwgc3RhcnQsIGVuZCk7XHJcbiAgIHJlc3VsdC51bnNoaWZ0KHN0YXJ0KTtcclxuICAgdmFyIHByZXZpb3VzO1xyXG4gICBmb3IodmFyIGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBjdXJQb2ludCA9IG5ldyBQaGFzZXIuUG9pbnQocmVzdWx0W2ldLngsIHJlc3VsdFtpXS55KTtcclxuICAgICAgdmFyIGN1ciA9IHRoaXMuZ2V0KGN1clBvaW50KTtcclxuICAgICAgdmFyIGluZGljYXRvciA9IGN1ci5jSW5kaWNhdG9yO1xyXG4gICAgICB2YXIgZGlyO1xyXG4gICAgICBpZiAoIXByZXZpb3VzKSB7XHJcbiAgICAgICAgIGluZGljYXRvci5hbmltYXRpb25zLnBsYXkoJ2VuZCcpO1xyXG4gICAgICAgICB2YXIgbmV4dFBvaW50ID0gbmV3IFBoYXNlci5Qb2ludChyZXN1bHRbaSsxXS54LCByZXN1bHRbaSsxXS55KTtcclxuICAgICAgICAgdmFyIG5leHQgPSB0aGlzLmdldChuZXh0UG9pbnQpO1xyXG4gICAgICAgICBkaXIgPSB0aGlzLmRpckJldHdlZW4oY3VyUG9pbnQsIHRoaXMuZmluZChuZXh0KSk7XHJcbiAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IHRoaXMuZGlyVG9BbmdsZShkaXIpO1xyXG4gICAgICB9IGVsc2UgaWYgKGkgPT09IHJlc3VsdC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgIGluZGljYXRvci5hbmltYXRpb25zLnBsYXkoJ2VuZCcpO1xyXG4gICAgICAgICAvLyBpbmRpY2F0b3IuZnJhbWUgPSAnY29ubmVjdGlvbl9lbmQnO1xyXG4gICAgICAgICB2YXIgcHJldlBvaW50ID0gbmV3IFBoYXNlci5Qb2ludChwcmV2aW91cy54LCBwcmV2aW91cy55KTtcclxuICAgICAgICAgdmFyIHByZXYgPSB0aGlzLmdldChwcmV2UG9pbnQpO1xyXG4gICAgICAgICBkaXIgPSB0aGlzLmRpckJldHdlZW4oY3VyUG9pbnQsIHRoaXMuZmluZChwcmV2KSk7XHJcbiAgICAgICAgIGluZGljYXRvci5yb3RhdGlvbiA9IHRoaXMuZGlyVG9BbmdsZShkaXIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBpbmRpY2F0b3IuYW5pbWF0aW9ucy5wbGF5KCdsaW5lJyk7XHJcbiAgICAgICAgIC8vIGluZGljYXRvci5mcmFtZSA9ICdjb25uZWN0aW9uX2VuZCc7XHJcbiAgICAgIH1cclxuICAgICAgcHJldmlvdXMgPSByZXN1bHRbaV07XHJcbiAgICAgIGN1ci5kaXNwbGF5SW5kaWNhdG9yKCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5DdWJlR3JvdXAucHJvdG90eXBlLmN1YmVzVG9HcmFwaCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBncmFwaCA9IFtdO1xyXG4gIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMuY3ViZXNXaWR0aCgpOyByb3crKykge1xyXG4gICAgIHZhciBuZXdDb2wgPSBbXTtcclxuICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5jdWJlc0hlaWdodCgpOyBjb2wrKykge1xyXG4gICAgICAgICBpZiAodGhpcy5jdWJlc1tyb3ddW2NvbF0pIHtcclxuICAgICAgICAgICAgbmV3Q29sLnB1c2goMSk7XHJcbiAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld0NvbC5wdXNoKDApO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZ3JhcGgucHVzaChuZXdDb2wpO1xyXG4gICB9XHJcbiAgIHJldHVybiBncmFwaDtcclxufTtcclxuXHJcbi8vIFswLDBdIFsxLDBdIC0+IGVhc3RcclxuLy8gWzAsMF0gWzAsMV0gLT4gbm9ydGhcclxuLy8gYXNzdW1lcyBuZWlnaGJvcnNcclxuQ3ViZUdyb3VwLnByb3RvdHlwZS5kaXJCZXR3ZWVuID0gZnVuY3Rpb24oYSwgYikge1xyXG4gICB2YXIgZGVsdGFYID0gYS54IC0gYi54O1xyXG4gICB2YXIgZGVsdGFZID0gYS55IC0gYi55O1xyXG4gICBpZiAoZGVsdGFYID4gMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ESVIuRUFTVDtcclxuICAgfVxyXG4gICBpZiAoZGVsdGFYIDwgMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ESVIuV0VTVDtcclxuICAgfVxyXG4gICBpZiAoZGVsdGFZID4gMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ESVIuU09VVEg7XHJcbiAgIH1cclxuICAgaWYgKGRlbHRhWSA8IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuRElSLk5PUlRIO1xyXG4gICB9XHJcbiAgIHJldHVybiB0aGlzLkRJUi5OT1JUSDtcclxufTtcclxuXHJcbkN1YmVHcm91cC5wcm90b3R5cGUuZGlyVG9BbmdsZSA9IGZ1bmN0aW9uKGRpcikge1xyXG4gIHN3aXRjaCAoZGlyKSB7XHJcbiAgIGNhc2UgdGhpcy5ESVIuTk9SVEg6XHJcbiAgIHJldHVybiBNYXRoLlBJO1xyXG4gICBjYXNlIHRoaXMuRElSLkVBU1Q6XHJcbiAgIHJldHVybiAzIC8gMiAqIE1hdGguUEk7XHJcbiAgIGNhc2UgdGhpcy5ESVIuU09VVEg6XHJcbiAgIHJldHVybiAwO1xyXG4gICBjYXNlIHRoaXMuRElSLldFU1Q6XHJcbiAgIHJldHVybiAxIC8gMiAqIE1hdGguUEk7XHJcbiAgfSAgXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEN1YmVHcm91cDtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIi8vIGphdmFzY3JpcHQtYXN0YXIgMC40LjBcclxuLy8gaHR0cDovL2dpdGh1Yi5jb20vYmdyaW5zL2phdmFzY3JpcHQtYXN0YXJcclxuLy8gRnJlZWx5IGRpc3RyaWJ1dGFibGUgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4vLyBJbXBsZW1lbnRzIHRoZSBhc3RhciBzZWFyY2ggYWxnb3JpdGhtIGluIGphdmFzY3JpcHQgdXNpbmcgYSBCaW5hcnkgSGVhcC5cclxuLy8gSW5jbHVkZXMgQmluYXJ5IEhlYXAgKHdpdGggbW9kaWZpY2F0aW9ucykgZnJvbSBNYXJpam4gSGF2ZXJiZWtlLlxyXG4vLyBodHRwOi8vZWxvcXVlbnRqYXZhc2NyaXB0Lm5ldC9hcHBlbmRpeDIuaHRtbFxyXG5cclxuKGZ1bmN0aW9uKGRlZmluaXRpb24pIHtcclxuICAgIC8qIGdsb2JhbCBtb2R1bGUsIGRlZmluZSAqL1xyXG4gICAgaWYodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpO1xyXG4gICAgfSBlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShbXSwgZGVmaW5pdGlvbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBleHBvcnRzID0gZGVmaW5pdGlvbigpO1xyXG4gICAgICAgIHdpbmRvdy5hc3RhciA9IGV4cG9ydHMuYXN0YXI7XHJcbiAgICAgICAgd2luZG93LkdyYXBoID0gZXhwb3J0cy5HcmFwaDtcclxuICAgIH1cclxufSkoZnVuY3Rpb24oKSB7XHJcblxyXG5mdW5jdGlvbiBwYXRoVG8obm9kZSl7XHJcbiAgICB2YXIgY3VyciA9IG5vZGUsXHJcbiAgICAgICAgcGF0aCA9IFtdO1xyXG4gICAgd2hpbGUoY3Vyci5wYXJlbnQpIHtcclxuICAgICAgICBwYXRoLnB1c2goY3Vycik7XHJcbiAgICAgICAgY3VyciA9IGN1cnIucGFyZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdGgucmV2ZXJzZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRIZWFwKCkge1xyXG4gICAgcmV0dXJuIG5ldyBCaW5hcnlIZWFwKGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZS5mO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbnZhciBhc3RhciA9IHtcclxuICAgIC8qKlxyXG4gICAgKiBQZXJmb3JtIGFuIEEqIFNlYXJjaCBvbiBhIGdyYXBoIGdpdmVuIGEgc3RhcnQgYW5kIGVuZCBub2RlLlxyXG4gICAgKiBAcGFyYW0ge0dyYXBofSBncmFwaFxyXG4gICAgKiBAcGFyYW0ge0dyaWROb2RlfSBzdGFydFxyXG4gICAgKiBAcGFyYW0ge0dyaWROb2RlfSBlbmRcclxuICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAgKiBAcGFyYW0ge2Jvb2x9IFtvcHRpb25zLmNsb3Nlc3RdIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcclxuICAgICAgICAgICAgICAgcGF0aCB0byB0aGUgY2xvc2VzdCBub2RlIGlmIHRoZSB0YXJnZXQgaXMgdW5yZWFjaGFibGUuXHJcbiAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmhldXJpc3RpY10gSGV1cmlzdGljIGZ1bmN0aW9uIChzZWVcclxuICAgICogICAgICAgICAgYXN0YXIuaGV1cmlzdGljcykuXHJcbiAgICAqL1xyXG4gICAgc2VhcmNoOiBmdW5jdGlvbihncmFwaCwgc3RhcnQsIGVuZCwgb3B0aW9ucykge1xyXG4gICAgICAgIGdyYXBoLmNsZWFuRGlydHkoKTtcclxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICB2YXIgaGV1cmlzdGljID0gb3B0aW9ucy5oZXVyaXN0aWMgfHwgYXN0YXIuaGV1cmlzdGljcy5tYW5oYXR0YW4sXHJcbiAgICAgICAgICAgIGNsb3Nlc3QgPSBvcHRpb25zLmNsb3Nlc3QgfHwgZmFsc2U7XHJcblxyXG4gICAgICAgIHZhciBvcGVuSGVhcCA9IGdldEhlYXAoKSxcclxuICAgICAgICAgICAgY2xvc2VzdE5vZGUgPSBzdGFydDsgLy8gc2V0IHRoZSBzdGFydCBub2RlIHRvIGJlIHRoZSBjbG9zZXN0IGlmIHJlcXVpcmVkXHJcblxyXG4gICAgICAgIHN0YXJ0LmggPSBoZXVyaXN0aWMoc3RhcnQsIGVuZCk7XHJcblxyXG4gICAgICAgIG9wZW5IZWFwLnB1c2goc3RhcnQpO1xyXG5cclxuICAgICAgICB3aGlsZShvcGVuSGVhcC5zaXplKCkgPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBHcmFiIHRoZSBsb3dlc3QgZih4KSB0byBwcm9jZXNzIG5leHQuICBIZWFwIGtlZXBzIHRoaXMgc29ydGVkIGZvciB1cy5cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gb3BlbkhlYXAucG9wKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBFbmQgY2FzZSAtLSByZXN1bHQgaGFzIGJlZW4gZm91bmQsIHJldHVybiB0aGUgdHJhY2VkIHBhdGguXHJcbiAgICAgICAgICAgIGlmKGN1cnJlbnROb2RlID09PSBlbmQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXRoVG8oY3VycmVudE5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBOb3JtYWwgY2FzZSAtLSBtb3ZlIGN1cnJlbnROb2RlIGZyb20gb3BlbiB0byBjbG9zZWQsIHByb2Nlc3MgZWFjaCBvZiBpdHMgbmVpZ2hib3JzLlxyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5jbG9zZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gRmluZCBhbGwgbmVpZ2hib3JzIGZvciB0aGUgY3VycmVudCBub2RlLlxyXG4gICAgICAgICAgICB2YXIgbmVpZ2hib3JzID0gZ3JhcGgubmVpZ2hib3JzKGN1cnJlbnROb2RlKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IG5laWdoYm9ycy5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmVpZ2hib3IgPSBuZWlnaGJvcnNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5laWdoYm9yLmNsb3NlZCB8fCBuZWlnaGJvci5pc1dhbGwoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdCBhIHZhbGlkIG5vZGUgdG8gcHJvY2Vzcywgc2tpcCB0byBuZXh0IG5laWdoYm9yLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRoZSBnIHNjb3JlIGlzIHRoZSBzaG9ydGVzdCBkaXN0YW5jZSBmcm9tIHN0YXJ0IHRvIGN1cnJlbnQgbm9kZS5cclxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHBhdGggd2UgaGF2ZSBhcnJpdmVkIGF0IHRoaXMgbmVpZ2hib3IgaXMgdGhlIHNob3J0ZXN0IG9uZSB3ZSBoYXZlIHNlZW4geWV0LlxyXG4gICAgICAgICAgICAgICAgdmFyIGdTY29yZSA9IGN1cnJlbnROb2RlLmcgKyBuZWlnaGJvci5nZXRDb3N0KGN1cnJlbnROb2RlKSxcclxuICAgICAgICAgICAgICAgICAgICBiZWVuVmlzaXRlZCA9IG5laWdoYm9yLnZpc2l0ZWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFiZWVuVmlzaXRlZCB8fCBnU2NvcmUgPCBuZWlnaGJvci5nKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIGFuIG9wdGltYWwgKHNvIGZhcikgcGF0aCB0byB0aGlzIG5vZGUuICBUYWtlIHNjb3JlIGZvciBub2RlIHRvIHNlZSBob3cgZ29vZCBpdCBpcy5cclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci52aXNpdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5wYXJlbnQgPSBjdXJyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5oID0gbmVpZ2hib3IuaCB8fCBoZXVyaXN0aWMobmVpZ2hib3IsIGVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3IuZyA9IGdTY29yZTtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvci5mID0gbmVpZ2hib3IuZyArIG5laWdoYm9yLmg7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGgubWFya0RpcnR5KG5laWdoYm9yKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbmVpZ2hib3VyIGlzIGNsb3NlciB0aGFuIHRoZSBjdXJyZW50IGNsb3Nlc3ROb2RlIG9yIGlmIGl0J3MgZXF1YWxseSBjbG9zZSBidXQgaGFzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgY2hlYXBlciBwYXRoIHRoYW4gdGhlIGN1cnJlbnQgY2xvc2VzdCBub2RlIHRoZW4gaXQgYmVjb21lcyB0aGUgY2xvc2VzdCBub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWlnaGJvci5oIDwgY2xvc2VzdE5vZGUuaCB8fCAobmVpZ2hib3IuaCA9PT0gY2xvc2VzdE5vZGUuaCAmJiBuZWlnaGJvci5nIDwgY2xvc2VzdE5vZGUuZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3ROb2RlID0gbmVpZ2hib3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYmVlblZpc2l0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHVzaGluZyB0byBoZWFwIHdpbGwgcHV0IGl0IGluIHByb3BlciBwbGFjZSBiYXNlZCBvbiB0aGUgJ2YnIHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuSGVhcC5wdXNoKG5laWdoYm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgc2VlbiB0aGUgbm9kZSwgYnV0IHNpbmNlIGl0IGhhcyBiZWVuIHJlc2NvcmVkIHdlIG5lZWQgdG8gcmVvcmRlciBpdCBpbiB0aGUgaGVhcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuSGVhcC5yZXNjb3JlRWxlbWVudChuZWlnaGJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2xvc2VzdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGF0aFRvKGNsb3Nlc3ROb2RlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5vIHJlc3VsdCB3YXMgZm91bmQgLSBlbXB0eSBhcnJheSBzaWduaWZpZXMgZmFpbHVyZSB0byBmaW5kIHBhdGguXHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfSxcclxuICAgIC8vIFNlZSBsaXN0IG9mIGhldXJpc3RpY3M6IGh0dHA6Ly90aGVvcnkuc3RhbmZvcmQuZWR1L35hbWl0cC9HYW1lUHJvZ3JhbW1pbmcvSGV1cmlzdGljcy5odG1sXHJcbiAgICBoZXVyaXN0aWNzOiB7XHJcbiAgICAgICAgbWFuaGF0dGFuOiBmdW5jdGlvbihwb3MwLCBwb3MxKSB7XHJcbiAgICAgICAgICAgIHZhciBkMSA9IE1hdGguYWJzKHBvczEueCAtIHBvczAueCk7XHJcbiAgICAgICAgICAgIHZhciBkMiA9IE1hdGguYWJzKHBvczEueSAtIHBvczAueSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkMSArIGQyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlhZ29uYWw6IGZ1bmN0aW9uKHBvczAsIHBvczEpIHtcclxuICAgICAgICAgICAgdmFyIEQgPSAxO1xyXG4gICAgICAgICAgICB2YXIgRDIgPSBNYXRoLnNxcnQoMik7XHJcbiAgICAgICAgICAgIHZhciBkMSA9IE1hdGguYWJzKHBvczEueCAtIHBvczAueCk7XHJcbiAgICAgICAgICAgIHZhciBkMiA9IE1hdGguYWJzKHBvczEueSAtIHBvczAueSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoRCAqIChkMSArIGQyKSkgKyAoKEQyIC0gKDIgKiBEKSkgKiBNYXRoLm1pbihkMSwgZDIpKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY2xlYW5Ob2RlOmZ1bmN0aW9uKG5vZGUpe1xyXG4gICAgICAgIG5vZGUuZiA9IDA7XHJcbiAgICAgICAgbm9kZS5nID0gMDtcclxuICAgICAgICBub2RlLmggPSAwO1xyXG4gICAgICAgIG5vZGUudmlzaXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIG5vZGUuY2xvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgbm9kZS5wYXJlbnQgPSBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiogQSBncmFwaCBtZW1vcnkgc3RydWN0dXJlXHJcbiogQHBhcmFtIHtBcnJheX0gZ3JpZEluIDJEIGFycmF5IG9mIGlucHV0IHdlaWdodHNcclxuKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiogQHBhcmFtIHtib29sfSBbb3B0aW9ucy5kaWFnb25hbF0gU3BlY2lmaWVzIHdoZXRoZXIgZGlhZ29uYWwgbW92ZXMgYXJlIGFsbG93ZWRcclxuKi9cclxuZnVuY3Rpb24gR3JhcGgoZ3JpZEluLCBvcHRpb25zKSB7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIHRoaXMubm9kZXMgPSBbXTtcclxuICAgIHRoaXMuZGlhZ29uYWwgPSAhIW9wdGlvbnMuZGlhZ29uYWw7XHJcbiAgICB0aGlzLmdyaWQgPSBbXTtcclxuICAgIGZvciAodmFyIHggPSAwOyB4IDwgZ3JpZEluLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgdGhpcy5ncmlkW3hdID0gW107XHJcblxyXG4gICAgICAgIGZvciAodmFyIHkgPSAwLCByb3cgPSBncmlkSW5beF07IHkgPCByb3cubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSBuZXcgR3JpZE5vZGUoeCwgeSwgcm93W3ldKTtcclxuICAgICAgICAgICAgdGhpcy5ncmlkW3hdW3ldID0gbm9kZTtcclxuICAgICAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuaW5pdCgpO1xyXG59XHJcblxyXG5HcmFwaC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5kaXJ0eU5vZGVzID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhc3Rhci5jbGVhbk5vZGUodGhpcy5ub2Rlc1tpXSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5HcmFwaC5wcm90b3R5cGUuY2xlYW5EaXJ0eSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRpcnR5Tm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhc3Rhci5jbGVhbk5vZGUodGhpcy5kaXJ0eU5vZGVzW2ldKTtcclxuICAgIH1cclxuICAgIHRoaXMuZGlydHlOb2RlcyA9IFtdO1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLm1hcmtEaXJ0eSA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgIHRoaXMuZGlydHlOb2Rlcy5wdXNoKG5vZGUpO1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLm5laWdoYm9ycyA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgIHZhciByZXQgPSBbXSxcclxuICAgICAgICB4ID0gbm9kZS54LFxyXG4gICAgICAgIHkgPSBub2RlLnksXHJcbiAgICAgICAgZ3JpZCA9IHRoaXMuZ3JpZDtcclxuXHJcbiAgICAvLyBXZXN0XHJcbiAgICBpZihncmlkW3gtMV0gJiYgZ3JpZFt4LTFdW3ldKSB7XHJcbiAgICAgICAgcmV0LnB1c2goZ3JpZFt4LTFdW3ldKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFYXN0XHJcbiAgICBpZihncmlkW3grMV0gJiYgZ3JpZFt4KzFdW3ldKSB7XHJcbiAgICAgICAgcmV0LnB1c2goZ3JpZFt4KzFdW3ldKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTb3V0aFxyXG4gICAgaWYoZ3JpZFt4XSAmJiBncmlkW3hdW3ktMV0pIHtcclxuICAgICAgICByZXQucHVzaChncmlkW3hdW3ktMV0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vcnRoXHJcbiAgICBpZihncmlkW3hdICYmIGdyaWRbeF1beSsxXSkge1xyXG4gICAgICAgIHJldC5wdXNoKGdyaWRbeF1beSsxXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZGlhZ29uYWwpIHtcclxuICAgICAgICAvLyBTb3V0aHdlc3RcclxuICAgICAgICBpZihncmlkW3gtMV0gJiYgZ3JpZFt4LTFdW3ktMV0pIHtcclxuICAgICAgICAgICAgcmV0LnB1c2goZ3JpZFt4LTFdW3ktMV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU291dGhlYXN0XHJcbiAgICAgICAgaWYoZ3JpZFt4KzFdICYmIGdyaWRbeCsxXVt5LTFdKSB7XHJcbiAgICAgICAgICAgIHJldC5wdXNoKGdyaWRbeCsxXVt5LTFdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5vcnRod2VzdFxyXG4gICAgICAgIGlmKGdyaWRbeC0xXSAmJiBncmlkW3gtMV1beSsxXSkge1xyXG4gICAgICAgICAgICByZXQucHVzaChncmlkW3gtMV1beSsxXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOb3J0aGVhc3RcclxuICAgICAgICBpZihncmlkW3grMV0gJiYgZ3JpZFt4KzFdW3krMV0pIHtcclxuICAgICAgICAgICAgcmV0LnB1c2goZ3JpZFt4KzFdW3krMV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG59O1xyXG5cclxuR3JhcGgucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZ3JhcGhTdHJpbmcgPSBbXSxcclxuICAgICAgICBub2RlcyA9IHRoaXMuZ3JpZCwgLy8gd2hlbiB1c2luZyBncmlkXHJcbiAgICAgICAgcm93RGVidWcsIHJvdywgeSwgbDtcclxuICAgIGZvciAodmFyIHggPSAwLCBsZW4gPSBub2Rlcy5sZW5ndGg7IHggPCBsZW47IHgrKykge1xyXG4gICAgICAgIHJvd0RlYnVnID0gW107XHJcbiAgICAgICAgcm93ID0gbm9kZXNbeF07XHJcbiAgICAgICAgZm9yICh5ID0gMCwgbCA9IHJvdy5sZW5ndGg7IHkgPCBsOyB5KyspIHtcclxuICAgICAgICAgICAgcm93RGVidWcucHVzaChyb3dbeV0ud2VpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ3JhcGhTdHJpbmcucHVzaChyb3dEZWJ1Zy5qb2luKCcgJykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdyYXBoU3RyaW5nLmpvaW4oJ1xcbicpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gR3JpZE5vZGUoeCwgeSwgd2VpZ2h0KSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICAgIHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xyXG59XHJcblxyXG5HcmlkTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiAnWycgKyB0aGlzLnggKyAnICcgKyB0aGlzLnkgKyAnXSc7XHJcbn07XHJcblxyXG5HcmlkTm9kZS5wcm90b3R5cGUuZ2V0Q29zdCA9IGZ1bmN0aW9uKGZyb21OZWlnaGJvcikge1xyXG4gICAgLy8gVGFrZSBkaWFnb25hbCB3ZWlnaHQgaW50byBjb25zaWRlcmF0aW9uLlxyXG4gICAgaWYgKGZyb21OZWlnaGJvciAmJiBmcm9tTmVpZ2hib3IueCAhPT0gdGhpcy54ICYmIGZyb21OZWlnaGJvci55ICE9PSB0aGlzLnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53ZWlnaHQgKiAxLjQxNDIxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMud2VpZ2h0O1xyXG59O1xyXG5cclxuR3JpZE5vZGUucHJvdG90eXBlLmlzV2FsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMud2VpZ2h0ID09PSAwO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gQmluYXJ5SGVhcChzY29yZUZ1bmN0aW9uKXtcclxuICAgIHRoaXMuY29udGVudCA9IFtdO1xyXG4gICAgdGhpcy5zY29yZUZ1bmN0aW9uID0gc2NvcmVGdW5jdGlvbjtcclxufVxyXG5cclxuQmluYXJ5SGVhcC5wcm90b3R5cGUgPSB7XHJcbiAgICBwdXNoOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgLy8gQWRkIHRoZSBuZXcgZWxlbWVudCB0byB0aGUgZW5kIG9mIHRoZSBhcnJheS5cclxuICAgICAgICB0aGlzLmNvbnRlbnQucHVzaChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgLy8gQWxsb3cgaXQgdG8gc2luayBkb3duLlxyXG4gICAgICAgIHRoaXMuc2lua0Rvd24odGhpcy5jb250ZW50Lmxlbmd0aCAtIDEpO1xyXG4gICAgfSxcclxuICAgIHBvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gU3RvcmUgdGhlIGZpcnN0IGVsZW1lbnQgc28gd2UgY2FuIHJldHVybiBpdCBsYXRlci5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jb250ZW50WzBdO1xyXG4gICAgICAgIC8vIEdldCB0aGUgZWxlbWVudCBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheS5cclxuICAgICAgICB2YXIgZW5kID0gdGhpcy5jb250ZW50LnBvcCgpO1xyXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBhbnkgZWxlbWVudHMgbGVmdCwgcHV0IHRoZSBlbmQgZWxlbWVudCBhdCB0aGVcclxuICAgICAgICAvLyBzdGFydCwgYW5kIGxldCBpdCBidWJibGUgdXAuXHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFswXSA9IGVuZDtcclxuICAgICAgICAgICAgdGhpcy5idWJibGVVcCgwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICB2YXIgaSA9IHRoaXMuY29udGVudC5pbmRleE9mKG5vZGUpO1xyXG5cclxuICAgICAgICAvLyBXaGVuIGl0IGlzIGZvdW5kLCB0aGUgcHJvY2VzcyBzZWVuIGluICdwb3AnIGlzIHJlcGVhdGVkXHJcbiAgICAgICAgLy8gdG8gZmlsbCB1cCB0aGUgaG9sZS5cclxuICAgICAgICB2YXIgZW5kID0gdGhpcy5jb250ZW50LnBvcCgpO1xyXG5cclxuICAgICAgICBpZiAoaSAhPT0gdGhpcy5jb250ZW50Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50W2ldID0gZW5kO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcmVGdW5jdGlvbihlbmQpIDwgdGhpcy5zY29yZUZ1bmN0aW9uKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpbmtEb3duKGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWJibGVVcChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzaXplOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aDtcclxuICAgIH0sXHJcbiAgICByZXNjb3JlRWxlbWVudDogZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIHRoaXMuc2lua0Rvd24odGhpcy5jb250ZW50LmluZGV4T2Yobm9kZSkpO1xyXG4gICAgfSxcclxuICAgIHNpbmtEb3duOiBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgLy8gRmV0Y2ggdGhlIGVsZW1lbnQgdGhhdCBoYXMgdG8gYmUgc3Vuay5cclxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuY29udGVudFtuXTtcclxuXHJcbiAgICAgICAgLy8gV2hlbiBhdCAwLCBhbiBlbGVtZW50IGNhbiBub3Qgc2luayBhbnkgZnVydGhlci5cclxuICAgICAgICB3aGlsZSAobiA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbXB1dGUgdGhlIHBhcmVudCBlbGVtZW50J3MgaW5kZXgsIGFuZCBmZXRjaCBpdC5cclxuICAgICAgICAgICAgdmFyIHBhcmVudE4gPSAoKG4gKyAxKSA+PiAxKSAtIDEsIHBhcmVudCA9IHRoaXMuY29udGVudFtwYXJlbnROXTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgICAgICAgICAgIC8vIFN3YXAgdGhlIGVsZW1lbnRzIGlmIHRoZSBwYXJlbnQgaXMgZ3JlYXRlci5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcmVGdW5jdGlvbihlbGVtZW50KSA8IHRoaXMuc2NvcmVGdW5jdGlvbihwYXJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbcGFyZW50Tl0gPSBlbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50W25dID0gcGFyZW50O1xyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlICduJyB0byBjb250aW51ZSBhdCB0aGUgbmV3IHBvc2l0aW9uLlxyXG4gICAgICAgICAgICAgICAgbiA9IHBhcmVudE47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gRm91bmQgYSBwYXJlbnQgdGhhdCBpcyBsZXNzLCBubyBuZWVkIHRvIHNpbmsgYW55IGZ1cnRoZXIuXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgYnViYmxlVXA6IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICAvLyBMb29rIHVwIHRoZSB0YXJnZXQgZWxlbWVudCBhbmQgaXRzIHNjb3JlLlxyXG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmNvbnRlbnQubGVuZ3RoLFxyXG4gICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5jb250ZW50W25dLFxyXG4gICAgICAgICAgICBlbGVtU2NvcmUgPSB0aGlzLnNjb3JlRnVuY3Rpb24oZWxlbWVudCk7XHJcblxyXG4gICAgICAgIHdoaWxlKHRydWUpIHtcclxuICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgaW5kaWNlcyBvZiB0aGUgY2hpbGQgZWxlbWVudHMuXHJcbiAgICAgICAgICAgIHZhciBjaGlsZDJOID0gKG4gKyAxKSA8PCAxLCBjaGlsZDFOID0gY2hpbGQyTiAtIDE7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHVzZWQgdG8gc3RvcmUgdGhlIG5ldyBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCwgaWYgYW55LlxyXG4gICAgICAgICAgICB2YXIgc3dhcCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBjaGlsZDFTY29yZTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGZpcnN0IGNoaWxkIGV4aXN0cyAoaXMgaW5zaWRlIHRoZSBhcnJheSkuLi5cclxuICAgICAgICAgICAgaWYgKGNoaWxkMU4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIExvb2sgaXQgdXAgYW5kIGNvbXB1dGUgaXRzIHNjb3JlLlxyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkMSA9IHRoaXMuY29udGVudFtjaGlsZDFOXTtcclxuICAgICAgICAgICAgICAgIGNoaWxkMVNjb3JlID0gdGhpcy5zY29yZUZ1bmN0aW9uKGNoaWxkMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNjb3JlIGlzIGxlc3MgdGhhbiBvdXIgZWxlbWVudCdzLCB3ZSBuZWVkIHRvIHN3YXAuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQxU2NvcmUgPCBlbGVtU2NvcmUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YXAgPSBjaGlsZDFOO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBEbyB0aGUgc2FtZSBjaGVja3MgZm9yIHRoZSBvdGhlciBjaGlsZC5cclxuICAgICAgICAgICAgaWYgKGNoaWxkMk4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZDIgPSB0aGlzLmNvbnRlbnRbY2hpbGQyTl0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQyU2NvcmUgPSB0aGlzLnNjb3JlRnVuY3Rpb24oY2hpbGQyKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZDJTY29yZSA8IChzd2FwID09PSBudWxsID8gZWxlbVNjb3JlIDogY2hpbGQxU2NvcmUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dhcCA9IGNoaWxkMk47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBlbGVtZW50IG5lZWRzIHRvIGJlIG1vdmVkLCBzd2FwIGl0LCBhbmQgY29udGludWUuXHJcbiAgICAgICAgICAgIGlmIChzd2FwICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbbl0gPSB0aGlzLmNvbnRlbnRbc3dhcF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbc3dhcF0gPSBlbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgbiA9IHN3YXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBhcmUgZG9uZS5cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbnJldHVybiB7XHJcbiAgICBhc3RhcjogYXN0YXIsXHJcbiAgICBHcmFwaDogR3JhcGhcclxufTtcclxuXHJcbn0pO1xyXG4iLCJ2YXIgQm9vdCA9IGZ1bmN0aW9uICgpIHt9O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCb290O1xyXG5cclxuQm9vdC5wcm90b3R5cGUgPSB7XHJcblxyXG4gIHByZWxvYWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgncHJlbG9hZGVyJywgJ2Fzc2V0cy9wcmVsb2FkZXIuZ2lmJyk7XHJcbiAgfSxcclxuXHJcbiAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmdhbWUuaW5wdXQubWF4UG9pbnRlcnMgPSAxO1xyXG5cclxuICAgIGlmICh0aGlzLmdhbWUuZGV2aWNlLmRlc2t0b3ApIHtcclxuICAgICAgdGhpcy5nYW1lLnN0YWdlLnNjYWxlLnBhZ2VBbGlnbkhvcml6b250YWxseSA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUuc2NhbGVNb2RlID0gUGhhc2VyLlNjYWxlTWFuYWdlci5TSE9XX0FMTDtcclxuICAgICAgdGhpcy5nYW1lLnNjYWxlLm1pbldpZHRoID0gIDQ4MDtcclxuICAgICAgdGhpcy5nYW1lLnNjYWxlLm1pbkhlaWdodCA9IDI2MDtcclxuICAgICAgdGhpcy5nYW1lLnNjYWxlLm1heFdpZHRoID0gNjQwO1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUubWF4SGVpZ2h0ID0gNDgwO1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUuZm9yY2VMYW5kc2NhcGUgPSB0cnVlO1xyXG4gICAgICB0aGlzLmdhbWUuc2NhbGUucGFnZUFsaWduSG9yaXpvbnRhbGx5ID0gdHJ1ZTtcclxuICAgICAgdGhpcy5nYW1lLnNjYWxlLnNldFNjcmVlblNpemUodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdQcmVsb2FkZXInKTtcclxuICB9XHJcbn07XHJcbiIsIi8qXHJcbk1haW4gdGVzdGluZyBlbnZpcm9ubWVudC5cclxuKi9cclxuXHJcbnZhciBNb2R1bGVCdWlsZGVyID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvTW9kdWxlQnVpbGRlcicpO1xyXG52YXIgQ3ViZSA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL2N1YmUnKTtcclxudmFyIE1vZHVsZUJ1aWxkZXIgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9Nb2R1bGVCdWlsZGVyJyk7XHJcbnZhciBVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XHJcbnZhciBDdWJlR3JvdXAgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9jdWJlX2dyb3VwJyk7XHJcblxyXG52YXIgbW91c2VCb2R5OyAvLyBwaHlzaWNzIGJvZHkgZm9yIG1vdXNlXHJcblxyXG52YXIgR2FtZSA9IGZ1bmN0aW9uICgpIHtcclxuICB0aGlzLnRlc3RlbnRpdHkgPSBudWxsO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBHYW1lO1xyXG5cclxuR2FtZS5wcm90b3R5cGUgPSB7XHJcblx0XHJcbiAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmdhbWUucGh5c2ljcy5zdGFydFN5c3RlbShQaGFzZXIuUGh5c2ljcy5QMkpTKTtcclxuICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnNldEltcGFjdEV2ZW50cyh0cnVlKTtcclxuICAgIG1vdXNlQm9keSA9IG5ldyBwMi5Cb2R5KCk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICAgdGhpcy5nYW1lLnBoeXNpY3MucDIud29ybGQuYWRkQm9keShtb3VzZUJvZHkpO1xyXG4gICAgXHJcblx0Ly9jcmVhdGUgTW9kdWxlQnVpbGRlciBhbmQgc3RvcmUgaXQgaW4gdGhpcyBnYW1lIHN0YXRlIG9iamVjdFxyXG5cdHRoaXMubW9kdWxlQnVpbGRlciA9IG5ldyBNb2R1bGVCdWlsZGVyKHRoaXMpO1xyXG5cdC8vY3JlYXRlIGFuZCBzdG9yZSB0aGUgY29yZSBtb2R1bGVcclxuXHR0aGlzLmNvcmVNb2R1bGUgPSB0aGlzLm1vZHVsZUJ1aWxkZXIuYnVpbGQoJ2NvcmUnLCAyMDAsIDIwMCk7XHJcbiAgIHRoaXMucGxheWVyID0gbmV3IEN1YmVHcm91cCh0aGlzLCB0aGlzLmNvcmVNb2R1bGUuY3ViZSk7XHJcbiAgIFxyXG5cdFxyXG5cdC8vREVCVUdHSU5HIExJU1RFTkVSUy0gYWxsb3cgeW91IHRvIGNyZWF0ZSBtb2R1bGVzIGJ5IHByZXNzaW5nIGtleXNcclxuXHQvL2NvcmVcclxuXHR0aGlzLnBsYWNlQ29yZUtleSA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlApO1xyXG4gICB0aGlzLnBsYWNlQ29yZUtleS5vbkRvd24uYWRkKHRoaXMuYWRkQ29yZSwgdGhpcyk7XHJcblx0Ly9zaGllbGRcclxuXHR0aGlzLnBsYWNlU2hpZWxkS2V5ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuTyk7XHJcbiAgICB0aGlzLnBsYWNlU2hpZWxkS2V5Lm9uRG93bi5hZGQodGhpcy5hZGRTaGllbGQsIHRoaXMpO1xyXG5cdC8vdGhydXN0ZXJcclxuXHR0aGlzLnBsYWNlVGhydXN0ZXJLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5JKTtcclxuICAgIHRoaXMucGxhY2VUaHJ1c3RlcktleS5vbkRvd24uYWRkKHRoaXMuYWRkVGhydXN0ZXIsIHRoaXMpO1xyXG5cdC8vc29sYXJQYW5uZWxcclxuXHR0aGlzLnBsYWNlU1BLZXkgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5VKTtcclxuICAgIHRoaXMucGxhY2VTUEtleS5vbkRvd24uYWRkKHRoaXMuYWRkU1AsIHRoaXMpO1xyXG5cdC8vRU5EXHJcbiAgICBcclxuICAgIHRoaXMubW91c2VYID0gMDtcclxuICAgIHRoaXMubW91c2VZID0gMDtcclxuICAgIFxyXG4gICAgdGhpcy5pbnB1dC5vbkRvd24uYWRkKHRoaXMuY2xpY2ssIHRoaXMpO1xyXG4gICAgdGhpcy5pbnB1dC5vblVwLmFkZCh0aGlzLnJlbGVhc2UsIHRoaXMpO1xyXG4gICAgdGhpcy5pbnB1dC5hZGRNb3ZlQ2FsbGJhY2sodGhpcy5tb3ZlLCB0aGlzKTtcclxuICAgIHRoaXMuZ3JhYmJlZCA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMubGFzdENsaWNrZWQgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLmxpbmUgPSBuZXcgUGhhc2VyLkxpbmUoMCwgMCwgMCwgMCk7XHJcbiAgICBcclxuICAgIHRoaXMucm9vdFNwYXduZWQgPSBmYWxzZTtcclxuICAgIFxyXG4gICAgdGhpcy5kZWJ1Z051bSA9IDA7XHJcbiAgICB0aGlzLm15Um9vdCA9IHVuZGVmaW5lZDtcclxuICB9LFxyXG5cclxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLmdyYWJiZWQpIHtcclxuICAgICAgdmFyIGFuZ2xlID0gTWF0aC5hdGFuMih0aGlzLmdyYWJiZWQuc3ByaXRlLnkgLSB0aGlzLmlucHV0LnBvc2l0aW9uLnksIHRoaXMuZ3JhYmJlZC5zcHJpdGUueCAtIHRoaXMuaW5wdXQucG9zaXRpb24ueCkgKyBNYXRoLlBJO1xyXG4gICAgICB2YXIgZGlzdCA9IFV0aWxzLmRpc3RhbmNlKHRoaXMuZ3JhYmJlZC5zcHJpdGUueCwgdGhpcy5ncmFiYmVkLnNwcml0ZS55LCB0aGlzLmlucHV0LnBvc2l0aW9uLngsIHRoaXMuaW5wdXQucG9zaXRpb24ueSk7XHJcbiAgICAgIHZhciB3ZWlnaHQgPSAxMDtcclxuICAgICAgdGhpcy5ncmFiYmVkLmZvcmNlLnggPSBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0ICogd2VpZ2h0O1xyXG4gICAgICB0aGlzLmdyYWJiZWQuZm9yY2UueSA9IE1hdGguc2luKGFuZ2xlKSAqIGRpc3QgKiB3ZWlnaHQ7XHJcbiAgICAgIHRoaXMubGluZS5zZXRUbyh0aGlzLmdyYWJiZWQuc3ByaXRlLngsIHRoaXMuZ3JhYmJlZC5zcHJpdGUueSwgdGhpcy5pbnB1dC5wb3NpdGlvbi54LCB0aGlzLmlucHV0LnBvc2l0aW9uLnkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgIHRoaXMubGluZS5zZXRUbygwLCAwLCAwLCAwKTtcclxuICAgIH1cclxuICB9LFxyXG4gIFxyXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5nYW1lLmRlYnVnLmdlb20odGhpcy5saW5lKTtcclxuICB9LFxyXG5cclxuICBjbGljazogZnVuY3Rpb24gKHBvaW50ZXIpIHtcclxuICAgIHZhciBib2RpZXMgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5oaXRUZXN0KHBvaW50ZXIucG9zaXRpb24pO1xyXG4gICAgaWYgKGJvZGllcy5sZW5ndGgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5ncmFiYmVkID0gYm9kaWVzWzBdLnBhcmVudDtcclxuICAgICAgICBpZiAodGhpcy5sYXN0Q2xpY2tlZCAmJiB0aGlzLmxhc3RDbGlja2VkLnNwcml0ZS5tb2R1bGUuZ2l2ZVRhcmdldCkge1xyXG4gICAgICAgICAgIHRoaXMubGFzdENsaWNrZWQuc3ByaXRlLm1vZHVsZS5naXZlVGFyZ2V0KHRoaXMuZ3JhYmJlZC5zcHJpdGUubW9kdWxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sYXN0Q2xpY2tlZCA9IGJvZGllc1swXS5wYXJlbnQ7XHJcbiAgICB9XHJcbiAgfSxcclxuICBcclxuICByZWxlYXNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgaWYgKHRoaXMuZ3JhYmJlZCkge1xyXG4gICAgICAgIHRoaXMuZ3JhYmJlZCA9IHVuZGVmaW5lZDtcclxuICAgICB9XHJcbiAgfSxcclxuICBcclxuICBtb3ZlOiBmdW5jdGlvbiAocG9pbnRlcikge1xyXG4gICAgLy8gcDIgdXNlcyBkaWZmZXJlbnQgY29vcmRpbmF0ZSBzeXN0ZW0sIHNvIGNvbnZlcnQgdGhlIHBvaW50ZXIgcG9zaXRpb24gdG8gcDIncyBjb29yZGluYXRlIHN5c3RlbVxyXG4gICAgbW91c2VCb2R5LnBvc2l0aW9uWzBdID0gdGhpcy5nYW1lLnBoeXNpY3MucDIucHhtaShwb2ludGVyLnBvc2l0aW9uLngpO1xyXG4gICAgbW91c2VCb2R5LnBvc2l0aW9uWzFdID0gdGhpcy5nYW1lLnBoeXNpY3MucDIucHhtaShwb2ludGVyLnBvc2l0aW9uLnkpO1xyXG4gICAgdGhpcy5tb3VzZVggPSBwb2ludGVyLnBvc2l0aW9uLng7XHJcbiAgICB0aGlzLm1vdXNlWSA9IHBvaW50ZXIucG9zaXRpb24ueTtcclxuICAgIHZhciBib2RpZXMgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5oaXRUZXN0KHBvaW50ZXIucG9zaXRpb24pO1xyXG4gICAgaWYgKGJvZGllcy5sZW5ndGgpXHJcbiAgICB7XHJcbiAgICAgICAgIHZhciBob3ZlciA9IGJvZGllc1swXS5wYXJlbnQ7XHJcbiAgICAgICAgaWYgKGhvdmVyLnNwcml0ZS5tb2R1bGUubW91c2VPdmVyKSB7XHJcbiAgICAgICAgICAgaG92ZXIuc3ByaXRlLm1vZHVsZS5tb3VzZU92ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBcclxuICAvL0RFQlVHIEZVTkNUSU9OUy0gZXZlbnQgZnVuY3Rpb25zIGNhbGxlZCBmcm9tIGxpc3RlbmVycyB0aGF0IGFsbG93IHlvdSB0byBjcmVhdGUgbW9kdWxlcyB3aXRoIGtleSBwcmVzc2VzXHJcbiAgYWRkQ29yZTogZnVuY3Rpb24gKCkge1xyXG5cdC8vQXR0ZW1wdHMgdG8gY3JlYXRlIG1vcmUgY29yZSBtb2R1bGVzIGhlcmUgd2lsbCBvbmx5IHJldHVybiB0aGUgZXhpc3RpbmcgY29yZVxyXG5cdHRoaXMubW9kdWxlQnVpbGRlci5idWlsZCgnY29yZScsIHRoaXMubW91c2VYLCB0aGlzLm1vdXNlWSk7XHJcbiAgfSxcclxuICBhZGRTaGllbGQ6IGZ1bmN0aW9uICgpIHtcclxuXHR0aGlzLm1vZHVsZUJ1aWxkZXIuYnVpbGQoJ3NoaWVsZCcsIHRoaXMubW91c2VYLCB0aGlzLm1vdXNlWSk7XHJcbiAgfSxcclxuICBhZGRUaHJ1c3RlcjogZnVuY3Rpb24gKCkge1xyXG5cdHRoaXMubW9kdWxlQnVpbGRlci5idWlsZCgndGhydXN0ZXInLCB0aGlzLm1vdXNlWCwgdGhpcy5tb3VzZVkpO1xyXG4gIH0sXHJcbiAgYWRkU1A6IGZ1bmN0aW9uICgpIHtcclxuXHR0aGlzLm1vZHVsZUJ1aWxkZXIuYnVpbGQoJ3NvbGFyUGFubmVsJywgdGhpcy5tb3VzZVgsIHRoaXMubW91c2VZKTtcclxuICB9LFxyXG4gIHBsYWNlQ3ViZTogZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGVudGl0eSA9IG5ldyBDdWJlKHRoaXMuZ2FtZSwgdGhpcy5tb3VzZVgsIHRoaXMubW91c2VZKTtcclxuICAgIHZhciBzY2FsZSA9IDAuNTtcclxuICAgIGVudGl0eS5uYW1lID0gdGhpcy5kZWJ1Z051bSsrO1xyXG4gICAgZW50aXR5LnNjYWxlLnggPSBzY2FsZTtcclxuICAgIGVudGl0eS5zY2FsZS55ID0gc2NhbGU7XHJcbiAgICBlbnRpdHkuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLmVuYWJsZShlbnRpdHkpO1xyXG4gICAgZW50aXR5LmJvZHkub25CZWdpbkNvbnRhY3QuYWRkKGVudGl0eS5jdWJlQ29sbGlkZSwgZW50aXR5KTtcclxuICAgIGVudGl0eS5ib2R5LmRhbXBpbmcgPSAwLjk7XHJcbiAgICBlbnRpdHkuYm9keS5hbmd1bGFyRGFtcGluZyA9IDAuOTtcclxuICAgIGlmICghdGhpcy5yb290U3Bhd25lZCkge1xyXG4gICAgICAgZW50aXR5LnJvb3QgPSB0cnVlO1xyXG4gICAgICAgdGhpcy5yb290U3Bhd25lZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgTWVudSA9IGZ1bmN0aW9uICgpIHtcclxuICB0aGlzLnRleHQgPSBudWxsO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNZW51O1xyXG5cclxuTWVudS5wcm90b3R5cGUgPSB7XHJcblxyXG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHggPSB0aGlzLmdhbWUud2lkdGggLyAyO1xyXG4gICAgdmFyIHkgPSB0aGlzLmdhbWUuaGVpZ2h0IC8gMjtcclxuXHJcbiAgICB2YXIgc3R5bGUgPSB7IGZvbnQ6ICc2NXB4IEFyaWFsJywgZmlsbDogJyNmZmZmZmYnLCBhbGlnbjogJ2NlbnRlcicgfTtcclxuXHJcbiAgICB0aGlzLnRleHQgPSB0aGlzLmFkZC50ZXh0KHggLSAzMDAsIHkgLSAyMDAsICdQcmVzcyB0byBTdGFydCcsIHN0eWxlKTtcclxuXHJcbiAgICB0aGlzLmlucHV0Lm9uRG93bi5hZGQodGhpcy5vbkRvd24sIHRoaXMpO1xyXG4gIH0sXHJcblxyXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gIH0sXHJcblxyXG4gIG9uRG93bjogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KHBsYXllclN0YXRlLmN1cnJlbnRMZXZlbCk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gIH1cclxufTtcclxuIiwidmFyIFByZWxvYWRlciA9IGZ1bmN0aW9uIChnYW1lKSB7XHJcbiAgZ2FtZSA9IG51bGw7XHJcbiAgdGhpcy5hc3NldCA9IG51bGw7XHJcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQcmVsb2FkZXI7XHJcblxyXG5QcmVsb2FkZXIucHJvdG90eXBlID0ge1xyXG5cclxuICBwcmVsb2FkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmFzc2V0ID0gdGhpcy5hZGQuc3ByaXRlKDMyMCwgMjQwLCAncHJlbG9hZGVyJyk7XHJcbiAgICB0aGlzLmFzc2V0LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcblxyXG4gICAgdGhpcy5sb2FkLm9uTG9hZENvbXBsZXRlLmFkZE9uY2UodGhpcy5vbkxvYWRDb21wbGV0ZSwgdGhpcyk7XHJcbiAgICB0aGlzLmxvYWQuc2V0UHJlbG9hZFNwcml0ZSh0aGlzLmFzc2V0KTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgndGVzdHNwcml0ZScsICdhc3NldHMvdGVzdDIucG5nJyk7XHJcblx0dGhpcy5sb2FkLmltYWdlKCdjb3JlJywgJ2Fzc2V0cy9jb3JlLnBuZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgndGhydXN0ZXInLCAnYXNzZXRzL3RocnVzdGVyLnBuZycpO1xyXG5cdHRoaXMubG9hZC5pbWFnZSgnc2hpZWxkJywgJ2Fzc2V0cy9zaGllbGQucG5nJyk7XHJcblx0dGhpcy5sb2FkLmltYWdlKCdzb2xhclBhbm5lbCcsICdhc3NldHMvc29sYXJQYW5uZWwucG5nJyk7XHJcbiAgIC8vIHRoaXMubG9hZC5pbWFnZSgnZ3JpZEVuZCcsICdhc3NldHMvZ3JpZF9lbmRwb2ludC5wbmcnKTtcclxuICAgLy8gdGhpcy5sb2FkLmltYWdlKCdncmlkTGluZScsICdhc3NldHMvZ3JpZF9saW5lLnBuZycpO1xyXG5cdC8vIHRoaXMubG9hZC5zcHJpdGVzaGVldCgnY29ubmVjdGlvbnMnLCAnYXNzZXRzL2Nvbm5lY3Rpb25zLnBuZycsIDczLCA3NCk7XHJcbiAgIHRoaXMubG9hZC5hdGxhc0pTT05IYXNoKCdjb25uZWN0aW9ucycsICdhc3NldHMvY29ubmVjdGlvbnMucG5nJywgJ2Fzc2V0cy9jb25uZWN0aW9ucy5qc29uJyk7XHJcbiAgIC8vIHRoaXMubG9hZC5waHlzaWNzKCdtb2R1bGVfcGh5c2ljcycsICdhc3NldHMvbW9kdWxlX3BoeXNpY3MuanNvbicpO1xyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5hc3NldC5jcm9wRW5hYmxlZCA9IGZhbHNlO1xyXG4gIH0sXHJcblxyXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCEhdGhpcy5yZWFkeSkge1xyXG4gICAgICAvLyB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ01lbnUnKTtcclxuICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KHBsYXllclN0YXRlLmN1cnJlbnRMZXZlbCk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIG9uTG9hZENvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcclxuICB9XHJcbn07XHJcbiIsInZhciBTcGxhc2ggPSBmdW5jdGlvbiAoKSB7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNwbGFzaDtcclxuXHJcblNwbGFzaC5wcm90b3R5cGUgPSB7XHJcbiAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgfVxyXG59OyIsIi8qXHJcbkNvbGxlY3Rpb24gb2YgdXRpbGl0eSBmdW5jdGlvbnMuXHJcbiovXHJcblxyXG52YXIgVXRpbHMgPSB7XHJcbiAgICBjb250YWluc09iamVjdDogZnVuY3Rpb24ob2JqLCBsaXN0KSB7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RbaV0gPT09IG9iaikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBkaXN0YW5jZTogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIpIHtcclxuICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coeDEgLSB4MiwgMikgKyBNYXRoLnBvdyh5MSAtIHkyLCAyKSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFV0aWxzOyJdfQ==
